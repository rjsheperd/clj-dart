import "dart:core" as dc;
import "core.dart" as lcoc_core;
import "dart:math" as d_math;
import "dart:collection" as d_collection;
import "dart:io" as d_io;
import "dart:async" as da;

// BEGIN $C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$cext
class $C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$cext extends dc.Object implements lcoc_core.IWithMeta$ext {

const $C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$cext():super();

dc.dynamic $_with_meta$1(dc.dynamic f$1, dc.dynamic m$1, ){
final dc.dynamic maybe_f$1=f$1;
late final dc.Function wrapper_f$1;
if((maybe_f$1 is dc.Function)){
wrapper_f$1=maybe_f$1;
}else{
wrapper_f$1=(){
if((maybe_f$1 is dc.Function)){
return (maybe_f$1 as dc.Function)();
}
if((maybe_f$1 is lcoc_core.IFn$iface)){
return ((maybe_f$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(maybe_f$1, ).$_invoke$0(maybe_f$1, ));
};
}
final dc.Function f$2=wrapper_f$1;
final lcoc_core.$C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$cextReify18695hm$1 f$3=lcoc_core.$C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$cextReify18695hm$1(null, f$2, );
final lcoc_core.$C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$cextReify18695hm$1 o7865$1=f$3;
final dc.dynamic meta7866$1=m$1;
if((o7865$1 is lcoc_core.IWithMeta$iface)){
return ((o7865$1 as lcoc_core.IWithMeta$iface).$_with_meta$1(meta7866$1, ));
}
return ((lcoc_core.IWithMeta.extensions(o7865$1, ) as lcoc_core.IWithMeta$ext).$_with_meta$1(o7865$1, meta7866$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$cext

// BEGIN $C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$cextReify18695hm$1
class $C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$cextReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final dc.Function f$2;

$C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$cextReify18695hm$1(this.meta$1, this.f$2, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$cextReify18695hm$1(m$2395_$AUTO_$1, f$2, );
}

dc.dynamic $_invoke$vararg(dc.dynamic rest$8824_$SHARP_$1, ){
late final dc.List<dc.dynamic>? $if_$1;
if((null!=rest$8824_$SHARP_$1)){
$if_$1=(rest$8824_$SHARP_$1 as dc.List<dc.dynamic>);
}else{
$if_$1=null;
}
return (dc.Function.apply(f$2, $if_$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$cextReify18695hm$1

// BEGIN $C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$extension
dc.dynamic $C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$extension=const lcoc_core.$C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$cext();

// END $C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$extension

// BEGIN $C$dc$DOT_Iterable$$lcoc_core$DOT_ISeqable$D$$cext
class $C$dc$DOT_Iterable$$lcoc_core$DOT_ISeqable$D$$cext extends dc.Object implements lcoc_core.ISeqable$ext {

const $C$dc$DOT_Iterable$$lcoc_core$DOT_ISeqable$D$$cext():super();

dc.dynamic $_seq$0(dc.dynamic coll$1, ){
final dc.Iterable coll$2=(coll$1 as dc.Iterable);
return lcoc_core.iterator_seq(coll$2.iterator, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_Iterable$$lcoc_core$DOT_ISeqable$D$$cext

// BEGIN $C$dc$DOT_Iterable$$lcoc_core$DOT_ISeqable$D$$extension
dc.dynamic $C$dc$DOT_Iterable$$lcoc_core$DOT_ISeqable$D$$extension=const lcoc_core.$C$dc$DOT_Iterable$$lcoc_core$DOT_ISeqable$D$$cext();

// END $C$dc$DOT_Iterable$$lcoc_core$DOT_ISeqable$D$$extension

// BEGIN $C$dc$DOT_List$$lcoc_core$DOT_IIndexed$D$$cext
class $C$dc$DOT_List$$lcoc_core$DOT_IIndexed$D$$cext extends dc.Object implements lcoc_core.IIndexed$ext {

const $C$dc$DOT_List$$lcoc_core$DOT_IIndexed$D$$cext():super();

dc.dynamic $_nth$1(dc.dynamic l$1, dc.dynamic n$1, ){
final dc.List l$2=(l$1 as dc.List);
return (l$2[(n$1 as dc.int)]);
}

dc.dynamic $_nth$2(dc.dynamic l$3, dc.dynamic n$2, dc.dynamic not_found$1, ){
final dc.List l$4=(l$3 as dc.List);
final dc.num n$3=(n$2 as dc.num);
final dc.bool and$7533_$AUTO_$1=(0<=n$3);
late final dc.bool $if_$1;
if(and$7533_$AUTO_$1){
$if_$1=(n$3<l$4.length);
}else{
$if_$1=and$7533_$AUTO_$1;
}
if($if_$1){
return (l$4[(n$3 as dc.int)]);
}
return not_found$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_List$$lcoc_core$DOT_IIndexed$D$$cext

// BEGIN $C$dc$DOT_List$$lcoc_core$DOT_IIndexed$D$$extension
dc.dynamic $C$dc$DOT_List$$lcoc_core$DOT_IIndexed$D$$extension=const lcoc_core.$C$dc$DOT_List$$lcoc_core$DOT_IIndexed$D$$cext();

// END $C$dc$DOT_List$$lcoc_core$DOT_IIndexed$D$$extension

// BEGIN $C$dc$DOT_List$$lcoc_core$DOT_ILookup$D$$cext
class $C$dc$DOT_List$$lcoc_core$DOT_ILookup$D$$cext extends dc.Object implements lcoc_core.ILookup$ext {

const $C$dc$DOT_List$$lcoc_core$DOT_ILookup$D$$cext():super();

dc.dynamic $_lookup$1(dc.dynamic o$1, dc.dynamic k$1, ){
final dc.List o$2=(o$1 as dc.List);
if((k$1 is dc.num)){
final dc.int k$2=((k$1 as dc.num).toInt());
final dc.bool and$7533_$AUTO_$1=(0<=k$2);
late final dc.bool $if_$1;
if(and$7533_$AUTO_$1){
$if_$1=(k$2<o$2.length);
}else{
$if_$1=and$7533_$AUTO_$1;
}
if($if_$1){
return (o$2[k$2]);
}
return null;
}
return null;
}

dc.dynamic $_lookup$2(dc.dynamic o$3, dc.dynamic k$3, dc.dynamic not_found$1, ){
final dc.List o$4=(o$3 as dc.List);
final dc.List o7838$1=o$4;
final dc.dynamic k7839$1=k$3;
late final dc.dynamic some$7546_$AUTO_$1;
if((o7838$1 is lcoc_core.ILookup$iface)){
some$7546_$AUTO_$1=((o7838$1 as lcoc_core.ILookup$iface).$_lookup$1(k7839$1, ));
}else{
some$7546_$AUTO_$1=((lcoc_core.ILookup.extensions(o7838$1, ) as lcoc_core.ILookup$ext).$_lookup$1(o7838$1, k7839$1, ));
}
if((null==some$7546_$AUTO_$1)){
return not_found$1;
}
final dc.dynamic v$1=some$7546_$AUTO_$1;
return v$1;
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic o$5, dc.dynamic k$4, ){
final dc.List o$6=(o$5 as dc.List);
if((k$4 is dc.num)){
}else{
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("contains? not supported on type", k$4.runtimeType, )), );
}
final dc.int k$5=((k$4 as dc.num).toInt());
final dc.bool and$7533_$AUTO_$2=(0<=k$5);
if(and$7533_$AUTO_$2){
return (k$5<o$6.length);
}
return and$7533_$AUTO_$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_List$$lcoc_core$DOT_ILookup$D$$cext

// BEGIN $C$dc$DOT_List$$lcoc_core$DOT_ILookup$D$$extension
dc.dynamic $C$dc$DOT_List$$lcoc_core$DOT_ILookup$D$$extension=const lcoc_core.$C$dc$DOT_List$$lcoc_core$DOT_ILookup$D$$cext();

// END $C$dc$DOT_List$$lcoc_core$DOT_ILookup$D$$extension

// BEGIN $C$dc$DOT_Map$$lcoc_core$DOT_ILookup$D$$cext
class $C$dc$DOT_Map$$lcoc_core$DOT_ILookup$D$$cext extends dc.Object implements lcoc_core.ILookup$ext {

const $C$dc$DOT_Map$$lcoc_core$DOT_ILookup$D$$cext():super();

dc.dynamic $_lookup$1(dc.dynamic m$1, dc.dynamic k$1, ){
final dc.Map m$2=(m$1 as dc.Map);
return (m$2[k$1]);
}

dc.dynamic $_lookup$2(dc.dynamic m$3, dc.dynamic k$2, dc.dynamic not_found$1, ){
final dc.Map m$4=(m$3 as dc.Map);
if((m$4.containsKey(k$2, ))){
return (m$4[k$2]);
}
return not_found$1;
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic m$5, dc.dynamic k$3, ){
final dc.Map m$6=(m$5 as dc.Map);
return (m$6.containsKey(k$3, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_Map$$lcoc_core$DOT_ILookup$D$$cext

// BEGIN $C$dc$DOT_Map$$lcoc_core$DOT_ILookup$D$$extension
dc.dynamic $C$dc$DOT_Map$$lcoc_core$DOT_ILookup$D$$extension=const lcoc_core.$C$dc$DOT_Map$$lcoc_core$DOT_ILookup$D$$cext();

// END $C$dc$DOT_Map$$lcoc_core$DOT_ILookup$D$$extension

// BEGIN $C$dc$DOT_Map$$lcoc_core$DOT_ISeqable$D$$cext
class $C$dc$DOT_Map$$lcoc_core$DOT_ISeqable$D$$cext extends dc.Object implements lcoc_core.ISeqable$ext {

const $C$dc$DOT_Map$$lcoc_core$DOT_ISeqable$D$$cext():super();

dc.dynamic $_seq$0(dc.dynamic coll$1, ){
final dc.Map coll$2=(coll$1 as dc.Map);
return lcoc_core.iterator_seq(coll$2.entries.iterator, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_Map$$lcoc_core$DOT_ISeqable$D$$cext

// BEGIN $C$dc$DOT_Map$$lcoc_core$DOT_ISeqable$D$$extension
dc.dynamic $C$dc$DOT_Map$$lcoc_core$DOT_ISeqable$D$$extension=const lcoc_core.$C$dc$DOT_Map$$lcoc_core$DOT_ISeqable$D$$cext();

// END $C$dc$DOT_Map$$lcoc_core$DOT_ISeqable$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IAssociative$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_IAssociative$D$$cext extends dc.Object implements lcoc_core.IAssociative$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_IAssociative$D$$cext():super();

dc.dynamic $_assoc$2(dc.dynamic node$25, dc.dynamic k$4, dc.dynamic v$1, ){
final dc.MapEntry node$26=(node$25 as dc.MapEntry);
final dc.List<dc.dynamic> fl$3=(dc.List<dc.dynamic>.filled(2, node$26.key, ));
fl$3[1]=node$26.value;
final lcoc_core.PersistentVector coll7790$1=lcoc_core.$_vec_owning(fl$3, );
final dc.dynamic k7791$1=k$4;
final dc.dynamic v7792$1=v$1;
if((coll7790$1 is lcoc_core.IAssociative$iface)){
return ((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IAssociative$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IAssociative$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_IAssociative$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IAssociative$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IAssociative$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_ICollection$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_ICollection$D$$cext extends dc.Object implements lcoc_core.ICollection$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_ICollection$D$$cext():super();

dc.dynamic $_conj$1(dc.dynamic node$11, dc.dynamic o$3, ){
final dc.MapEntry node$12=(node$11 as dc.MapEntry);
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(3, node$12.key, ));
fl$2[1]=node$12.value;
fl$2[2]=o$3;
return lcoc_core.$_vec_owning(fl$2, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_ICollection$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_ICollection$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_ICollection$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_ICollection$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_ICollection$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IComparable$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_IComparable$D$$cext extends dc.Object implements lcoc_core.IComparable$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_IComparable$D$$cext():super();

dc.dynamic $_compare$1(dc.dynamic x$29, dc.dynamic y$1, ){
final dc.MapEntry x$30=(x$29 as dc.MapEntry);
if(lcoc_core.vector$QMARK_(y$1, )){
return lcoc_core.compare_indexed(x$30, y$1, );
}
throw dc.ArgumentError((lcoc_core.str.$_invoke$4("Cannot compare ", x$30, " to ", y$1, )), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IComparable$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IComparable$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_IComparable$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IComparable$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IComparable$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_ICounted$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_ICounted$D$$cext extends dc.Object implements lcoc_core.ICounted$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_ICounted$D$$cext():super();

dc.dynamic $_count$0(dc.dynamic $UNDERSCORE_$1, ){
final dc.MapEntry $UNDERSCORE_$2=($UNDERSCORE_$1 as dc.MapEntry);
return 2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_ICounted$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_ICounted$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_ICounted$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_ICounted$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_ICounted$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IEmptyableCollection$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_IEmptyableCollection$D$$cext extends dc.Object implements lcoc_core.IEmptyableCollection$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_IEmptyableCollection$D$$cext():super();

dc.dynamic $_empty$0(dc.dynamic node$13, ){
final dc.MapEntry node$14=(node$13 as dc.MapEntry);
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IEmptyableCollection$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IEmptyableCollection$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_IEmptyableCollection$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IEmptyableCollection$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IEmptyableCollection$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IEquiv$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_IEquiv$D$$cext extends dc.Object implements lcoc_core.IEquiv$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_IEquiv$D$$cext():super();

dc.dynamic $_equiv$1(dc.dynamic x$37, dc.dynamic y$2, ){
final dc.MapEntry x$38=(x$37 as dc.MapEntry);
return lcoc_core.$_equiv_sequential(x$38, y$2, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IEquiv$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IEquiv$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_IEquiv$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IEquiv$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IEquiv$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IFn$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_IFn$D$$cext extends dc.Object implements lcoc_core.IFn$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_IFn$D$$cext():super();

dc.dynamic $_invoke$1(dc.dynamic node$33, dc.dynamic k$5, ){
final dc.MapEntry node$34=(node$33 as dc.MapEntry);
final dc.MapEntry coll7829$1=node$34;
final dc.dynamic n7830$1=k$5;
if((coll7829$1 is lcoc_core.IIndexed$iface)){
return ((coll7829$1 as lcoc_core.IIndexed$iface).$_nth$1(n7830$1, ));
}
return ((lcoc_core.IIndexed.extensions(coll7829$1, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$1, n7830$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic node$35, dc.dynamic k$6, dc.dynamic not_found$3, ){
final dc.MapEntry node$36=(node$35 as dc.MapEntry);
final dc.MapEntry coll7825$3=node$36;
final dc.dynamic n7826$3=k$6;
final dc.dynamic not_found7827$3=not_found$3;
if((coll7825$3 is lcoc_core.IIndexed$iface)){
return ((coll7825$3 as lcoc_core.IIndexed$iface).$_nth$2(n7826$3, not_found7827$3, ));
}
return ((lcoc_core.IIndexed.extensions(coll7825$3, ) as lcoc_core.IIndexed$ext).$_nth$2(coll7825$3, n7826$3, not_found7827$3, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IFn$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IFn$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_IFn$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IFn$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IFn$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IHash$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_IHash$D$$cext extends dc.Object implements lcoc_core.IHash$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_IHash$D$$cext():super();

dc.dynamic $_hash$0(dc.dynamic coll$1, ){
final dc.MapEntry coll$2=(coll$1 as dc.MapEntry);
return lcoc_core.hash_ordered_coll(coll$2, );
}

dc.dynamic $_hash_realized$QMARK_$0(dc.dynamic coll$3, ){
final dc.MapEntry coll$4=(coll$3 as dc.MapEntry);
return false;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IHash$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IHash$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_IHash$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IHash$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IHash$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IIndexed$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_IIndexed$D$$cext extends dc.Object implements lcoc_core.IIndexed$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_IIndexed$D$$cext():super();

dc.dynamic $_nth$1(dc.dynamic node$1, dc.dynamic n$1, ){
final dc.MapEntry node$2=(node$1 as dc.MapEntry);
if((n$1==0)){
return node$2.key;
}
if((n$1==1)){
return node$2.value;
}
throw dc.ArgumentError("Index out of bounds", );
}

dc.dynamic $_nth$2(dc.dynamic node$3, dc.dynamic n$2, dc.dynamic not_found$1, ){
final dc.MapEntry node$4=(node$3 as dc.MapEntry);
if((n$2==0)){
return node$4.key;
}
if((n$2==1)){
return node$4.value;
}
return not_found$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IIndexed$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IIndexed$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_IIndexed$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IIndexed$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IIndexed$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_ILookup$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_ILookup$D$$cext extends dc.Object implements lcoc_core.ILookup$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_ILookup$D$$cext():super();

dc.dynamic $_lookup$1(dc.dynamic node$19, dc.dynamic k$1, ){
final dc.MapEntry node$20=(node$19 as dc.MapEntry);
final dc.MapEntry coll7825$1=node$20;
final dc.dynamic n7826$1=k$1;
if((coll7825$1 is lcoc_core.IIndexed$iface)){
return ((coll7825$1 as lcoc_core.IIndexed$iface).$_nth$2(n7826$1, null, ));
}
return ((lcoc_core.IIndexed.extensions(coll7825$1, ) as lcoc_core.IIndexed$ext).$_nth$2(coll7825$1, n7826$1, null, ));
}

dc.dynamic $_lookup$2(dc.dynamic node$21, dc.dynamic k$2, dc.dynamic not_found$2, ){
final dc.MapEntry node$22=(node$21 as dc.MapEntry);
final dc.MapEntry coll7825$2=node$22;
final dc.dynamic n7826$2=k$2;
final dc.dynamic not_found7827$2=not_found$2;
if((coll7825$2 is lcoc_core.IIndexed$iface)){
return ((coll7825$2 as lcoc_core.IIndexed$iface).$_nth$2(n7826$2, not_found7827$2, ));
}
return ((lcoc_core.IIndexed.extensions(coll7825$2, ) as lcoc_core.IIndexed$ext).$_nth$2(coll7825$2, n7826$2, not_found7827$2, ));
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic node$23, dc.dynamic k$3, ){
final dc.MapEntry node$24=(node$23 as dc.MapEntry);
final dc.bool or$7573_$AUTO_$30=(k$3==0);
if(or$7573_$AUTO_$30){
return or$7573_$AUTO_$30;
}
return (k$3==1);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_ILookup$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_ILookup$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_ILookup$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_ILookup$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_ILookup$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IMeta$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_IMeta$D$$cext extends dc.Object implements lcoc_core.IMeta$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_IMeta$D$$cext():super();

dc.dynamic $_meta$0(dc.dynamic node$5, ){
final dc.MapEntry node$6=(node$5 as dc.MapEntry);
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IMeta$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IMeta$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_IMeta$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IMeta$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IMeta$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IPrint$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_IPrint$D$$cext extends dc.Object implements lcoc_core.IPrint$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_IPrint$D$$cext():super();

dc.dynamic $_print$1(dc.dynamic o$1, dc.dynamic sink$1, ){
final dc.MapEntry o$2=(o$1 as dc.MapEntry);
final dc.StringSink G$8964_$1=(sink$1 as dc.StringSink);
G$8964_$1.write("[", );
final dc.dynamic o7635$1=o$2.key;
final dc.StringSink string_sink7636$1=G$8964_$1;
if((o7635$1 is lcoc_core.IPrint$iface)){
(o7635$1 as lcoc_core.IPrint$iface).$_print$1(string_sink7636$1, );
}else{
(lcoc_core.IPrint.extensions(o7635$1, ) as lcoc_core.IPrint$ext).$_print$1(o7635$1, string_sink7636$1, );
}
G$8964_$1.write(" ", );
final dc.dynamic o7635$2=o$2.value;
final dc.StringSink string_sink7636$2=G$8964_$1;
if((o7635$2 is lcoc_core.IPrint$iface)){
(o7635$2 as lcoc_core.IPrint$iface).$_print$1(string_sink7636$2, );
}else{
(lcoc_core.IPrint.extensions(o7635$2, ) as lcoc_core.IPrint$ext).$_print$1(o7635$2, string_sink7636$2, );
}
G$8964_$1.write("]", );
return G$8964_$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IPrint$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IPrint$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_IPrint$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IPrint$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IPrint$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IReduce$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_IReduce$D$$cext extends dc.Object implements lcoc_core.IReduce$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_IReduce$D$$cext():super();

dc.dynamic $_reduce$1(dc.dynamic node$29, dc.dynamic f$1, ){
final dc.MapEntry node$30=(node$29 as dc.MapEntry);
final dc.dynamic arg$2=node$30.key;
final dc.dynamic arg$1=node$30.value;
late final dc.dynamic $if_$1;
if((f$1 is dc.Function)){
$if_$1=(f$1 as dc.Function)(arg$2, arg$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$1=((f$1 as lcoc_core.IFn$iface).$_invoke$2(arg$2, arg$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, arg$2, arg$1, ));
}
return lcoc_core.unreduced($if_$1, );
}

dc.dynamic $_reduce$2(dc.dynamic node$31, dc.dynamic f$2, dc.dynamic start$1, ){
final dc.MapEntry node$32=(node$31 as dc.MapEntry);
final dc.dynamic arg$3=node$32.key;
late final dc.dynamic r$1;
if((f$2 is dc.Function)){
r$1=(f$2 as dc.Function)(start$1, arg$3, );
}else if((f$2 is lcoc_core.IFn$iface)){
r$1=((f$2 as lcoc_core.IFn$iface).$_invoke$2(start$1, arg$3, ));
}else{
r$1=(lcoc_core.IFn.extensions(f$2, ).$_invoke$2(f$2, start$1, arg$3, ));
}
final dc.dynamic G$8965_$1=r$1;
late final dc.bool $if_$2;
if(lcoc_core.reduced$QMARK_(r$1, )){
$if_$2=false;
}else{
$if_$2=true;
}
late final dc.dynamic $if_$3;
if($if_$2){
final dc.dynamic arg$4=node$32.value;
if((f$2 is dc.Function)){
$if_$3=(f$2 as dc.Function)(G$8965_$1, arg$4, );
}else if((f$2 is lcoc_core.IFn$iface)){
$if_$3=((f$2 as lcoc_core.IFn$iface).$_invoke$2(G$8965_$1, arg$4, ));
}else{
$if_$3=(lcoc_core.IFn.extensions(f$2, ).$_invoke$2(f$2, G$8965_$1, arg$4, ));
}
}else{
$if_$3=G$8965_$1;
}
return lcoc_core.unreduced($if_$3, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IReduce$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IReduce$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_IReduce$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IReduce$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IReduce$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IReversible$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_IReversible$D$$cext extends dc.Object implements lcoc_core.IReversible$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_IReversible$D$$cext():super();

dc.dynamic $_rseq$0(dc.dynamic node$17, ){
final dc.MapEntry node$18=(node$17 as dc.MapEntry);
return lcoc_core.cons(node$18.value, lcoc_core.cons(node$18.key, null, ), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IReversible$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IReversible$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_IReversible$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IReversible$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IReversible$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISeqable$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISeqable$D$$cext extends dc.Object implements lcoc_core.ISeqable$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISeqable$D$$cext():super();

dc.dynamic $_seq$0(dc.dynamic node$15, ){
final dc.MapEntry node$16=(node$15 as dc.MapEntry);
return lcoc_core.cons(node$16.key, lcoc_core.cons(node$16.value, null, ), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISeqable$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISeqable$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISeqable$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_ISeqable$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISeqable$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISequential$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISequential$D$$cext extends dc.Object implements lcoc_core.ISequential$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISequential$D$$cext():super();

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISequential$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISequential$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISequential$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_ISequential$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISequential$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IStack$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_IStack$D$$cext extends dc.Object implements lcoc_core.IStack$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_IStack$D$$cext():super();

dc.dynamic $_peek$0(dc.dynamic node$7, ){
final dc.MapEntry node$8=(node$7 as dc.MapEntry);
return node$8.value;
}

dc.dynamic $_pop$0(dc.dynamic node$9, ){
final dc.MapEntry node$10=(node$9 as dc.MapEntry);
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(1, node$10.key, ));
return lcoc_core.$_vec_owning(fl$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IStack$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IStack$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_IStack$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IStack$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IStack$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISubvecable$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISubvecable$D$$cext extends dc.Object implements lcoc_core.ISubvecable$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISubvecable$D$$cext():super();

dc.dynamic $_subvec$2(dc.dynamic node$37, dc.dynamic start$2, dc.dynamic end$1, ){
final dc.MapEntry node$38=(node$37 as dc.MapEntry);
if((0==start$2)){
final dc.List<dc.dynamic> fl$5=(dc.List<dc.dynamic>.filled(1, node$38.key, ));
return lcoc_core.$_vec_owning(fl$5, );
}
final dc.List<dc.dynamic> fl$6=(dc.List<dc.dynamic>.filled(1, node$38.value, ));
return lcoc_core.$_vec_owning(fl$6, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISubvecable$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISubvecable$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISubvecable$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_ISubvecable$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_ISubvecable$D$$extension

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IVector$D$$cext
class $C$dc$DOT_MapEntry$$lcoc_core$DOT_IVector$D$$cext extends dc.Object implements lcoc_core.IVector$ext {

const $C$dc$DOT_MapEntry$$lcoc_core$DOT_IVector$D$$cext():super();

dc.dynamic $_assoc_n$2(dc.dynamic node$27, dc.dynamic n$3, dc.dynamic v$2, ){
final dc.MapEntry node$28=(node$27 as dc.MapEntry);
final dc.List<dc.dynamic> fl$4=(dc.List<dc.dynamic>.filled(2, node$28.key, ));
fl$4[1]=node$28.value;
final lcoc_core.PersistentVector coll7776$1=lcoc_core.$_vec_owning(fl$4, );
final dc.dynamic n7777$1=n$3;
final dc.dynamic val7778$1=v$2;
if((coll7776$1 is lcoc_core.IVector$iface)){
return ((coll7776$1 as lcoc_core.IVector$iface).$_assoc_n$2(n7777$1, val7778$1, ));
}
return ((lcoc_core.IVector.extensions(coll7776$1, ) as lcoc_core.IVector$ext).$_assoc_n$2(coll7776$1, n7777$1, val7778$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IVector$D$$cext

// BEGIN $C$dc$DOT_MapEntry$$lcoc_core$DOT_IVector$D$$extension
dc.dynamic $C$dc$DOT_MapEntry$$lcoc_core$DOT_IVector$D$$extension=const lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IVector$D$$cext();

// END $C$dc$DOT_MapEntry$$lcoc_core$DOT_IVector$D$$extension

// BEGIN $C$dc$DOT_Match$$lcoc_core$DOT_ICounted$D$$cext
class $C$dc$DOT_Match$$lcoc_core$DOT_ICounted$D$$cext extends dc.Object implements lcoc_core.ICounted$ext {

const $C$dc$DOT_Match$$lcoc_core$DOT_ICounted$D$$cext():super();

dc.dynamic $_count$0(dc.dynamic m$1, ){
final dc.Match m$2=(m$1 as dc.Match);
return (1+m$2.groupCount);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_Match$$lcoc_core$DOT_ICounted$D$$cext

// BEGIN $C$dc$DOT_Match$$lcoc_core$DOT_ICounted$D$$extension
dc.dynamic $C$dc$DOT_Match$$lcoc_core$DOT_ICounted$D$$extension=const lcoc_core.$C$dc$DOT_Match$$lcoc_core$DOT_ICounted$D$$cext();

// END $C$dc$DOT_Match$$lcoc_core$DOT_ICounted$D$$extension

// BEGIN $C$dc$DOT_Match$$lcoc_core$DOT_IIndexed$D$$cext
class $C$dc$DOT_Match$$lcoc_core$DOT_IIndexed$D$$cext extends dc.Object implements lcoc_core.IIndexed$ext {

const $C$dc$DOT_Match$$lcoc_core$DOT_IIndexed$D$$cext():super();

dc.dynamic $_nth$1(dc.dynamic m$3, dc.dynamic n$1, ){
final dc.Match m$4=(m$3 as dc.Match);
return (m$4.group((n$1 as dc.int), ));
}

dc.dynamic $_nth$2(dc.dynamic m$5, dc.dynamic n$2, dc.dynamic not_found$1, ){
final dc.Match m$6=(m$5 as dc.Match);
final dc.int num$COLON_$LT_$EQ_9199$1=(n$2 as dc.int);
final dc.int num$COLON_$LT_$EQ_9200$1=m$6.groupCount;
final dc.bool $1=((0<=num$COLON_$LT_$EQ_9199$1)&&(num$COLON_$LT_$EQ_9199$1<=num$COLON_$LT_$EQ_9200$1));
if($1){
return (m$6.group((n$2 as dc.int), ));
}
return not_found$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_Match$$lcoc_core$DOT_IIndexed$D$$cext

// BEGIN $C$dc$DOT_Match$$lcoc_core$DOT_IIndexed$D$$extension
dc.dynamic $C$dc$DOT_Match$$lcoc_core$DOT_IIndexed$D$$extension=const lcoc_core.$C$dc$DOT_Match$$lcoc_core$DOT_IIndexed$D$$cext();

// END $C$dc$DOT_Match$$lcoc_core$DOT_IIndexed$D$$extension

// BEGIN $C$dc$DOT_Null$$lcoc_core$DOT_IAssociative$D$$cext
class $C$dc$DOT_Null$$lcoc_core$DOT_IAssociative$D$$cext extends dc.Object implements lcoc_core.IAssociative$ext {

const $C$dc$DOT_Null$$lcoc_core$DOT_IAssociative$D$$cext():super();

dc.dynamic $_assoc$2(dc.dynamic coll$1, dc.dynamic k$1, dc.dynamic v$1, ){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, k$1, ));
fl$1[1]=v$1;
return lcoc_core.$_map_lit(fl$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_Null$$lcoc_core$DOT_IAssociative$D$$cext

// BEGIN $C$dc$DOT_Null$$lcoc_core$DOT_IAssociative$D$$extension
dc.dynamic $C$dc$DOT_Null$$lcoc_core$DOT_IAssociative$D$$extension=const lcoc_core.$C$dc$DOT_Null$$lcoc_core$DOT_IAssociative$D$$cext();

// END $C$dc$DOT_Null$$lcoc_core$DOT_IAssociative$D$$extension

// BEGIN $C$dc$DOT_Null$$lcoc_core$DOT_ICollection$D$$cext
class $C$dc$DOT_Null$$lcoc_core$DOT_ICollection$D$$cext extends dc.Object implements lcoc_core.ICollection$ext {

const $C$dc$DOT_Null$$lcoc_core$DOT_ICollection$D$$cext():super();

dc.dynamic $_conj$1(dc.dynamic coll$1, dc.dynamic o$1, ){
return lcoc_core.cons(o$1, null, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_Null$$lcoc_core$DOT_ICollection$D$$cext

// BEGIN $C$dc$DOT_Null$$lcoc_core$DOT_ICollection$D$$extension
dc.dynamic $C$dc$DOT_Null$$lcoc_core$DOT_ICollection$D$$extension=const lcoc_core.$C$dc$DOT_Null$$lcoc_core$DOT_ICollection$D$$cext();

// END $C$dc$DOT_Null$$lcoc_core$DOT_ICollection$D$$extension

// BEGIN $C$dc$DOT_Null$$lcoc_core$DOT_IHash$D$$cext
class $C$dc$DOT_Null$$lcoc_core$DOT_IHash$D$$cext extends dc.Object implements lcoc_core.IHash$ext {

const $C$dc$DOT_Null$$lcoc_core$DOT_IHash$D$$cext():super();

dc.dynamic $_hash$0(dc.dynamic o$1, ){
return 0;
}

dc.dynamic $_hash_realized$QMARK_$0(dc.dynamic o$3, ){
return true;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_Null$$lcoc_core$DOT_IHash$D$$cext

// BEGIN $C$dc$DOT_Null$$lcoc_core$DOT_IHash$D$$extension
dc.dynamic $C$dc$DOT_Null$$lcoc_core$DOT_IHash$D$$extension=const lcoc_core.$C$dc$DOT_Null$$lcoc_core$DOT_IHash$D$$cext();

// END $C$dc$DOT_Null$$lcoc_core$DOT_IHash$D$$extension

// BEGIN $C$dc$DOT_Null$$lcoc_core$DOT_IIndexed$D$$cext
class $C$dc$DOT_Null$$lcoc_core$DOT_IIndexed$D$$cext extends dc.Object implements lcoc_core.IIndexed$ext {

const $C$dc$DOT_Null$$lcoc_core$DOT_IIndexed$D$$cext():super();

dc.dynamic $_nth$1(dc.dynamic m$1, dc.dynamic n$1, ){
return null;
}

dc.dynamic $_nth$2(dc.dynamic m$3, dc.dynamic n$2, dc.dynamic not_found$1, ){
return not_found$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_Null$$lcoc_core$DOT_IIndexed$D$$cext

// BEGIN $C$dc$DOT_Null$$lcoc_core$DOT_IIndexed$D$$extension
dc.dynamic $C$dc$DOT_Null$$lcoc_core$DOT_IIndexed$D$$extension=const lcoc_core.$C$dc$DOT_Null$$lcoc_core$DOT_IIndexed$D$$cext();

// END $C$dc$DOT_Null$$lcoc_core$DOT_IIndexed$D$$extension

// BEGIN $C$dc$DOT_Null$$lcoc_core$DOT_IKVReduce$D$$cext
class $C$dc$DOT_Null$$lcoc_core$DOT_IKVReduce$D$$cext extends dc.Object implements lcoc_core.IKVReduce$ext {

const $C$dc$DOT_Null$$lcoc_core$DOT_IKVReduce$D$$cext():super();

dc.dynamic $_kv_reduce$2(dc.dynamic coll$1, dc.dynamic f$1, dc.dynamic init$1, ){
return init$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_Null$$lcoc_core$DOT_IKVReduce$D$$cext

// BEGIN $C$dc$DOT_Null$$lcoc_core$DOT_IKVReduce$D$$extension
dc.dynamic $C$dc$DOT_Null$$lcoc_core$DOT_IKVReduce$D$$extension=const lcoc_core.$C$dc$DOT_Null$$lcoc_core$DOT_IKVReduce$D$$cext();

// END $C$dc$DOT_Null$$lcoc_core$DOT_IKVReduce$D$$extension

// BEGIN $C$dc$DOT_Null$$lcoc_core$DOT_IPrint$D$$cext
class $C$dc$DOT_Null$$lcoc_core$DOT_IPrint$D$$cext extends dc.Object implements lcoc_core.IPrint$ext {

const $C$dc$DOT_Null$$lcoc_core$DOT_IPrint$D$$cext():super();

dc.dynamic $_print$1(dc.dynamic o$1, dc.dynamic sink$1, ){
return ((sink$1 as dc.StringSink).write("nil", ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_Null$$lcoc_core$DOT_IPrint$D$$cext

// BEGIN $C$dc$DOT_Null$$lcoc_core$DOT_IPrint$D$$extension
dc.dynamic $C$dc$DOT_Null$$lcoc_core$DOT_IPrint$D$$extension=const lcoc_core.$C$dc$DOT_Null$$lcoc_core$DOT_IPrint$D$$cext();

// END $C$dc$DOT_Null$$lcoc_core$DOT_IPrint$D$$extension

// BEGIN $C$dc$DOT_Null$$lcoc_core$DOT_ISeqable$D$$cext
class $C$dc$DOT_Null$$lcoc_core$DOT_ISeqable$D$$cext extends dc.Object implements lcoc_core.ISeqable$ext {

const $C$dc$DOT_Null$$lcoc_core$DOT_ISeqable$D$$cext():super();

dc.dynamic $_seq$0(dc.dynamic coll$1, ){
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_Null$$lcoc_core$DOT_ISeqable$D$$cext

// BEGIN $C$dc$DOT_Null$$lcoc_core$DOT_ISeqable$D$$extension
dc.dynamic $C$dc$DOT_Null$$lcoc_core$DOT_ISeqable$D$$extension=const lcoc_core.$C$dc$DOT_Null$$lcoc_core$DOT_ISeqable$D$$cext();

// END $C$dc$DOT_Null$$lcoc_core$DOT_ISeqable$D$$extension

// BEGIN $C$dc$DOT_Null$$lcoc_core$DOT_ISet$D$$cext
class $C$dc$DOT_Null$$lcoc_core$DOT_ISet$D$$cext extends dc.Object implements lcoc_core.ISet$ext {

const $C$dc$DOT_Null$$lcoc_core$DOT_ISet$D$$cext():super();

dc.dynamic $_disjoin$1(dc.dynamic coll$1, dc.dynamic v$1, ){
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_Null$$lcoc_core$DOT_ISet$D$$cext

// BEGIN $C$dc$DOT_Null$$lcoc_core$DOT_ISet$D$$extension
dc.dynamic $C$dc$DOT_Null$$lcoc_core$DOT_ISet$D$$extension=const lcoc_core.$C$dc$DOT_Null$$lcoc_core$DOT_ISet$D$$cext();

// END $C$dc$DOT_Null$$lcoc_core$DOT_ISet$D$$extension

// BEGIN $C$dc$DOT_RegExp$$lcoc_core$DOT_IPrint$D$$cext
class $C$dc$DOT_RegExp$$lcoc_core$DOT_IPrint$D$$cext extends dc.Object implements lcoc_core.IPrint$ext {

const $C$dc$DOT_RegExp$$lcoc_core$DOT_IPrint$D$$cext():super();

dc.dynamic $_print$1(dc.dynamic o$1, dc.dynamic sink$1, ){
final dc.RegExp o$2=(o$1 as dc.RegExp);
return ((sink$1 as dc.StringSink).write(o$2.pattern, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_RegExp$$lcoc_core$DOT_IPrint$D$$cext

// BEGIN $C$dc$DOT_RegExp$$lcoc_core$DOT_IPrint$D$$extension
dc.dynamic $C$dc$DOT_RegExp$$lcoc_core$DOT_IPrint$D$$extension=const lcoc_core.$C$dc$DOT_RegExp$$lcoc_core$DOT_IPrint$D$$cext();

// END $C$dc$DOT_RegExp$$lcoc_core$DOT_IPrint$D$$extension

// BEGIN $C$dc$DOT_String$$lcoc_core$DOT_IHash$D$$cext
class $C$dc$DOT_String$$lcoc_core$DOT_IHash$D$$cext extends dc.Object implements lcoc_core.IHash$ext {

const $C$dc$DOT_String$$lcoc_core$DOT_IHash$D$$cext():super();

dc.dynamic $_hash$0(dc.dynamic o$1, ){
final dc.String o$2=(o$1 as dc.String);
return lcoc_core.hash_string(o$2, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_String$$lcoc_core$DOT_IHash$D$$cext

// BEGIN $C$dc$DOT_String$$lcoc_core$DOT_IHash$D$$extension
dc.dynamic $C$dc$DOT_String$$lcoc_core$DOT_IHash$D$$extension=const lcoc_core.$C$dc$DOT_String$$lcoc_core$DOT_IHash$D$$cext();

// END $C$dc$DOT_String$$lcoc_core$DOT_IHash$D$$extension

// BEGIN $C$dc$DOT_String$$lcoc_core$DOT_IIndexed$D$$cext
class $C$dc$DOT_String$$lcoc_core$DOT_IIndexed$D$$cext extends dc.Object implements lcoc_core.IIndexed$ext {

const $C$dc$DOT_String$$lcoc_core$DOT_IIndexed$D$$cext():super();

dc.dynamic $_nth$1(dc.dynamic l$1, dc.dynamic n$1, ){
final dc.String l$2=(l$1 as dc.String);
return (l$2[(n$1 as dc.int)]);
}

dc.dynamic $_nth$2(dc.dynamic l$3, dc.dynamic n$2, dc.dynamic not_found$1, ){
final dc.String l$4=(l$3 as dc.String);
final dc.num n$3=(n$2 as dc.num);
final dc.bool and$7533_$AUTO_$1=(0<=n$3);
late final dc.bool $if_$1;
if(and$7533_$AUTO_$1){
$if_$1=(n$3<l$4.length);
}else{
$if_$1=and$7533_$AUTO_$1;
}
if($if_$1){
return (l$4[(n$3 as dc.int)]);
}
return not_found$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_String$$lcoc_core$DOT_IIndexed$D$$cext

// BEGIN $C$dc$DOT_String$$lcoc_core$DOT_IIndexed$D$$extension
dc.dynamic $C$dc$DOT_String$$lcoc_core$DOT_IIndexed$D$$extension=const lcoc_core.$C$dc$DOT_String$$lcoc_core$DOT_IIndexed$D$$cext();

// END $C$dc$DOT_String$$lcoc_core$DOT_IIndexed$D$$extension

// BEGIN $C$dc$DOT_String$$lcoc_core$DOT_ILookup$D$$cext
class $C$dc$DOT_String$$lcoc_core$DOT_ILookup$D$$cext extends dc.Object implements lcoc_core.ILookup$ext {

const $C$dc$DOT_String$$lcoc_core$DOT_ILookup$D$$cext():super();

dc.dynamic $_lookup$1(dc.dynamic o$1, dc.dynamic k$1, ){
final dc.String o$2=(o$1 as dc.String);
if((k$1 is dc.num)){
final dc.int k$2=((k$1 as dc.num).toInt());
final dc.bool and$7533_$AUTO_$1=(0<=k$2);
late final dc.bool $if_$1;
if(and$7533_$AUTO_$1){
$if_$1=(k$2<o$2.length);
}else{
$if_$1=and$7533_$AUTO_$1;
}
if($if_$1){
return (o$2[k$2]);
}
return null;
}
return null;
}

dc.dynamic $_lookup$2(dc.dynamic o$3, dc.dynamic k$3, dc.dynamic not_found$1, ){
final dc.String o$4=(o$3 as dc.String);
final dc.String o7838$1=o$4;
final dc.dynamic k7839$1=k$3;
late final dc.dynamic some$7546_$AUTO_$1;
if((o7838$1 is lcoc_core.ILookup$iface)){
some$7546_$AUTO_$1=((o7838$1 as lcoc_core.ILookup$iface).$_lookup$1(k7839$1, ));
}else{
some$7546_$AUTO_$1=((lcoc_core.ILookup.extensions(o7838$1, ) as lcoc_core.ILookup$ext).$_lookup$1(o7838$1, k7839$1, ));
}
if((null==some$7546_$AUTO_$1)){
return not_found$1;
}
final dc.dynamic v$1=some$7546_$AUTO_$1;
return v$1;
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic o$5, dc.dynamic k$4, ){
final dc.String o$6=(o$5 as dc.String);
if((k$4 is dc.num)){
}else{
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("contains? not supported on type", k$4.runtimeType, )), );
}
final dc.int k$5=((k$4 as dc.num).toInt());
final dc.bool and$7533_$AUTO_$2=(0<=k$5);
if(and$7533_$AUTO_$2){
return (k$5<o$6.length);
}
return and$7533_$AUTO_$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_String$$lcoc_core$DOT_ILookup$D$$cext

// BEGIN $C$dc$DOT_String$$lcoc_core$DOT_ILookup$D$$extension
dc.dynamic $C$dc$DOT_String$$lcoc_core$DOT_ILookup$D$$extension=const lcoc_core.$C$dc$DOT_String$$lcoc_core$DOT_ILookup$D$$cext();

// END $C$dc$DOT_String$$lcoc_core$DOT_ILookup$D$$extension

// BEGIN $C$dc$DOT_String$$lcoc_core$DOT_IPrint$D$$cext
class $C$dc$DOT_String$$lcoc_core$DOT_IPrint$D$$cext extends dc.Object implements lcoc_core.IPrint$ext {

const $C$dc$DOT_String$$lcoc_core$DOT_IPrint$D$$cext():super();

dc.dynamic $_print$1(dc.dynamic s$1, dc.dynamic sink$1, ){
final dc.String s$2=(s$1 as dc.String);
final dc.StringSink sink$2=(sink$1 as dc.StringSink);
final dc.dynamic or$7573_$AUTO_$1=lcoc_core.$STAR_print_dup$STAR_;
late final dc.dynamic $if_$1;
if(((or$7573_$AUTO_$1!=false)&&(or$7573_$AUTO_$1!=null))){
$if_$1=or$7573_$AUTO_$1;
}else{
$if_$1=lcoc_core.$STAR_print_readably$STAR_;
}
if((($if_$1!=false)&&($if_$1!=null))){
sink$2.write("\"", );
final dc.String coll7742$1=s$2;
late final dc.int n$8310_$AUTO_$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
n$8310_$AUTO_$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
n$8310_$AUTO_$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
dc.int n$1=0;
do {
if((n$1<n$8310_$AUTO_$1)){
final dc.String c$1=(s$2[n$1]);
late final dc.dynamic $case_$1;
switch(c$1){
case "\n":
$case_$1="\\n";
break;
case "\t":
$case_$1="\\t";
break;
case "\r":
$case_$1="\\r";
break;
case "\"":
$case_$1="\\\"";
break;
case "\\":
$case_$1="\\\\";
break;
case "\f":
$case_$1="\\f";
break;
case "\b":
$case_$1="\\b";
break;
_default: default:
$case_$1=c$1;
}
sink$2.write($case_$1, );
n$1=(1+n$1);
continue;
}else{
}
break;
} while(true);
sink$2.write("\"", );
}else{
sink$2.write(s$2, );
}
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_String$$lcoc_core$DOT_IPrint$D$$cext

// BEGIN $C$dc$DOT_String$$lcoc_core$DOT_IPrint$D$$extension
dc.dynamic $C$dc$DOT_String$$lcoc_core$DOT_IPrint$D$$extension=const lcoc_core.$C$dc$DOT_String$$lcoc_core$DOT_IPrint$D$$cext();

// END $C$dc$DOT_String$$lcoc_core$DOT_IPrint$D$$extension

// BEGIN $C$dc$DOT_String$$lcoc_core$DOT_IReduce$D$$cext
class $C$dc$DOT_String$$lcoc_core$DOT_IReduce$D$$cext extends dc.Object implements lcoc_core.IReduce$ext {

const $C$dc$DOT_String$$lcoc_core$DOT_IReduce$D$$cext():super();

dc.dynamic $_reduce$1(dc.dynamic s$1, dc.dynamic f$1, ){
final dc.String s$2=(s$1 as dc.String);
final dc.int n$1=s$2.length;
if((0<n$1)){
dc.dynamic acc$1=(s$2[0]);
dc.int i$1=1;
do {
if((i$1<n$1)){
final dc.String arg$1=(s$2[i$1]);
late final dc.dynamic acc$2;
if((f$1 is dc.Function)){
acc$2=(f$1 as dc.Function)(acc$1, arg$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
acc$2=((f$1 as lcoc_core.IFn$iface).$_invoke$2(acc$1, arg$1, ));
}else{
acc$2=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, acc$1, arg$1, ));
}
if(lcoc_core.reduced$QMARK_(acc$2, )){
return lcoc_core.unreduced(acc$2, );
}
acc$1=acc$2;
i$1=(1+i$1);
continue;
}
return acc$1;
} while(true);
}
if((f$1 is dc.Function)){
return (f$1 as dc.Function)();
}
if((f$1 is lcoc_core.IFn$iface)){
return ((f$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(f$1, ).$_invoke$0(f$1, ));
}

dc.dynamic $_reduce$2(dc.dynamic s$3, dc.dynamic f$2, dc.dynamic start$1, ){
final dc.String s$4=(s$3 as dc.String);
final dc.int n$2=s$4.length;
dc.dynamic acc$3=start$1;
dc.int i$2=0;
do {
if((i$2<n$2)){
final dc.String arg$2=(s$4[i$2]);
late final dc.dynamic acc$4;
if((f$2 is dc.Function)){
acc$4=(f$2 as dc.Function)(acc$3, arg$2, );
}else if((f$2 is lcoc_core.IFn$iface)){
acc$4=((f$2 as lcoc_core.IFn$iface).$_invoke$2(acc$3, arg$2, ));
}else{
acc$4=(lcoc_core.IFn.extensions(f$2, ).$_invoke$2(f$2, acc$3, arg$2, ));
}
if(lcoc_core.reduced$QMARK_(acc$4, )){
return lcoc_core.unreduced(acc$4, );
}
acc$3=acc$4;
i$2=(1+i$2);
continue;
}
return acc$3;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_String$$lcoc_core$DOT_IReduce$D$$cext

// BEGIN $C$dc$DOT_String$$lcoc_core$DOT_IReduce$D$$extension
dc.dynamic $C$dc$DOT_String$$lcoc_core$DOT_IReduce$D$$extension=const lcoc_core.$C$dc$DOT_String$$lcoc_core$DOT_IReduce$D$$cext();

// END $C$dc$DOT_String$$lcoc_core$DOT_IReduce$D$$extension

// BEGIN $C$dc$DOT_String$$lcoc_core$DOT_ISeqable$D$$cext
class $C$dc$DOT_String$$lcoc_core$DOT_ISeqable$D$$cext extends dc.Object implements lcoc_core.ISeqable$ext {

const $C$dc$DOT_String$$lcoc_core$DOT_ISeqable$D$$cext():super();

dc.dynamic $_seq$0(dc.dynamic coll$1, ){
final dc.String coll$2=(coll$1 as dc.String);
if(coll$2.isNotEmpty){
return lcoc_core.StringSeq(coll$2, 0, null, -1, );
}
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_String$$lcoc_core$DOT_ISeqable$D$$cext

// BEGIN $C$dc$DOT_String$$lcoc_core$DOT_ISeqable$D$$extension
dc.dynamic $C$dc$DOT_String$$lcoc_core$DOT_ISeqable$D$$extension=const lcoc_core.$C$dc$DOT_String$$lcoc_core$DOT_ISeqable$D$$cext();

// END $C$dc$DOT_String$$lcoc_core$DOT_ISeqable$D$$extension

// BEGIN $C$dc$DOT_bool$$lcoc_core$DOT_IHash$D$$cext
class $C$dc$DOT_bool$$lcoc_core$DOT_IHash$D$$cext extends dc.Object implements lcoc_core.IHash$ext {

const $C$dc$DOT_bool$$lcoc_core$DOT_IHash$D$$cext():super();

dc.dynamic $_hash$0(dc.dynamic o$1, ){
final dc.bool o$2=(o$1 as dc.bool);
if(dc.identical(o$2, true, )){
return 1231;
}
if(dc.identical(o$2, false, )){
return 1237;
}
return null;
}

dc.dynamic $_hash_realized$QMARK_$0(dc.dynamic o$3, ){
final dc.bool o$4=(o$3 as dc.bool);
return true;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_bool$$lcoc_core$DOT_IHash$D$$cext

// BEGIN $C$dc$DOT_bool$$lcoc_core$DOT_IHash$D$$extension
dc.dynamic $C$dc$DOT_bool$$lcoc_core$DOT_IHash$D$$extension=const lcoc_core.$C$dc$DOT_bool$$lcoc_core$DOT_IHash$D$$cext();

// END $C$dc$DOT_bool$$lcoc_core$DOT_IHash$D$$extension

// BEGIN $C$dc$DOT_double$$lcoc_core$DOT_IHash$D$$cext
class $C$dc$DOT_double$$lcoc_core$DOT_IHash$D$$cext extends dc.Object implements lcoc_core.IHash$ext {

const $C$dc$DOT_double$$lcoc_core$DOT_IHash$D$$cext():super();

dc.dynamic $_hash$0(dc.dynamic o$1, ){
final dc.double o$2=(o$1 as dc.num).toDouble();
if((dc.double.negativeInfinity==o$2)){
return -1048576;
}
if((dc.double.infinity==o$2)){
return 2146435072;
}
if((dc.double.nan==o$2)){
return 2146959360;
}
return lcoc_core.m3_hash_int(o$2.hashCode, );
}

dc.dynamic $_hash_realized$QMARK_$0(dc.dynamic o$3, ){
final dc.double o$4=(o$3 as dc.num).toDouble();
return true;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_double$$lcoc_core$DOT_IHash$D$$cext

// BEGIN $C$dc$DOT_double$$lcoc_core$DOT_IHash$D$$extension
dc.dynamic $C$dc$DOT_double$$lcoc_core$DOT_IHash$D$$extension=const lcoc_core.$C$dc$DOT_double$$lcoc_core$DOT_IHash$D$$cext();

// END $C$dc$DOT_double$$lcoc_core$DOT_IHash$D$$extension

// BEGIN $C$dc$DOT_int$$lcoc_core$DOT_IHash$D$$cext
class $C$dc$DOT_int$$lcoc_core$DOT_IHash$D$$cext extends dc.Object implements lcoc_core.IHash$ext {

const $C$dc$DOT_int$$lcoc_core$DOT_IHash$D$$cext():super();

dc.dynamic $_hash$0(dc.dynamic o$1, ){
final dc.int o$2=(o$1 as dc.int);
return lcoc_core.m3_hash_int(o$2, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_int$$lcoc_core$DOT_IHash$D$$cext

// BEGIN $C$dc$DOT_int$$lcoc_core$DOT_IHash$D$$extension
dc.dynamic $C$dc$DOT_int$$lcoc_core$DOT_IHash$D$$extension=const lcoc_core.$C$dc$DOT_int$$lcoc_core$DOT_IHash$D$$cext();

// END $C$dc$DOT_int$$lcoc_core$DOT_IHash$D$$extension

// BEGIN $C$dc$DOT_num$$lcoc_core$DOT_IPrint$D$$cext
class $C$dc$DOT_num$$lcoc_core$DOT_IPrint$D$$cext extends dc.Object implements lcoc_core.IPrint$ext {

const $C$dc$DOT_num$$lcoc_core$DOT_IPrint$D$$cext():super();

dc.dynamic $_print$1(dc.dynamic o$1, dc.dynamic sink$1, ){
final dc.num o$2=(o$1 as dc.num);
final dc.bool and$7533_$AUTO_$1=o$2.isInfinite;
late final dc.bool $if_$1;
if(and$7533_$AUTO_$1){
$if_$1=o$2.isNegative;
}else{
$if_$1=and$7533_$AUTO_$1;
}
if($if_$1){
return ((sink$1 as dc.StringSink).write("##-Inf", ));
}
if(o$2.isInfinite){
return ((sink$1 as dc.StringSink).write("##Inf", ));
}
if(o$2.isNaN){
return ((sink$1 as dc.StringSink).write("##Nan", ));
}
return ((sink$1 as dc.StringSink).write((o$2.toString()), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$dc$DOT_num$$lcoc_core$DOT_IPrint$D$$cext

// BEGIN $C$dc$DOT_num$$lcoc_core$DOT_IPrint$D$$extension
dc.dynamic $C$dc$DOT_num$$lcoc_core$DOT_IPrint$D$$extension=const lcoc_core.$C$dc$DOT_num$$lcoc_core$DOT_IPrint$D$$cext();

// END $C$dc$DOT_num$$lcoc_core$DOT_IPrint$D$$extension

// BEGIN $C$fallback$$lcoc_core$DOT_ICounted$D$$cext
class $C$fallback$$lcoc_core$DOT_ICounted$D$$cext extends dc.Object implements lcoc_core.ICounted$ext {

const $C$fallback$$lcoc_core$DOT_ICounted$D$$cext():super();

dc.dynamic $_count$0(dc.dynamic coll$1, ){
final dc.dynamic coll7722$1=coll$1;
dc.num f7723$1(dc.dynamic n$1, dc.dynamic $UNDERSCORE_$1, ){
return (1+(n$1 as dc.num));
}
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, 0, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, 0, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$lcoc_core$DOT_ICounted$D$$cext

// BEGIN $C$fallback$$lcoc_core$DOT_ICounted$D$$extension
dc.dynamic $C$fallback$$lcoc_core$DOT_ICounted$D$$extension=const lcoc_core.$C$fallback$$lcoc_core$DOT_ICounted$D$$cext();

// END $C$fallback$$lcoc_core$DOT_ICounted$D$$extension

// BEGIN $C$fallback$$lcoc_core$DOT_IEmptyableCollection$D$$cext
class $C$fallback$$lcoc_core$DOT_IEmptyableCollection$D$$cext extends dc.Object implements lcoc_core.IEmptyableCollection$ext {

const $C$fallback$$lcoc_core$DOT_IEmptyableCollection$D$$cext():super();

dc.dynamic $_empty$0(dc.dynamic coll$1, ){
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$lcoc_core$DOT_IEmptyableCollection$D$$cext

// BEGIN $C$fallback$$lcoc_core$DOT_IEmptyableCollection$D$$extension
dc.dynamic $C$fallback$$lcoc_core$DOT_IEmptyableCollection$D$$extension=const lcoc_core.$C$fallback$$lcoc_core$DOT_IEmptyableCollection$D$$cext();

// END $C$fallback$$lcoc_core$DOT_IEmptyableCollection$D$$extension

// BEGIN $C$fallback$$lcoc_core$DOT_IEquiv$D$$cext
class $C$fallback$$lcoc_core$DOT_IEquiv$D$$cext extends dc.Object implements lcoc_core.IEquiv$ext {

const $C$fallback$$lcoc_core$DOT_IEquiv$D$$cext():super();

dc.dynamic $_equiv$1(dc.dynamic o$1, dc.dynamic other$1, ){
return (o$1==other$1);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$lcoc_core$DOT_IEquiv$D$$cext

// BEGIN $C$fallback$$lcoc_core$DOT_IEquiv$D$$extension
dc.dynamic $C$fallback$$lcoc_core$DOT_IEquiv$D$$extension=const lcoc_core.$C$fallback$$lcoc_core$DOT_IEquiv$D$$cext();

// END $C$fallback$$lcoc_core$DOT_IEquiv$D$$extension

// BEGIN $C$fallback$$lcoc_core$DOT_IExceptionInfo$D$$cext
class $C$fallback$$lcoc_core$DOT_IExceptionInfo$D$$cext extends dc.Object implements lcoc_core.IExceptionInfo$ext {

const $C$fallback$$lcoc_core$DOT_IExceptionInfo$D$$cext():super();

dc.dynamic $_ex_data$0(dc.dynamic e$1, ){
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$lcoc_core$DOT_IExceptionInfo$D$$cext

// BEGIN $C$fallback$$lcoc_core$DOT_IExceptionInfo$D$$extension
dc.dynamic $C$fallback$$lcoc_core$DOT_IExceptionInfo$D$$extension=const lcoc_core.$C$fallback$$lcoc_core$DOT_IExceptionInfo$D$$cext();

// END $C$fallback$$lcoc_core$DOT_IExceptionInfo$D$$extension

// BEGIN $C$fallback$$lcoc_core$DOT_IFind$D$$cext
class $C$fallback$$lcoc_core$DOT_IFind$D$$cext extends dc.Object implements lcoc_core.IFind$ext {

const $C$fallback$$lcoc_core$DOT_IFind$D$$cext():super();

dc.dynamic $_find$1(dc.dynamic coll$1, dc.dynamic k$1, ){
if((null==coll$1)){
return null;
}
throw dc.Exception((lcoc_core.str.$_invoke$2("Find not supported on ", coll$1.runtimeType, )), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$lcoc_core$DOT_IFind$D$$cext

// BEGIN $C$fallback$$lcoc_core$DOT_IFind$D$$extension
dc.dynamic $C$fallback$$lcoc_core$DOT_IFind$D$$extension=const lcoc_core.$C$fallback$$lcoc_core$DOT_IFind$D$$cext();

// END $C$fallback$$lcoc_core$DOT_IFind$D$$extension

// BEGIN $C$fallback$$lcoc_core$DOT_IHash$D$$cext
class $C$fallback$$lcoc_core$DOT_IHash$D$$cext extends dc.Object implements lcoc_core.IHash$ext {

const $C$fallback$$lcoc_core$DOT_IHash$D$$cext():super();

dc.dynamic $_hash$0(dc.dynamic o$1, ){
return lcoc_core.m3_hash_int(o$1.hashCode, );
}

dc.dynamic $_hash_realized$QMARK_$0(dc.dynamic o$2, ){
return true;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$lcoc_core$DOT_IHash$D$$cext

// BEGIN $C$fallback$$lcoc_core$DOT_IHash$D$$extension
dc.dynamic $C$fallback$$lcoc_core$DOT_IHash$D$$extension=const lcoc_core.$C$fallback$$lcoc_core$DOT_IHash$D$$cext();

// END $C$fallback$$lcoc_core$DOT_IHash$D$$extension

// BEGIN $C$fallback$$lcoc_core$DOT_IIndexed$D$$cext
class $C$fallback$$lcoc_core$DOT_IIndexed$D$$cext extends dc.Object implements lcoc_core.IIndexed$ext {

const $C$fallback$$lcoc_core$DOT_IIndexed$D$$cext():super();

dc.dynamic $_nth$1(dc.dynamic coll$1, dc.dynamic n$1, ){
if((0>(n$1 as dc.num))){
throw dc.ArgumentError("Index out of bounds", );
}else{
}
final dc.dynamic o7668$1=coll$1;
dc.dynamic xs$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
xs$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
xs$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
dc.int i$1=(n$1 as dc.int);
do {
if((null==xs$1)){
throw dc.ArgumentError("Index out of bounds", );
}
if((0==i$1)){
return lcoc_core.first(xs$1, );
}
xs$1=lcoc_core.next(xs$1, );
i$1=(i$1-1);
continue;
} while(true);
}

dc.dynamic $_nth$2(dc.dynamic coll$2, dc.dynamic n$2, dc.dynamic not_found$1, ){
if((0>(n$2 as dc.num))){
return not_found$1;
}
final dc.dynamic o7668$2=coll$2;
dc.dynamic xs$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
xs$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
xs$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
dc.int i$2=(n$2 as dc.int);
do {
if((null==xs$2)){
return not_found$1;
}
if((0==i$2)){
return lcoc_core.first(xs$2, );
}
xs$2=lcoc_core.next(xs$2, );
i$2=(i$2-1);
continue;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$lcoc_core$DOT_IIndexed$D$$cext

// BEGIN $C$fallback$$lcoc_core$DOT_IIndexed$D$$extension
dc.dynamic $C$fallback$$lcoc_core$DOT_IIndexed$D$$extension=const lcoc_core.$C$fallback$$lcoc_core$DOT_IIndexed$D$$cext();

// END $C$fallback$$lcoc_core$DOT_IIndexed$D$$extension

// BEGIN $C$fallback$$lcoc_core$DOT_ILookup$D$$cext
class $C$fallback$$lcoc_core$DOT_ILookup$D$$cext extends dc.Object implements lcoc_core.ILookup$ext {

const $C$fallback$$lcoc_core$DOT_ILookup$D$$cext():super();

dc.dynamic $_lookup$1(dc.dynamic o$1, dc.dynamic k$1, ){
final dc.bool and$7533_$AUTO_$1=(k$1 is dc.int);
late final dc.bool $if_$1;
if(and$7533_$AUTO_$1){
$if_$1=((lcoc_core.IIndexed.satisfies(o$1, )) as dc.bool);
}else{
$if_$1=and$7533_$AUTO_$1;
}
if($if_$1){
final dc.dynamic coll7825$1=o$1;
final dc.dynamic n7826$1=k$1;
if((coll7825$1 is lcoc_core.IIndexed$iface)){
return ((coll7825$1 as lcoc_core.IIndexed$iface).$_nth$2(n7826$1, null, ));
}
return ((lcoc_core.IIndexed.extensions(coll7825$1, ) as lcoc_core.IIndexed$ext).$_nth$2(coll7825$1, n7826$1, null, ));
}
return null;
}

dc.dynamic $_lookup$2(dc.dynamic o$2, dc.dynamic k$2, dc.dynamic not_found$1, ){
final dc.bool and$7533_$AUTO_$2=(k$2 is dc.int);
late final dc.bool $if_$2;
if(and$7533_$AUTO_$2){
$if_$2=((lcoc_core.IIndexed.satisfies(o$2, )) as dc.bool);
}else{
$if_$2=and$7533_$AUTO_$2;
}
if($if_$2){
final dc.dynamic coll7825$2=o$2;
final dc.dynamic n7826$2=k$2;
final dc.dynamic not_found7827$2=not_found$1;
if((coll7825$2 is lcoc_core.IIndexed$iface)){
return ((coll7825$2 as lcoc_core.IIndexed$iface).$_nth$2(n7826$2, not_found7827$2, ));
}
return ((lcoc_core.IIndexed.extensions(coll7825$2, ) as lcoc_core.IIndexed$ext).$_nth$2(coll7825$2, n7826$2, not_found7827$2, ));
}
return not_found$1;
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic o$3, dc.dynamic k$3, ){
final dc.bool and$7533_$AUTO_$3=(k$3 is dc.int);
if(and$7533_$AUTO_$3){
final dc.bool and$7533_$AUTO_$4=((lcoc_core.IIndexed.satisfies(o$3, )) as dc.bool);
if(and$7533_$AUTO_$4){
final dc.dynamic coll7825$3=o$3;
final dc.dynamic n7826$3=k$3;
final dc.dynamic not_found7827$3=lcoc_core.sentinel;
late final dc.dynamic $if_$3;
if((coll7825$3 is lcoc_core.IIndexed$iface)){
$if_$3=((coll7825$3 as lcoc_core.IIndexed$iface).$_nth$2(n7826$3, not_found7827$3, ));
}else{
$if_$3=((lcoc_core.IIndexed.extensions(coll7825$3, ) as lcoc_core.IIndexed$ext).$_nth$2(coll7825$3, n7826$3, not_found7827$3, ));
}
final dc.bool $1=dc.identical(lcoc_core.sentinel, $if_$3, );
if($1){
return false;
}
return true;
}
return and$7533_$AUTO_$4;
}
return and$7533_$AUTO_$3;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$lcoc_core$DOT_ILookup$D$$cext

// BEGIN $C$fallback$$lcoc_core$DOT_ILookup$D$$extension
dc.dynamic $C$fallback$$lcoc_core$DOT_ILookup$D$$extension=const lcoc_core.$C$fallback$$lcoc_core$DOT_ILookup$D$$cext();

// END $C$fallback$$lcoc_core$DOT_ILookup$D$$extension

// BEGIN $C$fallback$$lcoc_core$DOT_IMap$D$$cext
class $C$fallback$$lcoc_core$DOT_IMap$D$$cext extends dc.Object implements lcoc_core.IMap$ext {

const $C$fallback$$lcoc_core$DOT_IMap$D$$cext():super();

dc.dynamic $_dissoc$1(dc.dynamic coll$1, dc.dynamic k$1, ){
if((null==coll$1)){
return null;
}
throw dc.Exception((lcoc_core.str.$_invoke$2("Dissoc not supported on ", coll$1.runtimeType, )), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$lcoc_core$DOT_IMap$D$$cext

// BEGIN $C$fallback$$lcoc_core$DOT_IMap$D$$extension
dc.dynamic $C$fallback$$lcoc_core$DOT_IMap$D$$extension=const lcoc_core.$C$fallback$$lcoc_core$DOT_IMap$D$$cext();

// END $C$fallback$$lcoc_core$DOT_IMap$D$$extension

// BEGIN $C$fallback$$lcoc_core$DOT_IMeta$D$$cext
class $C$fallback$$lcoc_core$DOT_IMeta$D$$cext extends dc.Object implements lcoc_core.IMeta$ext {

const $C$fallback$$lcoc_core$DOT_IMeta$D$$cext():super();

dc.dynamic $_meta$0(dc.dynamic $UNDERSCORE_$1, ){
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$lcoc_core$DOT_IMeta$D$$cext

// BEGIN $C$fallback$$lcoc_core$DOT_IMeta$D$$extension
dc.dynamic $C$fallback$$lcoc_core$DOT_IMeta$D$$extension=const lcoc_core.$C$fallback$$lcoc_core$DOT_IMeta$D$$cext();

// END $C$fallback$$lcoc_core$DOT_IMeta$D$$extension

// BEGIN $C$fallback$$lcoc_core$DOT_IPrint$D$$cext
class $C$fallback$$lcoc_core$DOT_IPrint$D$$cext extends dc.Object implements lcoc_core.IPrint$ext {

const $C$fallback$$lcoc_core$DOT_IPrint$D$$cext():super();

dc.dynamic $_print$1(dc.dynamic o$1, dc.dynamic sink$1, ){
return ((sink$1 as dc.StringSink).write((o$1.toString()), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$lcoc_core$DOT_IPrint$D$$cext

// BEGIN $C$fallback$$lcoc_core$DOT_IPrint$D$$extension
dc.dynamic $C$fallback$$lcoc_core$DOT_IPrint$D$$extension=const lcoc_core.$C$fallback$$lcoc_core$DOT_IPrint$D$$cext();

// END $C$fallback$$lcoc_core$DOT_IPrint$D$$extension

// BEGIN $C$fallback$$lcoc_core$DOT_IReduce$D$$cext
class $C$fallback$$lcoc_core$DOT_IReduce$D$$cext extends dc.Object implements lcoc_core.IReduce$ext {

const $C$fallback$$lcoc_core$DOT_IReduce$D$$cext():super();

dc.dynamic $_reduce$1(dc.dynamic coll$1, dc.dynamic f$1, ){
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic some$7546_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
some$7546_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
some$7546_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==some$7546_$AUTO_$1)){
if((f$1 is dc.Function)){
return (f$1 as dc.Function)();
}
if((f$1 is lcoc_core.IFn$iface)){
return ((f$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(f$1, ).$_invoke$0(f$1, ));
}
final dc.dynamic vec$8755_$1=some$7546_$AUTO_$1;
final dc.dynamic o7668$2=vec$8755_$1;
late final dc.dynamic seq$8756_$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
seq$8756_$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8756_$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic first$8757_$1=lcoc_core.first(seq$8756_$1, );
final dc.dynamic seq$8756_$2=lcoc_core.next(seq$8756_$1, );
final dc.dynamic x$1=first$8757_$1;
final dc.dynamic xs$1=seq$8756_$2;
final dc.dynamic some$7546_$AUTO_$2=xs$1;
if((null==some$7546_$AUTO_$2)){
return x$1;
}
final dc.dynamic vec$8758_$1=some$7546_$AUTO_$2;
final dc.dynamic y$1=(lcoc_core.nth.$_invoke$3(vec$8758_$1, 0, null, ));
late final dc.dynamic val$1;
if((f$1 is dc.Function)){
val$1=(f$1 as dc.Function)(x$1, y$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
val$1=((f$1 as lcoc_core.IFn$iface).$_invoke$2(x$1, y$1, ));
}else{
val$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, x$1, y$1, ));
}
if(lcoc_core.reduced$QMARK_(val$1, )){
return lcoc_core.deref(val$1, );
}
final dc.dynamic coll7722$1=lcoc_core.next(xs$1, );
final dc.dynamic f7723$1=f$1;
final dc.dynamic start7724$1=val$1;
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_reduce$2(dc.dynamic coll$2, dc.dynamic f$2, dc.dynamic start$1, ){
dc.dynamic acc$1=start$1;
final dc.dynamic o7668$3=coll$2;
dc.dynamic xs$2;
if((o7668$3 is lcoc_core.ISeqable$iface)){
xs$2=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
xs$2=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
do {
final dc.dynamic some$7546_$AUTO_$3=xs$2;
if((null==some$7546_$AUTO_$3)){
return acc$1;
}
final dc.dynamic vec$8761_$1=some$7546_$AUTO_$3;
final dc.dynamic x$2=(lcoc_core.nth.$_invoke$3(vec$8761_$1, 0, null, ));
late final dc.dynamic val$2;
if((f$2 is dc.Function)){
val$2=(f$2 as dc.Function)(acc$1, x$2, );
}else if((f$2 is lcoc_core.IFn$iface)){
val$2=((f$2 as lcoc_core.IFn$iface).$_invoke$2(acc$1, x$2, ));
}else{
val$2=(lcoc_core.IFn.extensions(f$2, ).$_invoke$2(f$2, acc$1, x$2, ));
}
if(lcoc_core.reduced$QMARK_(val$2, )){
return lcoc_core.deref(val$2, );
}
acc$1=val$2;
xs$2=lcoc_core.next(xs$2, );
continue;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$lcoc_core$DOT_IReduce$D$$cext

// BEGIN $C$fallback$$lcoc_core$DOT_IReduce$D$$extension
dc.dynamic $C$fallback$$lcoc_core$DOT_IReduce$D$$extension=const lcoc_core.$C$fallback$$lcoc_core$DOT_IReduce$D$$cext();

// END $C$fallback$$lcoc_core$DOT_IReduce$D$$extension

// BEGIN $C$fallback$$lcoc_core$DOT_ISeq$D$$cext
class $C$fallback$$lcoc_core$DOT_ISeq$D$$cext extends dc.Object implements lcoc_core.ISeq$ext {

const $C$fallback$$lcoc_core$DOT_ISeq$D$$cext():super();

dc.dynamic $_first$0(dc.dynamic coll$1, ){
if((null==coll$1)){
return null;
}
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("Don't know how to create ISeq from: ", coll$1, )), );
}

dc.dynamic $_rest$0(dc.dynamic coll$2, ){
if((null==coll$2)){
return lcoc_core.$_EMPTY_LIST;
}
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("Don't know how to create ISeq from: ", coll$2, )), );
}

dc.dynamic $_next$0(dc.dynamic coll$3, ){
if((null==coll$3)){
return null;
}
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("Don't know how to create ISeq from: ", coll$3, )), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$lcoc_core$DOT_ISeq$D$$cext

// BEGIN $C$fallback$$lcoc_core$DOT_ISeq$D$$extension
dc.dynamic $C$fallback$$lcoc_core$DOT_ISeq$D$$extension=const lcoc_core.$C$fallback$$lcoc_core$DOT_ISeq$D$$cext();

// END $C$fallback$$lcoc_core$DOT_ISeq$D$$extension

// BEGIN $C$fallback$$lcoc_core$DOT_IStack$D$$cext
class $C$fallback$$lcoc_core$DOT_IStack$D$$cext extends dc.Object implements lcoc_core.IStack$ext {

const $C$fallback$$lcoc_core$DOT_IStack$D$$cext():super();

dc.dynamic $_peek$0(dc.dynamic coll$1, ){
if((null==coll$1)){
return null;
}
throw dc.Exception((lcoc_core.str.$_invoke$2("Peek not supported on ", coll$1.runtimeType, )), );
}

dc.dynamic $_pop$0(dc.dynamic coll$2, ){
if((null==coll$2)){
return null;
}
throw dc.Exception((lcoc_core.str.$_invoke$2("Pop not supported on ", coll$2.runtimeType, )), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$lcoc_core$DOT_IStack$D$$cext

// BEGIN $C$fallback$$lcoc_core$DOT_IStack$D$$extension
dc.dynamic $C$fallback$$lcoc_core$DOT_IStack$D$$extension=const lcoc_core.$C$fallback$$lcoc_core$DOT_IStack$D$$cext();

// END $C$fallback$$lcoc_core$DOT_IStack$D$$extension

// BEGIN $EQ_$EQ_ifn18695hm$1
class $EQ_$EQ_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$EQ_$EQ_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$EQ_$EQ_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$2, dc.dynamic y$2, dc.dynamic more$2, ){
dc.dynamic x$1=x$2;
dc.dynamic y$1=y$2;
dc.dynamic more$1=more$2;
do {
if((x$1==y$1)){
final dc.dynamic test$1=lcoc_core.next(more$1, );
if(((test$1!=false)&&(test$1!=null))){
x$1=y$1;
y$1=lcoc_core.first(more$1, );
more$1=lcoc_core.next(more$1, );
continue;
}
return (y$1==lcoc_core.first(more$1, ));
}
return false;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic x$3, ){
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$4, dc.dynamic y$3, ){
return (x$4==y$3);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $EQ_$EQ_ifn18695hm$1

// BEGIN $EQ_ifn18695hm$1
class $EQ_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$EQ_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$EQ_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$2, dc.dynamic y$2, dc.dynamic more$2, ){
dc.dynamic x$1=x$2;
dc.dynamic y$1=y$2;
dc.dynamic more$1=more$2;
do {
final dc.dynamic o7819$1=x$1;
final dc.dynamic other7820$1=y$1;
late final dc.dynamic $if_$10;
if((o7819$1 is lcoc_core.IEquiv$iface)){
$if_$10=((o7819$1 as lcoc_core.IEquiv$iface).$_equiv$1(other7820$1, ));
}else{
$if_$10=((lcoc_core.IEquiv.extensions(o7819$1, ) as lcoc_core.IEquiv$ext).$_equiv$1(o7819$1, other7820$1, ));
}
if((($if_$10!=false)&&($if_$10!=null))){
final dc.dynamic test$1=lcoc_core.next(more$1, );
if(((test$1!=false)&&(test$1!=null))){
x$1=y$1;
y$1=lcoc_core.first(more$1, );
more$1=lcoc_core.next(more$1, );
continue;
}
final dc.dynamic o7819$2=y$1;
final dc.dynamic other7820$2=lcoc_core.first(more$1, );
if((o7819$2 is lcoc_core.IEquiv$iface)){
return ((o7819$2 as lcoc_core.IEquiv$iface).$_equiv$1(other7820$2, ));
}
return ((lcoc_core.IEquiv.extensions(o7819$2, ) as lcoc_core.IEquiv$ext).$_equiv$1(o7819$2, other7820$2, ));
}
return false;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic x$3, ){
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$4, dc.dynamic y$3, ){
final dc.dynamic o7819$3=x$4;
final dc.dynamic other7820$3=y$3;
if((o7819$3 is lcoc_core.IEquiv$iface)){
return ((o7819$3 as lcoc_core.IEquiv$iface).$_equiv$1(other7820$3, ));
}
return ((lcoc_core.IEquiv.extensions(o7819$3, ) as lcoc_core.IEquiv$ext).$_equiv$1(o7819$3, other7820$3, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $EQ_ifn18695hm$1

// BEGIN $GT_$EQ_ifn18695hm$1
class $GT_$EQ_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$GT_$EQ_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$GT_$EQ_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$3, dc.dynamic y$3, dc.dynamic more$2, ){
dc.dynamic x$1=x$3;
dc.dynamic y$1=y$3;
dc.dynamic more$1=more$2;
do {
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
if((x$2>=y$2)){
final dc.dynamic test$1=lcoc_core.next(more$1, );
if(((test$1!=false)&&(test$1!=null))){
x$1=y$2;
y$1=lcoc_core.first(more$1, );
more$1=lcoc_core.next(more$1, );
continue;
}
return (y$2>=(lcoc_core.first(more$1, ) as dc.num));
}
return false;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic x$4, ){
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$4, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$5=(y$4 as dc.num);
return (x$6>=y$5);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $GT_$EQ_ifn18695hm$1

// BEGIN $GT_ifn18695hm$1
class $GT_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$GT_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$GT_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$3, dc.dynamic y$3, dc.dynamic more$2, ){
dc.dynamic x$1=x$3;
dc.dynamic y$1=y$3;
dc.dynamic more$1=more$2;
do {
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
if((x$2>y$2)){
final dc.dynamic test$1=lcoc_core.next(more$1, );
if(((test$1!=false)&&(test$1!=null))){
x$1=y$2;
y$1=lcoc_core.first(more$1, );
more$1=lcoc_core.next(more$1, );
continue;
}
return (y$2>(lcoc_core.first(more$1, ) as dc.num));
}
return false;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic x$4, ){
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$4, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$5=(y$4 as dc.num);
return (x$6>y$5);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $GT_ifn18695hm$1

// BEGIN $LT_$EQ_ifn18695hm$1
class $LT_$EQ_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$LT_$EQ_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$LT_$EQ_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$3, dc.dynamic y$3, dc.dynamic more$2, ){
dc.dynamic x$1=x$3;
dc.dynamic y$1=y$3;
dc.dynamic more$1=more$2;
do {
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
if((x$2<=y$2)){
final dc.dynamic test$1=lcoc_core.next(more$1, );
if(((test$1!=false)&&(test$1!=null))){
x$1=y$2;
y$1=lcoc_core.first(more$1, );
more$1=lcoc_core.next(more$1, );
continue;
}
return (y$2<=(lcoc_core.first(more$1, ) as dc.num));
}
return false;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic x$4, ){
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$4, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$5=(y$4 as dc.num);
return (x$6<=y$5);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $LT_$EQ_ifn18695hm$1

// BEGIN $LT_ifn18695hm$1
class $LT_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$LT_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$LT_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$3, dc.dynamic y$3, dc.dynamic more$2, ){
dc.dynamic x$1=x$3;
dc.dynamic y$1=y$3;
dc.dynamic more$1=more$2;
do {
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
if((x$2<y$2)){
final dc.dynamic test$1=lcoc_core.next(more$1, );
if(((test$1!=false)&&(test$1!=null))){
x$1=y$2;
y$1=lcoc_core.first(more$1, );
more$1=lcoc_core.next(more$1, );
continue;
}
return (y$2<(lcoc_core.first(more$1, ) as dc.num));
}
return false;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic x$4, ){
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$4, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$5=(y$4 as dc.num);
return (x$6<y$5);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $LT_ifn18695hm$1

// BEGIN $PLUS_ifn18695hm$1
class $PLUS_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$PLUS_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$PLUS_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
final dc.dynamic coll7722$1=more$1;
final lcoc_core.IFn$iface f7723$1=lcoc_core.$PLUS_;
final dc.num start7724$1=(x$2+y$2);
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_invoke$0(){
return 0;
}

dc.dynamic $_invoke$1(dc.dynamic x$3, ){
final dc.num x$4=(x$3 as dc.num);
return x$4;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$3, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$4=(y$3 as dc.num);
return (x$6+y$4);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $PLUS_ifn18695hm$1

// BEGIN $SLASH_ifn18695hm$1
class $SLASH_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$SLASH_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$SLASH_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
final dc.dynamic coll7722$1=more$1;
final lcoc_core.IFn$iface f7723$1=lcoc_core.$SLASH_;
final dc.double start7724$1=(x$2/y$2);
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$3, ){
final dc.num x$4=(x$3 as dc.num);
return (1/x$4);
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$3, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$4=(y$3 as dc.num);
return (x$6/y$4);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $SLASH_ifn18695hm$1

// BEGIN $STAR_ifn18695hm$1
class $STAR_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$STAR_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$STAR_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
final dc.dynamic coll7722$1=more$1;
final lcoc_core.IFn$iface f7723$1=lcoc_core.$STAR_;
final dc.num start7724$1=(x$2*y$2);
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_invoke$0(){
return 1;
}

dc.dynamic $_invoke$1(dc.dynamic x$3, ){
final dc.num x$4=(x$3 as dc.num);
return x$4;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$3, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$4=(y$3 as dc.num);
return (x$6*y$4);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $STAR_ifn18695hm$1

// BEGIN $_$GT_$GT_ifn18695hm$1
class $_$GT_$GT_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$_$GT_$GT_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$_$GT_$GT_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic x$1, dc.dynamic forms$1, ){
dc.dynamic x$2=x$1;
dc.dynamic forms$2=forms$1;
do {
if(((forms$2!=false)&&(forms$2!=null))){
final dc.dynamic form$1=lcoc_core.first(forms$2, );
late final dc.dynamic threaded$1;
if(((lcoc_core.ISeq.satisfies(form$1, )) as dc.bool)){
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(lcoc_core.first(form$1, ), )), lcoc_core.next(form$1, ), (lcoc_core.list.$_invoke$1(x$2, )), ));
late final dc.dynamic $if_$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic o7872$1=form$1;
late final dc.dynamic $if_$1;
if((o7872$1 is lcoc_core.IMeta$iface)){
$if_$1=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$1=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
threaded$1=lcoc_core.with_meta($if_$2, $if_$1, );
}else{
threaded$1=(lcoc_core.list.$_invoke$2(form$1, x$2, ));
}
x$2=threaded$1;
forms$2=lcoc_core.next(forms$2, );
continue;
}
return x$2;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $_$GT_$GT_ifn18695hm$1

// BEGIN $_$GT_ifn18695hm$1
class $_$GT_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$_$GT_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$_$GT_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic x$1, dc.dynamic forms$1, ){
dc.dynamic x$2=x$1;
dc.dynamic forms$2=forms$1;
do {
if(((forms$2!=false)&&(forms$2!=null))){
final dc.dynamic form$1=lcoc_core.first(forms$2, );
late final dc.dynamic threaded$1;
if(((lcoc_core.ISeq.satisfies(form$1, )) as dc.bool)){
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(lcoc_core.first(form$1, ), )), (lcoc_core.list.$_invoke$1(x$2, )), lcoc_core.next(form$1, ), ));
late final dc.dynamic $if_$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic o7872$1=form$1;
late final dc.dynamic $if_$1;
if((o7872$1 is lcoc_core.IMeta$iface)){
$if_$1=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$1=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
threaded$1=lcoc_core.with_meta($if_$2, $if_$1, );
}else{
threaded$1=(lcoc_core.list.$_invoke$2(form$1, x$2, ));
}
x$2=threaded$1;
forms$2=lcoc_core.next(forms$2, );
continue;
}
return x$2;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $_$GT_ifn18695hm$1

// BEGIN $_ifn18695hm$1
class $_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
final dc.dynamic coll7722$1=more$1;
final lcoc_core.IFn$iface f7723$1=lcoc_core.$_;
final dc.num start7724$1=(x$2-y$2);
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$3, ){
final dc.num x$4=(x$3 as dc.num);
return (0-x$4);
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$3, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$4=(y$3 as dc.num);
return (x$6-y$4);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $_ifn18695hm$1

// BEGIN $_invokeifn18695hm$1
class $_invokeifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXXXXXXXXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$_invokeifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$_invokeifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$7(dc.dynamic $this_$13, dc.dynamic a$21, dc.dynamic b$19, dc.dynamic c$17, dc.dynamic d$15, dc.dynamic e$13, dc.dynamic f$11, ){
if(($this_$13 is lcoc_core.IFn$iface)){
return (($this_$13 as lcoc_core.IFn$iface).$_invoke$6(a$21, b$19, c$17, d$15, e$13, f$11, ));
}
return ((lcoc_core.IFn.extensions($this_$13, ) as lcoc_core.IFn$ext).$_invoke$6($this_$13, a$21, b$19, c$17, d$15, e$13, f$11, ));
}

dc.dynamic $_invoke$1(dc.dynamic $this_$14, ){
if(($this_$14 is lcoc_core.IFn$iface)){
return (($this_$14 as lcoc_core.IFn$iface).$_invoke$0());
}
return ((lcoc_core.IFn.extensions($this_$14, ) as lcoc_core.IFn$ext).$_invoke$0($this_$14, ));
}

dc.dynamic $_invoke$4(dc.dynamic $this_$15, dc.dynamic a$22, dc.dynamic b$20, dc.dynamic c$18, ){
if(($this_$15 is lcoc_core.IFn$iface)){
return (($this_$15 as lcoc_core.IFn$iface).$_invoke$3(a$22, b$20, c$18, ));
}
return ((lcoc_core.IFn.extensions($this_$15, ) as lcoc_core.IFn$ext).$_invoke$3($this_$15, a$22, b$20, c$18, ));
}

dc.dynamic $_invoke$6(dc.dynamic $this_$16, dc.dynamic a$23, dc.dynamic b$21, dc.dynamic c$19, dc.dynamic d$16, dc.dynamic e$14, ){
if(($this_$16 is lcoc_core.IFn$iface)){
return (($this_$16 as lcoc_core.IFn$iface).$_invoke$5(a$23, b$21, c$19, d$16, e$14, ));
}
return ((lcoc_core.IFn.extensions($this_$16, ) as lcoc_core.IFn$ext).$_invoke$5($this_$16, a$23, b$21, c$19, d$16, e$14, ));
}

dc.dynamic $_invoke$3(dc.dynamic $this_$17, dc.dynamic a$24, dc.dynamic b$22, ){
if(($this_$17 is lcoc_core.IFn$iface)){
return (($this_$17 as lcoc_core.IFn$iface).$_invoke$2(a$24, b$22, ));
}
return ((lcoc_core.IFn.extensions($this_$17, ) as lcoc_core.IFn$ext).$_invoke$2($this_$17, a$24, b$22, ));
}

dc.dynamic $_invoke$2(dc.dynamic $this_$18, dc.dynamic a$25, ){
if(($this_$18 is lcoc_core.IFn$iface)){
return (($this_$18 as lcoc_core.IFn$iface).$_invoke$1(a$25, ));
}
return ((lcoc_core.IFn.extensions($this_$18, ) as lcoc_core.IFn$ext).$_invoke$1($this_$18, a$25, ));
}

dc.dynamic $_invoke$9(dc.dynamic $this_$19, dc.dynamic a$26, dc.dynamic b$23, dc.dynamic c$20, dc.dynamic d$17, dc.dynamic e$15, dc.dynamic f$12, dc.dynamic g$9, dc.dynamic h$7, ){
if(($this_$19 is lcoc_core.IFn$iface)){
return (($this_$19 as lcoc_core.IFn$iface).$_invoke$8(a$26, b$23, c$20, d$17, e$15, f$12, g$9, h$7, ));
}
return ((lcoc_core.IFn.extensions($this_$19, ) as lcoc_core.IFn$ext).$_invoke$8($this_$19, a$26, b$23, c$20, d$17, e$15, f$12, g$9, h$7, ));
}

dc.dynamic $_invoke$5(dc.dynamic $this_$20, dc.dynamic a$27, dc.dynamic b$24, dc.dynamic c$21, dc.dynamic d$18, ){
if(($this_$20 is lcoc_core.IFn$iface)){
return (($this_$20 as lcoc_core.IFn$iface).$_invoke$4(a$27, b$24, c$21, d$18, ));
}
return ((lcoc_core.IFn.extensions($this_$20, ) as lcoc_core.IFn$ext).$_invoke$4($this_$20, a$27, b$24, c$21, d$18, ));
}

dc.dynamic $_invoke$ext10(dc.dynamic $this_$21, dc.dynamic a$28, dc.dynamic b$25, dc.dynamic c$22, dc.dynamic d$19, dc.dynamic e$16, dc.dynamic f$13, dc.dynamic g$10, dc.dynamic h$8, dc.dynamic i$5, ){
if(($this_$21 is lcoc_core.IFn$iface)){
return (($this_$21 as lcoc_core.IFn$iface).$_invoke$9(a$28, b$25, c$22, d$19, e$16, f$13, g$10, h$8, i$5, ));
}
return ((lcoc_core.IFn.extensions($this_$21, ) as lcoc_core.IFn$ext).$_invoke$9($this_$21, a$28, b$25, c$22, d$19, e$16, f$13, g$10, h$8, i$5, ));
}

dc.dynamic $_invoke$8(dc.dynamic $this_$22, dc.dynamic a$29, dc.dynamic b$26, dc.dynamic c$23, dc.dynamic d$20, dc.dynamic e$17, dc.dynamic f$14, dc.dynamic g$11, ){
if(($this_$22 is lcoc_core.IFn$iface)){
return (($this_$22 as lcoc_core.IFn$iface).$_invoke$7(a$29, b$26, c$23, d$20, e$17, f$14, g$11, ));
}
return ((lcoc_core.IFn.extensions($this_$22, ) as lcoc_core.IFn$ext).$_invoke$7($this_$22, a$29, b$26, c$23, d$20, e$17, f$14, g$11, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $_invokeifn18695hm$1

// BEGIN $_lookupifn18695hm$1
class $_lookupifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$_lookupifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$_lookupifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$3(dc.dynamic o$4, dc.dynamic k$7, dc.dynamic not_found$3, ){
if((o$4 is lcoc_core.ILookup$iface)){
return ((o$4 as lcoc_core.ILookup$iface).$_lookup$2(k$7, not_found$3, ));
}
return ((lcoc_core.ILookup.extensions(o$4, ) as lcoc_core.ILookup$ext).$_lookup$2(o$4, k$7, not_found$3, ));
}

dc.dynamic $_invoke$2(dc.dynamic o$5, dc.dynamic k$8, ){
if((o$5 is lcoc_core.ILookup$iface)){
return ((o$5 as lcoc_core.ILookup$iface).$_lookup$1(k$8, ));
}
return ((lcoc_core.ILookup.extensions(o$5, ) as lcoc_core.ILookup$ext).$_lookup$1(o$5, k$8, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $_lookupifn18695hm$1

// BEGIN $_nthifn18695hm$1
class $_nthifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$_nthifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$_nthifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$3(dc.dynamic coll$3, dc.dynamic n$5, dc.dynamic not_found$3, ){
if((coll$3 is lcoc_core.IIndexed$iface)){
return ((coll$3 as lcoc_core.IIndexed$iface).$_nth$2(n$5, not_found$3, ));
}
return ((lcoc_core.IIndexed.extensions(coll$3, ) as lcoc_core.IIndexed$ext).$_nth$2(coll$3, n$5, not_found$3, ));
}

dc.dynamic $_invoke$2(dc.dynamic coll$4, dc.dynamic n$6, ){
if((coll$4 is lcoc_core.IIndexed$iface)){
return ((coll$4 as lcoc_core.IIndexed$iface).$_nth$1(n$6, ));
}
return ((lcoc_core.IIndexed.extensions(coll$4, ) as lcoc_core.IIndexed$ext).$_nth$1(coll$4, n$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $_nthifn18695hm$1

// BEGIN $_reduceifn18695hm$1
class $_reduceifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$_reduceifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$_reduceifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$3(dc.dynamic coll$3, dc.dynamic f$5, dc.dynamic start$3, ){
if((coll$3 is lcoc_core.IReduce$iface)){
return ((coll$3 as lcoc_core.IReduce$iface).$_reduce$2(f$5, start$3, ));
}
return ((lcoc_core.IReduce.extensions(coll$3, ) as lcoc_core.IReduce$ext).$_reduce$2(coll$3, f$5, start$3, ));
}

dc.dynamic $_invoke$2(dc.dynamic coll$4, dc.dynamic f$6, ){
if((coll$4 is lcoc_core.IReduce$iface)){
return ((coll$4 as lcoc_core.IReduce$iface).$_reduce$1(f$6, ));
}
return ((lcoc_core.IReduce.extensions(coll$4, ) as lcoc_core.IReduce$ext).$_reduce$1(coll$4, f$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $_reduceifn18695hm$1

// BEGIN $_swap$BANG_ifn18695hm$1
class $_swap$BANG_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$_swap$BANG_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$_swap$BANG_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$5(dc.dynamic o$5, dc.dynamic f$9, dc.dynamic a$7, dc.dynamic b$5, dc.dynamic xs$3, ){
if((o$5 is lcoc_core.ISwap$iface)){
return ((o$5 as lcoc_core.ISwap$iface).$_swap$BANG_$4(f$9, a$7, b$5, xs$3, ));
}
return ((lcoc_core.ISwap.extensions(o$5, ) as lcoc_core.ISwap$ext).$_swap$BANG_$4(o$5, f$9, a$7, b$5, xs$3, ));
}

dc.dynamic $_invoke$4(dc.dynamic o$6, dc.dynamic f$10, dc.dynamic a$8, dc.dynamic b$6, ){
if((o$6 is lcoc_core.ISwap$iface)){
return ((o$6 as lcoc_core.ISwap$iface).$_swap$BANG_$3(f$10, a$8, b$6, ));
}
return ((lcoc_core.ISwap.extensions(o$6, ) as lcoc_core.ISwap$ext).$_swap$BANG_$3(o$6, f$10, a$8, b$6, ));
}

dc.dynamic $_invoke$3(dc.dynamic o$7, dc.dynamic f$11, dc.dynamic a$9, ){
if((o$7 is lcoc_core.ISwap$iface)){
return ((o$7 as lcoc_core.ISwap$iface).$_swap$BANG_$2(f$11, a$9, ));
}
return ((lcoc_core.ISwap.extensions(o$7, ) as lcoc_core.ISwap$ext).$_swap$BANG_$2(o$7, f$11, a$9, ));
}

dc.dynamic $_invoke$2(dc.dynamic o$8, dc.dynamic f$12, ){
if((o$8 is lcoc_core.ISwap$iface)){
return ((o$8 as lcoc_core.ISwap$iface).$_swap$BANG_$1(f$12, ));
}
return ((lcoc_core.ISwap.extensions(o$8, ) as lcoc_core.ISwap$ext).$_swap$BANG_$1(o$8, f$12, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $_swap$BANG_ifn18695hm$1

// BEGIN $assert_ifn18695hm$1
class $assert_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$assert_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$assert_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$3(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic x$1, ){
final dc.dynamic arg$5=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "assert", )), ));
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1(x$1, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "str", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1("Assert failed: ", ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "pr-str", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "quote", )), )), (lcoc_core.list.$_invoke$1(x$1, )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$2(arg$1, $1, ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$3(arg$3, arg$2, $2, ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3(arg$5, arg$4, $3, ));
if((o7668$4 is lcoc_core.ISeqable$iface)){
return ((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}

dc.dynamic $_invoke$4(dc.dynamic $AMPERSAND_form$2, dc.dynamic $AMPERSAND_env$2, dc.dynamic x$2, dc.dynamic message$1, ){
final dc.dynamic arg$6=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("dart", "assert", )), ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), )), (lcoc_core.list.$_invoke$1(x$2, )), (lcoc_core.list.$_invoke$1(true, )), (lcoc_core.list.$_invoke$1(false, )), ));
late final dc.dynamic $if_$4;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$3(arg$6, $4, (lcoc_core.list.$_invoke$1(message$1, )), ));
if((o7668$6 is lcoc_core.ISeqable$iface)){
return ((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $assert_ifn18695hm$1

// BEGIN $case_ifn18695hm$1
class $case_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$case_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$case_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic expr$1, dc.dynamic clauses$1, ){
late final dc.bool $if_$1;
if(lcoc_core.symbol$QMARK_(expr$1, )){
$if_$1=false;
}else{
$if_$1=true;
}
if($if_$1){
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "let*", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "test__8618__auto__", )), )), (lcoc_core.list.$_invoke$1(expr$1, )), ));
late final dc.dynamic $if_$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "case", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "test__8618__auto__", )), )), clauses$1, ));
late final dc.dynamic $if_$3;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$3(arg$1, $3, $2, ));
if((o7668$3 is lcoc_core.ISeqable$iface)){
return ((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic coll7742$1=clauses$1;
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final dc.bool $4=cast$1.isEven;
if($4){
final dc.dynamic arg$7=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "case", )), ));
final dc.dynamic arg$6=(lcoc_core.list.$_invoke$1(expr$1, ));
final dc.dynamic arg$5=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "throw", )), ));
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("dart:core", "ArgumentError", )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "str", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1("No matching clause: ", ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "pr-str", )), )), (lcoc_core.list.$_invoke$1(expr$1, )), ));
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$3(arg$3, arg$2, $5, ));
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$2(arg$4, $6, ));
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic o7668$7=(lcoc_core.concat.$_invoke$2(arg$5, $7, ));
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
final dc.dynamic $8=(lcoc_core.list.$_invoke$1($if_$7, ));
final dc.dynamic o7668$8=(lcoc_core.concat.$_invoke$4(arg$7, arg$6, clauses$1, $8, ));
if((o7668$8 is lcoc_core.ISeqable$iface)){
return ((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
final lcoc_core.PersistentVector clauses$2=lcoc_core.vec((lcoc_core.partition_all.$_invoke$2(2, clauses$1, )), );
final dc.dynamic vec$8620_$1=lcoc_core.peek(clauses$2, );
final dc.dynamic $default_$1=(lcoc_core.nth.$_invoke$3(vec$8620_$1, 0, null, ));
final dc.dynamic clauses$3=lcoc_core.pop(clauses$2, );
return (lcoc_core.list.$_invoke$4((lcoc_core.symbol.$_invoke$2(null, "case*", )), expr$1, lcoc_core.LazySeq(null, ((){
dc.dynamic iter$8623_$1(dc.dynamic coll$8624_$2, ){
dc.dynamic coll$8624_$1=coll$8624_$2;
do {
if(((coll$8624_$1!=false)&&(coll$8624_$1!=null))){
if(lcoc_core.chunked_seq$QMARK_(coll$8624_$1, )){
final dc.dynamic c$8391_$AUTO_$1=lcoc_core.chunk_first(coll$8624_$1, );
final dc.dynamic coll7742$2=c$8391_$AUTO_$1;
late final dc.int size$8392_$AUTO_$1;
if((coll7742$2 is lcoc_core.ICounted$iface)){
size$8392_$AUTO_$1=(((coll7742$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
size$8392_$AUTO_$1=(((lcoc_core.ICounted.extensions(coll7742$2, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$2, )) as dc.int);
}
final lcoc_core.ChunkBuffer buf$8390_$AUTO_$1=lcoc_core.chunk_buffer(size$8392_$AUTO_$1, );
late final dc.dynamic exit$8393_$AUTO_$1;
dc.int i$8394_$AUTO_$1=0;
do {
if((i$8394_$AUTO_$1<size$8392_$AUTO_$1)){
final dc.dynamic coll7829$1=c$8391_$AUTO_$1;
final dc.int n7830$1=i$8394_$AUTO_$1;
late final dc.dynamic vec$8625_$1;
if((coll7829$1 is lcoc_core.IIndexed$iface)){
vec$8625_$1=((coll7829$1 as lcoc_core.IIndexed$iface).$_nth$1(n7830$1, ));
}else{
vec$8625_$1=((lcoc_core.IIndexed.extensions(coll7829$1, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$1, n7830$1, ));
}
final dc.dynamic v$1=(lcoc_core.nth.$_invoke$3(vec$8625_$1, 0, null, ));
final dc.dynamic e$1=(lcoc_core.nth.$_invoke$3(vec$8625_$1, 1, null, ));
late final dc.dynamic $if_$8;
if(((lcoc_core.ISeq.satisfies(v$1, )) as dc.bool)){
$if_$8=v$1;
}else{
$if_$8=(lcoc_core.list.$_invoke$1(v$1, ));
}
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, $if_$8, ));
fl$1[1]=e$1;
final lcoc_core.PersistentVector $9=lcoc_core.$_vec_owning(fl$1, );
final dc.dynamic or$7573_$AUTO_$1=lcoc_core.chunk_append(buf$8390_$AUTO_$1, $9, );
if(((or$7573_$AUTO_$1!=false)&&(or$7573_$AUTO_$1!=null))){
exit$8393_$AUTO_$1=or$7573_$AUTO_$1;
}else{
i$8394_$AUTO_$1=(1+i$8394_$AUTO_$1);
continue;
}
}else{
exit$8393_$AUTO_$1=null;
}
break;
} while(true);
final lcoc_core.ChunkBuffer coll7742$3=buf$8390_$AUTO_$1;
late final dc.int cast$2;
if((coll7742$3 is lcoc_core.ICounted$iface)){
cast$2=(((coll7742$3 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$2=(((lcoc_core.ICounted.extensions(coll7742$3, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$3, )) as dc.int);
}
final dc.bool $10=(0<cast$2);
if($10){
return lcoc_core.chunk_cons(lcoc_core.chunk(buf$8390_$AUTO_$1, ), lcoc_core.LazySeq(null, ((){
if(((exit$8393_$AUTO_$1!=false)&&(exit$8393_$AUTO_$1!=null))){
return null;
}
return iter$8623_$1(lcoc_core.chunk_next(coll$8624_$1, ), );
} as dc.dynamic?), null, -1, ), );
}
if(((exit$8393_$AUTO_$1!=false)&&(exit$8393_$AUTO_$1!=null))){
return null;
}
coll$8624_$1=lcoc_core.chunk_next(coll$8624_$1, );
continue;
}
final dc.dynamic vec$8628_$1=lcoc_core.first(coll$8624_$1, );
final dc.dynamic v$2=(lcoc_core.nth.$_invoke$3(vec$8628_$1, 0, null, ));
final dc.dynamic e$2=(lcoc_core.nth.$_invoke$3(vec$8628_$1, 1, null, ));
late final dc.dynamic $if_$9;
if(((lcoc_core.ISeq.satisfies(v$2, )) as dc.bool)){
$if_$9=v$2;
}else{
$if_$9=(lcoc_core.list.$_invoke$1(v$2, ));
}
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(2, $if_$9, ));
fl$2[1]=e$2;
final lcoc_core.PersistentVector $11=lcoc_core.$_vec_owning(fl$2, );
return lcoc_core.cons($11, lcoc_core.LazySeq(null, ((){
return iter$8623_$1(lcoc_core.next(coll$8624_$1, ), );
} as dc.dynamic?), null, -1, ), );
}
return null;
} while(true);
}
final dc.dynamic o7668$9=clauses$3;
late final dc.dynamic $if_$10;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$10=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
return iter$8623_$1($if_$10, );
} as dc.dynamic?), null, -1, ), $default_$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $case_ifn18695hm$1

// BEGIN $get_ifn18695hm$1
class $get_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$get_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$get_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$2(dc.dynamic map$1, dc.dynamic key$1, ){
final dc.dynamic o7838$1=map$1;
final dc.dynamic k7839$1=key$1;
if((o7838$1 is lcoc_core.ILookup$iface)){
return ((o7838$1 as lcoc_core.ILookup$iface).$_lookup$1(k7839$1, ));
}
return ((lcoc_core.ILookup.extensions(o7838$1, ) as lcoc_core.ILookup$ext).$_lookup$1(o7838$1, k7839$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic map$2, dc.dynamic key$2, dc.dynamic not_found$1, ){
final dc.dynamic o7834$1=map$2;
final dc.dynamic k7835$1=key$2;
final dc.dynamic not_found7836$1=not_found$1;
if((o7834$1 is lcoc_core.ILookup$iface)){
return ((o7834$1 as lcoc_core.ILookup$iface).$_lookup$2(k7835$1, not_found7836$1, ));
}
return ((lcoc_core.ILookup.extensions(o7834$1, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$1, k7835$1, not_found7836$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $get_ifn18695hm$1

// BEGIN $while_ifn18695hm$1
class $while_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

$while_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.$while_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic test$1, dc.dynamic body$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "loop", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(test$1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), )), ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$4(arg$2, arg$1, body$1, $2, ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3(arg$3, $4, $3, ));
if((o7668$4 is lcoc_core.ISeqable$iface)){
return ((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $while_ifn18695hm$1

// BEGIN *
lcoc_core.IFn$iface $STAR_=lcoc_core.$STAR_ifn18695hm$1(null, );

// END *

// BEGIN *data-readers*
dc.dynamic $STAR_data_readers$STAR_$root=lcoc_core.$_EMPTY_MAP;
dc.dynamic get $STAR_data_readers$STAR_ => (lcoc_core.get_dynamic_binding((lcoc_core.symbol.$_invoke$2("cljd.core", "*data-readers*", )), $STAR_data_readers$STAR_$root, ) as dc.dynamic);
set $STAR_data_readers$STAR_(dc.dynamic v) => lcoc_core.set_dynamic_binding$BANG_((lcoc_core.symbol.$_invoke$2("cljd.core", "*data-readers*", )), v, );

// END *data-readers*

// BEGIN *default-data-reader-fn*
dc.dynamic $STAR_default_data_reader_fn$STAR_$root=null;
dc.dynamic get $STAR_default_data_reader_fn$STAR_ => (lcoc_core.get_dynamic_binding((lcoc_core.symbol.$_invoke$2("cljd.core", "*default-data-reader-fn*", )), $STAR_default_data_reader_fn$STAR_$root, ) as dc.dynamic);
set $STAR_default_data_reader_fn$STAR_(dc.dynamic v) => lcoc_core.set_dynamic_binding$BANG_((lcoc_core.symbol.$_invoke$2("cljd.core", "*default-data-reader-fn*", )), v, );

// END *default-data-reader-fn*

// BEGIN *out*
dc.dynamic $STAR_out$STAR_$root=d_io.stdout;
dc.StringSink get $STAR_out$STAR_ => (lcoc_core.get_dynamic_binding((lcoc_core.symbol.$_invoke$2("cljd.core", "*out*", )), $STAR_out$STAR_$root, ) as dc.StringSink);
set $STAR_out$STAR_(dc.dynamic v) => lcoc_core.set_dynamic_binding$BANG_((lcoc_core.symbol.$_invoke$2("cljd.core", "*out*", )), v, );

// END *out*

// BEGIN *print-dup*
dc.dynamic $STAR_print_dup$STAR_$root=false;
dc.dynamic get $STAR_print_dup$STAR_ => (lcoc_core.get_dynamic_binding((lcoc_core.symbol.$_invoke$2("cljd.core", "*print-dup*", )), $STAR_print_dup$STAR_$root, ) as dc.dynamic);
set $STAR_print_dup$STAR_(dc.dynamic v) => lcoc_core.set_dynamic_binding$BANG_((lcoc_core.symbol.$_invoke$2("cljd.core", "*print-dup*", )), v, );

// END *print-dup*

// BEGIN *print-readably*
dc.dynamic $STAR_print_readably$STAR_$root=true;
dc.dynamic get $STAR_print_readably$STAR_ => (lcoc_core.get_dynamic_binding((lcoc_core.symbol.$_invoke$2("cljd.core", "*print-readably*", )), $STAR_print_readably$STAR_$root, ) as dc.dynamic);
set $STAR_print_readably$STAR_(dc.dynamic v) => lcoc_core.set_dynamic_binding$BANG_((lcoc_core.symbol.$_invoke$2("cljd.core", "*print-readably*", )), v, );

// END *print-readably*

// BEGIN +
lcoc_core.IFn$iface $PLUS_=lcoc_core.$PLUS_ifn18695hm$1(null, );

// END +

// BEGIN -
lcoc_core.IFn$iface $_=lcoc_core.$_ifn18695hm$1(null, );

// END -

// BEGIN ->
lcoc_core.IFn$iface $_$GT_=lcoc_core.$_$GT_ifn18695hm$1(null, );

// END ->

// BEGIN ->>
lcoc_core.IFn$iface $_$GT_$GT_=lcoc_core.$_$GT_$GT_ifn18695hm$1(null, );

// END ->>

// BEGIN -DYNAMIC-BINDINGS
dc.dynamic $_DYNAMIC_BINDINGS=lcoc_core.$_EMPTY_MAP;

// END -DYNAMIC-BINDINGS

// BEGIN -EMPTY-LIST
dc.dynamic $_EMPTY_LIST=lcoc_core.PersistentList(null, null, null, 0, -1, );

// END -EMPTY-LIST

// BEGIN -EMPTY-MAP
dc.dynamic $_EMPTY_MAP=lcoc_core.PersistentHashMap(null, lcoc_core.BitmapNode(0, 0, 0, (dc.List.empty()), ), -1, );

// END -EMPTY-MAP

// BEGIN -EMPTY-SET
dc.dynamic $_EMPTY_SET=lcoc_core.PersistentHashSet(null, (lcoc_core.$_EMPTY_MAP as lcoc_core.PersistentHashMap<dc.dynamic, dc.dynamic>), -1, );

// END -EMPTY-SET

// BEGIN -EMPTY-VECTOR
dc.dynamic $_EMPTY_VECTOR=lcoc_core.PersistentVector(null, 0, 5, lcoc_core.VectorNode(null, (dc.List.empty()), ), (dc.List.empty()), -1, );

// END -EMPTY-VECTOR

// BEGIN -add-watch
dc.dynamic $_add_watch(dc.dynamic $this_$5, dc.dynamic key$5, dc.dynamic f$3, ){
if(($this_$5 is lcoc_core.IWatchable$iface)){
return (($this_$5 as lcoc_core.IWatchable$iface).$_add_watch$2(key$5, f$3, ));
}
return ((lcoc_core.IWatchable.extensions($this_$5, ) as lcoc_core.IWatchable$ext).$_add_watch$2($this_$5, key$5, f$3, ));
}

// END -add-watch

// BEGIN -apply
dc.dynamic $_apply(dc.dynamic $this_$24, dc.dynamic more$3, ){
if(($this_$24 is lcoc_core.IFn$iface)){
return (($this_$24 as lcoc_core.IFn$iface).$_apply$1(more$3, ));
}
return ((lcoc_core.IFn.extensions($this_$24, ) as lcoc_core.IFn$ext).$_apply$1($this_$24, more$3, ));
}

// END -apply

// BEGIN -as-transient
dc.dynamic $_as_transient(dc.dynamic coll$2, ){
if((coll$2 is lcoc_core.IEditableCollection$iface)){
return ((coll$2 as lcoc_core.IEditableCollection$iface).$_as_transient$0());
}
return ((lcoc_core.IEditableCollection.extensions(coll$2, ) as lcoc_core.IEditableCollection$ext).$_as_transient$0(coll$2, ));
}

// END -as-transient

// BEGIN -assoc
dc.dynamic $_assoc(dc.dynamic coll$2, dc.dynamic k$3, dc.dynamic v$3, ){
if((coll$2 is lcoc_core.IAssociative$iface)){
return ((coll$2 as lcoc_core.IAssociative$iface).$_assoc$2(k$3, v$3, ));
}
return ((lcoc_core.IAssociative.extensions(coll$2, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll$2, k$3, v$3, ));
}

// END -assoc

// BEGIN -assoc!
dc.dynamic $_assoc$BANG_(dc.dynamic tcoll$2, dc.dynamic key$3, dc.dynamic val$3, ){
if((tcoll$2 is lcoc_core.ITransientAssociative$iface)){
return ((tcoll$2 as lcoc_core.ITransientAssociative$iface).$_assoc$BANG_$2(key$3, val$3, ));
}
return ((lcoc_core.ITransientAssociative.extensions(tcoll$2, ) as lcoc_core.ITransientAssociative$ext).$_assoc$BANG_$2(tcoll$2, key$3, val$3, ));
}

// END -assoc!

// BEGIN -assoc-n
dc.dynamic $_assoc_n(dc.dynamic coll$2, dc.dynamic n$3, dc.dynamic val$3, ){
if((coll$2 is lcoc_core.IVector$iface)){
return ((coll$2 as lcoc_core.IVector$iface).$_assoc_n$2(n$3, val$3, ));
}
return ((lcoc_core.IVector.extensions(coll$2, ) as lcoc_core.IVector$ext).$_assoc_n$2(coll$2, n$3, val$3, ));
}

// END -assoc-n

// BEGIN -assoc-n!
dc.dynamic $_assoc_n$BANG_(dc.dynamic tcoll$3, dc.dynamic n$3, dc.dynamic val$3, ){
if((tcoll$3 is lcoc_core.ITransientVector$iface)){
return ((tcoll$3 as lcoc_core.ITransientVector$iface).$_assoc_n$BANG_$2(n$3, val$3, ));
}
return ((lcoc_core.ITransientVector.extensions(tcoll$3, ) as lcoc_core.ITransientVector$ext).$_assoc_n$BANG_$2(tcoll$3, n$3, val$3, ));
}

// END -assoc-n!

// BEGIN -chunk-reduce
dc.dynamic $_chunk_reduce(dc.dynamic coll$4, dc.dynamic f$3, dc.dynamic init$3, ){
if((coll$4 is lcoc_core.IChunk$iface)){
return ((coll$4 as lcoc_core.IChunk$iface).$_chunk_reduce$2(f$3, init$3, ));
}
return ((lcoc_core.IChunk.extensions(coll$4, ) as lcoc_core.IChunk$ext).$_chunk_reduce$2(coll$4, f$3, init$3, ));
}

// END -chunk-reduce

// BEGIN -chunked-first
dc.dynamic $_chunked_first(dc.dynamic coll$4, ){
if((coll$4 is lcoc_core.IChunkedSeq$iface)){
return ((coll$4 as lcoc_core.IChunkedSeq$iface).$_chunked_first$0());
}
return ((lcoc_core.IChunkedSeq.extensions(coll$4, ) as lcoc_core.IChunkedSeq$ext).$_chunked_first$0(coll$4, ));
}

// END -chunked-first

// BEGIN -chunked-next
dc.dynamic $_chunked_next(dc.dynamic coll$6, ){
if((coll$6 is lcoc_core.IChunkedSeq$iface)){
return ((coll$6 as lcoc_core.IChunkedSeq$iface).$_chunked_next$0());
}
return ((lcoc_core.IChunkedSeq.extensions(coll$6, ) as lcoc_core.IChunkedSeq$ext).$_chunked_next$0(coll$6, ));
}

// END -chunked-next

// BEGIN -chunked-rest
dc.dynamic $_chunked_rest(dc.dynamic coll$5, ){
if((coll$5 is lcoc_core.IChunkedSeq$iface)){
return ((coll$5 as lcoc_core.IChunkedSeq$iface).$_chunked_rest$0());
}
return ((lcoc_core.IChunkedSeq.extensions(coll$5, ) as lcoc_core.IChunkedSeq$ext).$_chunked_rest$0(coll$5, ));
}

// END -chunked-rest

// BEGIN -compare
dc.dynamic $_compare(dc.dynamic o$2, dc.dynamic other$3, ){
if((o$2 is lcoc_core.IComparable$iface)){
return ((o$2 as lcoc_core.IComparable$iface).$_compare$1(other$3, ));
}
return ((lcoc_core.IComparable.extensions(o$2, ) as lcoc_core.IComparable$ext).$_compare$1(o$2, other$3, ));
}

// END -compare

// BEGIN -conj
dc.dynamic $_conj(dc.dynamic coll$2, dc.dynamic o$3, ){
if((coll$2 is lcoc_core.ICollection$iface)){
return ((coll$2 as lcoc_core.ICollection$iface).$_conj$1(o$3, ));
}
return ((lcoc_core.ICollection.extensions(coll$2, ) as lcoc_core.ICollection$ext).$_conj$1(coll$2, o$3, ));
}

// END -conj

// BEGIN -conj!
dc.dynamic $_conj$BANG_(dc.dynamic tcoll$3, dc.dynamic val$3, ){
if((tcoll$3 is lcoc_core.ITransientCollection$iface)){
return ((tcoll$3 as lcoc_core.ITransientCollection$iface).$_conj$BANG_$1(val$3, ));
}
return ((lcoc_core.ITransientCollection.extensions(tcoll$3, ) as lcoc_core.ITransientCollection$ext).$_conj$BANG_$1(tcoll$3, val$3, ));
}

// END -conj!

// BEGIN -contains-key?
dc.dynamic $_contains_key$QMARK_(dc.dynamic o$6, dc.dynamic k$9, ){
if((o$6 is lcoc_core.ILookup$iface)){
return ((o$6 as lcoc_core.ILookup$iface).$_contains_key$QMARK_$1(k$9, ));
}
return ((lcoc_core.ILookup.extensions(o$6, ) as lcoc_core.ILookup$ext).$_contains_key$QMARK_$1(o$6, k$9, ));
}

// END -contains-key?

// BEGIN -count
dc.dynamic $_count(dc.dynamic coll$2, ){
if((coll$2 is lcoc_core.ICounted$iface)){
return ((coll$2 as lcoc_core.ICounted$iface).$_count$0());
}
return ((lcoc_core.ICounted.extensions(coll$2, ) as lcoc_core.ICounted$ext).$_count$0(coll$2, ));
}

// END -count

// BEGIN -deref
dc.dynamic $_deref(dc.dynamic o$2, ){
if((o$2 is lcoc_core.IDeref$iface)){
return ((o$2 as lcoc_core.IDeref$iface).$_deref$0());
}
return ((lcoc_core.IDeref.extensions(o$2, ) as lcoc_core.IDeref$ext).$_deref$0(o$2, ));
}

// END -deref

// BEGIN -disjoin
dc.dynamic $_disjoin(dc.dynamic coll$2, dc.dynamic v$3, ){
if((coll$2 is lcoc_core.ISet$iface)){
return ((coll$2 as lcoc_core.ISet$iface).$_disjoin$1(v$3, ));
}
return ((lcoc_core.ISet.extensions(coll$2, ) as lcoc_core.ISet$ext).$_disjoin$1(coll$2, v$3, ));
}

// END -disjoin

// BEGIN -disjoin!
dc.dynamic $_disjoin$BANG_(dc.dynamic tcoll$2, dc.dynamic v$3, ){
if((tcoll$2 is lcoc_core.ITransientSet$iface)){
return ((tcoll$2 as lcoc_core.ITransientSet$iface).$_disjoin$BANG_$1(v$3, ));
}
return ((lcoc_core.ITransientSet.extensions(tcoll$2, ) as lcoc_core.ITransientSet$ext).$_disjoin$BANG_$1(tcoll$2, v$3, ));
}

// END -disjoin!

// BEGIN -dissoc
dc.dynamic $_dissoc(dc.dynamic coll$2, dc.dynamic k$3, ){
if((coll$2 is lcoc_core.IMap$iface)){
return ((coll$2 as lcoc_core.IMap$iface).$_dissoc$1(k$3, ));
}
return ((lcoc_core.IMap.extensions(coll$2, ) as lcoc_core.IMap$ext).$_dissoc$1(coll$2, k$3, ));
}

// END -dissoc

// BEGIN -dissoc!
dc.dynamic $_dissoc$BANG_(dc.dynamic tcoll$2, dc.dynamic key$3, ){
if((tcoll$2 is lcoc_core.ITransientMap$iface)){
return ((tcoll$2 as lcoc_core.ITransientMap$iface).$_dissoc$BANG_$1(key$3, ));
}
return ((lcoc_core.ITransientMap.extensions(tcoll$2, ) as lcoc_core.ITransientMap$ext).$_dissoc$BANG_$1(tcoll$2, key$3, ));
}

// END -dissoc!

// BEGIN -drop-first
dc.dynamic $_drop_first(dc.dynamic coll$3, ){
if((coll$3 is lcoc_core.IChunk$iface)){
return ((coll$3 as lcoc_core.IChunk$iface).$_drop_first$0());
}
return ((lcoc_core.IChunk.extensions(coll$3, ) as lcoc_core.IChunk$ext).$_drop_first$0(coll$3, ));
}

// END -drop-first

// BEGIN -empty
dc.dynamic $_empty(dc.dynamic coll$2, ){
if((coll$2 is lcoc_core.IEmptyableCollection$iface)){
return ((coll$2 as lcoc_core.IEmptyableCollection$iface).$_empty$0());
}
return ((lcoc_core.IEmptyableCollection.extensions(coll$2, ) as lcoc_core.IEmptyableCollection$ext).$_empty$0(coll$2, ));
}

// END -empty

// BEGIN -empty-treap-node
dc.dynamic $_empty_treap_node=lcoc_core.TreapNode(0, (dc.List<dc.dynamic>.empty()), );

// END -empty-treap-node

// BEGIN -equiv
dc.dynamic $_equiv(dc.dynamic o$2, dc.dynamic other$3, ){
if((o$2 is lcoc_core.IEquiv$iface)){
return ((o$2 as lcoc_core.IEquiv$iface).$_equiv$1(other$3, ));
}
return ((lcoc_core.IEquiv.extensions(o$2, ) as lcoc_core.IEquiv$ext).$_equiv$1(o$2, other$3, ));
}

// END -equiv

// BEGIN -equiv-map
dc.bool $_equiv_map(dc.dynamic x$1, dc.dynamic y$1, ){
final dc.bool and$7533_$AUTO_$1=lcoc_core.map$QMARK_(y$1, );
late final dc.bool $if_$1;
if(and$7533_$AUTO_$1){
if(lcoc_core.record$QMARK_(y$1, )){
$if_$1=false;
}else{
$if_$1=true;
}
}else{
$if_$1=and$7533_$AUTO_$1;
}
late final dc.dynamic $if_$2;
if($if_$1){
final dc.dynamic coll7742$1=x$1;
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final dc.dynamic coll7742$2=y$1;
late final dc.int cast$2;
if((coll7742$2 is lcoc_core.ICounted$iface)){
cast$2=(((coll7742$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$2=(((lcoc_core.ICounted.extensions(coll7742$2, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$2, )) as dc.int);
}
final dc.bool $1=(cast$1==cast$2);
if($1){
final dc.Object never_equiv$1=dc.Object();
if(((lcoc_core.IKVReduce.satisfies(x$1, )) as dc.bool)){
$if_$2=lcoc_core.reduce_kv((dc.dynamic $UNDERSCORE_$1, dc.dynamic k$1, dc.dynamic v$1, ){
if((lcoc_core.$EQ_.$_invoke$2((lcoc_core.$get_.$_invoke$3(y$1, k$1, never_equiv$1, )), v$1, ))){
return true;
}
return lcoc_core.reduced(false, );
}, true, x$1, );
}else{
$if_$2=lcoc_core.every$QMARK_((dc.dynamic xkv$1, ){
return (lcoc_core.$EQ_.$_invoke$2((lcoc_core.$get_.$_invoke$3(y$1, lcoc_core.first(xkv$1, ), never_equiv$1, )), lcoc_core.second(xkv$1, ), ));
}, x$1, );
}
}else{
$if_$2=null;
}
}else{
$if_$2=null;
}
return lcoc_core.boolean($if_$2, );
}

// END -equiv-map

// BEGIN -equiv-sequential
dc.bool $_equiv_sequential(dc.dynamic x$1, dc.dynamic y$1, ){
final dc.bool or$7573_$AUTO_$1=((lcoc_core.ISequential.satisfies(y$1, )) as dc.bool);
late final dc.bool and$7533_$AUTO_$1;
if(or$7573_$AUTO_$1){
and$7533_$AUTO_$1=or$7573_$AUTO_$1;
}else{
and$7533_$AUTO_$1=(y$1 is dc.List);
}
if(and$7533_$AUTO_$1){
late final dc.bool or$7573_$AUTO_$2;
if(lcoc_core.counted$QMARK_(x$1, )){
or$7573_$AUTO_$2=false;
}else{
or$7573_$AUTO_$2=true;
}
late final dc.bool and$7533_$AUTO_$2;
if(or$7573_$AUTO_$2){
and$7533_$AUTO_$2=or$7573_$AUTO_$2;
}else{
late final dc.bool or$7573_$AUTO_$3;
if(lcoc_core.counted$QMARK_(y$1, )){
or$7573_$AUTO_$3=false;
}else{
or$7573_$AUTO_$3=true;
}
if(or$7573_$AUTO_$3){
and$7533_$AUTO_$2=or$7573_$AUTO_$3;
}else{
final dc.dynamic coll7742$1=x$1;
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final dc.dynamic coll7742$2=y$1;
late final dc.int cast$2;
if((coll7742$2 is lcoc_core.ICounted$iface)){
cast$2=(((coll7742$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$2=(((lcoc_core.ICounted.extensions(coll7742$2, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$2, )) as dc.int);
}
and$7533_$AUTO_$2=(cast$1==cast$2);
}
}
if(and$7533_$AUTO_$2){
final dc.dynamic o7905$1=x$1;
late final dc.dynamic $if_$1;
if((o7905$1 is lcoc_core.IHash$iface)){
$if_$1=((o7905$1 as lcoc_core.IHash$iface).$_hash_realized$QMARK_$0());
}else{
$if_$1=((lcoc_core.IHash.extensions(o7905$1, ) as lcoc_core.IHash$ext).$_hash_realized$QMARK_$0(o7905$1, ));
}
late final dc.bool or$7573_$AUTO_$4;
if((($if_$1!=false)&&($if_$1!=null))){
or$7573_$AUTO_$4=false;
}else{
or$7573_$AUTO_$4=true;
}
late final dc.bool and$7533_$AUTO_$3;
if(or$7573_$AUTO_$4){
and$7533_$AUTO_$3=or$7573_$AUTO_$4;
}else{
final dc.dynamic o7905$2=y$1;
late final dc.dynamic $if_$2;
if((o7905$2 is lcoc_core.IHash$iface)){
$if_$2=((o7905$2 as lcoc_core.IHash$iface).$_hash_realized$QMARK_$0());
}else{
$if_$2=((lcoc_core.IHash.extensions(o7905$2, ) as lcoc_core.IHash$ext).$_hash_realized$QMARK_$0(o7905$2, ));
}
late final dc.bool or$7573_$AUTO_$5;
if((($if_$2!=false)&&($if_$2!=null))){
or$7573_$AUTO_$5=false;
}else{
or$7573_$AUTO_$5=true;
}
if(or$7573_$AUTO_$5){
and$7533_$AUTO_$3=or$7573_$AUTO_$5;
}else{
final dc.dynamic o7900$1=x$1;
late final dc.dynamic $if_$3;
if((o7900$1 is lcoc_core.IHash$iface)){
$if_$3=((o7900$1 as lcoc_core.IHash$iface).$_hash$0());
}else{
$if_$3=((lcoc_core.IHash.extensions(o7900$1, ) as lcoc_core.IHash$ext).$_hash$0(o7900$1, ));
}
final dc.dynamic o7900$2=y$1;
late final dc.dynamic $if_$4;
if((o7900$2 is lcoc_core.IHash$iface)){
$if_$4=((o7900$2 as lcoc_core.IHash$iface).$_hash$0());
}else{
$if_$4=((lcoc_core.IHash.extensions(o7900$2, ) as lcoc_core.IHash$ext).$_hash$0(o7900$2, ));
}
and$7533_$AUTO_$3=($if_$3==$if_$4);
}
}
if(and$7533_$AUTO_$3){
final dc.dynamic o7668$1=x$1;
dc.dynamic xs$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
xs$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
xs$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic o7668$2=y$1;
dc.dynamic ys$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
ys$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
ys$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
do {
if((null==xs$1)){
return (null==ys$1);
}
if((null==ys$1)){
return false;
}
if((lcoc_core.$EQ_.$_invoke$2(lcoc_core.first(xs$1, ), lcoc_core.first(ys$1, ), ))){
xs$1=lcoc_core.next(xs$1, );
ys$1=lcoc_core.next(ys$1, );
continue;
}
return false;
} while(true);
}
return and$7533_$AUTO_$3;
}
return and$7533_$AUTO_$2;
}
return and$7533_$AUTO_$1;
}

// END -equiv-sequential

// BEGIN -ex-data
dc.dynamic $_ex_data(dc.dynamic e$2, ){
if((e$2 is lcoc_core.IExceptionInfo$iface)){
return ((e$2 as lcoc_core.IExceptionInfo$iface).$_ex_data$0());
}
return ((lcoc_core.IExceptionInfo.extensions(e$2, ) as lcoc_core.IExceptionInfo$ext).$_ex_data$0(e$2, ));
}

// END -ex-data

// BEGIN -find
dc.dynamic $_find(dc.dynamic coll$2, dc.dynamic k$3, ){
if((coll$2 is lcoc_core.IFind$iface)){
return ((coll$2 as lcoc_core.IFind$iface).$_find$1(k$3, ));
}
return ((lcoc_core.IFind.extensions(coll$2, ) as lcoc_core.IFind$ext).$_find$1(coll$2, k$3, ));
}

// END -find

// BEGIN -first
dc.dynamic $_first(dc.dynamic coll$4, ){
if((coll$4 is lcoc_core.ISeq$iface)){
return ((coll$4 as lcoc_core.ISeq$iface).$_first$0());
}
return ((lcoc_core.ISeq.extensions(coll$4, ) as lcoc_core.ISeq$ext).$_first$0(coll$4, ));
}

// END -first

// BEGIN -hash
dc.dynamic $_hash(dc.dynamic o$3, ){
if((o$3 is lcoc_core.IHash$iface)){
return ((o$3 as lcoc_core.IHash$iface).$_hash$0());
}
return ((lcoc_core.IHash.extensions(o$3, ) as lcoc_core.IHash$ext).$_hash$0(o$3, ));
}

// END -hash

// BEGIN -hash-realized?
dc.dynamic $_hash_realized$QMARK_(dc.dynamic o$4, ){
if((o$4 is lcoc_core.IHash$iface)){
return ((o$4 as lcoc_core.IHash$iface).$_hash_realized$QMARK_$0());
}
return ((lcoc_core.IHash.extensions(o$4, ) as lcoc_core.IHash$ext).$_hash_realized$QMARK_$0(o$4, ));
}

// END -hash-realized?

// BEGIN -hash-string-cache
dc.dynamic $_hash_string_cache=lcoc_core.HashCache(dc.Map<dc.dynamic, dc.int>(), dc.Map<dc.dynamic, dc.int>(), );

// END -hash-string-cache

// BEGIN -invoke
lcoc_core.IFn$iface $_invoke=lcoc_core.$_invokeifn18695hm$1(null, );

// END -invoke

// BEGIN -invoke-more
dc.dynamic $_invoke_more(dc.dynamic $this_$23, dc.dynamic a$30, dc.dynamic b$27, dc.dynamic c$24, dc.dynamic d$21, dc.dynamic e$18, dc.dynamic f$16, dc.dynamic g$12, dc.dynamic h$9, dc.dynamic i$6, dc.dynamic rest$3, ){
if(($this_$23 is lcoc_core.IFn$iface)){
return (($this_$23 as lcoc_core.IFn$iface).$_invoke_more$10(a$30, b$27, c$24, d$21, e$18, f$16, g$12, h$9, i$6, rest$3, ));
}
return ((lcoc_core.IFn.extensions($this_$23, ) as lcoc_core.IFn$ext).$_invoke_more$10($this_$23, a$30, b$27, c$24, d$21, e$18, f$16, g$12, h$9, i$6, rest$3, ));
}

// END -invoke-more

// BEGIN -kv-reduce
dc.dynamic $_kv_reduce(dc.dynamic coll$2, dc.dynamic f$3, dc.dynamic init$3, ){
if((coll$2 is lcoc_core.IKVReduce$iface)){
return ((coll$2 as lcoc_core.IKVReduce$iface).$_kv_reduce$2(f$3, init$3, ));
}
return ((lcoc_core.IKVReduce.extensions(coll$2, ) as lcoc_core.IKVReduce$ext).$_kv_reduce$2(coll$2, f$3, init$3, ));
}

// END -kv-reduce

// BEGIN -list-lit
lcoc_core.PersistentList $_list_lit(dc.dynamic xs$1, ){
lcoc_core.PersistentList l$1=lcoc_core.$_EMPTY_LIST;
dc.int i$1=(xs$1 as dc.List).length;
do {
final dc.int i$2=(i$1-1);
if((0>i$2)){
return l$1;
}
final lcoc_core.PersistentList coll7707$1=l$1;
final dc.dynamic o7708$1=((xs$1 as dc.List)[i$2]);
if((coll7707$1 is lcoc_core.ICollection$iface)){
l$1=((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}else{
l$1=((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
}
i$1=i$2;
continue;
} while(true);
}

// END -list-lit

// BEGIN -lookup
lcoc_core.IFn$iface $_lookup=lcoc_core.$_lookupifn18695hm$1(null, );

// END -lookup

// BEGIN -map-lit
lcoc_core.PersistentHashMap $_map_lit(dc.dynamic kvs$1, ){
if((null==kvs$1)){
return lcoc_core.$_EMPTY_MAP;
}
final dc.List kvs$2=(kvs$1 as dc.List);
final lcoc_core.PersistentHashMap coll7928$1=lcoc_core.$_EMPTY_MAP;
lcoc_core.TransientHashMap tm$1;
if((coll7928$1 is lcoc_core.IEditableCollection$iface)){
tm$1=(((coll7928$1 as lcoc_core.IEditableCollection$iface).$_as_transient$0()) as lcoc_core.TransientHashMap);
}else{
tm$1=(((lcoc_core.IEditableCollection.extensions(coll7928$1, ) as lcoc_core.IEditableCollection$ext).$_as_transient$0(coll7928$1, )) as lcoc_core.TransientHashMap);
}
dc.int i$1=0;
do {
if((i$1<kvs$2.length)){
final lcoc_core.TransientHashMap tcoll7800$1=tm$1;
final dc.dynamic key7801$1=(kvs$2[i$1]);
final dc.dynamic val7802$1=(kvs$2[(i$1+1)]);
if((tcoll7800$1 is lcoc_core.ITransientAssociative$iface)){
tm$1=((tcoll7800$1 as lcoc_core.ITransientAssociative$iface).$_assoc$BANG_$2(key7801$1, val7802$1, ));
}else{
tm$1=((lcoc_core.ITransientAssociative.extensions(tcoll7800$1, ) as lcoc_core.ITransientAssociative$ext).$_assoc$BANG_$2(tcoll7800$1, key7801$1, val7802$1, ));
}
i$1=(i$1+2);
continue;
}
final lcoc_core.TransientHashMap tcoll7939$1=tm$1;
if((tcoll7939$1 is lcoc_core.ITransientCollection$iface)){
return (((tcoll7939$1 as lcoc_core.ITransientCollection$iface).$_persistent$BANG_$0()) as lcoc_core.PersistentHashMap);
}
return (((lcoc_core.ITransientCollection.extensions(tcoll7939$1, ) as lcoc_core.ITransientCollection$ext).$_persistent$BANG_$0(tcoll7939$1, )) as lcoc_core.PersistentHashMap);
} while(true);
}

// END -map-lit

// BEGIN -meta
dc.dynamic $_meta(dc.dynamic o$2, ){
if((o$2 is lcoc_core.IMeta$iface)){
return ((o$2 as lcoc_core.IMeta$iface).$_meta$0());
}
return ((lcoc_core.IMeta.extensions(o$2, ) as lcoc_core.IMeta$ext).$_meta$0(o$2, ));
}

// END -meta

// BEGIN -name
dc.dynamic $_name(dc.dynamic x$5, ){
if((x$5 is lcoc_core.INamed$iface)){
return ((x$5 as lcoc_core.INamed$iface).$_name$0());
}
return ((lcoc_core.INamed.extensions(x$5, ) as lcoc_core.INamed$ext).$_name$0(x$5, ));
}

// END -name

// BEGIN -namespace
dc.dynamic $_namespace(dc.dynamic x$6, ){
if((x$6 is lcoc_core.INamed$iface)){
return ((x$6 as lcoc_core.INamed$iface).$_namespace$0());
}
return ((lcoc_core.INamed.extensions(x$6, ) as lcoc_core.INamed$ext).$_namespace$0(x$6, ));
}

// END -namespace

// BEGIN -next
dc.dynamic $_next(dc.dynamic coll$6, ){
if((coll$6 is lcoc_core.ISeq$iface)){
return ((coll$6 as lcoc_core.ISeq$iface).$_next$0());
}
return ((lcoc_core.ISeq.extensions(coll$6, ) as lcoc_core.ISeq$ext).$_next$0(coll$6, ));
}

// END -next

// BEGIN -notify-watches
dc.dynamic $_notify_watches(dc.dynamic $this_$4, dc.dynamic oldval$3, dc.dynamic newval$3, ){
if(($this_$4 is lcoc_core.IWatchable$iface)){
return (($this_$4 as lcoc_core.IWatchable$iface).$_notify_watches$2(oldval$3, newval$3, ));
}
return ((lcoc_core.IWatchable.extensions($this_$4, ) as lcoc_core.IWatchable$ext).$_notify_watches$2($this_$4, oldval$3, newval$3, ));
}

// END -notify-watches

// BEGIN -nth
lcoc_core.IFn$iface $_nth=lcoc_core.$_nthifn18695hm$1(null, );

// END -nth

// BEGIN -peek
dc.dynamic $_peek(dc.dynamic coll$3, ){
if((coll$3 is lcoc_core.IStack$iface)){
return ((coll$3 as lcoc_core.IStack$iface).$_peek$0());
}
return ((lcoc_core.IStack.extensions(coll$3, ) as lcoc_core.IStack$ext).$_peek$0(coll$3, ));
}

// END -peek

// BEGIN -persistent!
dc.dynamic $_persistent$BANG_(dc.dynamic tcoll$4, ){
if((tcoll$4 is lcoc_core.ITransientCollection$iface)){
return ((tcoll$4 as lcoc_core.ITransientCollection$iface).$_persistent$BANG_$0());
}
return ((lcoc_core.ITransientCollection.extensions(tcoll$4, ) as lcoc_core.ITransientCollection$ext).$_persistent$BANG_$0(tcoll$4, ));
}

// END -persistent!

// BEGIN -pop
dc.dynamic $_pop(dc.dynamic coll$4, ){
if((coll$4 is lcoc_core.IStack$iface)){
return ((coll$4 as lcoc_core.IStack$iface).$_pop$0());
}
return ((lcoc_core.IStack.extensions(coll$4, ) as lcoc_core.IStack$ext).$_pop$0(coll$4, ));
}

// END -pop

// BEGIN -pop!
dc.dynamic $_pop$BANG_(dc.dynamic tcoll$4, ){
if((tcoll$4 is lcoc_core.ITransientVector$iface)){
return ((tcoll$4 as lcoc_core.ITransientVector$iface).$_pop$BANG_$0());
}
return ((lcoc_core.ITransientVector.extensions(tcoll$4, ) as lcoc_core.ITransientVector$ext).$_pop$BANG_$0(tcoll$4, ));
}

// END -pop!

// BEGIN -print
dc.dynamic $_print(dc.dynamic o$2, dc.dynamic string_sink$3, ){
if((o$2 is lcoc_core.IPrint$iface)){
return ((o$2 as lcoc_core.IPrint$iface).$_print$1(string_sink$3, ));
}
return ((lcoc_core.IPrint.extensions(o$2, ) as lcoc_core.IPrint$ext).$_print$1(o$2, string_sink$3, ));
}

// END -print

// BEGIN -realized?
dc.dynamic $_realized$QMARK_(dc.dynamic x$4, ){
if((x$4 is lcoc_core.IPending$iface)){
return ((x$4 as lcoc_core.IPending$iface).$_realized$QMARK_$0());
}
return ((lcoc_core.IPending.extensions(x$4, ) as lcoc_core.IPending$ext).$_realized$QMARK_$0(x$4, ));
}

// END -realized?

// BEGIN -reduce
lcoc_core.IFn$iface $_reduce=lcoc_core.$_reduceifn18695hm$1(null, );

// END -reduce

// BEGIN -remove-watch
dc.dynamic $_remove_watch(dc.dynamic $this_$6, dc.dynamic key$6, ){
if(($this_$6 is lcoc_core.IWatchable$iface)){
return (($this_$6 as lcoc_core.IWatchable$iface).$_remove_watch$1(key$6, ));
}
return ((lcoc_core.IWatchable.extensions($this_$6, ) as lcoc_core.IWatchable$ext).$_remove_watch$1($this_$6, key$6, ));
}

// END -remove-watch

// BEGIN -reset!
dc.dynamic $_reset$BANG_(dc.dynamic o$2, dc.dynamic new_value$3, ){
if((o$2 is lcoc_core.IReset$iface)){
return ((o$2 as lcoc_core.IReset$iface).$_reset$BANG_$1(new_value$3, ));
}
return ((lcoc_core.IReset.extensions(o$2, ) as lcoc_core.IReset$ext).$_reset$BANG_$1(o$2, new_value$3, ));
}

// END -reset!

// BEGIN -rest
dc.dynamic $_rest(dc.dynamic coll$5, ){
if((coll$5 is lcoc_core.ISeq$iface)){
return ((coll$5 as lcoc_core.ISeq$iface).$_rest$0());
}
return ((lcoc_core.ISeq.extensions(coll$5, ) as lcoc_core.ISeq$ext).$_rest$0(coll$5, ));
}

// END -rest

// BEGIN -rseq
dc.dynamic $_rseq(dc.dynamic coll$2, ){
if((coll$2 is lcoc_core.IReversible$iface)){
return ((coll$2 as lcoc_core.IReversible$iface).$_rseq$0());
}
return ((lcoc_core.IReversible.extensions(coll$2, ) as lcoc_core.IReversible$ext).$_rseq$0(coll$2, ));
}

// END -rseq

// BEGIN -seq
dc.dynamic $_seq(dc.dynamic o$2, ){
if((o$2 is lcoc_core.ISeqable$iface)){
return ((o$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o$2, ));
}

// END -seq

// BEGIN -sorted-rseq
dc.dynamic $_sorted_rseq(dc.dynamic coll$4, dc.dynamic from$6, dc.dynamic to$6, dc.dynamic flags$6, ){
if((coll$4 is lcoc_core.ISorted$iface)){
return ((coll$4 as lcoc_core.ISorted$iface).$_sorted_rseq$3(from$6, to$6, flags$6, ));
}
return ((lcoc_core.ISorted.extensions(coll$4, ) as lcoc_core.ISorted$ext).$_sorted_rseq$3(coll$4, from$6, to$6, flags$6, ));
}

// END -sorted-rseq

// BEGIN -sorted-seq
dc.dynamic $_sorted_seq(dc.dynamic coll$3, dc.dynamic from$5, dc.dynamic to$5, dc.dynamic flags$5, ){
if((coll$3 is lcoc_core.ISorted$iface)){
return ((coll$3 as lcoc_core.ISorted$iface).$_sorted_seq$3(from$5, to$5, flags$5, ));
}
return ((lcoc_core.ISorted.extensions(coll$3, ) as lcoc_core.ISorted$ext).$_sorted_seq$3(coll$3, from$5, to$5, flags$5, ));
}

// END -sorted-seq

// BEGIN -subvec
dc.dynamic $_subvec(dc.dynamic vector$2, dc.dynamic start$3, dc.dynamic end$3, ){
if((vector$2 is lcoc_core.ISubvecable$iface)){
return ((vector$2 as lcoc_core.ISubvecable$iface).$_subvec$2(start$3, end$3, ));
}
return ((lcoc_core.ISubvecable.extensions(vector$2, ) as lcoc_core.ISubvecable$ext).$_subvec$2(vector$2, start$3, end$3, ));
}

// END -subvec

// BEGIN -swap!
lcoc_core.IFn$iface $_swap$BANG_=lcoc_core.$_swap$BANG_ifn18695hm$1(null, );

// END -swap!

// BEGIN -vec-owning
lcoc_core.PersistentVector $_vec_owning(dc.dynamic xs$1, ){
assert((){
final dc.List coll7742$1=(xs$1 as dc.List);
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final dc.bool $1=(cast$1<=32);
late final dc.bool $if_$1;
if($1){
$if_$1=true;
}else{
$if_$1=false;
}
return $if_$1;
}(), (){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(3, (lcoc_core.symbol.$_invoke$2(null, "<=", )), ));
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "count", )), ));
fl$2[1]=(lcoc_core.symbol.$_invoke$2(null, "xs", ));
final lcoc_core.PersistentList $3=lcoc_core.$_list_lit(fl$2, );
final dc.List<dc.dynamic> fl$3=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$3[1]=6640;
fl$3[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$3[3]=15;
final lcoc_core.PersistentHashMap $4=lcoc_core.$_map_lit(fl$3, );
final dc.dynamic $5=lcoc_core.with_meta($3, $4, );
fl$1[1]=$5;
fl$1[2]=32;
final lcoc_core.PersistentList $2=lcoc_core.$_list_lit(fl$1, );
final dc.List<dc.dynamic> fl$4=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$4[1]=6640;
fl$4[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$4[3]=11;
final lcoc_core.PersistentHashMap $6=lcoc_core.$_map_lit(fl$4, );
final dc.dynamic $7=lcoc_core.with_meta($2, $6, );
final dc.String $8=(lcoc_core.pr_str.$_invoke$1($7, ));
final dc.String $9=(lcoc_core.str.$_invoke$2("Assert failed: ", $8, ));
return $9;
}());
final dc.List coll7742$2=(xs$1 as dc.List);
late final dc.int cast$2;
if((coll7742$2 is lcoc_core.ICounted$iface)){
cast$2=(((coll7742$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$2=(((lcoc_core.ICounted.extensions(coll7742$2, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$2, )) as dc.int);
}
return lcoc_core.PersistentVector(null, cast$2, 5, lcoc_core.$_EMPTY_VECTOR.root, (xs$1 as dc.List), -1, );
}

// END -vec-owning

// BEGIN -vreset!
dc.dynamic $_vreset$BANG_(dc.dynamic o$2, dc.dynamic new_value$3, ){
if((o$2 is lcoc_core.IVolatile$iface)){
return ((o$2 as lcoc_core.IVolatile$iface).$_vreset$BANG_$1(new_value$3, ));
}
return ((lcoc_core.IVolatile.extensions(o$2, ) as lcoc_core.IVolatile$ext).$_vreset$BANG_$1(o$2, new_value$3, ));
}

// END -vreset!

// BEGIN -with-meta
dc.dynamic $_with_meta(dc.dynamic o$2, dc.dynamic meta$3, ){
if((o$2 is lcoc_core.IWithMeta$iface)){
return ((o$2 as lcoc_core.IWithMeta$iface).$_with_meta$1(meta$3, ));
}
return ((lcoc_core.IWithMeta.extensions(o$2, ) as lcoc_core.IWithMeta$ext).$_with_meta$1(o$2, meta$3, ));
}

// END -with-meta

// BEGIN /
lcoc_core.IFn$iface $SLASH_=lcoc_core.$SLASH_ifn18695hm$1(null, );

// END /

// BEGIN <
lcoc_core.IFn$iface $LT_=lcoc_core.$LT_ifn18695hm$1(null, );

// END <

// BEGIN <=
lcoc_core.IFn$iface $LT_$EQ_=lcoc_core.$LT_$EQ_ifn18695hm$1(null, );

// END <=

// BEGIN =
lcoc_core.IFn$iface $EQ_=lcoc_core.$EQ_ifn18695hm$1(null, );

// END =

// BEGIN ==
lcoc_core.IFn$iface $EQ_$EQ_=lcoc_core.$EQ_$EQ_ifn18695hm$1(null, );

// END ==

// BEGIN >
lcoc_core.IFn$iface $GT_=lcoc_core.$GT_ifn18695hm$1(null, );

// END >

// BEGIN >0?
dc.dynamic $GT_0$QMARK_(dc.dynamic n$1, ){
return (0<(n$1 as dc.num));
}

// END >0?

// BEGIN >1?
dc.dynamic $GT_1$QMARK_(dc.dynamic n$1, ){
return (1<(n$1 as dc.num));
}

// END >1?

// BEGIN >=
lcoc_core.IFn$iface $GT_$EQ_=lcoc_core.$GT_$EQ_ifn18695hm$1(null, );

// END >=

// BEGIN ArrayChunk
class ArrayChunk extends dc.Object implements lcoc_core.ICounted$iface, lcoc_core.IIndexed$iface, lcoc_core.IChunk$iface {
final dc.List arr;
final dc.int off;
final dc.int end;

const ArrayChunk(this.arr, this.off, this.end, ):super();

dc.dynamic $_count$0(){
return (end-off);
}

dc.dynamic $_nth$1(dc.dynamic i$1, ){
return (arr[(off+(i$1 as dc.int))]);
}

dc.dynamic $_nth$2(dc.dynamic i$2, dc.dynamic not_found$1, ){
final dc.int i$3=(i$2 as dc.int);
if((i$3<0)){
return not_found$1;
}
if((i$3<(end-off))){
return (arr[(off+i$3)]);
}
return not_found$1;
}

dc.dynamic $_drop_first$0(){
if((off==end)){
throw dc.ArgumentError("-drop-first of empty chunk", );
}
return lcoc_core.ArrayChunk(arr, (1+off), end, );
}

dc.dynamic $_chunk_reduce$2(dc.dynamic f$1, dc.dynamic start$1, ){
dc.dynamic acc$1=start$1;
dc.int idx$1=off;
do {
if((idx$1<end)){
final dc.dynamic arg$1=(arr[idx$1]);
late final dc.dynamic val$1;
if((f$1 is dc.Function)){
val$1=(f$1 as dc.Function)(acc$1, arg$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
val$1=((f$1 as lcoc_core.IFn$iface).$_invoke$2(acc$1, arg$1, ));
}else{
val$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, acc$1, arg$1, ));
}
if(lcoc_core.reduced$QMARK_(val$1, )){
return val$1;
}
acc$1=val$1;
idx$1=(1+idx$1);
continue;
}
return acc$1;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ArrayChunk

// BEGIN Atom
class Atom extends dc.Object implements lcoc_core.IAtom$iface, lcoc_core.IEquiv$iface, lcoc_core.IDeref$iface, lcoc_core.IMeta$iface, lcoc_core.IWatchable$iface, lcoc_core.IHash$iface, lcoc_core.ISwap$iface, lcoc_core.IReset$iface {
var state;
var meta;
var validator;
var watches;

Atom(this.state, this.meta, this.validator, this.watches, ):super();

dc.dynamic $_equiv$1(dc.dynamic other$1, ){
return dc.identical((this as dc.Object?), other$1, );
}

dc.dynamic $_deref$0(){
return state;
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_notify_watches$2(dc.dynamic oldval$1, dc.dynamic newval$1, ){
return lcoc_core.reduce_kv((dc.dynamic $UNDERSCORE_$1, dc.dynamic k$1, dc.dynamic f$1, ){
if((f$1 is dc.Function)){
(f$1 as dc.Function)(lcoc_core.key, this, oldval$1, newval$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
(f$1 as lcoc_core.IFn$iface).$_invoke$4(lcoc_core.key, this, oldval$1, newval$1, );
}else{
lcoc_core.IFn.extensions(f$1, ).$_invoke$4(f$1, lcoc_core.key, this, oldval$1, newval$1, );
}
return null;
}, null, watches, );
}

dc.dynamic $_add_watch$2(dc.dynamic key$1, dc.dynamic f$2, ){
final dc.dynamic coll7790$1=watches;
final dc.dynamic k7791$1=key$1;
final dc.dynamic v7792$1=f$2;
if((coll7790$1 is lcoc_core.IAssociative$iface)){
watches=((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, ));
}else{
watches=((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, ));
}
return this;
}

dc.dynamic $_remove_watch$1(dc.dynamic key$2, ){
watches=(lcoc_core.dissoc.$_invoke$2(watches, key$2, ));
return this;
}

dc.dynamic $_hash$0(){
return this.hashCode;
}

dc.dynamic $_swap$BANG_$1(dc.dynamic f$3, ){
late final dc.dynamic $if_$1;
if((f$3 is dc.Function)){
$if_$1=(f$3 as dc.Function)(state, );
}else if((f$3 is lcoc_core.IFn$iface)){
$if_$1=((f$3 as lcoc_core.IFn$iface).$_invoke$1(state, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, state, ));
}
return lcoc_core.set_and_validate_atom_state$BANG_(this, $if_$1, );
}

dc.dynamic $_swap$BANG_$2(dc.dynamic f$4, dc.dynamic a$1, ){
late final dc.dynamic $if_$2;
if((f$4 is dc.Function)){
$if_$2=(f$4 as dc.Function)(state, a$1, );
}else if((f$4 is lcoc_core.IFn$iface)){
$if_$2=((f$4 as lcoc_core.IFn$iface).$_invoke$2(state, a$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(f$4, ).$_invoke$2(f$4, state, a$1, ));
}
return lcoc_core.set_and_validate_atom_state$BANG_(this, $if_$2, );
}

dc.dynamic $_swap$BANG_$3(dc.dynamic f$5, dc.dynamic a$2, dc.dynamic b$1, ){
late final dc.dynamic $if_$3;
if((f$5 is dc.Function)){
$if_$3=(f$5 as dc.Function)(state, a$2, b$1, );
}else if((f$5 is lcoc_core.IFn$iface)){
$if_$3=((f$5 as lcoc_core.IFn$iface).$_invoke$3(state, a$2, b$1, ));
}else{
$if_$3=(lcoc_core.IFn.extensions(f$5, ).$_invoke$3(f$5, state, a$2, b$1, ));
}
return lcoc_core.set_and_validate_atom_state$BANG_(this, $if_$3, );
}

dc.dynamic $_swap$BANG_$4(dc.dynamic f$6, dc.dynamic a$3, dc.dynamic b$2, dc.dynamic xs$1, ){
return lcoc_core.set_and_validate_atom_state$BANG_(this, (lcoc_core.apply.$_invoke$5(f$6, state, a$3, b$2, xs$1, )), );
}

dc.dynamic $_reset$BANG_$1(dc.dynamic new_value$1, ){
return lcoc_core.set_and_validate_atom_state$BANG_(this, new_value$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Atom

// BEGIN BitmapIterator
class BitmapIterator<E> extends dc.Object implements dc.Iterator<E> {
lcoc_core.BitmapNode node;
dc.int idx;
dc.int mask;
dc.int kvs;
dc.int depth;
final dc.List<dc.int> masks;
final dc.List<lcoc_core.BitmapNode> nodes;
final mk_value;

BitmapIterator(this.node, this.idx, this.mask, this.kvs, this.depth, this.masks, this.nodes, this.mk_value, ):super();

E get current{
final dc.List arr$1=node.arr;
return mk_value((arr$1[(idx-2)]), (arr$1[(idx-1)]), );
}

dc.bool moveNext(){
do {
late final dc.bool or$7573_$AUTO_$1;
do {
if((depth<7)){
late final dc.bool $if_$1;
if((0==mask)){
$if_$1=false;
}else{
$if_$1=true;
}
if($if_$1){
final dc.int bit$1=(mask&((-mask)));
mask=(mask^bit$1);
if((0==(kvs&bit$1))){
final lcoc_core.BitmapNode node$PRIME_$1=((node.arr[idx]) as lcoc_core.BitmapNode);
final dc.int hi$1=node$PRIME_$1.bitmap_hi;
final dc.int lo$1=node$PRIME_$1.bitmap_lo;
final lcoc_core.BitmapNode v$8151_$AUTO_$1=node;
nodes[depth]=v$8151_$AUTO_$1;
final dc.int v$8151_$AUTO_$2=mask;
masks[depth]=v$8151_$AUTO_$2;
node=node$PRIME_$1;
idx=0;
mask=(hi$1|lo$1);
kvs=(hi$1&lo$1);
depth=(1+depth);
continue;
}else{
idx=(2+idx);
or$7573_$AUTO_$1=true;
}
}else{
or$7573_$AUTO_$1=false;
}
}else if((idx<(2*node.cnt))){
idx=(2+idx);
or$7573_$AUTO_$1=true;
}else{
or$7573_$AUTO_$1=false;
}
break;
} while(true);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
if((0<depth)){
depth=(depth-1);
final lcoc_core.BitmapNode node$PRIME_$2=(nodes[depth]);
final dc.int hi$2=node$PRIME_$2.bitmap_hi;
final dc.int lo$2=node$PRIME_$2.bitmap_lo;
node=node$PRIME_$2;
mask=(masks[depth]);
idx=lcoc_core.u32x2_bit_count((hi$2&(~mask)), (lo$2&(~mask)), );
kvs=(hi$2&lo$2);
continue;
}
return false;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END BitmapIterator

// BEGIN BitmapNode
class BitmapNode extends dc.Object {
dc.int cnt;
dc.int bitmap_hi;
dc.int bitmap_lo;
dc.List arr;

BitmapNode(this.cnt, this.bitmap_hi, this.bitmap_lo, this.arr, ):super();

dc.dynamic inode_lookup(dc.dynamic k$1, dc.dynamic not_found$1, ){
final dc.dynamic o7900$1=k$1;
late final dc.int h$1;
if((o7900$1 is lcoc_core.IHash$iface)){
h$1=(((o7900$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
h$1=(((lcoc_core.IHash.extensions(o7900$1, ) as lcoc_core.IHash$ext).$_hash$0(o7900$1, )) as dc.int);
}
lcoc_core.BitmapNode node$1=this;
dc.int shift$1=0;
do {
if((shift$1<32)){
final dc.int bitmap_hi$1=node$1.bitmap_hi;
final dc.int bitmap_lo$1=node$1.bitmap_lo;
final dc.int n$1=((h$1>>(31&shift$1))&31);
final dc.int bit$1=(4294967295&(1<<(31&n$1)));
final dc.int mask$1=(bit$1-1);
final dc.int idx$1=lcoc_core.u32x2_bit_count((mask$1&bitmap_hi$1), (mask$1&bitmap_lo$1), );
final dc.int hi$1=(bitmap_hi$1&bit$1);
final dc.int lo$1=(bitmap_lo$1&bit$1);
if((0==(hi$1|lo$1))){
return not_found$1;
}
if((0==(hi$1&lo$1))){
node$1=(node$1.arr[idx$1]);
shift$1=(5+shift$1);
continue;
}
final dc.List arr$1=node$1.arr;
final dc.dynamic k$PRIME_$1=(arr$1[idx$1]);
if((lcoc_core.$EQ_.$_invoke$2(k$PRIME_$1, k$1, ))){
return (arr$1[(1+idx$1)]);
}
return not_found$1;
}
final dc.int n$2=(2*cnt);
final dc.List arr$2=node$1.arr;
dc.int i$1=0;
do {
if((i$1==n$2)){
return not_found$1;
}
if((lcoc_core.$EQ_.$_invoke$2((arr$2[i$1]), k$1, ))){
return (arr$2[(1+i$1)]);
}
i$1=(2+i$1);
continue;
} while(true);
break;
} while(true);
}

dc.dynamic inode_without(dc.int shift$2, dc.int h$2, dc.dynamic k$2, ){
if((shift$2<32)){
final dc.int n$3=((h$2>>(31&shift$2))&31);
final dc.int bit$2=(4294967295&(1<<(31&n$3)));
final dc.int mask$2=(bit$2-1);
final dc.int idx$2=lcoc_core.u32x2_bit_count((mask$2&bitmap_hi), (mask$2&bitmap_lo), );
final dc.int hi$2=(bitmap_hi&bit$2);
final dc.int lo$2=(bitmap_lo&bit$2);
if((0==(hi$2|lo$2))){
return this;
}
if((0==(hi$2&lo$2))){
final lcoc_core.BitmapNode child$1=((arr[idx$2]) as lcoc_core.BitmapNode);
final lcoc_core.BitmapNode new_child$1=((child$1.inode_without((shift$2+5), h$2, k$2, )) as lcoc_core.BitmapNode);
if(dc.identical((child$1 as dc.Object?), (new_child$1 as dc.Object?), )){
return this;
}
final dc.bool and$7533_$AUTO_$1=(1==new_child$1.cnt);
late final dc.bool $if_$1;
if(and$7533_$AUTO_$1){
$if_$1=(0==(new_child$1.bitmap_hi^new_child$1.bitmap_lo));
}else{
$if_$1=and$7533_$AUTO_$1;
}
if($if_$1){
final dc.dynamic k$3=(new_child$1.arr[0]);
final dc.dynamic v$1=(new_child$1.arr[1]);
final dc.int size$1=(1+lcoc_core.u32x2_bit_count(bitmap_hi, bitmap_lo, ));
final dc.List<dc.dynamic> new_arr$1=(dc.List<dc.dynamic>.filled(size$1, v$1, ));
final dc.int n$8310_$AUTO_$1=idx$2;
dc.int i$2=0;
do {
if((i$2<n$8310_$AUTO_$1)){
final dc.dynamic v$8151_$AUTO_$1=(arr[i$2]);
new_arr$1[i$2]=v$8151_$AUTO_$1;
i$2=(1+i$2);
continue;
}else{
}
break;
} while(true);
final dc.dynamic v$8151_$AUTO_$2=k$3;
new_arr$1[idx$2]=v$8151_$AUTO_$2;
dc.int j$1=(1+idx$2);
dc.int i$3=(1+j$1);
do {
if((i$3<size$1)){
final dc.dynamic v$8151_$AUTO_$3=(arr[j$1]);
new_arr$1[i$3]=v$8151_$AUTO_$3;
j$1=(1+j$1);
i$3=(1+i$3);
continue;
}else{
}
break;
} while(true);
return lcoc_core.BitmapNode((cnt-1), (bitmap_hi|bit$2), (bitmap_lo|bit$2), new_arr$1, );
}
final dc.int arg$1=(cnt-1);
final dc.List<dc.dynamic> G$8966_$1=(dc.List.from(this.arr, growable: false, ));
final lcoc_core.BitmapNode v$8151_$AUTO_$4=new_child$1;
G$8966_$1[idx$2]=v$8151_$AUTO_$4;
return lcoc_core.BitmapNode(arg$1, bitmap_hi, bitmap_lo, G$8966_$1, );
}
late final dc.bool $if_$2;
if((lcoc_core.$EQ_.$_invoke$2(k$2, (arr[idx$2]), ))){
$if_$2=false;
}else{
$if_$2=true;
}
if($if_$2){
return this;
}
final dc.int size$2=(lcoc_core.u32x2_bit_count(bitmap_hi, bitmap_lo, )-2);
final dc.List<dc.dynamic> new_arr$2=(dc.List<dc.dynamic>.filled(size$2, null, ));
final dc.int n$8310_$AUTO_$2=idx$2;
dc.int i$4=0;
do {
if((i$4<n$8310_$AUTO_$2)){
final dc.dynamic v$8151_$AUTO_$5=(arr[i$4]);
new_arr$2[i$4]=v$8151_$AUTO_$5;
i$4=(1+i$4);
continue;
}else{
}
break;
} while(true);
dc.int i$5=idx$2;
dc.int j$2=(2+idx$2);
do {
if((i$5<size$2)){
final dc.dynamic v$8151_$AUTO_$6=(arr[j$2]);
new_arr$2[i$5]=v$8151_$AUTO_$6;
i$5=(1+i$5);
j$2=(1+j$2);
continue;
}else{
}
break;
} while(true);
return lcoc_core.BitmapNode((cnt-1), (bitmap_hi^bit$2), (bitmap_lo^bit$2), new_arr$2, );
}
final dc.int n$4=(2*cnt);
dc.int i$6=0;
do {
if((i$6==n$4)){
return this;
}
if((lcoc_core.$EQ_.$_invoke$2((arr[i$6]), k$2, ))){
final dc.int n_2$1=(n$4-2);
final dc.List new_arr$3=lcoc_core.ashrink(arr, n_2$1, );
if((i$6==n_2$1)){
}else{
final dc.dynamic v$8151_$AUTO_$7=(arr[n_2$1]);
new_arr$3[i$6]=v$8151_$AUTO_$7;
final dc.dynamic v$8151_$AUTO_$8=(arr[(1+n_2$1)]);
new_arr$3[(1+i$6)]=v$8151_$AUTO_$8;
}
return lcoc_core.BitmapNode((cnt-1), 0, 0, new_arr$3, );
}
i$6=(2+i$6);
continue;
} while(true);
}

dc.dynamic inode_assoc(dc.int shift$3, dc.int h$3, dc.dynamic k$4, dc.dynamic v$2, ){
if((shift$3<32)){
final dc.int n$5=((h$3>>(31&shift$3))&31);
final dc.int bit$3=(4294967295&(1<<(31&n$5)));
final dc.int mask$3=(bit$3-1);
final dc.int idx$3=lcoc_core.u32x2_bit_count((mask$3&bitmap_hi), (mask$3&bitmap_lo), );
final dc.int hi$3=(bitmap_hi&bit$3);
final dc.int lo$3=(bitmap_lo&bit$3);
if((0==(hi$3|lo$3))){
final dc.int size$3=(2+lcoc_core.u32x2_bit_count(bitmap_hi, bitmap_lo, ));
final dc.List<dc.dynamic> new_arr$4=(dc.List<dc.dynamic>.filled(size$3, v$2, ));
final dc.int n$8310_$AUTO_$3=idx$3;
dc.int i$7=0;
do {
if((i$7<n$8310_$AUTO_$3)){
final dc.dynamic v$8151_$AUTO_$9=(arr[i$7]);
new_arr$4[i$7]=v$8151_$AUTO_$9;
i$7=(1+i$7);
continue;
}else{
}
break;
} while(true);
final dc.dynamic v$8151_$AUTO_$10=k$4;
new_arr$4[idx$3]=v$8151_$AUTO_$10;
dc.int i$8=(2+idx$3);
dc.int j$3=idx$3;
do {
if((i$8<size$3)){
final dc.dynamic v$8151_$AUTO_$11=(arr[j$3]);
new_arr$4[i$8]=v$8151_$AUTO_$11;
i$8=(1+i$8);
j$3=(1+j$3);
continue;
}else{
}
break;
} while(true);
return lcoc_core.BitmapNode((1+cnt), (bitmap_hi^bit$3), (bitmap_lo^bit$3), new_arr$4, );
}
if((0==(hi$3&lo$3))){
final lcoc_core.BitmapNode child$2=((arr[idx$3]) as lcoc_core.BitmapNode);
final lcoc_core.BitmapNode new_child$2=((child$2.inode_assoc((shift$3+5), h$3, k$4, v$2, )) as lcoc_core.BitmapNode);
if(dc.identical((child$2 as dc.Object?), (new_child$2 as dc.Object?), )){
return this;
}
final dc.int arg$4=(cnt+(new_child$2.cnt-child$2.cnt));
final dc.int arg$3=(bitmap_hi^bit$3);
final dc.int arg$2=(bitmap_lo^bit$3);
final dc.List<dc.dynamic> G$8967_$1=(dc.List.from(this.arr, growable: false, ));
final lcoc_core.BitmapNode v$8151_$AUTO_$12=new_child$2;
G$8967_$1[idx$3]=v$8151_$AUTO_$12;
return lcoc_core.BitmapNode(arg$4, arg$3, arg$2, G$8967_$1, );
}
final dc.dynamic k$PRIME_$2=(arr[idx$3]);
final dc.dynamic v$PRIME_$1=(arr[(1+idx$3)]);
late final dc.bool $if_$3;
if((lcoc_core.$EQ_.$_invoke$2(k$PRIME_$2, k$4, ))){
$if_$3=false;
}else{
$if_$3=true;
}
if($if_$3){
final dc.int size$4=(lcoc_core.u32x2_bit_count(bitmap_hi, bitmap_lo, )-1);
final dc.int shift$PRIME_$1=(5+shift$3);
final dc.dynamic o7900$2=k$PRIME_$2;
late final dc.int cast$1;
if((o7900$2 is lcoc_core.IHash$iface)){
cast$1=(((o7900$2 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$1=(((lcoc_core.IHash.extensions(o7900$2, ) as lcoc_core.IHash$ext).$_hash$0(o7900$2, )) as dc.int);
}
final dc.int $1=(cast$1>>(31&shift$PRIME_$1));
final dc.int n$PRIME_$1=($1&31);
final dc.int bit$PRIME_$1=(4294967295&(1<<(31&n$PRIME_$1)));
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(4, k$PRIME_$2, ));
fl$1[1]=v$PRIME_$1;
fl$1[2]=null;
fl$1[3]=null;
final dc.dynamic new_node$1=(lcoc_core.BitmapNode(1, bit$PRIME_$1, bit$PRIME_$1, fl$1, ).inode_assoc_transient(shift$PRIME_$1, h$3, k$4, v$2, ));
final dc.List<dc.dynamic> new_arr$5=(dc.List<dc.dynamic>.filled(size$4, new_node$1, ));
final dc.int n$8310_$AUTO_$4=idx$3;
dc.int i$9=0;
do {
if((i$9<n$8310_$AUTO_$4)){
final dc.dynamic v$8151_$AUTO_$13=(arr[i$9]);
new_arr$5[i$9]=v$8151_$AUTO_$13;
i$9=(1+i$9);
continue;
}else{
}
break;
} while(true);
dc.int i$10=(1+idx$3);
dc.int j$4=(1+i$10);
do {
if((i$10<size$4)){
final dc.dynamic v$8151_$AUTO_$14=(arr[j$4]);
new_arr$5[i$10]=v$8151_$AUTO_$14;
i$10=(1+i$10);
j$4=(1+j$4);
continue;
}else{
}
break;
} while(true);
return lcoc_core.BitmapNode((1+cnt), bitmap_hi, (bitmap_lo^bit$3), new_arr$5, );
}
if(dc.identical(v$2, v$PRIME_$1, )){
return this;
}
final dc.int arg$6=(bitmap_hi&bitmap_lo);
final dc.int arg$5=(bitmap_hi|bitmap_lo);
final dc.List<dc.dynamic> G$8968_$1=(dc.List.from(arr, growable: false, ));
final dc.dynamic v$8151_$AUTO_$15=v$2;
G$8968_$1[(1+idx$3)]=v$8151_$AUTO_$15;
return lcoc_core.BitmapNode(cnt, arg$6, arg$5, G$8968_$1, );
}
final dc.int n$6=(2*cnt);
dc.int i$11=0;
do {
if((i$11==n$6)){
final dc.int arg$7=(1+cnt);
final dc.List G$8969_$1=lcoc_core.aresize(arr, n$6, (2+n$6), v$2, );
final dc.dynamic v$8151_$AUTO_$16=k$4;
G$8969_$1[n$6]=v$8151_$AUTO_$16;
return lcoc_core.BitmapNode(arg$7, 0, 0, G$8969_$1, );
}
if((lcoc_core.$EQ_.$_invoke$2((arr[i$11]), k$4, ))){
final dc.int i$PLUS_1$1=(1+i$11);
if(dc.identical((arr[i$PLUS_1$1]), v$2, )){
return this;
}
final dc.List<dc.dynamic> G$8970_$1=(dc.List.from(arr, growable: false, ));
final dc.dynamic v$8151_$AUTO_$17=v$2;
G$8970_$1[i$PLUS_1$1]=v$8151_$AUTO_$17;
return lcoc_core.BitmapNode(cnt, 0, 0, G$8970_$1, );
}
i$11=(2+i$11);
continue;
} while(true);
}

dc.dynamic inode_assoc_transient(dc.int shift$4, dc.int h$4, dc.dynamic k$5, dc.dynamic v$3, ){
if((shift$4<32)){
final dc.int n$7=((h$4>>(31&shift$4))&31);
final dc.int bit$4=(4294967295&(1<<(31&n$7)));
final dc.int mask$4=(bit$4-1);
final dc.int idx$4=lcoc_core.u32x2_bit_count((mask$4&bitmap_hi), (mask$4&bitmap_lo), );
final dc.int hi$4=(bitmap_hi&bit$4);
final dc.int lo$4=(bitmap_lo&bit$4);
if((0==(hi$4|lo$4))){
final dc.int net_size$1=lcoc_core.u32x2_bit_count(bitmap_hi, bitmap_lo, );
final dc.int net_size$PRIME_$1=(2+net_size$1);
final dc.int idx$PRIME_$1=(1+idx$4);
final dc.List from_arr$1=arr;
if((arr.length<net_size$PRIME_$1)){
arr=lcoc_core.aresize(arr, net_size$1, (1+(7|(net_size$PRIME_$1-1))), null, );
}else{
}
dc.int i$12=(net_size$PRIME_$1-1);
dc.int j$5=(net_size$1-1);
do {
if((idx$PRIME_$1<i$12)){
final dc.dynamic v$8151_$AUTO_$18=(from_arr$1[j$5]);
arr[i$12]=v$8151_$AUTO_$18;
i$12=(i$12-1);
j$5=(j$5-1);
continue;
}else{
}
break;
} while(true);
final dc.dynamic v$8151_$AUTO_$19=k$5;
arr[idx$4]=v$8151_$AUTO_$19;
final dc.dynamic v$8151_$AUTO_$20=v$3;
arr[idx$PRIME_$1]=v$8151_$AUTO_$20;
cnt=(1+cnt);
bitmap_hi=(bitmap_hi|bit$4);
bitmap_lo=(bitmap_lo|bit$4);
}else if((0==(hi$4&lo$4))){
final lcoc_core.BitmapNode child$3=((arr[idx$4]) as lcoc_core.BitmapNode);
if((0==hi$4)){
final lcoc_core.BitmapNode child$PRIME_$1=((child$3.inode_assoc((shift$4+5), h$4, k$5, v$3, )) as lcoc_core.BitmapNode);
if(dc.identical((child$3 as dc.Object?), (child$PRIME_$1 as dc.Object?), )){
}else{
bitmap_hi=(hi$4^bitmap_hi);
bitmap_lo=(hi$4^bitmap_lo);
final lcoc_core.BitmapNode v$8151_$AUTO_$21=child$PRIME_$1;
arr[idx$4]=v$8151_$AUTO_$21;
cnt=(cnt+(child$PRIME_$1.cnt-child$3.cnt));
}
}else{
final dc.int old_cnt_child$1=child$3.cnt;
child$3.inode_assoc_transient((shift$4+5), h$4, k$5, v$3, );
cnt=(cnt+(child$3.cnt-old_cnt_child$1));
}
}else{
final dc.dynamic k$PRIME_$3=(arr[idx$4]);
final dc.dynamic v$PRIME_$2=(arr[(1+idx$4)]);
late final dc.bool $if_$4;
if((lcoc_core.$EQ_.$_invoke$2(k$PRIME_$3, k$5, ))){
$if_$4=false;
}else{
$if_$4=true;
}
if($if_$4){
final dc.int net_size$2=(lcoc_core.u32x2_bit_count(bitmap_hi, bitmap_lo, )-1);
final dc.int gross_size$1=(-8&(7+net_size$2));
final dc.int shift$PRIME_$2=(5+shift$4);
final dc.dynamic o7900$3=k$PRIME_$3;
late final dc.int cast$2;
if((o7900$3 is lcoc_core.IHash$iface)){
cast$2=(((o7900$3 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$2=(((lcoc_core.IHash.extensions(o7900$3, ) as lcoc_core.IHash$ext).$_hash$0(o7900$3, )) as dc.int);
}
final dc.int $2=(cast$2>>(31&shift$PRIME_$2));
final dc.int n$PRIME_$2=($2&31);
final dc.int bit$PRIME_$2=(4294967295&(1<<(31&n$PRIME_$2)));
final dc.List<dc.dynamic> G$8971_$1=(dc.List<dc.dynamic>.filled(8, null, ));
final dc.dynamic v$8151_$AUTO_$22=k$PRIME_$3;
G$8971_$1[0]=v$8151_$AUTO_$22;
final dc.dynamic v$8151_$AUTO_$23=v$PRIME_$2;
G$8971_$1[1]=v$8151_$AUTO_$23;
final dc.dynamic new_node$2=(lcoc_core.BitmapNode(1, bit$PRIME_$2, bit$PRIME_$2, G$8971_$1, ).inode_assoc_transient(shift$PRIME_$2, h$4, k$5, v$3, ));
final dc.List from_arr$2=arr;
if((gross_size$1<arr.length)){
arr=lcoc_core.aresize(arr, idx$4, gross_size$1, null, );
}else{
}
final dc.dynamic v$8151_$AUTO_$24=new_node$2;
arr[idx$4]=v$8151_$AUTO_$24;
dc.int i$13=(1+idx$4);
dc.int j$6=(1+i$13);
do {
if((i$13<net_size$2)){
final dc.dynamic v$8151_$AUTO_$25=(from_arr$2[j$6]);
arr[i$13]=v$8151_$AUTO_$25;
i$13=(1+i$13);
j$6=(1+j$6);
continue;
}else{
}
break;
} while(true);
if((net_size$2<gross_size$1)){
arr[net_size$2]=null;
}else{
}
cnt=(1+cnt);
bitmap_lo=(bitmap_lo^lo$4);
}else if(dc.identical(v$3, v$PRIME_$2, )){
}else{
final dc.dynamic v$8151_$AUTO_$27=v$3;
arr[(1+idx$4)]=v$8151_$AUTO_$27;
}
}
return this;
}
final dc.int n$8=(2*cnt);
dc.int i$14=0;
do {
if((i$14==n$8)){
cnt=(1+cnt);
if((i$14<arr.length)){
final dc.List G$8972_$1=arr;
final dc.dynamic v$8151_$AUTO_$28=k$5;
G$8972_$1[i$14]=v$8151_$AUTO_$28;
final dc.dynamic v$8151_$AUTO_$29=v$3;
G$8972_$1[(1+i$14)]=v$8151_$AUTO_$29;
}else{
final dc.List G$8973_$1=lcoc_core.aresize(arr, i$14, (4+i$14), v$3, );
final dc.dynamic v$8151_$AUTO_$30=k$5;
G$8973_$1[i$14]=v$8151_$AUTO_$30;
arr=G$8973_$1;
}
}else if((lcoc_core.$EQ_.$_invoke$2((arr[i$14]), k$5, ))){
final dc.int i$PLUS_1$2=(1+i$14);
final dc.dynamic v$8151_$AUTO_$31=v$3;
arr[i$PLUS_1$2]=v$8151_$AUTO_$31;
}else{
i$14=(2+i$14);
continue;
}
break;
} while(true);
return this;
}

dc.dynamic inode_without_transient(dc.int shift$5, dc.int h$5, dc.dynamic k$6, ){
if((shift$5<32)){
final dc.int n$9=((h$5>>(31&shift$5))&31);
final dc.int bit$5=(4294967295&(1<<(31&n$9)));
final dc.int mask$5=(bit$5-1);
final dc.int idx$5=lcoc_core.u32x2_bit_count((mask$5&bitmap_hi), (mask$5&bitmap_lo), );
final dc.int hi$5=(bitmap_hi&bit$5);
final dc.int lo$5=(bitmap_lo&bit$5);
if((0==(hi$5|lo$5))){
}else if((0==(hi$5&lo$5))){
final lcoc_core.BitmapNode child$4=((arr[idx$5]) as lcoc_core.BitmapNode);
final dc.int child_cnt$1=child$4.cnt;
late final dc.dynamic maybe$1;
if((0==hi$5)){
final dc.dynamic child$PRIME_$2=(child$4.inode_without(shift$5, h$5, k$6, ));
if(dc.identical((child$4 as dc.Object?), child$PRIME_$2, )){
maybe$1=null;
}else{
maybe$1=child$PRIME_$2;
}
}else{
maybe$1=(child$4.inode_without_transient((shift$5+5), h$5, k$6, ));
}
late final lcoc_core.BitmapNode? child$PRIME_$3;
if((null!=maybe$1)){
child$PRIME_$3=(maybe$1 as lcoc_core.BitmapNode);
}else{
child$PRIME_$3=null;
}
if((child$PRIME_$3!=null)){
final dc.bool and$7533_$AUTO_$2=(1==(child$PRIME_$3 as lcoc_core.BitmapNode).cnt);
late final dc.bool $if_$5;
if(and$7533_$AUTO_$2){
$if_$5=(0==((child$PRIME_$3 as lcoc_core.BitmapNode).bitmap_hi^(child$PRIME_$3 as lcoc_core.BitmapNode).bitmap_lo));
}else{
$if_$5=and$7533_$AUTO_$2;
}
if($if_$5){
final dc.dynamic k$7=((child$PRIME_$3 as lcoc_core.BitmapNode).arr[0]);
final dc.dynamic v$4=((child$PRIME_$3 as lcoc_core.BitmapNode).arr[1]);
final dc.int net_size$3=(1+lcoc_core.u32x2_bit_count(bitmap_hi, bitmap_lo, ));
final dc.int gross_size$2=(-8&(7+net_size$3));
final dc.List from_arr$3=arr;
if((arr.length<net_size$3)){
arr=lcoc_core.aresize(arr, idx$5, gross_size$2, null, );
}else{
}
dc.int j$7=(1+idx$5);
dc.int i$15=(1+j$7);
do {
if((i$15<net_size$3)){
final dc.dynamic v$8151_$AUTO_$32=(from_arr$3[j$7]);
arr[i$15]=v$8151_$AUTO_$32;
j$7=(1+j$7);
i$15=(1+i$15);
continue;
}else{
}
break;
} while(true);
final dc.dynamic v$8151_$AUTO_$33=k$7;
arr[idx$5]=v$8151_$AUTO_$33;
final dc.dynamic v$8151_$AUTO_$34=v$4;
arr[(1+idx$5)]=v$8151_$AUTO_$34;
cnt=(cnt-1);
bitmap_hi=(bitmap_hi|bit$5);
bitmap_lo=(bitmap_lo|bit$5);
}else{
final lcoc_core.BitmapNode? v$8151_$AUTO_$35=child$PRIME_$3;
arr[idx$5]=v$8151_$AUTO_$35;
}
}else{
}
}else if((lcoc_core.$EQ_.$_invoke$2(k$6, (arr[idx$5]), ))){
final dc.int net_size$4=(lcoc_core.u32x2_bit_count(bitmap_hi, bitmap_lo, )-2);
final dc.int gross_size$3=(-8&(7+net_size$4));
final dc.List from_arr$4=arr;
if((gross_size$3<arr.length)){
arr=lcoc_core.aresize(arr, idx$5, gross_size$3, null, );
}else{
}
dc.int i$16=idx$5;
dc.int j$8=(2+idx$5);
do {
if((i$16<net_size$4)){
final dc.dynamic v$8151_$AUTO_$36=(from_arr$4[j$8]);
arr[i$16]=v$8151_$AUTO_$36;
i$16=(1+i$16);
j$8=(1+j$8);
continue;
}else{
}
break;
} while(true);
if(dc.identical(arr, from_arr$4, )){
arr[net_size$4]=null;
arr[(1+net_size$4)]=null;
}else{
}
cnt=(cnt-1);
bitmap_hi=(bitmap_hi^bit$5);
bitmap_lo=(bitmap_lo^bit$5);
}else{
}
return this;
}
final dc.int n$10=(2*cnt);
dc.int i$17=0;
do {
if((i$17==n$10)){
}else if((lcoc_core.$EQ_.$_invoke$2((arr[i$17]), k$6, ))){
final dc.int n_1$1=(n$10-1);
final dc.int n_2$2=(n$10-2);
final dc.int i$PLUS_1$3=(1+i$17);
if((i$17==n_2$2)){
}else{
final dc.List G$8974_$1=arr;
final dc.dynamic v$8151_$AUTO_$39=(arr[n_2$2]);
G$8974_$1[i$17]=v$8151_$AUTO_$39;
final dc.dynamic v$8151_$AUTO_$40=(arr[n_1$1]);
G$8974_$1[i$PLUS_1$3]=v$8151_$AUTO_$40;
final dc.List G$8975_$1=arr;
G$8975_$1[n_2$2]=null;
G$8975_$1[n_1$1]=null;
cnt=(cnt-1);
}
}else{
i$17=(2+i$17);
continue;
}
break;
} while(true);
return this;
}
}

// END BitmapNode

// BEGIN ChunkBuffer
class ChunkBuffer extends dc.Object implements lcoc_core.ICounted$iface {
dc.List? arr;
dc.int end;

ChunkBuffer(this.arr, this.end, ):super();

dc.dynamic add(dc.dynamic o$1, ){
final dc.dynamic v$8151_$AUTO_$1=o$1;
(arr as dc.List)[end]=v$8151_$AUTO_$1;
end=(1+end);
return null;
}

dc.dynamic chunk(){
final lcoc_core.ArrayChunk ret$1=lcoc_core.ArrayChunk((arr as dc.List), 0, end, );
arr=null;
return ret$1;
}

dc.dynamic $_count$0(){
return end;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ChunkBuffer

// BEGIN ChunkedCons
class ChunkedCons<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E> implements lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.ISeqable$iface, lcoc_core.ISeq$iface, lcoc_core.IChunkedSeq$iface, lcoc_core.IReduce$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface {
final chunk;
final more;
final meta;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

ChunkedCons(this.chunk, this.more, this.meta, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

lcoc_core.ChunkedCons<R> cast<R>(){
return lcoc_core.ChunkedCons<R>(chunk, more, meta, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical(new_meta$1, meta, )){
return this;
}
return lcoc_core.ChunkedCons(chunk, more, new_meta$1, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_seq$0(){
return this;
}

dc.dynamic $_first$0(){
final dc.dynamic coll7829$1=chunk;
if((coll7829$1 is lcoc_core.IIndexed$iface)){
return ((coll7829$1 as lcoc_core.IIndexed$iface).$_nth$1(0, ));
}
return ((lcoc_core.IIndexed.extensions(coll7829$1, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$1, 0, ));
}

dc.dynamic $_rest$0(){
final dc.dynamic coll7742$1=chunk;
late final dc.num cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.num);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.num);
}
final dc.bool $1=(1<cast$1);
if($1){
final dc.dynamic coll7749$1=chunk;
late final dc.dynamic $if_$1;
if((coll7749$1 is lcoc_core.IChunk$iface)){
$if_$1=((coll7749$1 as lcoc_core.IChunk$iface).$_drop_first$0());
}else{
$if_$1=((lcoc_core.IChunk.extensions(coll7749$1, ) as lcoc_core.IChunk$ext).$_drop_first$0(coll7749$1, ));
}
return lcoc_core.ChunkedCons($if_$1, more, null, -1, );
}
if((null==more)){
return lcoc_core.$_EMPTY_LIST;
}
return more;
}

dc.dynamic $_next$0(){
final dc.dynamic coll7742$2=chunk;
late final dc.num cast$2;
if((coll7742$2 is lcoc_core.ICounted$iface)){
cast$2=(((coll7742$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.num);
}else{
cast$2=(((lcoc_core.ICounted.extensions(coll7742$2, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$2, )) as dc.num);
}
final dc.bool $2=(1<cast$2);
if($2){
final dc.dynamic coll7749$2=chunk;
late final dc.dynamic $if_$2;
if((coll7749$2 is lcoc_core.IChunk$iface)){
$if_$2=((coll7749$2 as lcoc_core.IChunk$iface).$_drop_first$0());
}else{
$if_$2=((lcoc_core.IChunk.extensions(coll7749$2, ) as lcoc_core.IChunk$ext).$_drop_first$0(coll7749$2, ));
}
return lcoc_core.ChunkedCons($if_$2, more, null, -1, );
}
if((null==more)){
return null;
}
final dc.dynamic o7668$1=more;
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}

dc.dynamic $_chunked_first$0(){
return chunk;
}

dc.dynamic $_chunked_rest$0(){
if((null==more)){
return lcoc_core.$_EMPTY_LIST;
}
return more;
}

dc.dynamic $_chunked_next$0(){
if((null==more)){
return null;
}
return more;
}

dc.dynamic $_reduce$1(dc.dynamic f$1, ){
final dc.dynamic coll7749$3=chunk;
late final dc.dynamic coll7754$1;
if((coll7749$3 is lcoc_core.IChunk$iface)){
coll7754$1=((coll7749$3 as lcoc_core.IChunk$iface).$_drop_first$0());
}else{
coll7754$1=((lcoc_core.IChunk.extensions(coll7749$3, ) as lcoc_core.IChunk$ext).$_drop_first$0(coll7749$3, ));
}
final dc.dynamic f7755$1=f$1;
final dc.dynamic coll7829$2=chunk;
late final dc.dynamic init7756$1;
if((coll7829$2 is lcoc_core.IIndexed$iface)){
init7756$1=((coll7829$2 as lcoc_core.IIndexed$iface).$_nth$1(0, ));
}else{
init7756$1=((lcoc_core.IIndexed.extensions(coll7829$2, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$2, 0, ));
}
late final dc.dynamic val$1;
if((coll7754$1 is lcoc_core.IChunk$iface)){
val$1=((coll7754$1 as lcoc_core.IChunk$iface).$_chunk_reduce$2(f7755$1, init7756$1, ));
}else{
val$1=((lcoc_core.IChunk.extensions(coll7754$1, ) as lcoc_core.IChunk$ext).$_chunk_reduce$2(coll7754$1, f7755$1, init7756$1, ));
}
if(lcoc_core.reduced$QMARK_(val$1, )){
return lcoc_core.deref(val$1, );
}
final dc.dynamic coll7722$1=more;
final dc.dynamic f7723$1=f$1;
final dc.dynamic start7724$1=val$1;
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_reduce$2(dc.dynamic f$2, dc.dynamic start$1, ){
final dc.dynamic coll7754$2=chunk;
final dc.dynamic f7755$2=f$2;
final dc.dynamic init7756$2=start$1;
late final dc.dynamic val$2;
if((coll7754$2 is lcoc_core.IChunk$iface)){
val$2=((coll7754$2 as lcoc_core.IChunk$iface).$_chunk_reduce$2(f7755$2, init7756$2, ));
}else{
val$2=((lcoc_core.IChunk.extensions(coll7754$2, ) as lcoc_core.IChunk$ext).$_chunk_reduce$2(coll7754$2, f7755$2, init7756$2, ));
}
if(lcoc_core.reduced$QMARK_(val$2, )){
return lcoc_core.deref(val$2, );
}
final dc.dynamic coll7722$2=more;
final dc.dynamic f7723$2=f$2;
final dc.dynamic start7724$2=val$2;
if((coll7722$2 is lcoc_core.IReduce$iface)){
return ((coll7722$2 as lcoc_core.IReduce$iface).$_reduce$2(f7723$2, start7724$2, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$2, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$2, f7723$2, start7724$2, ));
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
return lcoc_core.cons(o$1, this, );
}

dc.dynamic $_empty$0(){
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ChunkedCons

// BEGIN Cons
class Cons<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E> implements lcoc_core.IList$iface, lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.ISeq$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.ISeqable$iface {
final meta;
final $UNDERSCORE_first;
final rest;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

Cons(this.meta, this.$UNDERSCORE_first, this.rest, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

lcoc_core.Cons<R> cast<R>(){
return lcoc_core.Cons<R>(meta, $UNDERSCORE_first, rest, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical(new_meta$1, meta, )){
return this;
}
return lcoc_core.Cons(new_meta$1, $UNDERSCORE_first, rest, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_first$0(){
return $UNDERSCORE_first;
}

dc.dynamic $_rest$0(){
if((null==rest)){
return lcoc_core.$_EMPTY_LIST;
}
return rest;
}

dc.dynamic $_next$0(){
if((null==rest)){
return null;
}
final dc.dynamic o7668$1=rest;
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
return lcoc_core.Cons(null, o$1, this, -1, );
}

dc.dynamic $_empty$0(){
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_seq$0(){
return this;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Cons

// BEGIN Delay
class Delay extends dc.Object implements lcoc_core.IDeref$iface, lcoc_core.IPending$iface {
var val;
var f;

Delay(this.val, this.f, ):super();

dc.dynamic $_deref$0(){
final dc.dynamic some$7546_$AUTO_$1=f;
if((null==some$7546_$AUTO_$1)){
}else{
final dc.dynamic f$PRIME_$1=some$7546_$AUTO_$1;
if((f$PRIME_$1 is dc.Function)){
val=(f$PRIME_$1 as dc.Function)();
}else if((f$PRIME_$1 is lcoc_core.IFn$iface)){
val=((f$PRIME_$1 as lcoc_core.IFn$iface).$_invoke$0());
}else{
val=(lcoc_core.IFn.extensions(f$PRIME_$1, ).$_invoke$0(f$PRIME_$1, ));
}
f=null;
}
return val;
}

dc.dynamic $_realized$QMARK_$0(){
return (null==f);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Delay

// BEGIN Eduction
class Eduction<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.IterableMixin<E> implements lcoc_core.ISeqable$iface, lcoc_core.IReduce$iface {
final xform;
final coll;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

Eduction(this.xform, this.coll, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

dc.Iterator<E> get iterator{
return (lcoc_core.iterator.$_invoke$2(xform, coll, ));
}

lcoc_core.Eduction<R> cast<R>(){
return lcoc_core.Eduction<R>(xform, coll, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_seq$0(){
final dc.dynamic o7668$1=(lcoc_core.sequence.$_invoke$2(xform, coll, ));
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}

dc.dynamic $_reduce$1(dc.dynamic rf$1, ){
final dc.Iterator it$1=(lcoc_core.iterator.$_invoke$2(xform, coll, ));
if((it$1.moveNext())){
dc.dynamic acc$1=it$1.current;
do {
if((it$1.moveNext())){
final dc.dynamic arg$1=it$1.current;
late final dc.dynamic acc$2;
if((rf$1 is dc.Function)){
acc$2=(rf$1 as dc.Function)(acc$1, arg$1, );
}else if((rf$1 is lcoc_core.IFn$iface)){
acc$2=((rf$1 as lcoc_core.IFn$iface).$_invoke$2(acc$1, arg$1, ));
}else{
acc$2=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, acc$1, arg$1, ));
}
if(lcoc_core.reduced$QMARK_(acc$2, )){
return lcoc_core.unreduced(acc$2, );
}
acc$1=acc$2;
continue;
}
return acc$1;
} while(true);
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_reduce$2(dc.dynamic rf$2, dc.dynamic init$1, ){
final dc.dynamic coll7722$1=coll;
final dc.dynamic arg$2=(lcoc_core.completing.$_invoke$1(rf$2, ));
late final dc.dynamic f7723$1;
if((xform is dc.Function)){
f7723$1=(xform as dc.Function)(arg$2, );
}else if((xform is lcoc_core.IFn$iface)){
f7723$1=((xform as lcoc_core.IFn$iface).$_invoke$1(arg$2, ));
}else{
f7723$1=(lcoc_core.IFn.extensions(xform, ).$_invoke$1(xform, arg$2, ));
}
final dc.dynamic start7724$1=init$1;
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Eduction

// BEGIN EqualsEquivMixin
mixin EqualsEquivMixin on dc.Object {

dc.bool operator ==(dc.Object y$1, ){
final lcoc_core.EqualsEquivMixin o7819$1=this;
final dc.Object other7820$1=y$1;
if((o7819$1 is lcoc_core.IEquiv$iface)){
return ((o7819$1 as lcoc_core.IEquiv$iface).$_equiv$1(other7820$1, ));
}
return ((lcoc_core.IEquiv.extensions(o7819$1, ) as lcoc_core.IEquiv$ext).$_equiv$1(o7819$1, other7820$1, ));
}

dc.int get hashCode{
final lcoc_core.EqualsEquivMixin o7900$1=this;
if((o7900$1 is lcoc_core.IHash$iface)){
return ((o7900$1 as lcoc_core.IHash$iface).$_hash$0());
}
return ((lcoc_core.IHash.extensions(o7900$1, ) as lcoc_core.IHash$ext).$_hash$0(o7900$1, ));
}
}

// END EqualsEquivMixin

// BEGIN EquivSequentialHashMixin
mixin EquivSequentialHashMixin on dc.Object implements lcoc_core.ISequential$iface, lcoc_core.IEquiv$iface, lcoc_core.IHash$iface {
late dc.int $UNDERSCORE_$UNDERSCORE_hash;

dc.bool operator ==(dc.Object y$1, ){
return lcoc_core.$_equiv_sequential(this, y$1, );
}

dc.int get hashCode{
final lcoc_core.EquivSequentialHashMixin o7900$1=this;
if((o7900$1 is lcoc_core.IHash$iface)){
return ((o7900$1 as lcoc_core.IHash$iface).$_hash$0());
}
return ((lcoc_core.IHash.extensions(o7900$1, ) as lcoc_core.IHash$ext).$_hash$0(o7900$1, ));
}

dc.dynamic $_equiv$1(dc.dynamic y$2, ){
return lcoc_core.$_equiv_sequential(this, y$2, );
}

dc.dynamic $_hash$0(){
final dc.int h$8279_$AUTO_$1=$UNDERSCORE_$UNDERSCORE_hash;
if((h$8279_$AUTO_$1<0)){
final dc.int h$8279_$AUTO_$2=lcoc_core.hash_ordered_coll(this, );
$UNDERSCORE_$UNDERSCORE_hash=h$8279_$AUTO_$2;
return h$8279_$AUTO_$2;
}
return h$8279_$AUTO_$1;
}

dc.dynamic $_hash_realized$QMARK_$0(){
return (-1!=$UNDERSCORE_$UNDERSCORE_hash);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END EquivSequentialHashMixin

// BEGIN ExceptionInfo
class ExceptionInfo extends dc.Object implements lcoc_core.IExceptionInfo$iface {
final msg;
final data;
final ex;

const ExceptionInfo(this.msg, this.data, this.ex, ):super();

dc.dynamic get message{
return msg;
}

dc.dynamic get cause{
return ex;
}

dc.dynamic $_ex_data$0(){
return data;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ExceptionInfo

// BEGIN Fn
dc.dynamic Fn=const lcoc_core.Fn$iprot();

// END Fn

// BEGIN Fn$ext
abstract class Fn$ext extends dc.Object {
}

// END Fn$ext

// BEGIN Fn$iface
abstract class Fn$iface extends dc.Object {
}

// END Fn$iface

// BEGIN Fn$iprot
class Fn$iprot extends dc.Object implements lcoc_core.IProtocol {

const Fn$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.Fn$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol Fn found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Fn$iprot

// BEGIN HashCache
class HashCache extends dc.Object {
dc.Map<dc.dynamic, dc.int> young;
dc.Map<dc.dynamic, dc.int> old;

HashCache(this.young, this.old, ):super();

dc.dynamic insert(dc.dynamic o$1, dc.int h$1, ){
if((256==young.length)){
final dc.Map<dc.dynamic, dc.int> bak$1=old;
old=young;
bak$1.clear();
young=bak$1;
}else{
}
return (young[o$1]=h$1);
}

dc.int? lookup(dc.dynamic o$2, ){
final dc.int? or$7573_$AUTO_$1=(young[o$2]);
if((or$7573_$AUTO_$1!=null)){
return or$7573_$AUTO_$1;
}
final dc.int? some$7546_$AUTO_$1=(old[o$2]);
if((null==some$7546_$AUTO_$1)){
return null;
}
final dc.int h$2=(some$7546_$AUTO_$1 as dc.int);
this.insert(o$2, h$2, );
return h$2;
}
}

// END HashCache

// BEGIN HashRankedWideTreapMap
class HashRankedWideTreapMap<K, V> extends dc.Object with lcoc_core.EqualsEquivMixin, d_collection.MapMixin<K, V>, lcoc_core.ToStringMixin implements lcoc_core.IPrint$iface, lcoc_core.IAssociative$iface, lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.IEquiv$iface, lcoc_core.IHash$iface, lcoc_core.ISeqable$iface, lcoc_core.ICounted$iface, lcoc_core.ILookup$iface, lcoc_core.IFind$iface, lcoc_core.IMap$iface, lcoc_core.IKVReduce$iface, lcoc_core.IReduce$iface, lcoc_core.IFn$iface, lcoc_core.IReversible$iface, lcoc_core.ISorted$iface {
final meta;
final lcoc_core.TreapNode root;
final dc.int top_rank;
final dc.int Function(dc.dynamic, dc.dynamic, ) cmp;
final cmpf;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

HashRankedWideTreapMap(this.meta, this.root, this.top_rank, this.cmp, this.cmpf, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

dc.Iterable<dc.MapEntry<K, V>> get entries{
return lcoc_core.HashRankedWideTreapMapReifyoo5awc$1(null, top_rank, root, );
}

V? operator [](dc.Object? k$1, ){
final lcoc_core.HashRankedWideTreapMap<K, V> o7834$1=this;
final dc.dynamic k7835$1=k$1;
if((o7834$1 is lcoc_core.ILookup$iface)){
return ((o7834$1 as lcoc_core.ILookup$iface).$_lookup$2(k7835$1, null, ));
}
return ((lcoc_core.ILookup.extensions(o7834$1, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$1, k7835$1, null, ));
}

void operator []=(K key$1, V val$1, ){
throw dc.UnsupportedError("[]= not supported on HashRankedWideTreapMap", );
}

V? remove(dc.Object? val$2, ){
throw dc.UnsupportedError("remove not supported on HashRankedWideTreapMap", );
}

void clear(){
throw dc.UnsupportedError("clear not supported on HashRankedWideTreapMap", );
}

dc.Iterable<K> get keys{
return lcoc_core.HashRankedWideTreapMapReifyoo5awc$2(null, top_rank, root, );
}

dc.Iterable<V> get values{
return lcoc_core.HashRankedWideTreapMapReifyoo5awc$3(null, top_rank, root, );
}

lcoc_core.HashRankedWideTreapMap<RK, RV> cast<RK, RV>(){
return lcoc_core.HashRankedWideTreapMap<RK, RV>(meta, root, top_rank, cmp, cmpf, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_print$1(dc.dynamic sink$1, ){
return lcoc_core.print_map(this, sink$1, );
}

dc.dynamic $_assoc$2(dc.dynamic k$3, dc.dynamic v$2, ){
final dc.int rank$1=lcoc_core.hashrank(k$3, );
lcoc_core.TreapNode root$1=root;
dc.int top_rank$1=top_rank;
do {
if((top_rank$1<rank$1)){
final dc.int arg$1=root$1.cnt;
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(1, root$1, ));
root$1=lcoc_core.TreapNode(arg$1, fl$1, );
top_rank$1=(1+top_rank$1);
continue;
}
return lcoc_core.HashRankedWideTreapMap<K, V>(meta, (root$1.tnode_assoc(top_rank$1, rank$1, k$3, v$2, cmp, )), top_rank$1, cmp, cmpf, -1, );
} while(true);
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical(new_meta$1, meta, )){
return this;
}
return lcoc_core.HashRankedWideTreapMap<K, V>(new_meta$1, root, top_rank, cmp, cmpf, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_conj$1(dc.dynamic entry$1, ){
final dc.bool and$7533_$AUTO_$1=((lcoc_core.IVector.satisfies(entry$1, )) as dc.bool);
late final dc.bool $if_$2;
if(and$7533_$AUTO_$1){
final dc.dynamic coll7742$1=entry$1;
late final dc.dynamic $if_$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
$if_$1=((coll7742$1 as lcoc_core.ICounted$iface).$_count$0());
}else{
$if_$1=((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, ));
}
$if_$2=($if_$1==2);
}else{
$if_$2=and$7533_$AUTO_$1;
}
if($if_$2){
final lcoc_core.HashRankedWideTreapMap<K, V> coll7790$1=this;
final dc.dynamic coll7829$1=entry$1;
late final dc.dynamic k7791$1;
if((coll7829$1 is lcoc_core.IIndexed$iface)){
k7791$1=((coll7829$1 as lcoc_core.IIndexed$iface).$_nth$1(0, ));
}else{
k7791$1=((lcoc_core.IIndexed.extensions(coll7829$1, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$1, 0, ));
}
final dc.dynamic coll7829$2=entry$1;
late final dc.dynamic v7792$1;
if((coll7829$2 is lcoc_core.IIndexed$iface)){
v7792$1=((coll7829$2 as lcoc_core.IIndexed$iface).$_nth$1(1, ));
}else{
v7792$1=((lcoc_core.IIndexed.extensions(coll7829$2, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$2, 1, ));
}
if((coll7790$1 is lcoc_core.IAssociative$iface)){
return ((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, ));
}
dc.dynamic ret$1=this;
final dc.dynamic o7668$1=entry$1;
dc.dynamic s$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
s$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
do {
if((null==s$1)){
return ret$1;
}
final dc.dynamic e$1=lcoc_core.first(s$1, );
if(((lcoc_core.IVector.satisfies(e$1, )) as dc.bool)){
final dc.dynamic coll7790$2=ret$1;
final dc.dynamic coll7829$3=e$1;
late final dc.dynamic k7791$2;
if((coll7829$3 is lcoc_core.IIndexed$iface)){
k7791$2=((coll7829$3 as lcoc_core.IIndexed$iface).$_nth$1(0, ));
}else{
k7791$2=((lcoc_core.IIndexed.extensions(coll7829$3, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$3, 0, ));
}
final dc.dynamic coll7829$4=e$1;
late final dc.dynamic v7792$2;
if((coll7829$4 is lcoc_core.IIndexed$iface)){
v7792$2=((coll7829$4 as lcoc_core.IIndexed$iface).$_nth$1(1, ));
}else{
v7792$2=((lcoc_core.IIndexed.extensions(coll7829$4, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$4, 1, ));
}
if((coll7790$2 is lcoc_core.IAssociative$iface)){
ret$1=((coll7790$2 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$2, v7792$2, ));
}else{
ret$1=((lcoc_core.IAssociative.extensions(coll7790$2, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$2, k7791$2, v7792$2, ));
}
final dc.dynamic coll7685$1=s$1;
if((coll7685$1 is lcoc_core.ISeq$iface)){
s$1=((coll7685$1 as lcoc_core.ISeq$iface).$_next$0());
}else{
s$1=((lcoc_core.ISeq.extensions(coll7685$1, ) as lcoc_core.ISeq$ext).$_next$0(coll7685$1, ));
}
continue;
}
throw dc.ArgumentError("conj on a map takes map entries or seqables of map entries", );
} while(true);
}

dc.dynamic $_empty$0(){
return lcoc_core.HashRankedWideTreapMap<K, V>(meta, (lcoc_core.$_empty_treap_node as lcoc_core.TreapNode), 0, cmp, cmpf, -1, );
}

dc.dynamic $_equiv$1(dc.dynamic other$1, ){
return lcoc_core.$_equiv_map(this, other$1, );
}

dc.dynamic $_hash$0(){
final dc.int h$8279_$AUTO_$1=$UNDERSCORE_$UNDERSCORE_hash;
if((h$8279_$AUTO_$1<0)){
final dc.int h$8279_$AUTO_$2=lcoc_core.hash_unordered_coll(this, );
$UNDERSCORE_$UNDERSCORE_hash=h$8279_$AUTO_$2;
return h$8279_$AUTO_$2;
}
return h$8279_$AUTO_$1;
}

dc.dynamic $_seq$0(){
return lcoc_core.iterator_seq(this.entries.iterator, );
}

dc.dynamic $_count$0(){
return root.cnt;
}

dc.dynamic $_lookup$1(dc.dynamic k$4, ){
final lcoc_core.HashRankedWideTreapMap<K, V> o7834$2=this;
final dc.dynamic k7835$2=k$4;
if((o7834$2 is lcoc_core.ILookup$iface)){
return ((o7834$2 as lcoc_core.ILookup$iface).$_lookup$2(k7835$2, null, ));
}
return ((lcoc_core.ILookup.extensions(o7834$2, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$2, k7835$2, null, ));
}

dc.dynamic $_lookup$2(dc.dynamic k$5, dc.dynamic not_found$1, ){
return (root.tnode_lookup(k$5, not_found$1, top_rank, cmp, ));
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$6, ){
final lcoc_core.HashRankedWideTreapMap<K, V> o7834$3=this;
final dc.dynamic k7835$3=k$6;
final lcoc_core.HashRankedWideTreapMap<K, V> not_found7836$3=this;
late final dc.dynamic $if_$3;
if((o7834$3 is lcoc_core.ILookup$iface)){
$if_$3=((o7834$3 as lcoc_core.ILookup$iface).$_lookup$2(k7835$3, not_found7836$3, ));
}else{
$if_$3=((lcoc_core.ILookup.extensions(o7834$3, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$3, k7835$3, not_found7836$3, ));
}
final dc.bool $1=dc.identical($if_$3, (this as dc.Object?), );
if($1){
return false;
}
return true;
}

dc.dynamic $_find$1(dc.dynamic k$7, ){
final lcoc_core.HashRankedWideTreapMap<K, V> o7834$4=this;
final dc.dynamic k7835$4=k$7;
late final dc.dynamic some$7546_$AUTO_$1;
if((o7834$4 is lcoc_core.ILookup$iface)){
some$7546_$AUTO_$1=((o7834$4 as lcoc_core.ILookup$iface).$_lookup$2(k7835$4, null, ));
}else{
some$7546_$AUTO_$1=((lcoc_core.ILookup.extensions(o7834$4, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$4, k7835$4, null, ));
}
if((null==some$7546_$AUTO_$1)){
return null;
}
final dc.dynamic v$3=some$7546_$AUTO_$1;
return dc.MapEntry<K, V>((k$7 as K), (v$3 as V), );
}

dc.dynamic $_dissoc$1(dc.dynamic k$8, ){
final lcoc_core.TreapNode new_root$1=(root.tnode_without(top_rank, lcoc_core.hashrank(k$8, ), k$8, cmp, ));
if(dc.identical((new_root$1 as dc.Object?), (root as dc.Object?), )){
return this;
}
lcoc_core.TreapNode root$2=new_root$1;
dc.dynamic top_rank$2=top_rank;
do {
if((lcoc_core.$EQ_.$_invoke$2(1, root$2.arr.length, ))){
root$2=(root$2.arr[0]);
top_rank$2=((top_rank$2 as dc.num)-1);
continue;
}
return lcoc_core.HashRankedWideTreapMap<K, V>(meta, root$2, (top_rank$2 as dc.int), cmp, cmpf, -1, );
} while(true);
}

dc.dynamic $_kv_reduce$2(dc.dynamic f$1, dc.dynamic init$1, ){
final lcoc_core.TreapIterator it$1=lcoc_core.TreapIterator(root, 0, top_rank, (dc.List<dc.int>.filled(top_rank, 0, )), (dc.List<lcoc_core.TreapNode>.filled(top_rank, root, )), null, null, 0, );
dc.dynamic acc$1=init$1;
do {
late final dc.bool $if_$4;
if((it$1.moveNext())){
$if_$4=false;
}else{
$if_$4=true;
}
if($if_$4){
return acc$1;
}
final dc.int idx$1=it$1.idx;
final dc.List arr$1=it$1.node.arr;
final dc.dynamic arg$3=(arr$1[(idx$1-2)]);
final dc.dynamic arg$2=(arr$1[(idx$1-1)]);
late final dc.dynamic acc$2;
if((f$1 is dc.Function)){
acc$2=(f$1 as dc.Function)(acc$1, arg$3, arg$2, );
}else if((f$1 is lcoc_core.IFn$iface)){
acc$2=((f$1 as lcoc_core.IFn$iface).$_invoke$3(acc$1, arg$3, arg$2, ));
}else{
acc$2=(lcoc_core.IFn.extensions(f$1, ).$_invoke$3(f$1, acc$1, arg$3, arg$2, ));
}
if(lcoc_core.reduced$QMARK_(acc$2, )){
return lcoc_core.unreduced(acc$2, );
}
acc$1=acc$2;
continue;
} while(true);
}

dc.dynamic $_reduce$1(dc.dynamic f$2, ){
if((0<root.cnt)){
final lcoc_core.TreapIterator it$2=lcoc_core.TreapIterator(root, 0, top_rank, (dc.List<dc.int>.filled(top_rank, 0, )), (dc.List<lcoc_core.TreapNode>.filled(top_rank, root, )), null, null, 0, );
final lcoc_core.TreapIterator G$9315_$1=it$2;
G$9315_$1.moveNext();
final dc.int idx$2=G$9315_$1.idx;
final dc.List arr$2=it$2.node.arr;
final dc.MapEntry<K, V> init$2=dc.MapEntry<K, V>(((arr$2[(idx$2-2)]) as K), ((arr$2[(idx$2-1)]) as V), );
dc.dynamic acc$3=init$2;
do {
late final dc.bool $if_$5;
if((it$2.moveNext())){
$if_$5=false;
}else{
$if_$5=true;
}
if($if_$5){
return acc$3;
}
final dc.int idx$3=it$2.idx;
final dc.List arr$3=it$2.node.arr;
late final dc.dynamic acc$4;
if((f$2 is dc.Function)){
acc$4=(f$2 as dc.Function)(acc$3, dc.MapEntry<K, V>(((arr$3[(idx$3-2)]) as K), ((arr$3[(idx$3-1)]) as V), ), );
}else if((f$2 is lcoc_core.IFn$iface)){
acc$4=((f$2 as lcoc_core.IFn$iface).$_invoke$2(acc$3, dc.MapEntry<K, V>(((arr$3[(idx$3-2)]) as K), ((arr$3[(idx$3-1)]) as V), ), ));
}else{
acc$4=(lcoc_core.IFn.extensions(f$2, ).$_invoke$2(f$2, acc$3, dc.MapEntry<K, V>(((arr$3[(idx$3-2)]) as K), ((arr$3[(idx$3-1)]) as V), ), ));
}
if(lcoc_core.reduced$QMARK_(acc$4, )){
return lcoc_core.unreduced(acc$4, );
}
acc$3=acc$4;
continue;
} while(true);
}
if((f$2 is dc.Function)){
return (f$2 as dc.Function)();
}
if((f$2 is lcoc_core.IFn$iface)){
return ((f$2 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(f$2, ).$_invoke$0(f$2, ));
}

dc.dynamic $_reduce$2(dc.dynamic f$3, dc.dynamic init$3, ){
final lcoc_core.TreapIterator it$3=lcoc_core.TreapIterator(root, 0, top_rank, (dc.List<dc.int>.filled(top_rank, 0, )), (dc.List<lcoc_core.TreapNode>.filled(top_rank, root, )), null, null, 0, );
dc.dynamic acc$5=init$3;
do {
late final dc.bool $if_$6;
if((it$3.moveNext())){
$if_$6=false;
}else{
$if_$6=true;
}
if($if_$6){
return acc$5;
}
final dc.int idx$4=it$3.idx;
final dc.List arr$4=it$3.node.arr;
late final dc.dynamic acc$6;
if((f$3 is dc.Function)){
acc$6=(f$3 as dc.Function)(acc$5, dc.MapEntry<K, V>(((arr$4[(idx$4-2)]) as K), ((arr$4[(idx$4-1)]) as V), ), );
}else if((f$3 is lcoc_core.IFn$iface)){
acc$6=((f$3 as lcoc_core.IFn$iface).$_invoke$2(acc$5, dc.MapEntry<K, V>(((arr$4[(idx$4-2)]) as K), ((arr$4[(idx$4-1)]) as V), ), ));
}else{
acc$6=(lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, acc$5, dc.MapEntry<K, V>(((arr$4[(idx$4-2)]) as K), ((arr$4[(idx$4-1)]) as V), ), ));
}
if(lcoc_core.reduced$QMARK_(acc$6, )){
return lcoc_core.unreduced(acc$6, );
}
acc$5=acc$6;
continue;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic k$9, ){
final lcoc_core.HashRankedWideTreapMap<K, V> o7838$1=this;
final dc.dynamic k7839$1=k$9;
if((o7838$1 is lcoc_core.ILookup$iface)){
return ((o7838$1 as lcoc_core.ILookup$iface).$_lookup$1(k7839$1, ));
}
return ((lcoc_core.ILookup.extensions(o7838$1, ) as lcoc_core.ILookup$ext).$_lookup$1(o7838$1, k7839$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic k$10, dc.dynamic not_found$2, ){
final lcoc_core.HashRankedWideTreapMap<K, V> o7834$5=this;
final dc.dynamic k7835$5=k$10;
final dc.dynamic not_found7836$5=not_found$2;
if((o7834$5 is lcoc_core.ILookup$iface)){
return ((o7834$5 as lcoc_core.ILookup$iface).$_lookup$2(k7835$5, not_found7836$5, ));
}
return ((lcoc_core.ILookup.extensions(o7834$5, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$5, k7835$5, not_found7836$5, ));
}

dc.dynamic $_rseq$0(){
final dc.int c$1=root.cnt;
if((0<c$1)){
return lcoc_core.iterator_seq(lcoc_core.TreapReverseIterator(root, root.arr.length, top_rank, (dc.List<dc.int>.filled(top_rank, 0, )), (dc.List<lcoc_core.TreapNode>.filled(top_rank, root, )), (dc.dynamic p1$9309_$SHARP_$1, dc.dynamic p2$9310_$SHARP_$1, ){
return dc.MapEntry<K, V>((p1$9309_$SHARP_$1 as K), (p2$9310_$SHARP_$1 as V), );
}, null, 0, ), );
}
return null;
}

dc.dynamic $_sorted_seq$3(dc.dynamic from$1, dc.dynamic to$1, dc.dynamic flags$1, ){
final dc.int flags$2=(flags$1 as dc.int);
final dc.List<lcoc_core.TreapNode> nodes$1=(dc.List<lcoc_core.TreapNode>.filled(top_rank, root, ));
final dc.List<dc.int> idxs$1=(dc.List<dc.int>.filled(top_rank, 0, ));
final lcoc_core.Volatile vnode$1=lcoc_core.volatile$BANG_(root, );
late final dc.int from_idx$1;
if((0==(8&flags$2))){
from_idx$1=0;
}else{
dc.int rank$2=top_rank;
lcoc_core.TreapNode node$1=root;
do {
if((0==rank$2)){
final dc.int i$1=(node$1.tnode_leaf_search(from$1, cmp, ));
lcoc_core.vreset$BANG_(vnode$1, node$1, );
if(i$1.isOdd){
from_idx$1=(1+i$1);
}else if((0==(4&flags$2))){
from_idx$1=(2+i$1);
}else{
from_idx$1=i$1;
}
}else{
final dc.int i$2=(node$1.tnode_branch_search(from$1, cmp, ));
final dc.int rank_1$1=(rank$2-1);
final dc.List arr$5=node$1.arr;
final lcoc_core.TreapNode v$8151_$AUTO_$1=node$1;
nodes$1[rank_1$1]=v$8151_$AUTO_$1;
if(i$2.isOdd){
final dc.int v$8151_$AUTO_$2=(3+i$2);
idxs$1[rank_1$1]=v$8151_$AUTO_$2;
rank$2=rank_1$1;
node$1=(arr$5[(1+i$2)]);
continue;
}else{
final dc.dynamic some$7546_$AUTO_$2=(arr$5[i$2]);
if((null==some$7546_$AUTO_$2)){
final dc.int v$8151_$AUTO_$3=(4+i$2);
idxs$1[rank_1$1]=v$8151_$AUTO_$3;
rank$2=rank_1$1;
node$1=(arr$5[(2+i$2)]);
continue;
}else{
final dc.dynamic child$1=some$7546_$AUTO_$2;
final dc.int v$8151_$AUTO_$4=(2+i$2);
idxs$1[rank_1$1]=v$8151_$AUTO_$4;
rank$2=rank_1$1;
node$1=child$1;
continue;
}
}
}
break;
} while(true);
}
final dc.dynamic from_node$1=lcoc_core.deref(vnode$1, );
late final dc.int from_rank$1;
if(dc.identical(from_node$1, (root as dc.Object?), )){
from_rank$1=top_rank;
}else{
from_rank$1=0;
}
final dc.dynamic $UNDERSCORE_$3=lcoc_core.vreset$BANG_(vnode$1, null, );
late final dc.int to_idx$1;
if((0==(2&flags$2))){
to_idx$1=0;
}else{
dc.int rank$3=top_rank;
lcoc_core.TreapNode node$2=root;
do {
if((0==rank$3)){
final dc.int i$3=(node$2.tnode_leaf_search(to$1, cmp, ));
lcoc_core.vreset$BANG_(vnode$1, node$2, );
if(i$3.isOdd){
to_idx$1=(1+i$3);
}else if((0==(1&flags$2))){
to_idx$1=i$3;
}else{
to_idx$1=(1+i$3);
}
}else{
final dc.int i$4=(node$2.tnode_branch_search(to$1, cmp, ));
final dc.int rank_1$2=(rank$3-1);
final dc.List arr$6=node$2.arr;
if(i$4.isOdd){
rank$3=rank_1$2;
node$2=(arr$6[(1+i$4)]);
continue;
}else{
final dc.dynamic some$7546_$AUTO_$3=(arr$6[i$4]);
if((null==some$7546_$AUTO_$3)){
rank$3=rank_1$2;
node$2=(arr$6[(2+i$4)]);
continue;
}else{
final dc.dynamic child$2=some$7546_$AUTO_$3;
rank$3=rank_1$2;
node$2=child$2;
continue;
}
}
}
break;
} while(true);
}
return lcoc_core.iterator_seq(lcoc_core.TreapIterator((from_node$1 as lcoc_core.TreapNode), from_idx$1, from_rank$1, idxs$1, nodes$1, (dc.dynamic p1$9311_$SHARP_$1, dc.dynamic p2$9312_$SHARP_$1, ){
return dc.MapEntry<K, V>((p1$9311_$SHARP_$1 as K), (p2$9312_$SHARP_$1 as V), );
}, lcoc_core.deref(vnode$1, ), to_idx$1, ), );
}

dc.dynamic $_sorted_rseq$3(dc.dynamic from$2, dc.dynamic to$2, dc.dynamic flags$3, ){
final dc.int flags$4=(flags$3 as dc.int);
final dc.List<lcoc_core.TreapNode> nodes$2=(dc.List<lcoc_core.TreapNode>.filled(top_rank, root, ));
final dc.List<dc.int> idxs$2=(dc.List<dc.int>.filled(top_rank, 0, ));
final lcoc_core.Volatile vnode$2=lcoc_core.volatile$BANG_(root, );
late final dc.int to_idx$2;
if((0==(2&flags$4))){
to_idx$2=root.arr.length;
}else{
dc.int rank$4=top_rank;
lcoc_core.TreapNode node$3=root;
do {
if((0==rank$4)){
final dc.int i$5=(node$3.tnode_leaf_search(to$2, cmp, ));
lcoc_core.vreset$BANG_(vnode$2, node$3, );
if(i$5.isOdd){
to_idx$2=(1+i$5);
}else if((0==(1&flags$4))){
to_idx$2=i$5;
}else{
to_idx$2=(2+i$5);
}
}else{
final dc.int i$6=(node$3.tnode_branch_search(to$2, cmp, ));
final dc.int rank_1$3=(rank$4-1);
final dc.List arr$7=node$3.arr;
final lcoc_core.TreapNode v$8151_$AUTO_$5=node$3;
nodes$2[rank_1$3]=v$8151_$AUTO_$5;
if(i$6.isOdd){
final dc.int v$8151_$AUTO_$6=i$6;
idxs$2[rank_1$3]=v$8151_$AUTO_$6;
rank$4=rank_1$3;
node$3=(arr$7[(1+i$6)]);
continue;
}else{
final dc.dynamic some$7546_$AUTO_$4=(arr$7[i$6]);
if((null==some$7546_$AUTO_$4)){
final dc.int v$8151_$AUTO_$7=i$6;
idxs$2[rank_1$3]=v$8151_$AUTO_$7;
rank$4=rank_1$3;
node$3=(arr$7[(2+i$6)]);
continue;
}else{
final dc.dynamic child$3=some$7546_$AUTO_$4;
final dc.int v$8151_$AUTO_$8=(i$6-1);
idxs$2[rank_1$3]=v$8151_$AUTO_$8;
rank$4=rank_1$3;
node$3=child$3;
continue;
}
}
}
break;
} while(true);
}
final dc.dynamic to_node$1=lcoc_core.deref(vnode$2, );
late final dc.int to_rank$1;
if(dc.identical(to_node$1, (root as dc.Object?), )){
to_rank$1=top_rank;
}else{
to_rank$1=0;
}
final dc.dynamic $UNDERSCORE_$4=lcoc_core.vreset$BANG_(vnode$2, null, );
late final dc.int from_idx$2;
if((0==(8&flags$4))){
from_idx$2=0;
}else{
dc.int rank$5=top_rank;
lcoc_core.TreapNode node$4=root;
do {
if((0==rank$5)){
final dc.int i$7=(node$4.tnode_leaf_search(from$2, cmp, ));
lcoc_core.vreset$BANG_(vnode$2, node$4, );
if(i$7.isOdd){
from_idx$2=(1+i$7);
}else if((0==(4&flags$4))){
from_idx$2=(2+i$7);
}else{
from_idx$2=i$7;
}
}else{
final dc.int i$8=(node$4.tnode_branch_search(from$2, cmp, ));
final dc.int rank_1$4=(rank$5-1);
final dc.List arr$8=node$4.arr;
if(i$8.isOdd){
rank$5=rank_1$4;
node$4=(arr$8[(1+i$8)]);
continue;
}else{
final dc.dynamic some$7546_$AUTO_$5=(arr$8[i$8]);
if((null==some$7546_$AUTO_$5)){
rank$5=rank_1$4;
node$4=(arr$8[(2+i$8)]);
continue;
}else{
final dc.dynamic child$4=some$7546_$AUTO_$5;
rank$5=rank_1$4;
node$4=child$4;
continue;
}
}
}
break;
} while(true);
}
return lcoc_core.iterator_seq(lcoc_core.TreapReverseIterator((to_node$1 as lcoc_core.TreapNode), to_idx$2, to_rank$1, idxs$2, nodes$2, (dc.dynamic p1$9313_$SHARP_$1, dc.dynamic p2$9314_$SHARP_$1, ){
return dc.MapEntry<K, V>((p1$9313_$SHARP_$1 as K), (p2$9314_$SHARP_$1 as V), );
}, lcoc_core.deref(vnode$2, ), from_idx$2, ), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END HashRankedWideTreapMap

// BEGIN HashRankedWideTreapMapReifyoo5awc$1
class HashRankedWideTreapMapReifyoo5awc$1<V, K> extends dc.Object with d_collection.IterableMixin<dc.MapEntry<K, V>> implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface {
final meta$1;
final dc.int top_rank;
final lcoc_core.TreapNode root;

HashRankedWideTreapMapReifyoo5awc$1(this.meta$1, this.top_rank, this.root, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.HashRankedWideTreapMapReifyoo5awc$1<V, K>(m$2395_$AUTO_$1, top_rank, root, );
}

dc.Iterator<dc.MapEntry<K, V>> get iterator{
return lcoc_core.TreapIterator(root, 0, top_rank, (dc.List<dc.int>.filled(top_rank, 0, )), (dc.List<lcoc_core.TreapNode>.filled(top_rank, root, )), (dc.dynamic p1$9307_$SHARP_$1, dc.dynamic p2$9308_$SHARP_$1, ){
return dc.MapEntry<K, V>((p1$9307_$SHARP_$1 as K), (p2$9308_$SHARP_$1 as V), );
}, null, 0, );
}
}

// END HashRankedWideTreapMapReifyoo5awc$1

// BEGIN HashRankedWideTreapMapReifyoo5awc$2
class HashRankedWideTreapMapReifyoo5awc$2<V, K> extends dc.Object with d_collection.IterableMixin<K> implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface {
final meta$2;
final dc.int top_rank;
final lcoc_core.TreapNode root;

HashRankedWideTreapMapReifyoo5awc$2(this.meta$2, this.top_rank, this.root, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.HashRankedWideTreapMapReifyoo5awc$2<V, K>(m$2395_$AUTO_$2, top_rank, root, );
}

dc.Iterator<K> get iterator{
return lcoc_core.TreapIterator(root, 0, top_rank, (dc.List<dc.int>.filled(top_rank, 0, )), (dc.List<lcoc_core.TreapNode>.filled(top_rank, root, )), (dc.dynamic k$2, dc.dynamic $UNDERSCORE_$1, ){
return k$2;
}, null, 0, );
}
}

// END HashRankedWideTreapMapReifyoo5awc$2

// BEGIN HashRankedWideTreapMapReifyoo5awc$3
class HashRankedWideTreapMapReifyoo5awc$3<V, K> extends dc.Object with d_collection.IterableMixin<V> implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface {
final meta$3;
final dc.int top_rank;
final lcoc_core.TreapNode root;

HashRankedWideTreapMapReifyoo5awc$3(this.meta$3, this.top_rank, this.root, ):super();

dc.dynamic $_meta$0(){
return meta$3;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$3, ){
return lcoc_core.HashRankedWideTreapMapReifyoo5awc$3<V, K>(m$2395_$AUTO_$3, top_rank, root, );
}

dc.Iterator<V> get iterator{
return lcoc_core.TreapIterator(root, 0, top_rank, (dc.List<dc.int>.filled(top_rank, 0, )), (dc.List<lcoc_core.TreapNode>.filled(top_rank, root, )), (dc.dynamic $UNDERSCORE_$2, dc.dynamic v$1, ){
return v$1;
}, null, 0, );
}
}

// END HashRankedWideTreapMapReifyoo5awc$3

// BEGIN HashRankedWideTreapSet
class HashRankedWideTreapSet<E> extends dc.Object with lcoc_core.EqualsEquivMixin, d_collection.SetMixin<E>, lcoc_core.ToStringMixin implements lcoc_core.IPrint$iface, lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.IEquiv$iface, lcoc_core.IHash$iface, lcoc_core.ISeqable$iface, lcoc_core.ICounted$iface, lcoc_core.ILookup$iface, lcoc_core.ISet$iface, lcoc_core.IFn$iface, lcoc_core.IReduce$iface {
final meta;
final lcoc_core.TreapNode root;
final dc.int top_rank;
final dc.int Function(dc.dynamic, dc.dynamic, ) cmp;
final cmpf;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

HashRankedWideTreapSet(this.meta, this.root, this.top_rank, this.cmp, this.cmpf, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

dc.bool contains(dc.Object? k$1, ){
final lcoc_core.HashRankedWideTreapSet<E> o7834$1=this;
final dc.dynamic k7835$1=k$1;
final lcoc_core.HashRankedWideTreapSet<E> not_found7836$1=this;
late final dc.dynamic $if_$1;
if((o7834$1 is lcoc_core.ILookup$iface)){
$if_$1=((o7834$1 as lcoc_core.ILookup$iface).$_lookup$2(k7835$1, not_found7836$1, ));
}else{
$if_$1=((lcoc_core.ILookup.extensions(o7834$1, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$1, k7835$1, not_found7836$1, ));
}
final dc.bool $1=dc.identical($if_$1, (this as dc.Object?), );
if($1){
return false;
}
return true;
}

E? lookup(dc.Object? k$2, ){
final lcoc_core.HashRankedWideTreapSet<E> o7834$2=this;
final dc.dynamic k7835$2=k$2;
if((o7834$2 is lcoc_core.ILookup$iface)){
return ((o7834$2 as lcoc_core.ILookup$iface).$_lookup$2(k7835$2, null, ));
}
return ((lcoc_core.ILookup.extensions(o7834$2, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$2, k7835$2, null, ));
}

dc.bool add(E e$1, ){
throw dc.UnsupportedError("add not supported on HashRankedWideTreapSet", );
}

dc.bool remove(dc.Object? e$2, ){
throw dc.UnsupportedError("remove not supported on HashRankedWideTreapSet", );
}

void clear(){
throw dc.UnsupportedError("clear not supported on HashRankedWideTreapSet", );
}

dc.int get length{
return root.cnt;
}

dc.Iterator<E> get iterator{
return lcoc_core.TreapIterator(root, 0, top_rank, (dc.List<dc.int>.filled(top_rank, 0, )), (dc.List<lcoc_core.TreapNode>.filled(top_rank, root, )), (dc.dynamic k$3, dc.dynamic $UNDERSCORE_$1, ){
return k$3;
}, null, 0, );
}

dc.Set<E> toSet(){
return this;
}

void retainAll(dc.Iterable<dc.Object?> elements$1, ){
throw dc.UnsupportedError("retainAll not supported on HashRankedWideTreapSet", );
}

dc.Set<E> union(dc.Set<E> that$1, ){
return (lcoc_core.into.$_invoke$2(this, that$1, ));
}

dc.Set<E> intersection(dc.Set<dc.Object?> that$2, ){
return (lcoc_core.transduce.$_invoke$4((lcoc_core.remove.$_invoke$1((dc.dynamic p1$9324_$SHARP_$1, ){
return (that$2.contains(p1$9324_$SHARP_$1, ));
}, )), lcoc_core.disj, this, this, ));
}

dc.Set<E> difference(dc.Set<dc.Object?> that$3, ){
final dc.Set<dc.Object?> coll7722$1=that$3;
final lcoc_core.IFn$iface f7723$1=lcoc_core.disj;
final lcoc_core.HashRankedWideTreapSet<E> start7724$1=this;
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

lcoc_core.HashRankedWideTreapSet<R> cast<R>(){
return lcoc_core.HashRankedWideTreapSet<R>(meta, root, top_rank, cmp, cmpf, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_print$1(dc.dynamic sink$1, ){
final lcoc_core.HashRankedWideTreapSet<E> o7668$1=this;
late final dc.dynamic $if_$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return lcoc_core.print_sequential("#{", "}", $if_$2, sink$1, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical(new_meta$1, meta, )){
return this;
}
return lcoc_core.HashRankedWideTreapSet<E>(new_meta$1, root, top_rank, cmp, cmpf, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
final dc.int rank$1=lcoc_core.hashrank(o$1, );
lcoc_core.TreapNode root$1=root;
dc.int top_rank$1=top_rank;
do {
if((top_rank$1<rank$1)){
final dc.int arg$1=root$1.cnt;
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(1, root$1, ));
root$1=lcoc_core.TreapNode(arg$1, fl$1, );
top_rank$1=(1+top_rank$1);
continue;
}
return lcoc_core.HashRankedWideTreapSet<E>(meta, (root$1.tnode_assoc(top_rank$1, rank$1, o$1, o$1, cmp, )), top_rank$1, cmp, cmpf, -1, );
} while(true);
}

dc.dynamic $_empty$0(){
return lcoc_core.HashRankedWideTreapSet<E>(meta, (lcoc_core.$_empty_treap_node as lcoc_core.TreapNode), 0, cmp, cmpf, -1, );
}

dc.dynamic $_equiv$1(dc.dynamic other$1, ){
final dc.bool and$7533_$AUTO_$1=lcoc_core.set$QMARK_(other$1, );
if(and$7533_$AUTO_$1){
final dc.dynamic coll7742$1=other$1;
late final dc.dynamic $if_$3;
if((coll7742$1 is lcoc_core.ICounted$iface)){
$if_$3=((coll7742$1 as lcoc_core.ICounted$iface).$_count$0());
}else{
$if_$3=((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, ));
}
final dc.bool and$7533_$AUTO_$2=(root.cnt==$if_$3);
if(and$7533_$AUTO_$2){
return lcoc_core.every$QMARK_((dc.dynamic p1$9325_$SHARP_$1, ){
return dc.identical(p1$9325_$SHARP_$1, (root.tnode_lookup(p1$9325_$SHARP_$1, other$1, top_rank, cmp, )), );
}, other$1, );
}
return and$7533_$AUTO_$2;
}
return and$7533_$AUTO_$1;
}

dc.dynamic $_hash$0(){
final dc.int h$8279_$AUTO_$1=$UNDERSCORE_$UNDERSCORE_hash;
if((h$8279_$AUTO_$1<0)){
final dc.int h$8279_$AUTO_$2=lcoc_core.hash_unordered_coll(this, );
$UNDERSCORE_$UNDERSCORE_hash=h$8279_$AUTO_$2;
return h$8279_$AUTO_$2;
}
return h$8279_$AUTO_$1;
}

dc.dynamic $_seq$0(){
return lcoc_core.iterator_seq(this.iterator, );
}

dc.dynamic $_count$0(){
return root.cnt;
}

dc.dynamic $_lookup$1(dc.dynamic k$4, ){
final lcoc_core.HashRankedWideTreapSet<E> o7834$3=this;
final dc.dynamic k7835$3=k$4;
if((o7834$3 is lcoc_core.ILookup$iface)){
return ((o7834$3 as lcoc_core.ILookup$iface).$_lookup$2(k7835$3, null, ));
}
return ((lcoc_core.ILookup.extensions(o7834$3, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$3, k7835$3, null, ));
}

dc.dynamic $_lookup$2(dc.dynamic k$5, dc.dynamic not_found$1, ){
return (root.tnode_lookup(k$5, not_found$1, top_rank, cmp, ));
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$6, ){
final lcoc_core.HashRankedWideTreapSet<E> o7834$4=this;
final dc.dynamic k7835$4=k$6;
final lcoc_core.HashRankedWideTreapSet<E> not_found7836$4=this;
late final dc.dynamic $if_$4;
if((o7834$4 is lcoc_core.ILookup$iface)){
$if_$4=((o7834$4 as lcoc_core.ILookup$iface).$_lookup$2(k7835$4, not_found7836$4, ));
}else{
$if_$4=((lcoc_core.ILookup.extensions(o7834$4, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$4, k7835$4, not_found7836$4, ));
}
final dc.bool $2=dc.identical($if_$4, (this as dc.Object?), );
if($2){
return false;
}
return true;
}

dc.dynamic $_disjoin$1(dc.dynamic v$1, ){
final lcoc_core.TreapNode new_root$1=(root.tnode_without(top_rank, lcoc_core.hashrank(v$1, ), v$1, cmp, ));
if(dc.identical((new_root$1 as dc.Object?), (root as dc.Object?), )){
return this;
}
lcoc_core.TreapNode root$2=new_root$1;
dc.dynamic top_rank$2=top_rank;
do {
if((lcoc_core.$EQ_.$_invoke$2(1, root$2.arr.length, ))){
root$2=(root$2.arr[0]);
top_rank$2=((top_rank$2 as dc.num)-1);
continue;
}
return lcoc_core.HashRankedWideTreapSet<E>(meta, root$2, (top_rank$2 as dc.int), cmp, cmpf, -1, );
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic k$7, ){
final lcoc_core.HashRankedWideTreapSet<E> o7838$1=this;
final dc.dynamic k7839$1=k$7;
if((o7838$1 is lcoc_core.ILookup$iface)){
return ((o7838$1 as lcoc_core.ILookup$iface).$_lookup$1(k7839$1, ));
}
return ((lcoc_core.ILookup.extensions(o7838$1, ) as lcoc_core.ILookup$ext).$_lookup$1(o7838$1, k7839$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic k$8, dc.dynamic not_found$2, ){
final lcoc_core.HashRankedWideTreapSet<E> o7834$5=this;
final dc.dynamic k7835$5=k$8;
final dc.dynamic not_found7836$5=not_found$2;
if((o7834$5 is lcoc_core.ILookup$iface)){
return ((o7834$5 as lcoc_core.ILookup$iface).$_lookup$2(k7835$5, not_found7836$5, ));
}
return ((lcoc_core.ILookup.extensions(o7834$5, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$5, k7835$5, not_found7836$5, ));
}

dc.dynamic $_reduce$2(dc.dynamic f$1, dc.dynamic init$1, ){
final lcoc_core.TreapIterator it$1=lcoc_core.TreapIterator(root, 0, top_rank, (dc.List<dc.int>.filled(top_rank, 0, )), (dc.List<lcoc_core.TreapNode>.filled(top_rank, root, )), null, null, 0, );
dc.dynamic acc$1=init$1;
do {
late final dc.bool $if_$5;
if((it$1.moveNext())){
$if_$5=false;
}else{
$if_$5=true;
}
if($if_$5){
return acc$1;
}
final dc.int idx$1=it$1.idx;
final dc.List arr$1=it$1.node.arr;
final dc.dynamic arg$2=(arr$1[(idx$1-1)]);
late final dc.dynamic acc$2;
if((f$1 is dc.Function)){
acc$2=(f$1 as dc.Function)(acc$1, arg$2, );
}else if((f$1 is lcoc_core.IFn$iface)){
acc$2=((f$1 as lcoc_core.IFn$iface).$_invoke$2(acc$1, arg$2, ));
}else{
acc$2=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, acc$1, arg$2, ));
}
if(lcoc_core.reduced$QMARK_(acc$2, )){
return lcoc_core.unreduced(acc$2, );
}
acc$1=acc$2;
continue;
} while(true);
}

dc.dynamic $_reduce$1(dc.dynamic f$2, ){
if((0<root.cnt)){
final lcoc_core.TreapIterator it$2=lcoc_core.TreapIterator(root, 0, top_rank, (dc.List<dc.int>.filled(top_rank, 0, )), (dc.List<lcoc_core.TreapNode>.filled(top_rank, root, )), null, null, 0, );
final lcoc_core.TreapIterator G$9326_$1=it$2;
G$9326_$1.moveNext();
final dc.int idx$2=G$9326_$1.idx;
final dc.List arr$2=it$2.node.arr;
final dc.dynamic init$2=(arr$2[(idx$2-1)]);
dc.dynamic acc$3=init$2;
do {
late final dc.bool $if_$6;
if((it$2.moveNext())){
$if_$6=false;
}else{
$if_$6=true;
}
if($if_$6){
return acc$3;
}
final dc.int idx$3=it$2.idx;
final dc.List arr$3=it$2.node.arr;
final dc.dynamic arg$3=(arr$3[(idx$3-1)]);
late final dc.dynamic acc$4;
if((f$2 is dc.Function)){
acc$4=(f$2 as dc.Function)(acc$3, arg$3, );
}else if((f$2 is lcoc_core.IFn$iface)){
acc$4=((f$2 as lcoc_core.IFn$iface).$_invoke$2(acc$3, arg$3, ));
}else{
acc$4=(lcoc_core.IFn.extensions(f$2, ).$_invoke$2(f$2, acc$3, arg$3, ));
}
if(lcoc_core.reduced$QMARK_(acc$4, )){
return lcoc_core.unreduced(acc$4, );
}
acc$3=acc$4;
continue;
} while(true);
}
if((f$2 is dc.Function)){
return (f$2 as dc.Function)();
}
if((f$2 is lcoc_core.IFn$iface)){
return ((f$2 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(f$2, ).$_invoke$0(f$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END HashRankedWideTreapSet

// BEGIN IAssociative
dc.dynamic IAssociative=const lcoc_core.IAssociative$iprot();

// END IAssociative

// BEGIN IAssociative$ext
abstract class IAssociative$ext extends dc.Object {

dc.dynamic $_assoc$2(dc.dynamic coll$1, dc.dynamic k$2, dc.dynamic v$2, );
}

// END IAssociative$ext

// BEGIN IAssociative$iface
abstract class IAssociative$iface extends dc.Object {

dc.dynamic $_assoc$2(dc.dynamic k$1, dc.dynamic v$1, );
}

// END IAssociative$iface

// BEGIN IAssociative$iprot
class IAssociative$iprot extends dc.Object implements lcoc_core.IProtocol {

const IAssociative$iprot():super();

dc.dynamic satisfies(dc.dynamic x$21, ){
final dc.bool or$7573_$AUTO_$35=(x$21 is lcoc_core.IAssociative$iface);
if(or$7573_$AUTO_$35){
return or$7573_$AUTO_$35;
}
final dc.bool or$7573_$AUTO_$36=(x$21 is dc.Null);
if(or$7573_$AUTO_$36){
return or$7573_$AUTO_$36;
}
final dc.bool or$7573_$AUTO_$37=(x$21 is dc.MapEntry);
if(or$7573_$AUTO_$37){
return or$7573_$AUTO_$37;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$22, ){
if((x$22 is dc.Null)){
return lcoc_core.$C$dc$DOT_Null$$lcoc_core$DOT_IAssociative$D$$extension;
}
if((x$22 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IAssociative$D$$extension;
}
throw dc.Exception((("No extension of protocol IAssociative found for type "+(x$22.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IAssociative$iprot

// BEGIN IAtom
dc.dynamic IAtom=const lcoc_core.IAtom$iprot();

// END IAtom

// BEGIN IAtom$ext
abstract class IAtom$ext extends dc.Object {
}

// END IAtom$ext

// BEGIN IAtom$iface
abstract class IAtom$iface extends dc.Object {
}

// END IAtom$iface

// BEGIN IAtom$iprot
class IAtom$iprot extends dc.Object implements lcoc_core.IProtocol {

const IAtom$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.IAtom$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IAtom found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IAtom$iprot

// BEGIN IChunk
dc.dynamic IChunk=const lcoc_core.IChunk$iprot();

// END IChunk

// BEGIN IChunk$ext
abstract class IChunk$ext extends dc.Object {

dc.dynamic $_drop_first$0(dc.dynamic coll$1, );

dc.dynamic $_chunk_reduce$2(dc.dynamic coll$2, dc.dynamic f$2, dc.dynamic init$2, );
}

// END IChunk$ext

// BEGIN IChunk$iface
abstract class IChunk$iface extends dc.Object {

dc.dynamic $_drop_first$0();

dc.dynamic $_chunk_reduce$2(dc.dynamic f$1, dc.dynamic init$1, );
}

// END IChunk$iface

// BEGIN IChunk$iprot
class IChunk$iprot extends dc.Object implements lcoc_core.IProtocol {

const IChunk$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.IChunk$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IChunk found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IChunk$iprot

// BEGIN IChunkedSeq
dc.dynamic IChunkedSeq=const lcoc_core.IChunkedSeq$iprot();

// END IChunkedSeq

// BEGIN IChunkedSeq$ext
abstract class IChunkedSeq$ext extends dc.Object {

dc.dynamic $_chunked_first$0(dc.dynamic coll$1, );

dc.dynamic $_chunked_rest$0(dc.dynamic coll$2, );

dc.dynamic $_chunked_next$0(dc.dynamic coll$3, );
}

// END IChunkedSeq$ext

// BEGIN IChunkedSeq$iface
abstract class IChunkedSeq$iface extends dc.Object {

dc.dynamic $_chunked_first$0();

dc.dynamic $_chunked_rest$0();

dc.dynamic $_chunked_next$0();
}

// END IChunkedSeq$iface

// BEGIN IChunkedSeq$iprot
class IChunkedSeq$iprot extends dc.Object implements lcoc_core.IProtocol {

const IChunkedSeq$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.IChunkedSeq$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IChunkedSeq found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IChunkedSeq$iprot

// BEGIN ICollection
dc.dynamic ICollection=const lcoc_core.ICollection$iprot();

// END ICollection

// BEGIN ICollection$ext
abstract class ICollection$ext extends dc.Object {

dc.dynamic $_conj$1(dc.dynamic coll$1, dc.dynamic o$2, );
}

// END ICollection$ext

// BEGIN ICollection$iface
abstract class ICollection$iface extends dc.Object {

dc.dynamic $_conj$1(dc.dynamic o$1, );
}

// END ICollection$iface

// BEGIN ICollection$iprot
class ICollection$iprot extends dc.Object implements lcoc_core.IProtocol {

const ICollection$iprot():super();

dc.dynamic satisfies(dc.dynamic x$11, ){
final dc.bool or$7573_$AUTO_$18=(x$11 is lcoc_core.ICollection$iface);
if(or$7573_$AUTO_$18){
return or$7573_$AUTO_$18;
}
final dc.bool or$7573_$AUTO_$19=(x$11 is dc.Null);
if(or$7573_$AUTO_$19){
return or$7573_$AUTO_$19;
}
final dc.bool or$7573_$AUTO_$20=(x$11 is dc.MapEntry);
if(or$7573_$AUTO_$20){
return or$7573_$AUTO_$20;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$12, ){
if((x$12 is dc.Null)){
return lcoc_core.$C$dc$DOT_Null$$lcoc_core$DOT_ICollection$D$$extension;
}
if((x$12 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_ICollection$D$$extension;
}
throw dc.Exception((("No extension of protocol ICollection found for type "+(x$12.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ICollection$iprot

// BEGIN IComparable
dc.dynamic IComparable=const lcoc_core.IComparable$iprot();

// END IComparable

// BEGIN IComparable$ext
abstract class IComparable$ext extends dc.Object {

dc.dynamic $_compare$1(dc.dynamic o$1, dc.dynamic other$2, );
}

// END IComparable$ext

// BEGIN IComparable$iface
abstract class IComparable$iface extends dc.Object {

dc.dynamic $_compare$1(dc.dynamic other$1, );
}

// END IComparable$iface

// BEGIN IComparable$iprot
class IComparable$iprot extends dc.Object implements lcoc_core.IProtocol {

const IComparable$iprot():super();

dc.dynamic satisfies(dc.dynamic x$31, ){
final dc.bool or$7573_$AUTO_$45=(x$31 is lcoc_core.IComparable$iface);
if(or$7573_$AUTO_$45){
return or$7573_$AUTO_$45;
}
final dc.bool or$7573_$AUTO_$46=(x$31 is dc.MapEntry);
if(or$7573_$AUTO_$46){
return or$7573_$AUTO_$46;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$32, ){
if((x$32 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IComparable$D$$extension;
}
throw dc.Exception((("No extension of protocol IComparable found for type "+(x$32.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IComparable$iprot

// BEGIN ICounted
dc.dynamic ICounted=const lcoc_core.ICounted$iprot();

// END ICounted

// BEGIN ICounted$ext
abstract class ICounted$ext extends dc.Object {

dc.dynamic $_count$0(dc.dynamic coll$1, );
}

// END ICounted$ext

// BEGIN ICounted$iface
abstract class ICounted$iface extends dc.Object {

dc.dynamic $_count$0();
}

// END ICounted$iface

// BEGIN ICounted$iprot
class ICounted$iprot extends dc.Object implements lcoc_core.IProtocol {

const ICounted$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.ICounted$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
final dc.bool or$7573_$AUTO_$2=(x$1 is dc.MapEntry);
if(or$7573_$AUTO_$2){
return or$7573_$AUTO_$2;
}
final dc.bool or$7573_$AUTO_$3=(x$1 is dc.Match);
if(or$7573_$AUTO_$3){
return or$7573_$AUTO_$3;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
if((x$2 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_ICounted$D$$extension;
}
if((x$2 is dc.Match)){
return lcoc_core.$C$dc$DOT_Match$$lcoc_core$DOT_ICounted$D$$extension;
}
return lcoc_core.$C$fallback$$lcoc_core$DOT_ICounted$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ICounted$iprot

// BEGIN IDeref
dc.dynamic IDeref=const lcoc_core.IDeref$iprot();

// END IDeref

// BEGIN IDeref$ext
abstract class IDeref$ext extends dc.Object {

dc.dynamic $_deref$0(dc.dynamic o$1, );
}

// END IDeref$ext

// BEGIN IDeref$iface
abstract class IDeref$iface extends dc.Object {

dc.dynamic $_deref$0();
}

// END IDeref$iface

// BEGIN IDeref$iprot
class IDeref$iprot extends dc.Object implements lcoc_core.IProtocol {

const IDeref$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.IDeref$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IDeref found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IDeref$iprot

// BEGIN IEditableCollection
dc.dynamic IEditableCollection=const lcoc_core.IEditableCollection$iprot();

// END IEditableCollection

// BEGIN IEditableCollection$ext
abstract class IEditableCollection$ext extends dc.Object {

dc.dynamic $_as_transient$0(dc.dynamic coll$1, );
}

// END IEditableCollection$ext

// BEGIN IEditableCollection$iface
abstract class IEditableCollection$iface extends dc.Object {

dc.dynamic $_as_transient$0();
}

// END IEditableCollection$iface

// BEGIN IEditableCollection$iprot
class IEditableCollection$iprot extends dc.Object implements lcoc_core.IProtocol {

const IEditableCollection$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.IEditableCollection$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IEditableCollection found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IEditableCollection$iprot

// BEGIN IEmptyableCollection
dc.dynamic IEmptyableCollection=const lcoc_core.IEmptyableCollection$iprot();

// END IEmptyableCollection

// BEGIN IEmptyableCollection$ext
abstract class IEmptyableCollection$ext extends dc.Object {

dc.dynamic $_empty$0(dc.dynamic coll$1, );
}

// END IEmptyableCollection$ext

// BEGIN IEmptyableCollection$iface
abstract class IEmptyableCollection$iface extends dc.Object {

dc.dynamic $_empty$0();
}

// END IEmptyableCollection$iface

// BEGIN IEmptyableCollection$iprot
class IEmptyableCollection$iprot extends dc.Object implements lcoc_core.IProtocol {

const IEmptyableCollection$iprot():super();

dc.dynamic satisfies(dc.dynamic x$13, ){
final dc.bool or$7573_$AUTO_$21=(x$13 is lcoc_core.IEmptyableCollection$iface);
if(or$7573_$AUTO_$21){
return or$7573_$AUTO_$21;
}
final dc.bool or$7573_$AUTO_$22=(x$13 is dc.MapEntry);
if(or$7573_$AUTO_$22){
return or$7573_$AUTO_$22;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$14, ){
if((x$14 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IEmptyableCollection$D$$extension;
}
return lcoc_core.$C$fallback$$lcoc_core$DOT_IEmptyableCollection$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IEmptyableCollection$iprot

// BEGIN IEquiv
dc.dynamic IEquiv=const lcoc_core.IEquiv$iprot();

// END IEquiv

// BEGIN IEquiv$ext
abstract class IEquiv$ext extends dc.Object {

dc.dynamic $_equiv$1(dc.dynamic o$1, dc.dynamic other$2, );
}

// END IEquiv$ext

// BEGIN IEquiv$iface
abstract class IEquiv$iface extends dc.Object {

dc.dynamic $_equiv$1(dc.dynamic other$1, );
}

// END IEquiv$iface

// BEGIN IEquiv$iprot
class IEquiv$iprot extends dc.Object implements lcoc_core.IProtocol {

const IEquiv$iprot():super();

dc.dynamic satisfies(dc.dynamic x$39, ){
final dc.bool or$7573_$AUTO_$51=(x$39 is lcoc_core.IEquiv$iface);
if(or$7573_$AUTO_$51){
return or$7573_$AUTO_$51;
}
final dc.bool or$7573_$AUTO_$52=(x$39 is dc.MapEntry);
if(or$7573_$AUTO_$52){
return or$7573_$AUTO_$52;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$40, ){
if((x$40 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IEquiv$D$$extension;
}
return lcoc_core.$C$fallback$$lcoc_core$DOT_IEquiv$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IEquiv$iprot

// BEGIN IExceptionInfo
dc.dynamic IExceptionInfo=const lcoc_core.IExceptionInfo$iprot();

// END IExceptionInfo

// BEGIN IExceptionInfo$ext
abstract class IExceptionInfo$ext extends dc.Object {

dc.dynamic $_ex_data$0(dc.dynamic e$1, );
}

// END IExceptionInfo$ext

// BEGIN IExceptionInfo$iface
abstract class IExceptionInfo$iface extends dc.Object {

dc.dynamic $_ex_data$0();
}

// END IExceptionInfo$iface

// BEGIN IExceptionInfo$iprot
class IExceptionInfo$iprot extends dc.Object implements lcoc_core.IProtocol {

const IExceptionInfo$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.IExceptionInfo$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
return lcoc_core.$C$fallback$$lcoc_core$DOT_IExceptionInfo$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IExceptionInfo$iprot

// BEGIN IFind
dc.dynamic IFind=const lcoc_core.IFind$iprot();

// END IFind

// BEGIN IFind$ext
abstract class IFind$ext extends dc.Object {

dc.dynamic $_find$1(dc.dynamic coll$1, dc.dynamic k$2, );
}

// END IFind$ext

// BEGIN IFind$iface
abstract class IFind$iface extends dc.Object {

dc.dynamic $_find$1(dc.dynamic k$1, );
}

// END IFind$iface

// BEGIN IFind$iprot
class IFind$iprot extends dc.Object implements lcoc_core.IProtocol {

const IFind$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.IFind$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
return lcoc_core.$C$fallback$$lcoc_core$DOT_IFind$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFind$iprot

// BEGIN IFn
dc.dynamic IFn=const lcoc_core.IFn$iprot();

// END IFn

// BEGIN IFn$ext
abstract class IFn$ext extends dc.Object {

dc.dynamic $_invoke$6(dc.dynamic $this_$1, dc.dynamic a$11, dc.dynamic b$10, dc.dynamic c$9, dc.dynamic d$8, dc.dynamic e$7, dc.dynamic f$6, );

dc.dynamic $_invoke$0(dc.dynamic $this_$2, );

dc.dynamic $_invoke$3(dc.dynamic $this_$3, dc.dynamic a$12, dc.dynamic b$11, dc.dynamic c$10, );

dc.dynamic $_invoke$5(dc.dynamic $this_$4, dc.dynamic a$13, dc.dynamic b$12, dc.dynamic c$11, dc.dynamic d$9, dc.dynamic e$8, );

dc.dynamic $_invoke$2(dc.dynamic $this_$5, dc.dynamic a$14, dc.dynamic b$13, );

dc.dynamic $_invoke$1(dc.dynamic $this_$6, dc.dynamic a$15, );

dc.dynamic $_invoke$8(dc.dynamic $this_$7, dc.dynamic a$16, dc.dynamic b$14, dc.dynamic c$12, dc.dynamic d$10, dc.dynamic e$9, dc.dynamic f$7, dc.dynamic g$5, dc.dynamic h$4, );

dc.dynamic $_invoke$4(dc.dynamic $this_$8, dc.dynamic a$17, dc.dynamic b$15, dc.dynamic c$13, dc.dynamic d$11, );

dc.dynamic $_invoke$9(dc.dynamic $this_$9, dc.dynamic a$18, dc.dynamic b$16, dc.dynamic c$14, dc.dynamic d$12, dc.dynamic e$10, dc.dynamic f$8, dc.dynamic g$6, dc.dynamic h$5, dc.dynamic i$3, );

dc.dynamic $_invoke$7(dc.dynamic $this_$10, dc.dynamic a$19, dc.dynamic b$17, dc.dynamic c$15, dc.dynamic d$13, dc.dynamic e$11, dc.dynamic f$9, dc.dynamic g$7, );

dc.dynamic $_invoke_more$10(dc.dynamic $this_$11, dc.dynamic a$20, dc.dynamic b$18, dc.dynamic c$16, dc.dynamic d$14, dc.dynamic e$12, dc.dynamic f$10, dc.dynamic g$8, dc.dynamic h$6, dc.dynamic i$4, dc.dynamic rest$2, );

dc.dynamic $_apply$1(dc.dynamic $this_$12, dc.dynamic more$2, );
}

// END IFn$ext

// BEGIN IFn$iface
abstract class IFn$iface extends dc.Object {

dc.dynamic $_invoke$6(dc.dynamic a$1, dc.dynamic b$1, dc.dynamic c$1, dc.dynamic d$1, dc.dynamic e$1, dc.dynamic f$1, );

dc.dynamic $_invoke$0();

dc.dynamic $_invoke$3(dc.dynamic a$2, dc.dynamic b$2, dc.dynamic c$2, );

dc.dynamic $_invoke$5(dc.dynamic a$3, dc.dynamic b$3, dc.dynamic c$3, dc.dynamic d$2, dc.dynamic e$2, );

dc.dynamic $_invoke$2(dc.dynamic a$4, dc.dynamic b$4, );

dc.dynamic $_invoke$1(dc.dynamic a$5, );

dc.dynamic $_invoke$8(dc.dynamic a$6, dc.dynamic b$5, dc.dynamic c$4, dc.dynamic d$3, dc.dynamic e$3, dc.dynamic f$2, dc.dynamic g$1, dc.dynamic h$1, );

dc.dynamic $_invoke$4(dc.dynamic a$7, dc.dynamic b$6, dc.dynamic c$5, dc.dynamic d$4, );

dc.dynamic $_invoke$9(dc.dynamic a$8, dc.dynamic b$7, dc.dynamic c$6, dc.dynamic d$5, dc.dynamic e$4, dc.dynamic f$3, dc.dynamic g$2, dc.dynamic h$2, dc.dynamic i$1, );

dc.dynamic $_invoke$7(dc.dynamic a$9, dc.dynamic b$8, dc.dynamic c$7, dc.dynamic d$6, dc.dynamic e$5, dc.dynamic f$4, dc.dynamic g$3, );

dc.dynamic $_invoke_more$10(dc.dynamic a$10, dc.dynamic b$9, dc.dynamic c$8, dc.dynamic d$7, dc.dynamic e$6, dc.dynamic f$5, dc.dynamic g$4, dc.dynamic h$3, dc.dynamic i$2, dc.dynamic rest$1, );

dc.dynamic $_apply$1(dc.dynamic more$1, );
}

// END IFn$iface

// BEGIN IFn$iprot
class IFn$iprot extends dc.Object implements lcoc_core.IProtocol {

const IFn$iprot():super();

dc.dynamic satisfies(dc.dynamic x$27, ){
final dc.bool or$7573_$AUTO_$43=(x$27 is lcoc_core.IFn$iface);
if(or$7573_$AUTO_$43){
return or$7573_$AUTO_$43;
}
final dc.bool or$7573_$AUTO_$44=(x$27 is dc.MapEntry);
if(or$7573_$AUTO_$44){
return or$7573_$AUTO_$44;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$28, ){
if((x$28 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IFn$D$$extension;
}
throw dc.Exception((("No extension of protocol IFn found for type "+(x$28.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFn$iprot

// BEGIN IFnMixin_XX
mixin IFnMixin_XX on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
return null;
}

dc.dynamic call([dc.dynamic arg1$2 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg2$1 = const dc.pragma("cljd:missing-param", ), ]){
if((arg1$2==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$0());
}
if((arg2$1==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$1(arg1$2, ));
}
return (this.$_invoke$2(arg1$2, arg2$1, ));
}

dc.dynamic $_apply$1(dc.dynamic more9118$1, ){
final dc.dynamic o7668$1=more9118$1;
late final dc.dynamic more9118$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
more9118$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more9118$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==more9118$2)){
return (this.$_invoke$0());
}
final dc.dynamic arg1$3=lcoc_core.first(more9118$2, );
final dc.dynamic more9118$3=lcoc_core.next(more9118$2, );
if((null==more9118$3)){
return (this.$_invoke$1(arg1$3, ));
}
final dc.dynamic arg2$2=lcoc_core.first(more9118$3, );
final dc.dynamic more9118$4=lcoc_core.next(more9118$3, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_XX

// BEGIN IFnMixin_XXX
mixin IFnMixin_XXX on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$1, ){
return null;
}

dc.dynamic call([dc.dynamic arg1$3 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg2$2 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$1 = const dc.pragma("cljd:missing-param", ), ]){
if((arg1$3==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$0());
}
if((arg2$2==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$1(arg1$3, ));
}
if((arg3$1==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$2(arg1$3, arg2$2, ));
}
return (this.$_invoke$3(arg1$3, arg2$2, arg3$1, ));
}

dc.dynamic $_apply$1(dc.dynamic more8858$1, ){
final dc.dynamic o7668$1=more8858$1;
late final dc.dynamic more8858$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
more8858$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8858$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==more8858$2)){
return (this.$_invoke$0());
}
final dc.dynamic arg1$4=lcoc_core.first(more8858$2, );
final dc.dynamic more8858$3=lcoc_core.next(more8858$2, );
if((null==more8858$3)){
return (this.$_invoke$1(arg1$4, ));
}
final dc.dynamic arg2$3=lcoc_core.first(more8858$3, );
final dc.dynamic more8858$4=lcoc_core.next(more8858$3, );
if((null==more8858$4)){
return (this.$_invoke$2(arg1$4, arg2$3, ));
}
final dc.dynamic arg3$2=lcoc_core.first(more8858$4, );
final dc.dynamic more8858$5=lcoc_core.next(more8858$4, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_XXX

// BEGIN IFnMixin_XXXX
mixin IFnMixin_XXXX on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$1, dc.dynamic arg3$1, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$2, ){
return null;
}

dc.dynamic call([dc.dynamic arg1$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg2$3 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$2 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$1 = const dc.pragma("cljd:missing-param", ), ]){
if((arg1$4==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$0());
}
if((arg2$3==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$1(arg1$4, ));
}
if((arg3$2==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$2(arg1$4, arg2$3, ));
}
if((arg4$1==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$3(arg1$4, arg2$3, arg3$2, ));
}
return (this.$_invoke$4(arg1$4, arg2$3, arg3$2, arg4$1, ));
}

dc.dynamic $_apply$1(dc.dynamic more9062$1, ){
final dc.dynamic o7668$1=more9062$1;
late final dc.dynamic more9062$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
more9062$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more9062$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==more9062$2)){
return (this.$_invoke$0());
}
final dc.dynamic arg1$5=lcoc_core.first(more9062$2, );
final dc.dynamic more9062$3=lcoc_core.next(more9062$2, );
if((null==more9062$3)){
return (this.$_invoke$1(arg1$5, ));
}
final dc.dynamic arg2$4=lcoc_core.first(more9062$3, );
final dc.dynamic more9062$4=lcoc_core.next(more9062$3, );
if((null==more9062$4)){
return (this.$_invoke$2(arg1$5, arg2$4, ));
}
final dc.dynamic arg3$3=lcoc_core.first(more9062$4, );
final dc.dynamic more9062$5=lcoc_core.next(more9062$4, );
if((null==more9062$5)){
return (this.$_invoke$3(arg1$5, arg2$4, arg3$3, ));
}
final dc.dynamic arg4$2=lcoc_core.first(more9062$5, );
final dc.dynamic more9062$6=lcoc_core.next(more9062$5, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_XXXX

// BEGIN IFnMixin_XXXXXXY
mixin IFnMixin_XXXXXXY on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
return null;
}

dc.dynamic $_invoke$4(dc.dynamic arg1$2, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, ){
return null;
}

dc.dynamic $_invoke$6(dc.dynamic arg1$3, dc.dynamic arg2$2, dc.dynamic arg3$2, dc.dynamic arg4$2, dc.dynamic arg5$1, dc.dynamic arg6$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$3, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$5, dc.dynamic arg2$4, ){
return null;
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, ){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[arg7$1, ];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$8, arg2$7, arg3$6, arg4$5, arg5$4, arg6$3, $if_$1, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg7$2, arg8$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$9, arg2$8, arg3$7, arg4$6, arg5$5, arg6$4, $if_$2, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$10, arg2$9, arg3$8, arg4$7, arg5$6, arg6$5, $if_$3, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$10, dc.dynamic arg3$9, dc.dynamic arg4$8, dc.dynamic arg5$7, dc.dynamic arg6$6, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more9168$1, ){
final dc.List<dc.dynamic> o7668$4=(<dc.dynamic>[arg7$4, arg8$3, arg9$2, ]+(more9168$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$11, arg2$10, arg3$9, arg4$8, arg5$7, arg6$6, $if_$4, ));
}

dc.dynamic call([dc.dynamic arg1$12 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg2$11 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$10 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$9 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if((arg1$12==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$0());
}
if((arg2$11==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$1(arg1$12, ));
}
if((arg3$10==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$2(arg1$12, arg2$11, ));
}
if((arg4$9==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$3(arg1$12, arg2$11, arg3$10, ));
}
if((arg5$8==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$4(arg1$12, arg2$11, arg3$10, arg4$9, ));
}
if((arg6$7==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$5(arg1$12, arg2$11, arg3$10, arg4$9, arg5$8, ));
}
if(dc.identical(arg7$5, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$6(arg1$12, arg2$11, arg3$10, arg4$9, arg5$8, arg6$7, ));
}
final dc.List<dc.dynamic> o7668$5=(<dc.dynamic>[arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$12, arg2$11, arg3$10, arg4$9, arg5$8, arg6$7, $if_$5, ));
}

dc.dynamic $_apply$1(dc.dynamic more9168$2, ){
final dc.dynamic o7668$6=more9168$2;
late final dc.dynamic more9168$3;
if((o7668$6 is lcoc_core.ISeqable$iface)){
more9168$3=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more9168$3=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
if((null==more9168$3)){
return (this.$_invoke$0());
}
final dc.dynamic arg1$13=lcoc_core.first(more9168$3, );
final dc.dynamic more9168$4=lcoc_core.next(more9168$3, );
if((null==more9168$4)){
return (this.$_invoke$1(arg1$13, ));
}
final dc.dynamic arg2$12=lcoc_core.first(more9168$4, );
final dc.dynamic more9168$5=lcoc_core.next(more9168$4, );
if((null==more9168$5)){
return (this.$_invoke$2(arg1$13, arg2$12, ));
}
final dc.dynamic arg3$11=lcoc_core.first(more9168$5, );
final dc.dynamic more9168$6=lcoc_core.next(more9168$5, );
if((null==more9168$6)){
return (this.$_invoke$3(arg1$13, arg2$12, arg3$11, ));
}
final dc.dynamic arg4$10=lcoc_core.first(more9168$6, );
final dc.dynamic more9168$7=lcoc_core.next(more9168$6, );
if((null==more9168$7)){
return (this.$_invoke$4(arg1$13, arg2$12, arg3$11, arg4$10, ));
}
final dc.dynamic arg5$9=lcoc_core.first(more9168$7, );
final dc.dynamic more9168$8=lcoc_core.next(more9168$7, );
if((null==more9168$8)){
return (this.$_invoke$5(arg1$13, arg2$12, arg3$11, arg4$10, arg5$9, ));
}
final dc.dynamic arg6$8=lcoc_core.first(more9168$8, );
final dc.dynamic more9168$9=lcoc_core.next(more9168$8, );
if((null==more9168$9)){
return (this.$_invoke$6(arg1$13, arg2$12, arg3$11, arg4$10, arg5$9, arg6$8, ));
}
return (this.$_invoke$vararg(arg1$13, arg2$12, arg3$11, arg4$10, arg5$9, arg6$8, more9168$9, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_XXXXXXY

// BEGIN IFnMixin_XXXY
mixin IFnMixin_XXXY on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$1, dc.dynamic arg3$1, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$2, ){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$4(dc.dynamic arg1$5, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[arg4$1, ];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$5, arg2$4, arg3$3, $if_$1, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg4$2, arg5$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$6, arg2$5, arg3$4, $if_$2, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$7, arg2$6, arg3$5, $if_$3, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$8, arg2$7, arg3$6, $if_$4, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$9, arg2$8, arg3$7, $if_$5, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$6=<dc.dynamic>[arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$10, arg2$9, arg3$8, $if_$6, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$10, dc.dynamic arg3$9, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8997$1, ){
final dc.List<dc.dynamic> o7668$7=(<dc.dynamic>[arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8997$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$11, arg2$10, arg3$9, $if_$7, ));
}

dc.dynamic call([dc.dynamic arg1$12 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg2$11 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$10 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if((arg1$12==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$0());
}
if((arg2$11==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$1(arg1$12, ));
}
if((arg3$10==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$2(arg1$12, arg2$11, ));
}
if(dc.identical(arg4$8, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$3(arg1$12, arg2$11, arg3$10, ));
}
final dc.List<dc.dynamic> o7668$8=(<dc.dynamic>[arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
return (this.$_invoke$vararg(arg1$12, arg2$11, arg3$10, $if_$8, ));
}

dc.dynamic $_apply$1(dc.dynamic more8997$2, ){
final dc.dynamic o7668$9=more8997$2;
late final dc.dynamic more8997$3;
if((o7668$9 is lcoc_core.ISeqable$iface)){
more8997$3=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8997$3=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
if((null==more8997$3)){
return (this.$_invoke$0());
}
final dc.dynamic arg1$13=lcoc_core.first(more8997$3, );
final dc.dynamic more8997$4=lcoc_core.next(more8997$3, );
if((null==more8997$4)){
return (this.$_invoke$1(arg1$13, ));
}
final dc.dynamic arg2$12=lcoc_core.first(more8997$4, );
final dc.dynamic more8997$5=lcoc_core.next(more8997$4, );
if((null==more8997$5)){
return (this.$_invoke$2(arg1$13, arg2$12, ));
}
final dc.dynamic arg3$11=lcoc_core.first(more8997$5, );
final dc.dynamic more8997$6=lcoc_core.next(more8997$5, );
if((null==more8997$6)){
return (this.$_invoke$3(arg1$13, arg2$12, arg3$11, ));
}
return (this.$_invoke$vararg(arg1$13, arg2$12, arg3$11, more8997$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_XXXY

// BEGIN IFnMixin_XXY
mixin IFnMixin_XXY on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$1, ){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic arg1$3, dc.dynamic arg2$2, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$1, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[arg3$1, ];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$4, arg2$3, $if_$1, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$5, dc.dynamic arg2$4, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg3$2, arg4$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$5, arg2$4, $if_$2, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$5, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$6, arg2$5, $if_$3, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$7, arg2$6, $if_$4, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$8, arg2$7, $if_$5, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$6=<dc.dynamic>[arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$9, arg2$8, $if_$6, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$7=<dc.dynamic>[arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$10, arg2$9, $if_$7, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$10, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8747$1, ){
final dc.List<dc.dynamic> o7668$8=(<dc.dynamic>[arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8747$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
return (this.$_invoke$vararg(arg1$11, arg2$10, $if_$8, ));
}

dc.dynamic call([dc.dynamic arg1$12 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg2$11 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$9 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if((arg1$12==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$0());
}
if((arg2$11==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$1(arg1$12, ));
}
if(dc.identical(arg3$9, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$2(arg1$12, arg2$11, ));
}
final dc.List<dc.dynamic> o7668$9=(<dc.dynamic>[arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$9;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
return (this.$_invoke$vararg(arg1$12, arg2$11, $if_$9, ));
}

dc.dynamic $_apply$1(dc.dynamic more8747$2, ){
final dc.dynamic o7668$10=more8747$2;
late final dc.dynamic more8747$3;
if((o7668$10 is lcoc_core.ISeqable$iface)){
more8747$3=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8747$3=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
if((null==more8747$3)){
return (this.$_invoke$0());
}
final dc.dynamic arg1$13=lcoc_core.first(more8747$3, );
final dc.dynamic more8747$4=lcoc_core.next(more8747$3, );
if((null==more8747$4)){
return (this.$_invoke$1(arg1$13, ));
}
final dc.dynamic arg2$12=lcoc_core.first(more8747$4, );
final dc.dynamic more8747$5=lcoc_core.next(more8747$4, );
if((null==more8747$5)){
return (this.$_invoke$2(arg1$13, arg2$12, ));
}
return (this.$_invoke$vararg(arg1$13, arg2$12, more8747$5, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_XXY

// BEGIN IFnMixin_XY
mixin IFnMixin_XY on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic arg1$2, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$1, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[arg2$1, ];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$3, $if_$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic arg1$4, dc.dynamic arg2$2, dc.dynamic arg3$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg2$2, arg3$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$4, $if_$2, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$5, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg2$3, arg3$2, arg4$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$5, $if_$3, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg2$4, arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$6, $if_$4, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg2$5, arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$7, $if_$5, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$6=<dc.dynamic>[arg2$6, arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$8, $if_$6, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$7=<dc.dynamic>[arg2$7, arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$9, $if_$7, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$8=<dc.dynamic>[arg2$8, arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
return (this.$_invoke$vararg(arg1$10, $if_$8, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8954$1, ){
final dc.List<dc.dynamic> o7668$9=(<dc.dynamic>[arg2$9, arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8954$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$9;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
return (this.$_invoke$vararg(arg1$11, $if_$9, ));
}

dc.dynamic call([dc.dynamic arg1$12 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg2$10 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$9 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if((arg1$12==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$0());
}
if(dc.identical(arg2$10, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$1(arg1$12, ));
}
final dc.List<dc.dynamic> o7668$10=(<dc.dynamic>[arg2$10, arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$10;
if((o7668$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
return (this.$_invoke$vararg(arg1$12, $if_$10, ));
}

dc.dynamic $_apply$1(dc.dynamic more8954$2, ){
final dc.dynamic o7668$11=more8954$2;
late final dc.dynamic more8954$3;
if((o7668$11 is lcoc_core.ISeqable$iface)){
more8954$3=((o7668$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8954$3=((lcoc_core.ISeqable.extensions(o7668$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$11, ));
}
if((null==more8954$3)){
return (this.$_invoke$0());
}
final dc.dynamic arg1$13=lcoc_core.first(more8954$3, );
final dc.dynamic more8954$4=lcoc_core.next(more8954$3, );
if((null==more8954$4)){
return (this.$_invoke$1(arg1$13, ));
}
return (this.$_invoke$vararg(arg1$13, more8954$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_XY

// BEGIN IFnMixin_XZ
mixin IFnMixin_XZ on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic arg1$1, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic arg1$2, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$2, $if_$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg2$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$3, $if_$2, ));
}

dc.dynamic $_invoke$3(dc.dynamic arg1$4, dc.dynamic arg2$2, dc.dynamic arg3$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg2$2, arg3$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$4, $if_$3, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$5, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg2$3, arg3$2, arg4$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$5, $if_$4, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg2$4, arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$6, $if_$5, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$6=<dc.dynamic>[arg2$5, arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$7, $if_$6, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$7=<dc.dynamic>[arg2$6, arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$8, $if_$7, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$8=<dc.dynamic>[arg2$7, arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
return (this.$_invoke$vararg(arg1$9, $if_$8, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$9=<dc.dynamic>[arg2$8, arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$9;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
return (this.$_invoke$vararg(arg1$10, $if_$9, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more9188$1, ){
final dc.List<dc.dynamic> o7668$10=(<dc.dynamic>[arg2$9, arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more9188$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$10;
if((o7668$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
return (this.$_invoke$vararg(arg1$11, $if_$10, ));
}

dc.dynamic call([dc.dynamic arg1$12 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg2$10 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$9 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if((arg1$12==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$0());
}
if(dc.identical(arg2$10, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$1(arg1$12, ));
}
final dc.List<dc.dynamic> o7668$11=(<dc.dynamic>[arg2$10, arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$11;
if((o7668$11 is lcoc_core.ISeqable$iface)){
$if_$11=((o7668$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7668$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$11, ));
}
return (this.$_invoke$vararg(arg1$12, $if_$11, ));
}

dc.dynamic $_apply$1(dc.dynamic more9188$2, ){
final dc.dynamic o7668$12=more9188$2;
late final dc.dynamic more9188$3;
if((o7668$12 is lcoc_core.ISeqable$iface)){
more9188$3=((o7668$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more9188$3=((lcoc_core.ISeqable.extensions(o7668$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$12, ));
}
if((null==more9188$3)){
return (this.$_invoke$0());
}
final dc.dynamic arg1$13=lcoc_core.first(more9188$3, );
final dc.dynamic more9188$4=lcoc_core.next(more9188$3, );
return (this.$_invoke$vararg(arg1$13, more9188$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_XZ

// BEGIN IFnMixin_Y
mixin IFnMixin_Y on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[arg1$1, ];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg($if_$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg1$2, arg2$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg($if_$2, ));
}

dc.dynamic $_invoke$3(dc.dynamic arg1$3, dc.dynamic arg2$2, dc.dynamic arg3$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg1$3, arg2$2, arg3$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg($if_$3, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg1$4, arg2$3, arg3$2, arg4$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg($if_$4, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$5, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg1$5, arg2$4, arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg($if_$5, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$6, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$6=<dc.dynamic>[arg1$6, arg2$5, arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg($if_$6, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$7=<dc.dynamic>[arg1$7, arg2$6, arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg($if_$7, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$8=<dc.dynamic>[arg1$8, arg2$7, arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
return (this.$_invoke$vararg($if_$8, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$9=<dc.dynamic>[arg1$9, arg2$8, arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$9;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
return (this.$_invoke$vararg($if_$9, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more9170$1, ){
final dc.List<dc.dynamic> o7668$10=(<dc.dynamic>[arg1$10, arg2$9, arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more9170$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$10;
if((o7668$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
return (this.$_invoke$vararg($if_$10, ));
}

dc.dynamic call([dc.dynamic arg1$11 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg2$10 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$9 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if(dc.identical(arg1$11, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$0());
}
final dc.List<dc.dynamic> o7668$11=(<dc.dynamic>[arg1$11, arg2$10, arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$11;
if((o7668$11 is lcoc_core.ISeqable$iface)){
$if_$11=((o7668$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7668$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$11, ));
}
return (this.$_invoke$vararg($if_$11, ));
}

dc.dynamic $_apply$1(dc.dynamic more9170$2, ){
final dc.dynamic o7668$12=more9170$2;
late final dc.dynamic more9170$3;
if((o7668$12 is lcoc_core.ISeqable$iface)){
more9170$3=((o7668$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more9170$3=((lcoc_core.ISeqable.extensions(o7668$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$12, ));
}
if((null==more9170$3)){
return (this.$_invoke$0());
}
return (this.$_invoke$vararg(more9170$3, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_Y

// BEGIN IFnMixin_Z
mixin IFnMixin_Z on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$vararg(dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$0(){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg($if_$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg1$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg($if_$2, ));
}

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg1$2, arg2$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg($if_$3, ));
}

dc.dynamic $_invoke$3(dc.dynamic arg1$3, dc.dynamic arg2$2, dc.dynamic arg3$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg1$3, arg2$2, arg3$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg($if_$4, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg1$4, arg2$3, arg3$2, arg4$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg($if_$5, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$5, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$6=<dc.dynamic>[arg1$5, arg2$4, arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg($if_$6, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$6, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$7=<dc.dynamic>[arg1$6, arg2$5, arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg($if_$7, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$8=<dc.dynamic>[arg1$7, arg2$6, arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
return (this.$_invoke$vararg($if_$8, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$9=<dc.dynamic>[arg1$8, arg2$7, arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$9;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
return (this.$_invoke$vararg($if_$9, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$10=<dc.dynamic>[arg1$9, arg2$8, arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$10;
if((o7668$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
return (this.$_invoke$vararg($if_$10, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8736$1, ){
final dc.List<dc.dynamic> o7668$11=(<dc.dynamic>[arg1$10, arg2$9, arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8736$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$11;
if((o7668$11 is lcoc_core.ISeqable$iface)){
$if_$11=((o7668$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7668$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$11, ));
}
return (this.$_invoke$vararg($if_$11, ));
}

dc.dynamic call([dc.dynamic arg1$11 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg2$10 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$9 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if(dc.identical(arg1$11, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$0());
}
final dc.List<dc.dynamic> o7668$12=(<dc.dynamic>[arg1$11, arg2$10, arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$12;
if((o7668$12 is lcoc_core.ISeqable$iface)){
$if_$12=((o7668$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$12=((lcoc_core.ISeqable.extensions(o7668$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$12, ));
}
return (this.$_invoke$vararg($if_$12, ));
}

dc.dynamic $_apply$1(dc.dynamic more8736$2, ){
final dc.dynamic o7668$13=more8736$2;
late final dc.dynamic more8736$3;
if((o7668$13 is lcoc_core.ISeqable$iface)){
more8736$3=((o7668$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8736$3=((lcoc_core.ISeqable.extensions(o7668$13, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$13, ));
}
return (this.$_invoke$vararg(more8736$3, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_Z

// BEGIN IFnMixin_uXX
mixin IFnMixin_uXX on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$1, ){
return null;
}

dc.dynamic call(dc.dynamic arg1$3, [dc.dynamic arg2$2 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$1 = const dc.pragma("cljd:missing-param", ), ]){
if((arg2$2==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$1(arg1$3, ));
}
if((arg3$1==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$2(arg1$3, arg2$2, ));
}
return (this.$_invoke$3(arg1$3, arg2$2, arg3$1, ));
}

dc.dynamic $_apply$1(dc.dynamic more8849$1, ){
final dc.dynamic o7668$1=more8849$1;
late final dc.dynamic more8849$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
more8849$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8849$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==more8849$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$4=lcoc_core.first(more8849$2, );
final dc.dynamic more8849$3=lcoc_core.next(more8849$2, );
if((null==more8849$3)){
return (this.$_invoke$1(arg1$4, ));
}
final dc.dynamic arg2$3=lcoc_core.first(more8849$3, );
final dc.dynamic more8849$4=lcoc_core.next(more8849$3, );
if((null==more8849$4)){
return (this.$_invoke$2(arg1$4, arg2$3, ));
}
final dc.dynamic arg3$2=lcoc_core.first(more8849$4, );
final dc.dynamic more8849$5=lcoc_core.next(more8849$4, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uXX

// BEGIN IFnMixin_uXXX
mixin IFnMixin_uXXX on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$1, dc.dynamic arg3$1, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$2, ){
return null;
}

dc.dynamic call(dc.dynamic arg1$4, [dc.dynamic arg2$3 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$2 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$1 = const dc.pragma("cljd:missing-param", ), ]){
if((arg2$3==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$1(arg1$4, ));
}
if((arg3$2==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$2(arg1$4, arg2$3, ));
}
if((arg4$1==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$3(arg1$4, arg2$3, arg3$2, ));
}
return (this.$_invoke$4(arg1$4, arg2$3, arg3$2, arg4$1, ));
}

dc.dynamic $_apply$1(dc.dynamic more8906$1, ){
final dc.dynamic o7668$1=more8906$1;
late final dc.dynamic more8906$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
more8906$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8906$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==more8906$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$5=lcoc_core.first(more8906$2, );
final dc.dynamic more8906$3=lcoc_core.next(more8906$2, );
if((null==more8906$3)){
return (this.$_invoke$1(arg1$5, ));
}
final dc.dynamic arg2$4=lcoc_core.first(more8906$3, );
final dc.dynamic more8906$4=lcoc_core.next(more8906$3, );
if((null==more8906$4)){
return (this.$_invoke$2(arg1$5, arg2$4, ));
}
final dc.dynamic arg3$3=lcoc_core.first(more8906$4, );
final dc.dynamic more8906$5=lcoc_core.next(more8906$4, );
if((null==more8906$5)){
return (this.$_invoke$3(arg1$5, arg2$4, arg3$3, ));
}
final dc.dynamic arg4$2=lcoc_core.first(more8906$5, );
final dc.dynamic more8906$6=lcoc_core.next(more8906$5, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uXXX

// BEGIN IFnMixin_uXXXX
mixin IFnMixin_uXXXX on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
return null;
}

dc.dynamic $_invoke$4(dc.dynamic arg1$2, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$3, dc.dynamic arg2$2, dc.dynamic arg3$2, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$4, dc.dynamic arg2$3, ){
return null;
}

dc.dynamic call(dc.dynamic arg1$5, [dc.dynamic arg2$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$3 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$2 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$1 = const dc.pragma("cljd:missing-param", ), ]){
if((arg2$4==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$1(arg1$5, ));
}
if((arg3$3==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$2(arg1$5, arg2$4, ));
}
if((arg4$2==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$3(arg1$5, arg2$4, arg3$3, ));
}
if((arg5$1==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$4(arg1$5, arg2$4, arg3$3, arg4$2, ));
}
return (this.$_invoke$5(arg1$5, arg2$4, arg3$3, arg4$2, arg5$1, ));
}

dc.dynamic $_apply$1(dc.dynamic more9267$1, ){
final dc.dynamic o7668$1=more9267$1;
late final dc.dynamic more9267$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
more9267$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more9267$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==more9267$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$6=lcoc_core.first(more9267$2, );
final dc.dynamic more9267$3=lcoc_core.next(more9267$2, );
if((null==more9267$3)){
return (this.$_invoke$1(arg1$6, ));
}
final dc.dynamic arg2$5=lcoc_core.first(more9267$3, );
final dc.dynamic more9267$4=lcoc_core.next(more9267$3, );
if((null==more9267$4)){
return (this.$_invoke$2(arg1$6, arg2$5, ));
}
final dc.dynamic arg3$4=lcoc_core.first(more9267$4, );
final dc.dynamic more9267$5=lcoc_core.next(more9267$4, );
if((null==more9267$5)){
return (this.$_invoke$3(arg1$6, arg2$5, arg3$4, ));
}
final dc.dynamic arg4$3=lcoc_core.first(more9267$5, );
final dc.dynamic more9267$6=lcoc_core.next(more9267$5, );
if((null==more9267$6)){
return (this.$_invoke$4(arg1$6, arg2$5, arg3$4, arg4$3, ));
}
final dc.dynamic arg5$2=lcoc_core.first(more9267$6, );
final dc.dynamic more9267$7=lcoc_core.next(more9267$6, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uXXXX

// BEGIN IFnMixin_uXXXXXXXXXX
mixin IFnMixin_uXXXXXXXXXX on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$7(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, dc.dynamic arg5$1, dc.dynamic arg6$1, dc.dynamic arg7$1, ){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic arg1$2, ){
return null;
}

dc.dynamic $_invoke$4(dc.dynamic arg1$3, dc.dynamic arg2$2, dc.dynamic arg3$2, dc.dynamic arg4$2, ){
return null;
}

dc.dynamic $_invoke$6(dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$3, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$2, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$5, dc.dynamic arg2$4, dc.dynamic arg3$4, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$6, dc.dynamic arg2$5, ){
return null;
}

dc.dynamic $_invoke$9(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, dc.dynamic arg9$1, ){
return null;
}

dc.dynamic $_invoke$5(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, ){
return null;
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, ){
return null;
}

dc.dynamic $_invoke$ext10(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic arg10$1, ){
return null;
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$10, dc.dynamic arg3$9, dc.dynamic arg4$8, dc.dynamic arg5$7, dc.dynamic arg6$6, dc.dynamic arg7$5, dc.dynamic arg8$4, dc.dynamic arg9$3, dc.dynamic more8667$1, ){
final dc.dynamic coll7742$1=more8667$1;
late final dc.int test$7350_$AUTO_$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
test$7350_$AUTO_$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
test$7350_$AUTO_$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
switch(test$7350_$AUTO_$1){
case 1:
final dc.dynamic vec$8668_$1=more8667$1;
final dc.dynamic arg10$2=(lcoc_core.nth.$_invoke$3(vec$8668_$1, 0, null, ));
return (this.$_invoke$ext10(arg1$11, arg2$10, arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, arg10$2, ));
_default: default:
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("No matching clause: ", (lcoc_core.pr_str.$_invoke$1(test$7350_$AUTO_$1, )), )), );
}
}

dc.dynamic call(dc.dynamic arg1$12, [dc.dynamic arg2$11 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$10 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$9 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg10$3 = const dc.pragma("cljd:missing-param", ), ]){
if((arg2$11==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$1(arg1$12, ));
}
if((arg3$10==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$2(arg1$12, arg2$11, ));
}
if((arg4$9==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$3(arg1$12, arg2$11, arg3$10, ));
}
if((arg5$8==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$4(arg1$12, arg2$11, arg3$10, arg4$9, ));
}
if((arg6$7==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$5(arg1$12, arg2$11, arg3$10, arg4$9, arg5$8, ));
}
if((arg7$6==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$6(arg1$12, arg2$11, arg3$10, arg4$9, arg5$8, arg6$7, ));
}
if((arg8$5==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$7(arg1$12, arg2$11, arg3$10, arg4$9, arg5$8, arg6$7, arg7$6, ));
}
if((arg9$4==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$8(arg1$12, arg2$11, arg3$10, arg4$9, arg5$8, arg6$7, arg7$6, arg8$5, ));
}
if((arg10$3==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$9(arg1$12, arg2$11, arg3$10, arg4$9, arg5$8, arg6$7, arg7$6, arg8$5, arg9$4, ));
}
return (this.$_invoke$ext10(arg1$12, arg2$11, arg3$10, arg4$9, arg5$8, arg6$7, arg7$6, arg8$5, arg9$4, arg10$3, ));
}

dc.dynamic $_apply$1(dc.dynamic more8667$2, ){
final dc.dynamic o7668$1=more8667$2;
late final dc.dynamic more8667$3;
if((o7668$1 is lcoc_core.ISeqable$iface)){
more8667$3=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8667$3=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==more8667$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$13=lcoc_core.first(more8667$3, );
final dc.dynamic more8667$4=lcoc_core.next(more8667$3, );
if((null==more8667$4)){
return (this.$_invoke$1(arg1$13, ));
}
final dc.dynamic arg2$12=lcoc_core.first(more8667$4, );
final dc.dynamic more8667$5=lcoc_core.next(more8667$4, );
if((null==more8667$5)){
return (this.$_invoke$2(arg1$13, arg2$12, ));
}
final dc.dynamic arg3$11=lcoc_core.first(more8667$5, );
final dc.dynamic more8667$6=lcoc_core.next(more8667$5, );
if((null==more8667$6)){
return (this.$_invoke$3(arg1$13, arg2$12, arg3$11, ));
}
final dc.dynamic arg4$10=lcoc_core.first(more8667$6, );
final dc.dynamic more8667$7=lcoc_core.next(more8667$6, );
if((null==more8667$7)){
return (this.$_invoke$4(arg1$13, arg2$12, arg3$11, arg4$10, ));
}
final dc.dynamic arg5$9=lcoc_core.first(more8667$7, );
final dc.dynamic more8667$8=lcoc_core.next(more8667$7, );
if((null==more8667$8)){
return (this.$_invoke$5(arg1$13, arg2$12, arg3$11, arg4$10, arg5$9, ));
}
final dc.dynamic arg6$8=lcoc_core.first(more8667$8, );
final dc.dynamic more8667$9=lcoc_core.next(more8667$8, );
if((null==more8667$9)){
return (this.$_invoke$6(arg1$13, arg2$12, arg3$11, arg4$10, arg5$9, arg6$8, ));
}
final dc.dynamic arg7$7=lcoc_core.first(more8667$9, );
final dc.dynamic more8667$10=lcoc_core.next(more8667$9, );
if((null==more8667$10)){
return (this.$_invoke$7(arg1$13, arg2$12, arg3$11, arg4$10, arg5$9, arg6$8, arg7$7, ));
}
final dc.dynamic arg8$6=lcoc_core.first(more8667$10, );
final dc.dynamic more8667$11=lcoc_core.next(more8667$10, );
if((null==more8667$11)){
return (this.$_invoke$8(arg1$13, arg2$12, arg3$11, arg4$10, arg5$9, arg6$8, arg7$7, arg8$6, ));
}
final dc.dynamic arg9$5=lcoc_core.first(more8667$11, );
final dc.dynamic more8667$12=lcoc_core.next(more8667$11, );
if((null==more8667$12)){
return (this.$_invoke$9(arg1$13, arg2$12, arg3$11, arg4$10, arg5$9, arg6$8, arg7$7, arg8$6, arg9$5, ));
}
final dc.dynamic arg10$4=lcoc_core.first(more8667$12, );
final dc.dynamic more8667$13=lcoc_core.next(more8667$12, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uXXXXXXXXXX

// BEGIN IFnMixin_uXXXY
mixin IFnMixin_uXXXY on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
return null;
}

dc.dynamic $_invoke$4(dc.dynamic arg1$2, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$3, dc.dynamic arg2$2, dc.dynamic arg3$2, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$4, dc.dynamic arg2$3, ){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic arg1$5, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[arg5$1, ];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$6, arg2$5, arg3$4, arg4$3, $if_$1, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg5$2, arg6$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$7, arg2$6, arg3$5, arg4$4, $if_$2, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$8, arg2$7, arg3$6, arg4$5, $if_$3, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$9, arg2$8, arg3$7, arg4$6, $if_$4, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$10, arg2$9, arg3$8, arg4$7, $if_$5, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$10, dc.dynamic arg3$9, dc.dynamic arg4$8, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8950$1, ){
final dc.List<dc.dynamic> o7668$6=(<dc.dynamic>[arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8950$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$11, arg2$10, arg3$9, arg4$8, $if_$6, ));
}

dc.dynamic call(dc.dynamic arg1$12, [dc.dynamic arg2$11 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$10 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$9 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if((arg2$11==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$1(arg1$12, ));
}
if((arg3$10==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$2(arg1$12, arg2$11, ));
}
if((arg4$9==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$3(arg1$12, arg2$11, arg3$10, ));
}
if(dc.identical(arg5$7, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$4(arg1$12, arg2$11, arg3$10, arg4$9, ));
}
final dc.List<dc.dynamic> o7668$7=(<dc.dynamic>[arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$12, arg2$11, arg3$10, arg4$9, $if_$7, ));
}

dc.dynamic $_apply$1(dc.dynamic more8950$2, ){
final dc.dynamic o7668$8=more8950$2;
late final dc.dynamic more8950$3;
if((o7668$8 is lcoc_core.ISeqable$iface)){
more8950$3=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8950$3=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
if((null==more8950$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$13=lcoc_core.first(more8950$3, );
final dc.dynamic more8950$4=lcoc_core.next(more8950$3, );
if((null==more8950$4)){
return (this.$_invoke$1(arg1$13, ));
}
final dc.dynamic arg2$12=lcoc_core.first(more8950$4, );
final dc.dynamic more8950$5=lcoc_core.next(more8950$4, );
if((null==more8950$5)){
return (this.$_invoke$2(arg1$13, arg2$12, ));
}
final dc.dynamic arg3$11=lcoc_core.first(more8950$5, );
final dc.dynamic more8950$6=lcoc_core.next(more8950$5, );
if((null==more8950$6)){
return (this.$_invoke$3(arg1$13, arg2$12, arg3$11, ));
}
final dc.dynamic arg4$10=lcoc_core.first(more8950$6, );
final dc.dynamic more8950$7=lcoc_core.next(more8950$6, );
if((null==more8950$7)){
return (this.$_invoke$4(arg1$13, arg2$12, arg3$11, arg4$10, ));
}
return (this.$_invoke$vararg(arg1$13, arg2$12, arg3$11, arg4$10, more8950$7, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uXXXY

// BEGIN IFnMixin_uXXY
mixin IFnMixin_uXXY on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$1, dc.dynamic arg3$1, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$2, ){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$4(dc.dynamic arg1$5, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[arg4$1, ];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$5, arg2$4, arg3$3, $if_$1, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg4$2, arg5$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$6, arg2$5, arg3$4, $if_$2, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$7, arg2$6, arg3$5, $if_$3, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$8, arg2$7, arg3$6, $if_$4, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$9, arg2$8, arg3$7, $if_$5, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$6=<dc.dynamic>[arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$10, arg2$9, arg3$8, $if_$6, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$10, dc.dynamic arg3$9, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more9014$1, ){
final dc.List<dc.dynamic> o7668$7=(<dc.dynamic>[arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more9014$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$11, arg2$10, arg3$9, $if_$7, ));
}

dc.dynamic call(dc.dynamic arg1$12, [dc.dynamic arg2$11 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$10 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if((arg2$11==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$1(arg1$12, ));
}
if((arg3$10==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$2(arg1$12, arg2$11, ));
}
if(dc.identical(arg4$8, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$3(arg1$12, arg2$11, arg3$10, ));
}
final dc.List<dc.dynamic> o7668$8=(<dc.dynamic>[arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
return (this.$_invoke$vararg(arg1$12, arg2$11, arg3$10, $if_$8, ));
}

dc.dynamic $_apply$1(dc.dynamic more9014$2, ){
final dc.dynamic o7668$9=more9014$2;
late final dc.dynamic more9014$3;
if((o7668$9 is lcoc_core.ISeqable$iface)){
more9014$3=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more9014$3=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
if((null==more9014$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$13=lcoc_core.first(more9014$3, );
final dc.dynamic more9014$4=lcoc_core.next(more9014$3, );
if((null==more9014$4)){
return (this.$_invoke$1(arg1$13, ));
}
final dc.dynamic arg2$12=lcoc_core.first(more9014$4, );
final dc.dynamic more9014$5=lcoc_core.next(more9014$4, );
if((null==more9014$5)){
return (this.$_invoke$2(arg1$13, arg2$12, ));
}
final dc.dynamic arg3$11=lcoc_core.first(more9014$5, );
final dc.dynamic more9014$6=lcoc_core.next(more9014$5, );
if((null==more9014$6)){
return (this.$_invoke$3(arg1$13, arg2$12, arg3$11, ));
}
return (this.$_invoke$vararg(arg1$13, arg2$12, arg3$11, more9014$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uXXY

// BEGIN IFnMixin_uXY
mixin IFnMixin_uXY on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$1, ){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic arg1$3, dc.dynamic arg2$2, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$1, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[arg3$1, ];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$4, arg2$3, $if_$1, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$5, dc.dynamic arg2$4, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg3$2, arg4$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$5, arg2$4, $if_$2, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$5, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$6, arg2$5, $if_$3, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$7, arg2$6, $if_$4, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$8, arg2$7, $if_$5, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$6=<dc.dynamic>[arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$9, arg2$8, $if_$6, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$7=<dc.dynamic>[arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$10, arg2$9, $if_$7, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$10, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8801$1, ){
final dc.List<dc.dynamic> o7668$8=(<dc.dynamic>[arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8801$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
return (this.$_invoke$vararg(arg1$11, arg2$10, $if_$8, ));
}

dc.dynamic call(dc.dynamic arg1$12, [dc.dynamic arg2$11 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$9 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if((arg2$11==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$1(arg1$12, ));
}
if(dc.identical(arg3$9, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$2(arg1$12, arg2$11, ));
}
final dc.List<dc.dynamic> o7668$9=(<dc.dynamic>[arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$9;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
return (this.$_invoke$vararg(arg1$12, arg2$11, $if_$9, ));
}

dc.dynamic $_apply$1(dc.dynamic more8801$2, ){
final dc.dynamic o7668$10=more8801$2;
late final dc.dynamic more8801$3;
if((o7668$10 is lcoc_core.ISeqable$iface)){
more8801$3=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8801$3=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
if((null==more8801$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$13=lcoc_core.first(more8801$3, );
final dc.dynamic more8801$4=lcoc_core.next(more8801$3, );
if((null==more8801$4)){
return (this.$_invoke$1(arg1$13, ));
}
final dc.dynamic arg2$12=lcoc_core.first(more8801$4, );
final dc.dynamic more8801$5=lcoc_core.next(more8801$4, );
if((null==more8801$5)){
return (this.$_invoke$2(arg1$13, arg2$12, ));
}
return (this.$_invoke$vararg(arg1$13, arg2$12, more8801$5, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uXY

// BEGIN IFnMixin_uY
mixin IFnMixin_uY on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic arg1$2, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$1, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[arg2$1, ];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$3, $if_$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic arg1$4, dc.dynamic arg2$2, dc.dynamic arg3$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg2$2, arg3$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$4, $if_$2, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$5, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg2$3, arg3$2, arg4$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$5, $if_$3, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg2$4, arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$6, $if_$4, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg2$5, arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$7, $if_$5, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$6=<dc.dynamic>[arg2$6, arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$8, $if_$6, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$7=<dc.dynamic>[arg2$7, arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$9, $if_$7, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$8=<dc.dynamic>[arg2$8, arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
return (this.$_invoke$vararg(arg1$10, $if_$8, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8888$1, ){
final dc.List<dc.dynamic> o7668$9=(<dc.dynamic>[arg2$9, arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8888$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$9;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
return (this.$_invoke$vararg(arg1$11, $if_$9, ));
}

dc.dynamic call(dc.dynamic arg1$12, [dc.dynamic arg2$10 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$9 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if(dc.identical(arg2$10, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$1(arg1$12, ));
}
final dc.List<dc.dynamic> o7668$10=(<dc.dynamic>[arg2$10, arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$10;
if((o7668$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
return (this.$_invoke$vararg(arg1$12, $if_$10, ));
}

dc.dynamic $_apply$1(dc.dynamic more8888$2, ){
final dc.dynamic o7668$11=more8888$2;
late final dc.dynamic more8888$3;
if((o7668$11 is lcoc_core.ISeqable$iface)){
more8888$3=((o7668$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8888$3=((lcoc_core.ISeqable.extensions(o7668$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$11, ));
}
if((null==more8888$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$13=lcoc_core.first(more8888$3, );
final dc.dynamic more8888$4=lcoc_core.next(more8888$3, );
if((null==more8888$4)){
return (this.$_invoke$1(arg1$13, ));
}
return (this.$_invoke$vararg(arg1$13, more8888$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uY

// BEGIN IFnMixin_uZ
mixin IFnMixin_uZ on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$vararg(dc.dynamic arg1$1, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic arg1$2, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$2, $if_$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg2$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$3, $if_$2, ));
}

dc.dynamic $_invoke$3(dc.dynamic arg1$4, dc.dynamic arg2$2, dc.dynamic arg3$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg2$2, arg3$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$4, $if_$3, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$5, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg2$3, arg3$2, arg4$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$5, $if_$4, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg2$4, arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$6, $if_$5, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$6=<dc.dynamic>[arg2$5, arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$7, $if_$6, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$7=<dc.dynamic>[arg2$6, arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$8, $if_$7, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$8=<dc.dynamic>[arg2$7, arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
return (this.$_invoke$vararg(arg1$9, $if_$8, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$9=<dc.dynamic>[arg2$8, arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$9;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
return (this.$_invoke$vararg(arg1$10, $if_$9, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8985$1, ){
final dc.List<dc.dynamic> o7668$10=(<dc.dynamic>[arg2$9, arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8985$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$10;
if((o7668$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
return (this.$_invoke$vararg(arg1$11, $if_$10, ));
}

dc.dynamic call(dc.dynamic arg1$12, [dc.dynamic arg2$10 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg3$9 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if(dc.identical(arg2$10, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$1(arg1$12, ));
}
final dc.List<dc.dynamic> o7668$11=(<dc.dynamic>[arg2$10, arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$11;
if((o7668$11 is lcoc_core.ISeqable$iface)){
$if_$11=((o7668$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7668$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$11, ));
}
return (this.$_invoke$vararg(arg1$12, $if_$11, ));
}

dc.dynamic $_apply$1(dc.dynamic more8985$2, ){
final dc.dynamic o7668$12=more8985$2;
late final dc.dynamic more8985$3;
if((o7668$12 is lcoc_core.ISeqable$iface)){
more8985$3=((o7668$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8985$3=((lcoc_core.ISeqable.extensions(o7668$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$12, ));
}
if((null==more8985$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$13=lcoc_core.first(more8985$3, );
final dc.dynamic more8985$4=lcoc_core.next(more8985$3, );
return (this.$_invoke$vararg(arg1$13, more8985$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uZ

// BEGIN IFnMixin_uuXX
mixin IFnMixin_uuXX on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$3(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$2, ){
return null;
}

dc.dynamic call(dc.dynamic arg1$3, dc.dynamic arg2$3, [dc.dynamic arg3$2 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$1 = const dc.pragma("cljd:missing-param", ), ]){
if((arg3$2==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$2(arg1$3, arg2$3, ));
}
if((arg4$1==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$3(arg1$3, arg2$3, arg3$2, ));
}
return (this.$_invoke$4(arg1$3, arg2$3, arg3$2, arg4$1, ));
}

dc.dynamic $_apply$1(dc.dynamic more8753$1, ){
final dc.dynamic o7668$1=more8753$1;
late final dc.dynamic more8753$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
more8753$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8753$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==more8753$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$4=lcoc_core.first(more8753$2, );
final dc.dynamic more8753$3=lcoc_core.next(more8753$2, );
if((null==more8753$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$4=lcoc_core.first(more8753$3, );
final dc.dynamic more8753$4=lcoc_core.next(more8753$3, );
if((null==more8753$4)){
return (this.$_invoke$2(arg1$4, arg2$4, ));
}
final dc.dynamic arg3$3=lcoc_core.first(more8753$4, );
final dc.dynamic more8753$5=lcoc_core.next(more8753$4, );
if((null==more8753$5)){
return (this.$_invoke$3(arg1$4, arg2$4, arg3$3, ));
}
final dc.dynamic arg4$2=lcoc_core.first(more8753$5, );
final dc.dynamic more8753$6=lcoc_core.next(more8753$5, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuXX

// BEGIN IFnMixin_uuXXX
mixin IFnMixin_uuXXX on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$3, ){
return null;
}

dc.dynamic call(dc.dynamic arg1$4, dc.dynamic arg2$4, [dc.dynamic arg3$3 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$2 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$1 = const dc.pragma("cljd:missing-param", ), ]){
if((arg3$3==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$2(arg1$4, arg2$4, ));
}
if((arg4$2==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$3(arg1$4, arg2$4, arg3$3, ));
}
if((arg5$1==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$4(arg1$4, arg2$4, arg3$3, arg4$2, ));
}
return (this.$_invoke$5(arg1$4, arg2$4, arg3$3, arg4$2, arg5$1, ));
}

dc.dynamic $_apply$1(dc.dynamic more9038$1, ){
final dc.dynamic o7668$1=more9038$1;
late final dc.dynamic more9038$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
more9038$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more9038$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==more9038$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$5=lcoc_core.first(more9038$2, );
final dc.dynamic more9038$3=lcoc_core.next(more9038$2, );
if((null==more9038$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$5=lcoc_core.first(more9038$3, );
final dc.dynamic more9038$4=lcoc_core.next(more9038$3, );
if((null==more9038$4)){
return (this.$_invoke$2(arg1$5, arg2$5, ));
}
final dc.dynamic arg3$4=lcoc_core.first(more9038$4, );
final dc.dynamic more9038$5=lcoc_core.next(more9038$4, );
if((null==more9038$5)){
return (this.$_invoke$3(arg1$5, arg2$5, arg3$4, ));
}
final dc.dynamic arg4$3=lcoc_core.first(more9038$5, );
final dc.dynamic more9038$6=lcoc_core.next(more9038$5, );
if((null==more9038$6)){
return (this.$_invoke$4(arg1$5, arg2$5, arg3$4, arg4$3, ));
}
final dc.dynamic arg5$2=lcoc_core.first(more9038$6, );
final dc.dynamic more9038$7=lcoc_core.next(more9038$6, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuXXX

// BEGIN IFnMixin_uuXXXX
mixin IFnMixin_uuXXXX on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$3, ){
return null;
}

dc.dynamic $_invoke$5(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
return null;
}

dc.dynamic call(dc.dynamic arg1$5, dc.dynamic arg2$5, [dc.dynamic arg3$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$3 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$2 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$1 = const dc.pragma("cljd:missing-param", ), ]){
if((arg3$4==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$2(arg1$5, arg2$5, ));
}
if((arg4$3==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$3(arg1$5, arg2$5, arg3$4, ));
}
if((arg5$2==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$4(arg1$5, arg2$5, arg3$4, arg4$3, ));
}
if((arg6$1==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$5(arg1$5, arg2$5, arg3$4, arg4$3, arg5$2, ));
}
return (this.$_invoke$6(arg1$5, arg2$5, arg3$4, arg4$3, arg5$2, arg6$1, ));
}

dc.dynamic $_apply$1(dc.dynamic more8877$1, ){
final dc.dynamic o7668$1=more8877$1;
late final dc.dynamic more8877$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
more8877$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8877$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==more8877$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$6=lcoc_core.first(more8877$2, );
final dc.dynamic more8877$3=lcoc_core.next(more8877$2, );
if((null==more8877$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$6=lcoc_core.first(more8877$3, );
final dc.dynamic more8877$4=lcoc_core.next(more8877$3, );
if((null==more8877$4)){
return (this.$_invoke$2(arg1$6, arg2$6, ));
}
final dc.dynamic arg3$5=lcoc_core.first(more8877$4, );
final dc.dynamic more8877$5=lcoc_core.next(more8877$4, );
if((null==more8877$5)){
return (this.$_invoke$3(arg1$6, arg2$6, arg3$5, ));
}
final dc.dynamic arg4$4=lcoc_core.first(more8877$5, );
final dc.dynamic more8877$6=lcoc_core.next(more8877$5, );
if((null==more8877$6)){
return (this.$_invoke$4(arg1$6, arg2$6, arg3$5, arg4$4, ));
}
final dc.dynamic arg5$3=lcoc_core.first(more8877$6, );
final dc.dynamic more8877$7=lcoc_core.next(more8877$6, );
if((null==more8877$7)){
return (this.$_invoke$5(arg1$6, arg2$6, arg3$5, arg4$4, arg5$3, ));
}
final dc.dynamic arg6$2=lcoc_core.first(more8877$7, );
final dc.dynamic more8877$8=lcoc_core.next(more8877$7, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuXXXX

// BEGIN IFnMixin_uuXXXY
mixin IFnMixin_uuXXXY on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$3, ){
return null;
}

dc.dynamic $_invoke$5(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$6(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[arg6$1, ];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$6, arg2$6, arg3$5, arg4$4, arg5$3, $if_$1, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg6$2, arg7$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$7, arg2$7, arg3$6, arg4$5, arg5$4, $if_$2, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$8, arg2$8, arg3$7, arg4$6, arg5$5, $if_$3, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$9, arg2$9, arg3$8, arg4$7, arg5$6, $if_$4, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$10, dc.dynamic arg2$10, dc.dynamic arg3$9, dc.dynamic arg4$8, dc.dynamic arg5$7, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8989$1, ){
final dc.List<dc.dynamic> o7668$5=(<dc.dynamic>[arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8989$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$10, arg2$10, arg3$9, arg4$8, arg5$7, $if_$5, ));
}

dc.dynamic call(dc.dynamic arg1$11, dc.dynamic arg2$11, [dc.dynamic arg3$10 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$9 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if((arg3$10==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$2(arg1$11, arg2$11, ));
}
if((arg4$9==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$3(arg1$11, arg2$11, arg3$10, ));
}
if((arg5$8==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$4(arg1$11, arg2$11, arg3$10, arg4$9, ));
}
if(dc.identical(arg6$6, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$5(arg1$11, arg2$11, arg3$10, arg4$9, arg5$8, ));
}
final dc.List<dc.dynamic> o7668$6=(<dc.dynamic>[arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$11, arg2$11, arg3$10, arg4$9, arg5$8, $if_$6, ));
}

dc.dynamic $_apply$1(dc.dynamic more8989$2, ){
final dc.dynamic o7668$7=more8989$2;
late final dc.dynamic more8989$3;
if((o7668$7 is lcoc_core.ISeqable$iface)){
more8989$3=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8989$3=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
if((null==more8989$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$12=lcoc_core.first(more8989$3, );
final dc.dynamic more8989$4=lcoc_core.next(more8989$3, );
if((null==more8989$4)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$12=lcoc_core.first(more8989$4, );
final dc.dynamic more8989$5=lcoc_core.next(more8989$4, );
if((null==more8989$5)){
return (this.$_invoke$2(arg1$12, arg2$12, ));
}
final dc.dynamic arg3$11=lcoc_core.first(more8989$5, );
final dc.dynamic more8989$6=lcoc_core.next(more8989$5, );
if((null==more8989$6)){
return (this.$_invoke$3(arg1$12, arg2$12, arg3$11, ));
}
final dc.dynamic arg4$10=lcoc_core.first(more8989$6, );
final dc.dynamic more8989$7=lcoc_core.next(more8989$6, );
if((null==more8989$7)){
return (this.$_invoke$4(arg1$12, arg2$12, arg3$11, arg4$10, ));
}
final dc.dynamic arg5$9=lcoc_core.first(more8989$7, );
final dc.dynamic more8989$8=lcoc_core.next(more8989$7, );
if((null==more8989$8)){
return (this.$_invoke$5(arg1$12, arg2$12, arg3$11, arg4$10, arg5$9, ));
}
return (this.$_invoke$vararg(arg1$12, arg2$12, arg3$11, arg4$10, arg5$9, more8989$8, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuXXXY

// BEGIN IFnMixin_uuXXY
mixin IFnMixin_uuXXY on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$3, ){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$5(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[arg5$1, ];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$5, arg2$5, arg3$4, arg4$3, $if_$1, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg5$2, arg6$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$6, arg2$6, arg3$5, arg4$4, $if_$2, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$7, arg2$7, arg3$6, arg4$5, $if_$3, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$8, arg2$8, arg3$7, arg4$6, $if_$4, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$9, arg2$9, arg3$8, arg4$7, $if_$5, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$10, dc.dynamic arg2$10, dc.dynamic arg3$9, dc.dynamic arg4$8, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8893$1, ){
final dc.List<dc.dynamic> o7668$6=(<dc.dynamic>[arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8893$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$10, arg2$10, arg3$9, arg4$8, $if_$6, ));
}

dc.dynamic call(dc.dynamic arg1$11, dc.dynamic arg2$11, [dc.dynamic arg3$10 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$9 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if((arg3$10==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$2(arg1$11, arg2$11, ));
}
if((arg4$9==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$3(arg1$11, arg2$11, arg3$10, ));
}
if(dc.identical(arg5$7, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$4(arg1$11, arg2$11, arg3$10, arg4$9, ));
}
final dc.List<dc.dynamic> o7668$7=(<dc.dynamic>[arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$11, arg2$11, arg3$10, arg4$9, $if_$7, ));
}

dc.dynamic $_apply$1(dc.dynamic more8893$2, ){
final dc.dynamic o7668$8=more8893$2;
late final dc.dynamic more8893$3;
if((o7668$8 is lcoc_core.ISeqable$iface)){
more8893$3=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8893$3=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
if((null==more8893$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$12=lcoc_core.first(more8893$3, );
final dc.dynamic more8893$4=lcoc_core.next(more8893$3, );
if((null==more8893$4)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$12=lcoc_core.first(more8893$4, );
final dc.dynamic more8893$5=lcoc_core.next(more8893$4, );
if((null==more8893$5)){
return (this.$_invoke$2(arg1$12, arg2$12, ));
}
final dc.dynamic arg3$11=lcoc_core.first(more8893$5, );
final dc.dynamic more8893$6=lcoc_core.next(more8893$5, );
if((null==more8893$6)){
return (this.$_invoke$3(arg1$12, arg2$12, arg3$11, ));
}
final dc.dynamic arg4$10=lcoc_core.first(more8893$6, );
final dc.dynamic more8893$7=lcoc_core.next(more8893$6, );
if((null==more8893$7)){
return (this.$_invoke$4(arg1$12, arg2$12, arg3$11, arg4$10, ));
}
return (this.$_invoke$vararg(arg1$12, arg2$12, arg3$11, arg4$10, more8893$7, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuXXY

// BEGIN IFnMixin_uuXY
mixin IFnMixin_uuXY on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$3(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$2, ){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$4(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[arg4$1, ];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$4, arg2$4, arg3$3, $if_$1, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg4$2, arg5$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$5, arg2$5, arg3$4, $if_$2, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$6, arg2$6, arg3$5, $if_$3, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$7, arg2$7, arg3$6, $if_$4, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$8, arg2$8, arg3$7, $if_$5, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$6=<dc.dynamic>[arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$9, arg2$9, arg3$8, $if_$6, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$10, dc.dynamic arg2$10, dc.dynamic arg3$9, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8688$1, ){
final dc.List<dc.dynamic> o7668$7=(<dc.dynamic>[arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8688$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$10, arg2$10, arg3$9, $if_$7, ));
}

dc.dynamic call(dc.dynamic arg1$11, dc.dynamic arg2$11, [dc.dynamic arg3$10 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if((arg3$10==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$2(arg1$11, arg2$11, ));
}
if(dc.identical(arg4$8, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$3(arg1$11, arg2$11, arg3$10, ));
}
final dc.List<dc.dynamic> o7668$8=(<dc.dynamic>[arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
return (this.$_invoke$vararg(arg1$11, arg2$11, arg3$10, $if_$8, ));
}

dc.dynamic $_apply$1(dc.dynamic more8688$2, ){
final dc.dynamic o7668$9=more8688$2;
late final dc.dynamic more8688$3;
if((o7668$9 is lcoc_core.ISeqable$iface)){
more8688$3=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8688$3=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
if((null==more8688$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$12=lcoc_core.first(more8688$3, );
final dc.dynamic more8688$4=lcoc_core.next(more8688$3, );
if((null==more8688$4)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$12=lcoc_core.first(more8688$4, );
final dc.dynamic more8688$5=lcoc_core.next(more8688$4, );
if((null==more8688$5)){
return (this.$_invoke$2(arg1$12, arg2$12, ));
}
final dc.dynamic arg3$11=lcoc_core.first(more8688$5, );
final dc.dynamic more8688$6=lcoc_core.next(more8688$5, );
if((null==more8688$6)){
return (this.$_invoke$3(arg1$12, arg2$12, arg3$11, ));
}
return (this.$_invoke$vararg(arg1$12, arg2$12, arg3$11, more8688$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuXY

// BEGIN IFnMixin_uuY
mixin IFnMixin_uuY on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$2(dc.dynamic arg1$1, dc.dynamic arg2$1, ){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$1, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[arg3$1, ];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$3, arg2$3, $if_$1, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg3$2, arg4$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$4, arg2$4, $if_$2, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$5, arg2$5, $if_$3, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$6, arg2$6, $if_$4, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$7, arg2$7, $if_$5, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$6=<dc.dynamic>[arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$8, arg2$8, $if_$6, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$7=<dc.dynamic>[arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$9, arg2$9, $if_$7, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$10, dc.dynamic arg2$10, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8862$1, ){
final dc.List<dc.dynamic> o7668$8=(<dc.dynamic>[arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8862$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
return (this.$_invoke$vararg(arg1$10, arg2$10, $if_$8, ));
}

dc.dynamic call(dc.dynamic arg1$11, dc.dynamic arg2$11, [dc.dynamic arg3$9 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if(dc.identical(arg3$9, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$2(arg1$11, arg2$11, ));
}
final dc.List<dc.dynamic> o7668$9=(<dc.dynamic>[arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$9;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
return (this.$_invoke$vararg(arg1$11, arg2$11, $if_$9, ));
}

dc.dynamic $_apply$1(dc.dynamic more8862$2, ){
final dc.dynamic o7668$10=more8862$2;
late final dc.dynamic more8862$3;
if((o7668$10 is lcoc_core.ISeqable$iface)){
more8862$3=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8862$3=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
if((null==more8862$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$12=lcoc_core.first(more8862$3, );
final dc.dynamic more8862$4=lcoc_core.next(more8862$3, );
if((null==more8862$4)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$12=lcoc_core.first(more8862$4, );
final dc.dynamic more8862$5=lcoc_core.next(more8862$4, );
if((null==more8862$5)){
return (this.$_invoke$2(arg1$12, arg2$12, ));
}
return (this.$_invoke$vararg(arg1$12, arg2$12, more8862$5, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuY

// BEGIN IFnMixin_uuZ
mixin IFnMixin_uuZ on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$vararg(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$2, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$2, arg2$2, $if_$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg3$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$3, arg2$3, $if_$2, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg3$2, arg4$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$4, arg2$4, $if_$3, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$5, arg2$5, $if_$4, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$6, arg2$6, $if_$5, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$6=<dc.dynamic>[arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$7, arg2$7, $if_$6, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$7=<dc.dynamic>[arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$8, arg2$8, $if_$7, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$8=<dc.dynamic>[arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
return (this.$_invoke$vararg(arg1$9, arg2$9, $if_$8, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$10, dc.dynamic arg2$10, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8599$1, ){
final dc.List<dc.dynamic> o7668$9=(<dc.dynamic>[arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8599$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$9;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
return (this.$_invoke$vararg(arg1$10, arg2$10, $if_$9, ));
}

dc.dynamic call(dc.dynamic arg1$11, dc.dynamic arg2$11, [dc.dynamic arg3$9 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg4$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if(dc.identical(arg3$9, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$2(arg1$11, arg2$11, ));
}
final dc.List<dc.dynamic> o7668$10=(<dc.dynamic>[arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$10;
if((o7668$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
return (this.$_invoke$vararg(arg1$11, arg2$11, $if_$10, ));
}

dc.dynamic $_apply$1(dc.dynamic more8599$2, ){
final dc.dynamic o7668$11=more8599$2;
late final dc.dynamic more8599$3;
if((o7668$11 is lcoc_core.ISeqable$iface)){
more8599$3=((o7668$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8599$3=((lcoc_core.ISeqable.extensions(o7668$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$11, ));
}
if((null==more8599$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$12=lcoc_core.first(more8599$3, );
final dc.dynamic more8599$4=lcoc_core.next(more8599$3, );
if((null==more8599$4)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$12=lcoc_core.first(more8599$4, );
final dc.dynamic more8599$5=lcoc_core.next(more8599$4, );
return (this.$_invoke$vararg(arg1$12, arg2$12, more8599$5, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuZ

// BEGIN IFnMixin_uuuXX
mixin IFnMixin_uuuXX on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, ){
return null;
}

dc.dynamic call(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, [dc.dynamic arg4$2 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$1 = const dc.pragma("cljd:missing-param", ), ]){
if((arg4$2==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$3(arg1$3, arg2$3, arg3$3, ));
}
if((arg5$1==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$4(arg1$3, arg2$3, arg3$3, arg4$2, ));
}
return (this.$_invoke$5(arg1$3, arg2$3, arg3$3, arg4$2, arg5$1, ));
}

dc.dynamic $_apply$1(dc.dynamic more9141$1, ){
final dc.dynamic o7668$1=more9141$1;
late final dc.dynamic more9141$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
more9141$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more9141$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==more9141$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$4=lcoc_core.first(more9141$2, );
final dc.dynamic more9141$3=lcoc_core.next(more9141$2, );
if((null==more9141$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$4=lcoc_core.first(more9141$3, );
final dc.dynamic more9141$4=lcoc_core.next(more9141$3, );
if((null==more9141$4)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$4=lcoc_core.first(more9141$4, );
final dc.dynamic more9141$5=lcoc_core.next(more9141$4, );
if((null==more9141$5)){
return (this.$_invoke$3(arg1$4, arg2$4, arg3$4, ));
}
final dc.dynamic arg4$3=lcoc_core.first(more9141$5, );
final dc.dynamic more9141$6=lcoc_core.next(more9141$5, );
if((null==more9141$6)){
return (this.$_invoke$4(arg1$4, arg2$4, arg3$4, arg4$3, ));
}
final dc.dynamic arg5$2=lcoc_core.first(more9141$6, );
final dc.dynamic more9141$7=lcoc_core.next(more9141$6, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuXX

// BEGIN IFnMixin_uuuXXX
mixin IFnMixin_uuuXXX on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, ){
return null;
}

dc.dynamic $_invoke$5(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
return null;
}

dc.dynamic call(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$4, [dc.dynamic arg4$3 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$2 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$1 = const dc.pragma("cljd:missing-param", ), ]){
if((arg4$3==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$3(arg1$4, arg2$4, arg3$4, ));
}
if((arg5$2==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$4(arg1$4, arg2$4, arg3$4, arg4$3, ));
}
if((arg6$1==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$5(arg1$4, arg2$4, arg3$4, arg4$3, arg5$2, ));
}
return (this.$_invoke$6(arg1$4, arg2$4, arg3$4, arg4$3, arg5$2, arg6$1, ));
}

dc.dynamic $_apply$1(dc.dynamic more8958$1, ){
final dc.dynamic o7668$1=more8958$1;
late final dc.dynamic more8958$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
more8958$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8958$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==more8958$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$5=lcoc_core.first(more8958$2, );
final dc.dynamic more8958$3=lcoc_core.next(more8958$2, );
if((null==more8958$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$5=lcoc_core.first(more8958$3, );
final dc.dynamic more8958$4=lcoc_core.next(more8958$3, );
if((null==more8958$4)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$5=lcoc_core.first(more8958$4, );
final dc.dynamic more8958$5=lcoc_core.next(more8958$4, );
if((null==more8958$5)){
return (this.$_invoke$3(arg1$5, arg2$5, arg3$5, ));
}
final dc.dynamic arg4$4=lcoc_core.first(more8958$5, );
final dc.dynamic more8958$6=lcoc_core.next(more8958$5, );
if((null==more8958$6)){
return (this.$_invoke$4(arg1$5, arg2$5, arg3$5, arg4$4, ));
}
final dc.dynamic arg5$3=lcoc_core.first(more8958$6, );
final dc.dynamic more8958$7=lcoc_core.next(more8958$6, );
if((null==more8958$7)){
return (this.$_invoke$5(arg1$5, arg2$5, arg3$5, arg4$4, arg5$3, ));
}
final dc.dynamic arg6$2=lcoc_core.first(more8958$7, );
final dc.dynamic more8958$8=lcoc_core.next(more8958$7, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuXXX

// BEGIN IFnMixin_uuuXXXY
mixin IFnMixin_uuuXXXY on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, ){
return null;
}

dc.dynamic $_invoke$6(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, dc.dynamic arg4$2, dc.dynamic arg5$1, dc.dynamic arg6$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, ){
return null;
}

dc.dynamic $_invoke$5(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, ){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$7(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[arg7$1, ];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$6, arg2$6, arg3$6, arg4$5, arg5$4, arg6$3, $if_$1, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg7$2, arg8$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$7, arg2$7, arg3$7, arg4$6, arg5$5, arg6$4, $if_$2, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$8, arg2$8, arg3$8, arg4$7, arg5$6, arg6$5, $if_$3, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$9, dc.dynamic arg4$8, dc.dynamic arg5$7, dc.dynamic arg6$6, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more9043$1, ){
final dc.List<dc.dynamic> o7668$4=(<dc.dynamic>[arg7$4, arg8$3, arg9$2, ]+(more9043$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$9, arg2$9, arg3$9, arg4$8, arg5$7, arg6$6, $if_$4, ));
}

dc.dynamic call(dc.dynamic arg1$10, dc.dynamic arg2$10, dc.dynamic arg3$10, [dc.dynamic arg4$9 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if((arg4$9==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$3(arg1$10, arg2$10, arg3$10, ));
}
if((arg5$8==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$4(arg1$10, arg2$10, arg3$10, arg4$9, ));
}
if((arg6$7==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$5(arg1$10, arg2$10, arg3$10, arg4$9, arg5$8, ));
}
if(dc.identical(arg7$5, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$6(arg1$10, arg2$10, arg3$10, arg4$9, arg5$8, arg6$7, ));
}
final dc.List<dc.dynamic> o7668$5=(<dc.dynamic>[arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$10, arg2$10, arg3$10, arg4$9, arg5$8, arg6$7, $if_$5, ));
}

dc.dynamic $_apply$1(dc.dynamic more9043$2, ){
final dc.dynamic o7668$6=more9043$2;
late final dc.dynamic more9043$3;
if((o7668$6 is lcoc_core.ISeqable$iface)){
more9043$3=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more9043$3=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
if((null==more9043$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$11=lcoc_core.first(more9043$3, );
final dc.dynamic more9043$4=lcoc_core.next(more9043$3, );
if((null==more9043$4)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$11=lcoc_core.first(more9043$4, );
final dc.dynamic more9043$5=lcoc_core.next(more9043$4, );
if((null==more9043$5)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$11=lcoc_core.first(more9043$5, );
final dc.dynamic more9043$6=lcoc_core.next(more9043$5, );
if((null==more9043$6)){
return (this.$_invoke$3(arg1$11, arg2$11, arg3$11, ));
}
final dc.dynamic arg4$10=lcoc_core.first(more9043$6, );
final dc.dynamic more9043$7=lcoc_core.next(more9043$6, );
if((null==more9043$7)){
return (this.$_invoke$4(arg1$11, arg2$11, arg3$11, arg4$10, ));
}
final dc.dynamic arg5$9=lcoc_core.first(more9043$7, );
final dc.dynamic more9043$8=lcoc_core.next(more9043$7, );
if((null==more9043$8)){
return (this.$_invoke$5(arg1$11, arg2$11, arg3$11, arg4$10, arg5$9, ));
}
final dc.dynamic arg6$8=lcoc_core.first(more9043$8, );
final dc.dynamic more9043$9=lcoc_core.next(more9043$8, );
if((null==more9043$9)){
return (this.$_invoke$6(arg1$11, arg2$11, arg3$11, arg4$10, arg5$9, arg6$8, ));
}
return (this.$_invoke$vararg(arg1$11, arg2$11, arg3$11, arg4$10, arg5$9, arg6$8, more9043$9, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuXXXY

// BEGIN IFnMixin_uuuXuX
mixin IFnMixin_uuuXuX on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$3(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, ){
return null;
}

dc.dynamic $_invoke$5(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, dc.dynamic arg4$1, dc.dynamic arg5$1, ){
return null;
}

dc.dynamic call(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, [dc.dynamic arg4$2 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$2 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$1 = const dc.pragma("cljd:missing-param", ), ]){
if((arg4$2==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$3(arg1$3, arg2$3, arg3$3, ));
}
if((arg5$2==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$4(arg1$3, arg2$3, arg3$3, arg4$2, ));
}
if((arg6$1==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$5(arg1$3, arg2$3, arg3$3, arg4$2, arg5$2, ));
}
return (this.$_invoke$6(arg1$3, arg2$3, arg3$3, arg4$2, arg5$2, arg6$1, ));
}

dc.dynamic $_apply$1(dc.dynamic more8838$1, ){
final dc.dynamic o7668$1=more8838$1;
late final dc.dynamic more8838$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
more8838$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8838$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==more8838$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$4=lcoc_core.first(more8838$2, );
final dc.dynamic more8838$3=lcoc_core.next(more8838$2, );
if((null==more8838$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$4=lcoc_core.first(more8838$3, );
final dc.dynamic more8838$4=lcoc_core.next(more8838$3, );
if((null==more8838$4)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$4=lcoc_core.first(more8838$4, );
final dc.dynamic more8838$5=lcoc_core.next(more8838$4, );
if((null==more8838$5)){
return (this.$_invoke$3(arg1$4, arg2$4, arg3$4, ));
}
final dc.dynamic arg4$3=lcoc_core.first(more8838$5, );
final dc.dynamic more8838$6=lcoc_core.next(more8838$5, );
if((null==more8838$6)){
return (this.$_invoke$4(arg1$4, arg2$4, arg3$4, arg4$3, ));
}
final dc.dynamic arg5$3=lcoc_core.first(more8838$6, );
final dc.dynamic more8838$7=lcoc_core.next(more8838$6, );
if((null==more8838$7)){
return (this.$_invoke$5(arg1$4, arg2$4, arg3$4, arg4$3, arg5$3, ));
}
final dc.dynamic arg6$2=lcoc_core.first(more8838$7, );
final dc.dynamic more8838$8=lcoc_core.next(more8838$7, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuXuX

// BEGIN IFnMixin_uuuY
mixin IFnMixin_uuuY on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$3(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, ){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$4(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[arg4$1, ];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$3, arg2$3, arg3$3, $if_$1, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$4, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg4$2, arg5$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$4, arg2$4, arg3$4, $if_$2, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$5, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$5, arg2$5, arg3$5, $if_$3, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$6, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$6, arg2$6, arg3$6, $if_$4, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$7, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$7, arg2$7, arg3$7, $if_$5, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$8, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$6=<dc.dynamic>[arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$8, arg2$8, arg3$8, $if_$6, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$9, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8785$1, ){
final dc.List<dc.dynamic> o7668$7=(<dc.dynamic>[arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8785$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$9, arg2$9, arg3$9, $if_$7, ));
}

dc.dynamic call(dc.dynamic arg1$10, dc.dynamic arg2$10, dc.dynamic arg3$10, [dc.dynamic arg4$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if(dc.identical(arg4$8, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$3(arg1$10, arg2$10, arg3$10, ));
}
final dc.List<dc.dynamic> o7668$8=(<dc.dynamic>[arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
return (this.$_invoke$vararg(arg1$10, arg2$10, arg3$10, $if_$8, ));
}

dc.dynamic $_apply$1(dc.dynamic more8785$2, ){
final dc.dynamic o7668$9=more8785$2;
late final dc.dynamic more8785$3;
if((o7668$9 is lcoc_core.ISeqable$iface)){
more8785$3=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8785$3=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
if((null==more8785$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$11=lcoc_core.first(more8785$3, );
final dc.dynamic more8785$4=lcoc_core.next(more8785$3, );
if((null==more8785$4)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$11=lcoc_core.first(more8785$4, );
final dc.dynamic more8785$5=lcoc_core.next(more8785$4, );
if((null==more8785$5)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$11=lcoc_core.first(more8785$5, );
final dc.dynamic more8785$6=lcoc_core.next(more8785$5, );
if((null==more8785$6)){
return (this.$_invoke$3(arg1$11, arg2$11, arg3$11, ));
}
return (this.$_invoke$vararg(arg1$11, arg2$11, arg3$11, more8785$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuY

// BEGIN IFnMixin_uuuZ
mixin IFnMixin_uuuZ on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$vararg(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$2, arg2$2, arg3$2, $if_$1, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg4$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$3, arg2$3, arg3$3, $if_$2, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$4, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg4$2, arg5$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$4, arg2$4, arg3$4, $if_$3, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$5, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$5, arg2$5, arg3$5, $if_$4, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$6, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$6, arg2$6, arg3$6, $if_$5, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$7, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$6=<dc.dynamic>[arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$7, arg2$7, arg3$7, $if_$6, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$8, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$7=<dc.dynamic>[arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$8, arg2$8, arg3$8, $if_$7, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$9, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8604$1, ){
final dc.List<dc.dynamic> o7668$8=(<dc.dynamic>[arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8604$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
return (this.$_invoke$vararg(arg1$9, arg2$9, arg3$9, $if_$8, ));
}

dc.dynamic call(dc.dynamic arg1$10, dc.dynamic arg2$10, dc.dynamic arg3$10, [dc.dynamic arg4$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if(dc.identical(arg4$8, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$3(arg1$10, arg2$10, arg3$10, ));
}
final dc.List<dc.dynamic> o7668$9=(<dc.dynamic>[arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$9;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
return (this.$_invoke$vararg(arg1$10, arg2$10, arg3$10, $if_$9, ));
}

dc.dynamic $_apply$1(dc.dynamic more8604$2, ){
final dc.dynamic o7668$10=more8604$2;
late final dc.dynamic more8604$3;
if((o7668$10 is lcoc_core.ISeqable$iface)){
more8604$3=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8604$3=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
if((null==more8604$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$11=lcoc_core.first(more8604$3, );
final dc.dynamic more8604$4=lcoc_core.next(more8604$3, );
if((null==more8604$4)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$11=lcoc_core.first(more8604$4, );
final dc.dynamic more8604$5=lcoc_core.next(more8604$4, );
if((null==more8604$5)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$11=lcoc_core.first(more8604$5, );
final dc.dynamic more8604$6=lcoc_core.next(more8604$5, );
return (this.$_invoke$vararg(arg1$11, arg2$11, arg3$11, more8604$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuZ

// BEGIN IFnMixin_uuuuXX
mixin IFnMixin_uuuuXX on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, ){
return null;
}

dc.dynamic $_invoke$5(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
return null;
}

dc.dynamic call(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, dc.dynamic arg4$3, [dc.dynamic arg5$2 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$1 = const dc.pragma("cljd:missing-param", ), ]){
if((arg5$2==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$4(arg1$3, arg2$3, arg3$3, arg4$3, ));
}
if((arg6$1==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$5(arg1$3, arg2$3, arg3$3, arg4$3, arg5$2, ));
}
return (this.$_invoke$6(arg1$3, arg2$3, arg3$3, arg4$3, arg5$2, arg6$1, ));
}

dc.dynamic $_apply$1(dc.dynamic more8903$1, ){
final dc.dynamic o7668$1=more8903$1;
late final dc.dynamic more8903$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
more8903$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8903$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==more8903$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$4=lcoc_core.first(more8903$2, );
final dc.dynamic more8903$3=lcoc_core.next(more8903$2, );
if((null==more8903$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$4=lcoc_core.first(more8903$3, );
final dc.dynamic more8903$4=lcoc_core.next(more8903$3, );
if((null==more8903$4)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$4=lcoc_core.first(more8903$4, );
final dc.dynamic more8903$5=lcoc_core.next(more8903$4, );
if((null==more8903$5)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg4$4=lcoc_core.first(more8903$5, );
final dc.dynamic more8903$6=lcoc_core.next(more8903$5, );
if((null==more8903$6)){
return (this.$_invoke$4(arg1$4, arg2$4, arg3$4, arg4$4, ));
}
final dc.dynamic arg5$3=lcoc_core.first(more8903$6, );
final dc.dynamic more8903$7=lcoc_core.next(more8903$6, );
if((null==more8903$7)){
return (this.$_invoke$5(arg1$4, arg2$4, arg3$4, arg4$4, arg5$3, ));
}
final dc.dynamic arg6$2=lcoc_core.first(more8903$7, );
final dc.dynamic more8903$8=lcoc_core.next(more8903$7, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuuXX

// BEGIN IFnMixin_uuuuXZ
mixin IFnMixin_uuuuXZ on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, ){
return null;
}

dc.dynamic $_invoke$vararg(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, dc.dynamic arg4$2, dc.dynamic arg5$1, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$5(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, dc.dynamic arg4$3, dc.dynamic arg5$2, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$3, arg2$3, arg3$3, arg4$3, arg5$2, $if_$1, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$4, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg6$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$4, arg2$4, arg3$4, arg4$4, arg5$3, $if_$2, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$5, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg6$2, arg7$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$5, arg2$5, arg3$5, arg4$5, arg5$4, $if_$3, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$6, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$6, arg2$6, arg3$6, arg4$6, arg5$5, $if_$4, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$7, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$7, arg2$7, arg3$7, arg4$7, arg5$6, $if_$5, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$8, dc.dynamic arg4$8, dc.dynamic arg5$7, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8693$1, ){
final dc.List<dc.dynamic> o7668$6=(<dc.dynamic>[arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8693$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$8, arg2$8, arg3$8, arg4$8, arg5$7, $if_$6, ));
}

dc.dynamic call(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$9, dc.dynamic arg4$9, [dc.dynamic arg5$8 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if((arg5$8==const dc.pragma("cljd:missing-param", ))){
return (this.$_invoke$4(arg1$9, arg2$9, arg3$9, arg4$9, ));
}
if(dc.identical(arg6$6, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$5(arg1$9, arg2$9, arg3$9, arg4$9, arg5$8, ));
}
final dc.List<dc.dynamic> o7668$7=(<dc.dynamic>[arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$9, arg2$9, arg3$9, arg4$9, arg5$8, $if_$7, ));
}

dc.dynamic $_apply$1(dc.dynamic more8693$2, ){
final dc.dynamic o7668$8=more8693$2;
late final dc.dynamic more8693$3;
if((o7668$8 is lcoc_core.ISeqable$iface)){
more8693$3=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8693$3=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
if((null==more8693$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$10=lcoc_core.first(more8693$3, );
final dc.dynamic more8693$4=lcoc_core.next(more8693$3, );
if((null==more8693$4)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$10=lcoc_core.first(more8693$4, );
final dc.dynamic more8693$5=lcoc_core.next(more8693$4, );
if((null==more8693$5)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$10=lcoc_core.first(more8693$5, );
final dc.dynamic more8693$6=lcoc_core.next(more8693$5, );
if((null==more8693$6)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg4$10=lcoc_core.first(more8693$6, );
final dc.dynamic more8693$7=lcoc_core.next(more8693$6, );
if((null==more8693$7)){
return (this.$_invoke$4(arg1$10, arg2$10, arg3$10, arg4$10, ));
}
final dc.dynamic arg5$9=lcoc_core.first(more8693$7, );
final dc.dynamic more8693$8=lcoc_core.next(more8693$7, );
return (this.$_invoke$vararg(arg1$10, arg2$10, arg3$10, arg4$10, arg5$9, more8693$8, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuuXZ

// BEGIN IFnMixin_uuuuZ
mixin IFnMixin_uuuuZ on dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$vararg(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, dc.dynamic etc$1, ){
return null;
}

dc.dynamic $_invoke$4(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, dc.dynamic arg4$2, ){
final dc.List<dc.dynamic> o7668$1=<dc.dynamic>[];
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return (this.$_invoke$vararg(arg1$2, arg2$2, arg3$2, arg4$2, $if_$1, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, dc.dynamic arg4$3, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7668$2=<dc.dynamic>[arg5$1, ];
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
return (this.$_invoke$vararg(arg1$3, arg2$3, arg3$3, arg4$3, $if_$2, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$4, dc.dynamic arg4$4, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7668$3=<dc.dynamic>[arg5$2, arg6$1, ];
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
return (this.$_invoke$vararg(arg1$4, arg2$4, arg3$4, arg4$4, $if_$3, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$5, dc.dynamic arg4$5, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7668$4=<dc.dynamic>[arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
return (this.$_invoke$vararg(arg1$5, arg2$5, arg3$5, arg4$5, $if_$4, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$6, dc.dynamic arg4$6, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7668$5=<dc.dynamic>[arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
return (this.$_invoke$vararg(arg1$6, arg2$6, arg3$6, arg4$6, $if_$5, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$7, dc.dynamic arg4$7, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7668$6=<dc.dynamic>[arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
return (this.$_invoke$vararg(arg1$7, arg2$7, arg3$7, arg4$7, $if_$6, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$8, dc.dynamic arg4$8, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8719$1, ){
final dc.List<dc.dynamic> o7668$7=(<dc.dynamic>[arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8719$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return (this.$_invoke$vararg(arg1$8, arg2$8, arg3$8, arg4$8, $if_$7, ));
}

dc.dynamic call(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$9, dc.dynamic arg4$9, [dc.dynamic arg5$7 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg6$6 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg7$5 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg8$4 = const dc.pragma("cljd:missing-param", ), dc.dynamic arg9$3 = const dc.pragma("cljd:missing-param", ), ]){
if(dc.identical(arg5$7, const dc.pragma("cljd:missing-param", ), )){
return (this.$_invoke$4(arg1$9, arg2$9, arg3$9, arg4$9, ));
}
final dc.List<dc.dynamic> o7668$8=(<dc.dynamic>[arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1719_$AUTO_$1, ){
return (e$1719_$AUTO_$1!=const dc.pragma("cljd:missing-param", ));
}, ).toList());
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
return (this.$_invoke$vararg(arg1$9, arg2$9, arg3$9, arg4$9, $if_$8, ));
}

dc.dynamic $_apply$1(dc.dynamic more8719$2, ){
final dc.dynamic o7668$9=more8719$2;
late final dc.dynamic more8719$3;
if((o7668$9 is lcoc_core.ISeqable$iface)){
more8719$3=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8719$3=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
if((null==more8719$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$10=lcoc_core.first(more8719$3, );
final dc.dynamic more8719$4=lcoc_core.next(more8719$3, );
if((null==more8719$4)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$10=lcoc_core.first(more8719$4, );
final dc.dynamic more8719$5=lcoc_core.next(more8719$4, );
if((null==more8719$5)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$10=lcoc_core.first(more8719$5, );
final dc.dynamic more8719$6=lcoc_core.next(more8719$5, );
if((null==more8719$6)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg4$10=lcoc_core.first(more8719$6, );
final dc.dynamic more8719$7=lcoc_core.next(more8719$6, );
return (this.$_invoke$vararg(arg1$10, arg2$10, arg3$10, arg4$10, more8719$7, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuuZ

// BEGIN IHash
dc.dynamic IHash=const lcoc_core.IHash$iprot();

// END IHash

// BEGIN IHash$ext
abstract class IHash$ext extends dc.Object {

dc.dynamic $_hash$0(dc.dynamic o$1, );

dc.dynamic $_hash_realized$QMARK_$0(dc.dynamic o$2, );
}

// END IHash$ext

// BEGIN IHash$iface
abstract class IHash$iface extends dc.Object {

dc.dynamic $_hash$0();

dc.dynamic $_hash_realized$QMARK_$0();
}

// END IHash$iface

// BEGIN IHash$iprot
class IHash$iprot extends dc.Object implements lcoc_core.IProtocol {

const IHash$iprot():super();

dc.dynamic satisfies(dc.dynamic x$41, ){
final dc.bool or$7573_$AUTO_$53=(x$41 is lcoc_core.IHash$iface);
if(or$7573_$AUTO_$53){
return or$7573_$AUTO_$53;
}
final dc.bool or$7573_$AUTO_$54=(x$41 is dc.bool);
if(or$7573_$AUTO_$54){
return or$7573_$AUTO_$54;
}
final dc.bool or$7573_$AUTO_$55=(x$41 is dc.int);
if(or$7573_$AUTO_$55){
return or$7573_$AUTO_$55;
}
final dc.bool or$7573_$AUTO_$56=(x$41 is dc.double);
if(or$7573_$AUTO_$56){
return or$7573_$AUTO_$56;
}
final dc.bool or$7573_$AUTO_$57=(x$41 is dc.Null);
if(or$7573_$AUTO_$57){
return or$7573_$AUTO_$57;
}
final dc.bool or$7573_$AUTO_$58=(x$41 is dc.String);
if(or$7573_$AUTO_$58){
return or$7573_$AUTO_$58;
}
final dc.bool or$7573_$AUTO_$59=(x$41 is dc.MapEntry);
if(or$7573_$AUTO_$59){
return or$7573_$AUTO_$59;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$42, ){
if((x$42 is dc.bool)){
return lcoc_core.$C$dc$DOT_bool$$lcoc_core$DOT_IHash$D$$extension;
}
if((x$42 is dc.int)){
return lcoc_core.$C$dc$DOT_int$$lcoc_core$DOT_IHash$D$$extension;
}
if((x$42 is dc.double)){
return lcoc_core.$C$dc$DOT_double$$lcoc_core$DOT_IHash$D$$extension;
}
if((x$42 is dc.Null)){
return lcoc_core.$C$dc$DOT_Null$$lcoc_core$DOT_IHash$D$$extension;
}
if((x$42 is dc.String)){
return lcoc_core.$C$dc$DOT_String$$lcoc_core$DOT_IHash$D$$extension;
}
if((x$42 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IHash$D$$extension;
}
return lcoc_core.$C$fallback$$lcoc_core$DOT_IHash$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IHash$iprot

// BEGIN IIndexed
dc.dynamic IIndexed=const lcoc_core.IIndexed$iprot();

// END IIndexed

// BEGIN IIndexed$ext
abstract class IIndexed$ext extends dc.Object {

dc.dynamic $_nth$2(dc.dynamic coll$1, dc.dynamic n$3, dc.dynamic not_found$2, );

dc.dynamic $_nth$1(dc.dynamic coll$2, dc.dynamic n$4, );
}

// END IIndexed$ext

// BEGIN IIndexed$iface
abstract class IIndexed$iface extends dc.Object {

dc.dynamic $_nth$2(dc.dynamic n$1, dc.dynamic not_found$1, );

dc.dynamic $_nth$1(dc.dynamic n$2, );
}

// END IIndexed$iface

// BEGIN IIndexed$iprot
class IIndexed$iprot extends dc.Object implements lcoc_core.IProtocol {

const IIndexed$iprot():super();

dc.dynamic satisfies(dc.dynamic x$3, ){
final dc.bool or$7573_$AUTO_$4=(x$3 is lcoc_core.IIndexed$iface);
if(or$7573_$AUTO_$4){
return or$7573_$AUTO_$4;
}
final dc.bool or$7573_$AUTO_$5=(x$3 is dc.List);
if(or$7573_$AUTO_$5){
return or$7573_$AUTO_$5;
}
final dc.bool or$7573_$AUTO_$6=(x$3 is dc.String);
if(or$7573_$AUTO_$6){
return or$7573_$AUTO_$6;
}
final dc.bool or$7573_$AUTO_$7=(x$3 is dc.Null);
if(or$7573_$AUTO_$7){
return or$7573_$AUTO_$7;
}
final dc.bool or$7573_$AUTO_$8=(x$3 is dc.MapEntry);
if(or$7573_$AUTO_$8){
return or$7573_$AUTO_$8;
}
final dc.bool or$7573_$AUTO_$9=(x$3 is dc.Match);
if(or$7573_$AUTO_$9){
return or$7573_$AUTO_$9;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$4, ){
if((x$4 is dc.List)){
return lcoc_core.$C$dc$DOT_List$$lcoc_core$DOT_IIndexed$D$$extension;
}
if((x$4 is dc.String)){
return lcoc_core.$C$dc$DOT_String$$lcoc_core$DOT_IIndexed$D$$extension;
}
if((x$4 is dc.Null)){
return lcoc_core.$C$dc$DOT_Null$$lcoc_core$DOT_IIndexed$D$$extension;
}
if((x$4 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IIndexed$D$$extension;
}
if((x$4 is dc.Match)){
return lcoc_core.$C$dc$DOT_Match$$lcoc_core$DOT_IIndexed$D$$extension;
}
return lcoc_core.$C$fallback$$lcoc_core$DOT_IIndexed$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IIndexed$iprot

// BEGIN IKVReduce
dc.dynamic IKVReduce=const lcoc_core.IKVReduce$iprot();

// END IKVReduce

// BEGIN IKVReduce$ext
abstract class IKVReduce$ext extends dc.Object {

dc.dynamic $_kv_reduce$2(dc.dynamic coll$1, dc.dynamic f$2, dc.dynamic init$2, );
}

// END IKVReduce$ext

// BEGIN IKVReduce$iface
abstract class IKVReduce$iface extends dc.Object {

dc.dynamic $_kv_reduce$2(dc.dynamic f$1, dc.dynamic init$1, );
}

// END IKVReduce$iface

// BEGIN IKVReduce$iprot
class IKVReduce$iprot extends dc.Object implements lcoc_core.IProtocol {

const IKVReduce$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.IKVReduce$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
final dc.bool or$7573_$AUTO_$2=(x$1 is dc.Null);
if(or$7573_$AUTO_$2){
return or$7573_$AUTO_$2;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
if((x$2 is dc.Null)){
return lcoc_core.$C$dc$DOT_Null$$lcoc_core$DOT_IKVReduce$D$$extension;
}
throw dc.Exception((("No extension of protocol IKVReduce found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IKVReduce$iprot

// BEGIN IList
dc.dynamic IList=const lcoc_core.IList$iprot();

// END IList

// BEGIN IList$ext
abstract class IList$ext extends dc.Object {
}

// END IList$ext

// BEGIN IList$iface
abstract class IList$iface extends dc.Object {
}

// END IList$iface

// BEGIN IList$iprot
class IList$iprot extends dc.Object implements lcoc_core.IProtocol {

const IList$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.IList$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IList found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IList$iprot

// BEGIN ILookup
dc.dynamic ILookup=const lcoc_core.ILookup$iprot();

// END ILookup

// BEGIN ILookup$ext
abstract class ILookup$ext extends dc.Object {

dc.dynamic $_lookup$2(dc.dynamic o$1, dc.dynamic k$4, dc.dynamic not_found$2, );

dc.dynamic $_lookup$1(dc.dynamic o$2, dc.dynamic k$5, );

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic o$3, dc.dynamic k$6, );
}

// END ILookup$ext

// BEGIN ILookup$iface
abstract class ILookup$iface extends dc.Object {

dc.dynamic $_lookup$2(dc.dynamic k$1, dc.dynamic not_found$1, );

dc.dynamic $_lookup$1(dc.dynamic k$2, );

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$3, );
}

// END ILookup$iface

// BEGIN ILookup$iprot
class ILookup$iprot extends dc.Object implements lcoc_core.IProtocol {

const ILookup$iprot():super();

dc.dynamic satisfies(dc.dynamic x$3, ){
final dc.bool or$7573_$AUTO_$7=(x$3 is lcoc_core.ILookup$iface);
if(or$7573_$AUTO_$7){
return or$7573_$AUTO_$7;
}
final dc.bool or$7573_$AUTO_$8=(x$3 is dc.List);
if(or$7573_$AUTO_$8){
return or$7573_$AUTO_$8;
}
final dc.bool or$7573_$AUTO_$9=(x$3 is dc.String);
if(or$7573_$AUTO_$9){
return or$7573_$AUTO_$9;
}
final dc.bool or$7573_$AUTO_$10=(x$3 is dc.MapEntry);
if(or$7573_$AUTO_$10){
return or$7573_$AUTO_$10;
}
final dc.bool or$7573_$AUTO_$11=(x$3 is dc.Map);
if(or$7573_$AUTO_$11){
return or$7573_$AUTO_$11;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$4, ){
if((x$4 is dc.List)){
return lcoc_core.$C$dc$DOT_List$$lcoc_core$DOT_ILookup$D$$extension;
}
if((x$4 is dc.String)){
return lcoc_core.$C$dc$DOT_String$$lcoc_core$DOT_ILookup$D$$extension;
}
if((x$4 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_ILookup$D$$extension;
}
if((x$4 is dc.Map)){
return lcoc_core.$C$dc$DOT_Map$$lcoc_core$DOT_ILookup$D$$extension;
}
return lcoc_core.$C$fallback$$lcoc_core$DOT_ILookup$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ILookup$iprot

// BEGIN IMap
dc.dynamic IMap=const lcoc_core.IMap$iprot();

// END IMap

// BEGIN IMap$ext
abstract class IMap$ext extends dc.Object {

dc.dynamic $_dissoc$1(dc.dynamic coll$1, dc.dynamic k$2, );
}

// END IMap$ext

// BEGIN IMap$iface
abstract class IMap$iface extends dc.Object {

dc.dynamic $_dissoc$1(dc.dynamic k$1, );
}

// END IMap$iface

// BEGIN IMap$iprot
class IMap$iprot extends dc.Object implements lcoc_core.IProtocol {

const IMap$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.IMap$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
return lcoc_core.$C$fallback$$lcoc_core$DOT_IMap$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IMap$iprot

// BEGIN IMeta
dc.dynamic IMeta=const lcoc_core.IMeta$iprot();

// END IMeta

// BEGIN IMeta$ext
abstract class IMeta$ext extends dc.Object {

dc.dynamic $_meta$0(dc.dynamic o$1, );
}

// END IMeta$ext

// BEGIN IMeta$iface
abstract class IMeta$iface extends dc.Object {

dc.dynamic $_meta$0();
}

// END IMeta$iface

// BEGIN IMeta$iprot
class IMeta$iprot extends dc.Object implements lcoc_core.IProtocol {

const IMeta$iprot():super();

dc.dynamic satisfies(dc.dynamic x$7, ){
final dc.bool or$7573_$AUTO_$14=(x$7 is lcoc_core.IMeta$iface);
if(or$7573_$AUTO_$14){
return or$7573_$AUTO_$14;
}
final dc.bool or$7573_$AUTO_$15=(x$7 is dc.MapEntry);
if(or$7573_$AUTO_$15){
return or$7573_$AUTO_$15;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$8, ){
if((x$8 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IMeta$D$$extension;
}
return lcoc_core.$C$fallback$$lcoc_core$DOT_IMeta$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IMeta$iprot

// BEGIN INamed
dc.dynamic INamed=const lcoc_core.INamed$iprot();

// END INamed

// BEGIN INamed$ext
abstract class INamed$ext extends dc.Object {

dc.dynamic $_name$0(dc.dynamic x$1, );

dc.dynamic $_namespace$0(dc.dynamic x$2, );
}

// END INamed$ext

// BEGIN INamed$iface
abstract class INamed$iface extends dc.Object {

dc.dynamic $_name$0();

dc.dynamic $_namespace$0();
}

// END INamed$iface

// BEGIN INamed$iprot
class INamed$iprot extends dc.Object implements lcoc_core.IProtocol {

const INamed$iprot():super();

dc.dynamic satisfies(dc.dynamic x$3, ){
final dc.bool or$7573_$AUTO_$1=(x$3 is lcoc_core.INamed$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$4, ){
throw dc.Exception((("No extension of protocol INamed found for type "+(x$4.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END INamed$iprot

// BEGIN IPending
dc.dynamic IPending=const lcoc_core.IPending$iprot();

// END IPending

// BEGIN IPending$ext
abstract class IPending$ext extends dc.Object {

dc.dynamic $_realized$QMARK_$0(dc.dynamic x$1, );
}

// END IPending$ext

// BEGIN IPending$iface
abstract class IPending$iface extends dc.Object {

dc.dynamic $_realized$QMARK_$0();
}

// END IPending$iface

// BEGIN IPending$iprot
class IPending$iprot extends dc.Object implements lcoc_core.IProtocol {

const IPending$iprot():super();

dc.dynamic satisfies(dc.dynamic x$2, ){
final dc.bool or$7573_$AUTO_$1=(x$2 is lcoc_core.IPending$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$3, ){
throw dc.Exception((("No extension of protocol IPending found for type "+(x$3.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IPending$iprot

// BEGIN IPrint
dc.dynamic IPrint=const lcoc_core.IPrint$iprot();

// END IPrint

// BEGIN IPrint$ext
abstract class IPrint$ext extends dc.Object {

dc.dynamic $_print$1(dc.dynamic o$1, dc.dynamic string_sink$2, );
}

// END IPrint$ext

// BEGIN IPrint$iface
abstract class IPrint$iface extends dc.Object {

dc.dynamic $_print$1(dc.dynamic string_sink$1, );
}

// END IPrint$iface

// BEGIN IPrint$iprot
class IPrint$iprot extends dc.Object implements lcoc_core.IProtocol {

const IPrint$iprot():super();

dc.dynamic satisfies(dc.dynamic x$5, ){
final dc.bool or$7573_$AUTO_$8=(x$5 is lcoc_core.IPrint$iface);
if(or$7573_$AUTO_$8){
return or$7573_$AUTO_$8;
}
final dc.bool or$7573_$AUTO_$9=(x$5 is dc.Null);
if(or$7573_$AUTO_$9){
return or$7573_$AUTO_$9;
}
final dc.bool or$7573_$AUTO_$10=(x$5 is dc.RegExp);
if(or$7573_$AUTO_$10){
return or$7573_$AUTO_$10;
}
final dc.bool or$7573_$AUTO_$11=(x$5 is dc.num);
if(or$7573_$AUTO_$11){
return or$7573_$AUTO_$11;
}
final dc.bool or$7573_$AUTO_$12=(x$5 is dc.String);
if(or$7573_$AUTO_$12){
return or$7573_$AUTO_$12;
}
final dc.bool or$7573_$AUTO_$13=(x$5 is dc.MapEntry);
if(or$7573_$AUTO_$13){
return or$7573_$AUTO_$13;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$6, ){
if((x$6 is dc.Null)){
return lcoc_core.$C$dc$DOT_Null$$lcoc_core$DOT_IPrint$D$$extension;
}
if((x$6 is dc.RegExp)){
return lcoc_core.$C$dc$DOT_RegExp$$lcoc_core$DOT_IPrint$D$$extension;
}
if((x$6 is dc.num)){
return lcoc_core.$C$dc$DOT_num$$lcoc_core$DOT_IPrint$D$$extension;
}
if((x$6 is dc.String)){
return lcoc_core.$C$dc$DOT_String$$lcoc_core$DOT_IPrint$D$$extension;
}
if((x$6 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IPrint$D$$extension;
}
return lcoc_core.$C$fallback$$lcoc_core$DOT_IPrint$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IPrint$iprot

// BEGIN IProtocol
abstract class IProtocol extends dc.Object {

dc.dynamic extensions(dc.dynamic x$1, );

dc.dynamic satisfies(dc.dynamic x$2, );
}

// END IProtocol

// BEGIN IRecord
dc.dynamic IRecord=const lcoc_core.IRecord$iprot();

// END IRecord

// BEGIN IRecord$ext
abstract class IRecord$ext extends dc.Object {
}

// END IRecord$ext

// BEGIN IRecord$iface
abstract class IRecord$iface extends dc.Object {
}

// END IRecord$iface

// BEGIN IRecord$iprot
class IRecord$iprot extends dc.Object implements lcoc_core.IProtocol {

const IRecord$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.IRecord$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IRecord found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IRecord$iprot

// BEGIN IReduce
dc.dynamic IReduce=const lcoc_core.IReduce$iprot();

// END IReduce

// BEGIN IReduce$ext
abstract class IReduce$ext extends dc.Object {

dc.dynamic $_reduce$2(dc.dynamic coll$1, dc.dynamic f$3, dc.dynamic start$2, );

dc.dynamic $_reduce$1(dc.dynamic coll$2, dc.dynamic f$4, );
}

// END IReduce$ext

// BEGIN IReduce$iface
abstract class IReduce$iface extends dc.Object {

dc.dynamic $_reduce$2(dc.dynamic f$1, dc.dynamic start$1, );

dc.dynamic $_reduce$1(dc.dynamic f$2, );
}

// END IReduce$iface

// BEGIN IReduce$iprot
class IReduce$iprot extends dc.Object implements lcoc_core.IProtocol {

const IReduce$iprot():super();

dc.dynamic satisfies(dc.dynamic x$25, ){
final dc.bool or$7573_$AUTO_$40=(x$25 is lcoc_core.IReduce$iface);
if(or$7573_$AUTO_$40){
return or$7573_$AUTO_$40;
}
final dc.bool or$7573_$AUTO_$41=(x$25 is dc.String);
if(or$7573_$AUTO_$41){
return or$7573_$AUTO_$41;
}
final dc.bool or$7573_$AUTO_$42=(x$25 is dc.MapEntry);
if(or$7573_$AUTO_$42){
return or$7573_$AUTO_$42;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$26, ){
if((x$26 is dc.String)){
return lcoc_core.$C$dc$DOT_String$$lcoc_core$DOT_IReduce$D$$extension;
}
if((x$26 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IReduce$D$$extension;
}
return lcoc_core.$C$fallback$$lcoc_core$DOT_IReduce$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IReduce$iprot

// BEGIN IReset
dc.dynamic IReset=const lcoc_core.IReset$iprot();

// END IReset

// BEGIN IReset$ext
abstract class IReset$ext extends dc.Object {

dc.dynamic $_reset$BANG_$1(dc.dynamic o$1, dc.dynamic new_value$2, );
}

// END IReset$ext

// BEGIN IReset$iface
abstract class IReset$iface extends dc.Object {

dc.dynamic $_reset$BANG_$1(dc.dynamic new_value$1, );
}

// END IReset$iface

// BEGIN IReset$iprot
class IReset$iprot extends dc.Object implements lcoc_core.IProtocol {

const IReset$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.IReset$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IReset found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IReset$iprot

// BEGIN IReversible
dc.dynamic IReversible=const lcoc_core.IReversible$iprot();

// END IReversible

// BEGIN IReversible$ext
abstract class IReversible$ext extends dc.Object {

dc.dynamic $_rseq$0(dc.dynamic coll$1, );
}

// END IReversible$ext

// BEGIN IReversible$iface
abstract class IReversible$iface extends dc.Object {

dc.dynamic $_rseq$0();
}

// END IReversible$iface

// BEGIN IReversible$iprot
class IReversible$iprot extends dc.Object implements lcoc_core.IProtocol {

const IReversible$iprot():super();

dc.dynamic satisfies(dc.dynamic x$17, ){
final dc.bool or$7573_$AUTO_$28=(x$17 is lcoc_core.IReversible$iface);
if(or$7573_$AUTO_$28){
return or$7573_$AUTO_$28;
}
final dc.bool or$7573_$AUTO_$29=(x$17 is dc.MapEntry);
if(or$7573_$AUTO_$29){
return or$7573_$AUTO_$29;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$18, ){
if((x$18 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IReversible$D$$extension;
}
throw dc.Exception((("No extension of protocol IReversible found for type "+(x$18.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IReversible$iprot

// BEGIN ISeq
dc.dynamic ISeq=const lcoc_core.ISeq$iprot();

// END ISeq

// BEGIN ISeq$ext
abstract class ISeq$ext extends dc.Object {

dc.dynamic $_first$0(dc.dynamic coll$1, );

dc.dynamic $_rest$0(dc.dynamic coll$2, );

dc.dynamic $_next$0(dc.dynamic coll$3, );
}

// END ISeq$ext

// BEGIN ISeq$iface
abstract class ISeq$iface extends dc.Object {

dc.dynamic $_first$0();

dc.dynamic $_rest$0();

dc.dynamic $_next$0();
}

// END ISeq$iface

// BEGIN ISeq$iprot
class ISeq$iprot extends dc.Object implements lcoc_core.IProtocol {

const ISeq$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.ISeq$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
return lcoc_core.$C$fallback$$lcoc_core$DOT_ISeq$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ISeq$iprot

// BEGIN ISeqable
dc.dynamic ISeqable=const lcoc_core.ISeqable$iprot();

// END ISeqable

// BEGIN ISeqable$ext
abstract class ISeqable$ext extends dc.Object {

dc.dynamic $_seq$0(dc.dynamic o$1, );
}

// END ISeqable$ext

// BEGIN ISeqable$iface
abstract class ISeqable$iface extends dc.Object {

dc.dynamic $_seq$0();
}

// END ISeqable$iface

// BEGIN ISeqable$iprot
class ISeqable$iprot extends dc.Object implements lcoc_core.IProtocol {

const ISeqable$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.ISeqable$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
final dc.bool or$7573_$AUTO_$2=(x$1 is dc.Null);
if(or$7573_$AUTO_$2){
return or$7573_$AUTO_$2;
}
final dc.bool or$7573_$AUTO_$3=(x$1 is dc.Iterable);
if(or$7573_$AUTO_$3){
return or$7573_$AUTO_$3;
}
final dc.bool or$7573_$AUTO_$4=(x$1 is dc.String);
if(or$7573_$AUTO_$4){
return or$7573_$AUTO_$4;
}
final dc.bool or$7573_$AUTO_$5=(x$1 is dc.MapEntry);
if(or$7573_$AUTO_$5){
return or$7573_$AUTO_$5;
}
final dc.bool or$7573_$AUTO_$6=(x$1 is dc.Map);
if(or$7573_$AUTO_$6){
return or$7573_$AUTO_$6;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
if((x$2 is dc.Null)){
return lcoc_core.$C$dc$DOT_Null$$lcoc_core$DOT_ISeqable$D$$extension;
}
if((x$2 is dc.Iterable)){
return lcoc_core.$C$dc$DOT_Iterable$$lcoc_core$DOT_ISeqable$D$$extension;
}
if((x$2 is dc.String)){
return lcoc_core.$C$dc$DOT_String$$lcoc_core$DOT_ISeqable$D$$extension;
}
if((x$2 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_ISeqable$D$$extension;
}
if((x$2 is dc.Map)){
return lcoc_core.$C$dc$DOT_Map$$lcoc_core$DOT_ISeqable$D$$extension;
}
throw dc.Exception((("No extension of protocol ISeqable found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ISeqable$iprot

// BEGIN ISequential
dc.dynamic ISequential=const lcoc_core.ISequential$iprot();

// END ISequential

// BEGIN ISequential$ext
abstract class ISequential$ext extends dc.Object {
}

// END ISequential$ext

// BEGIN ISequential$iface
abstract class ISequential$iface extends dc.Object {
}

// END ISequential$iface

// BEGIN ISequential$iprot
class ISequential$iprot extends dc.Object implements lcoc_core.IProtocol {

const ISequential$iprot():super();

dc.dynamic satisfies(dc.dynamic x$35, ){
final dc.bool or$7573_$AUTO_$49=(x$35 is lcoc_core.ISequential$iface);
if(or$7573_$AUTO_$49){
return or$7573_$AUTO_$49;
}
final dc.bool or$7573_$AUTO_$50=(x$35 is dc.MapEntry);
if(or$7573_$AUTO_$50){
return or$7573_$AUTO_$50;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$36, ){
if((x$36 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_ISequential$D$$extension;
}
throw dc.Exception((("No extension of protocol ISequential found for type "+(x$36.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ISequential$iprot

// BEGIN ISet
dc.dynamic ISet=const lcoc_core.ISet$iprot();

// END ISet

// BEGIN ISet$ext
abstract class ISet$ext extends dc.Object {

dc.dynamic $_disjoin$1(dc.dynamic coll$1, dc.dynamic v$2, );
}

// END ISet$ext

// BEGIN ISet$iface
abstract class ISet$iface extends dc.Object {

dc.dynamic $_disjoin$1(dc.dynamic v$1, );
}

// END ISet$iface

// BEGIN ISet$iprot
class ISet$iprot extends dc.Object implements lcoc_core.IProtocol {

const ISet$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.ISet$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
final dc.bool or$7573_$AUTO_$2=(x$1 is dc.Null);
if(or$7573_$AUTO_$2){
return or$7573_$AUTO_$2;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
if((x$2 is dc.Null)){
return lcoc_core.$C$dc$DOT_Null$$lcoc_core$DOT_ISet$D$$extension;
}
throw dc.Exception((("No extension of protocol ISet found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ISet$iprot

// BEGIN ISorted
dc.dynamic ISorted=const lcoc_core.ISorted$iprot();

// END ISorted

// BEGIN ISorted$ext
abstract class ISorted$ext extends dc.Object {

dc.dynamic $_sorted_seq$3(dc.dynamic coll$1, dc.dynamic from$3, dc.dynamic to$3, dc.dynamic flags$3, );

dc.dynamic $_sorted_rseq$3(dc.dynamic coll$2, dc.dynamic from$4, dc.dynamic to$4, dc.dynamic flags$4, );
}

// END ISorted$ext

// BEGIN ISorted$iface
abstract class ISorted$iface extends dc.Object {

dc.dynamic $_sorted_seq$3(dc.dynamic from$1, dc.dynamic to$1, dc.dynamic flags$1, );

dc.dynamic $_sorted_rseq$3(dc.dynamic from$2, dc.dynamic to$2, dc.dynamic flags$2, );
}

// END ISorted$iface

// BEGIN ISorted$iprot
class ISorted$iprot extends dc.Object implements lcoc_core.IProtocol {

const ISorted$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.ISorted$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol ISorted found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ISorted$iprot

// BEGIN IStack
dc.dynamic IStack=const lcoc_core.IStack$iprot();

// END IStack

// BEGIN IStack$ext
abstract class IStack$ext extends dc.Object {

dc.dynamic $_peek$0(dc.dynamic coll$1, );

dc.dynamic $_pop$0(dc.dynamic coll$2, );
}

// END IStack$ext

// BEGIN IStack$iface
abstract class IStack$iface extends dc.Object {

dc.dynamic $_peek$0();

dc.dynamic $_pop$0();
}

// END IStack$iface

// BEGIN IStack$iprot
class IStack$iprot extends dc.Object implements lcoc_core.IProtocol {

const IStack$iprot():super();

dc.dynamic satisfies(dc.dynamic x$9, ){
final dc.bool or$7573_$AUTO_$16=(x$9 is lcoc_core.IStack$iface);
if(or$7573_$AUTO_$16){
return or$7573_$AUTO_$16;
}
final dc.bool or$7573_$AUTO_$17=(x$9 is dc.MapEntry);
if(or$7573_$AUTO_$17){
return or$7573_$AUTO_$17;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$10, ){
if((x$10 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IStack$D$$extension;
}
return lcoc_core.$C$fallback$$lcoc_core$DOT_IStack$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IStack$iprot

// BEGIN ISubvecable
dc.dynamic ISubvecable=const lcoc_core.ISubvecable$iprot();

// END ISubvecable

// BEGIN ISubvecable$ext
abstract class ISubvecable$ext extends dc.Object {

dc.dynamic $_subvec$2(dc.dynamic vector$1, dc.dynamic start$2, dc.dynamic end$2, );
}

// END ISubvecable$ext

// BEGIN ISubvecable$iface
abstract class ISubvecable$iface extends dc.Object {

dc.dynamic $_subvec$2(dc.dynamic start$1, dc.dynamic end$1, );
}

// END ISubvecable$iface

// BEGIN ISubvecable$iprot
class ISubvecable$iprot extends dc.Object implements lcoc_core.IProtocol {

const ISubvecable$iprot():super();

dc.dynamic satisfies(dc.dynamic x$33, ){
final dc.bool or$7573_$AUTO_$47=(x$33 is lcoc_core.ISubvecable$iface);
if(or$7573_$AUTO_$47){
return or$7573_$AUTO_$47;
}
final dc.bool or$7573_$AUTO_$48=(x$33 is dc.MapEntry);
if(or$7573_$AUTO_$48){
return or$7573_$AUTO_$48;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$34, ){
if((x$34 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_ISubvecable$D$$extension;
}
throw dc.Exception((("No extension of protocol ISubvecable found for type "+(x$34.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ISubvecable$iprot

// BEGIN ISwap
dc.dynamic ISwap=const lcoc_core.ISwap$iprot();

// END ISwap

// BEGIN ISwap$ext
abstract class ISwap$ext extends dc.Object {

dc.dynamic $_swap$BANG_$4(dc.dynamic o$1, dc.dynamic f$5, dc.dynamic a$4, dc.dynamic b$3, dc.dynamic xs$2, );

dc.dynamic $_swap$BANG_$3(dc.dynamic o$2, dc.dynamic f$6, dc.dynamic a$5, dc.dynamic b$4, );

dc.dynamic $_swap$BANG_$2(dc.dynamic o$3, dc.dynamic f$7, dc.dynamic a$6, );

dc.dynamic $_swap$BANG_$1(dc.dynamic o$4, dc.dynamic f$8, );
}

// END ISwap$ext

// BEGIN ISwap$iface
abstract class ISwap$iface extends dc.Object {

dc.dynamic $_swap$BANG_$4(dc.dynamic f$1, dc.dynamic a$1, dc.dynamic b$1, dc.dynamic xs$1, );

dc.dynamic $_swap$BANG_$3(dc.dynamic f$2, dc.dynamic a$2, dc.dynamic b$2, );

dc.dynamic $_swap$BANG_$2(dc.dynamic f$3, dc.dynamic a$3, );

dc.dynamic $_swap$BANG_$1(dc.dynamic f$4, );
}

// END ISwap$iface

// BEGIN ISwap$iprot
class ISwap$iprot extends dc.Object implements lcoc_core.IProtocol {

const ISwap$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.ISwap$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol ISwap found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ISwap$iprot

// BEGIN ITransientAssociative
dc.dynamic ITransientAssociative=const lcoc_core.ITransientAssociative$iprot();

// END ITransientAssociative

// BEGIN ITransientAssociative$ext
abstract class ITransientAssociative$ext extends dc.Object {

dc.dynamic $_assoc$BANG_$2(dc.dynamic tcoll$1, dc.dynamic key$2, dc.dynamic val$2, );
}

// END ITransientAssociative$ext

// BEGIN ITransientAssociative$iface
abstract class ITransientAssociative$iface extends dc.Object {

dc.dynamic $_assoc$BANG_$2(dc.dynamic key$1, dc.dynamic val$1, );
}

// END ITransientAssociative$iface

// BEGIN ITransientAssociative$iprot
class ITransientAssociative$iprot extends dc.Object implements lcoc_core.IProtocol {

const ITransientAssociative$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.ITransientAssociative$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol ITransientAssociative found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ITransientAssociative$iprot

// BEGIN ITransientCollection
dc.dynamic ITransientCollection=const lcoc_core.ITransientCollection$iprot();

// END ITransientCollection

// BEGIN ITransientCollection$ext
abstract class ITransientCollection$ext extends dc.Object {

dc.dynamic $_conj$BANG_$1(dc.dynamic tcoll$1, dc.dynamic val$2, );

dc.dynamic $_persistent$BANG_$0(dc.dynamic tcoll$2, );
}

// END ITransientCollection$ext

// BEGIN ITransientCollection$iface
abstract class ITransientCollection$iface extends dc.Object {

dc.dynamic $_conj$BANG_$1(dc.dynamic val$1, );

dc.dynamic $_persistent$BANG_$0();
}

// END ITransientCollection$iface

// BEGIN ITransientCollection$iprot
class ITransientCollection$iprot extends dc.Object implements lcoc_core.IProtocol {

const ITransientCollection$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.ITransientCollection$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol ITransientCollection found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ITransientCollection$iprot

// BEGIN ITransientMap
dc.dynamic ITransientMap=const lcoc_core.ITransientMap$iprot();

// END ITransientMap

// BEGIN ITransientMap$ext
abstract class ITransientMap$ext extends dc.Object {

dc.dynamic $_dissoc$BANG_$1(dc.dynamic tcoll$1, dc.dynamic key$2, );
}

// END ITransientMap$ext

// BEGIN ITransientMap$iface
abstract class ITransientMap$iface extends dc.Object {

dc.dynamic $_dissoc$BANG_$1(dc.dynamic key$1, );
}

// END ITransientMap$iface

// BEGIN ITransientMap$iprot
class ITransientMap$iprot extends dc.Object implements lcoc_core.IProtocol {

const ITransientMap$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.ITransientMap$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol ITransientMap found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ITransientMap$iprot

// BEGIN ITransientSet
dc.dynamic ITransientSet=const lcoc_core.ITransientSet$iprot();

// END ITransientSet

// BEGIN ITransientSet$ext
abstract class ITransientSet$ext extends dc.Object {

dc.dynamic $_disjoin$BANG_$1(dc.dynamic tcoll$1, dc.dynamic v$2, );
}

// END ITransientSet$ext

// BEGIN ITransientSet$iface
abstract class ITransientSet$iface extends dc.Object {

dc.dynamic $_disjoin$BANG_$1(dc.dynamic v$1, );
}

// END ITransientSet$iface

// BEGIN ITransientSet$iprot
class ITransientSet$iprot extends dc.Object implements lcoc_core.IProtocol {

const ITransientSet$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.ITransientSet$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol ITransientSet found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ITransientSet$iprot

// BEGIN ITransientVector
dc.dynamic ITransientVector=const lcoc_core.ITransientVector$iprot();

// END ITransientVector

// BEGIN ITransientVector$ext
abstract class ITransientVector$ext extends dc.Object {

dc.dynamic $_assoc_n$BANG_$2(dc.dynamic tcoll$1, dc.dynamic n$2, dc.dynamic val$2, );

dc.dynamic $_pop$BANG_$0(dc.dynamic tcoll$2, );
}

// END ITransientVector$ext

// BEGIN ITransientVector$iface
abstract class ITransientVector$iface extends dc.Object {

dc.dynamic $_assoc_n$BANG_$2(dc.dynamic n$1, dc.dynamic val$1, );

dc.dynamic $_pop$BANG_$0();
}

// END ITransientVector$iface

// BEGIN ITransientVector$iprot
class ITransientVector$iprot extends dc.Object implements lcoc_core.IProtocol {

const ITransientVector$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.ITransientVector$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol ITransientVector found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ITransientVector$iprot

// BEGIN IVector
dc.dynamic IVector=const lcoc_core.IVector$iprot();

// END IVector

// BEGIN IVector$ext
abstract class IVector$ext extends dc.Object {

dc.dynamic $_assoc_n$2(dc.dynamic coll$1, dc.dynamic n$2, dc.dynamic val$2, );
}

// END IVector$ext

// BEGIN IVector$iface
abstract class IVector$iface extends dc.Object {

dc.dynamic $_assoc_n$2(dc.dynamic n$1, dc.dynamic val$1, );
}

// END IVector$iface

// BEGIN IVector$iprot
class IVector$iprot extends dc.Object implements lcoc_core.IProtocol {

const IVector$iprot():super();

dc.dynamic satisfies(dc.dynamic x$23, ){
final dc.bool or$7573_$AUTO_$38=(x$23 is lcoc_core.IVector$iface);
if(or$7573_$AUTO_$38){
return or$7573_$AUTO_$38;
}
final dc.bool or$7573_$AUTO_$39=(x$23 is dc.MapEntry);
if(or$7573_$AUTO_$39){
return or$7573_$AUTO_$39;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$24, ){
if((x$24 is dc.MapEntry)){
return lcoc_core.$C$dc$DOT_MapEntry$$lcoc_core$DOT_IVector$D$$extension;
}
throw dc.Exception((("No extension of protocol IVector found for type "+(x$24.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IVector$iprot

// BEGIN IVolatile
dc.dynamic IVolatile=const lcoc_core.IVolatile$iprot();

// END IVolatile

// BEGIN IVolatile$ext
abstract class IVolatile$ext extends dc.Object {

dc.dynamic $_vreset$BANG_$1(dc.dynamic o$1, dc.dynamic new_value$2, );
}

// END IVolatile$ext

// BEGIN IVolatile$iface
abstract class IVolatile$iface extends dc.Object {

dc.dynamic $_vreset$BANG_$1(dc.dynamic new_value$1, );
}

// END IVolatile$iface

// BEGIN IVolatile$iprot
class IVolatile$iprot extends dc.Object implements lcoc_core.IProtocol {

const IVolatile$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.IVolatile$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IVolatile found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IVolatile$iprot

// BEGIN IWatchable
dc.dynamic IWatchable=const lcoc_core.IWatchable$iprot();

// END IWatchable

// BEGIN IWatchable$ext
abstract class IWatchable$ext extends dc.Object {

dc.dynamic $_notify_watches$2(dc.dynamic $this_$1, dc.dynamic oldval$2, dc.dynamic newval$2, );

dc.dynamic $_add_watch$2(dc.dynamic $this_$2, dc.dynamic key$3, dc.dynamic f$2, );

dc.dynamic $_remove_watch$1(dc.dynamic $this_$3, dc.dynamic key$4, );
}

// END IWatchable$ext

// BEGIN IWatchable$iface
abstract class IWatchable$iface extends dc.Object {

dc.dynamic $_notify_watches$2(dc.dynamic oldval$1, dc.dynamic newval$1, );

dc.dynamic $_add_watch$2(dc.dynamic key$1, dc.dynamic f$1, );

dc.dynamic $_remove_watch$1(dc.dynamic key$2, );
}

// END IWatchable$iface

// BEGIN IWatchable$iprot
class IWatchable$iprot extends dc.Object implements lcoc_core.IProtocol {

const IWatchable$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.IWatchable$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IWatchable found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IWatchable$iprot

// BEGIN IWithMeta
dc.dynamic IWithMeta=const lcoc_core.IWithMeta$iprot();

// END IWithMeta

// BEGIN IWithMeta$ext
abstract class IWithMeta$ext extends dc.Object {

dc.dynamic $_with_meta$1(dc.dynamic o$1, dc.dynamic meta$2, );
}

// END IWithMeta$ext

// BEGIN IWithMeta$iface
abstract class IWithMeta$iface extends dc.Object {

dc.dynamic $_with_meta$1(dc.dynamic meta$1, );
}

// END IWithMeta$iface

// BEGIN IWithMeta$iprot
class IWithMeta$iprot extends dc.Object implements lcoc_core.IProtocol {

const IWithMeta$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(x$1 is lcoc_core.IWithMeta$iface);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
final dc.bool or$7573_$AUTO_$2=(x$1 is dc.Function);
if(or$7573_$AUTO_$2){
return or$7573_$AUTO_$2;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
if((x$2 is dc.Function)){
return lcoc_core.$C$dc$DOT_Function$$lcoc_core$DOT_IWithMeta$D$$extension;
}
throw dc.Exception((("No extension of protocol IWithMeta found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IWithMeta$iprot

// BEGIN IteratorSeq
class IteratorSeq<E> extends dc.Object with d_collection.ListMixin<E>, lcoc_core.EquivSequentialHashMixin, lcoc_core.SeqListMixin<E> implements lcoc_core.ISeqable$iface, lcoc_core.ISeq$iface, lcoc_core.ICollection$iface, lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface {
final meta;
final value;
final dc.Iterator iter;
dc.dynamic? $UNDERSCORE_rest;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

IteratorSeq(this.meta, this.value, this.iter, this.$UNDERSCORE_rest, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

lcoc_core.IteratorSeq<R> cast<R>(){
return lcoc_core.IteratorSeq<R>(meta, value, iter, $UNDERSCORE_rest, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_seq$0(){
return this;
}

dc.dynamic $_first$0(){
return value;
}

dc.dynamic $_rest$0(){
final dc.dynamic? or$7573_$AUTO_$1=$UNDERSCORE_rest;
if((or$7573_$AUTO_$1!=null)){
return or$7573_$AUTO_$1;
}
final dc.dynamic? or$7573_$AUTO_$2=lcoc_core.iterator_seq(iter, );
if((or$7573_$AUTO_$2!=null)){
$UNDERSCORE_rest=or$7573_$AUTO_$2;
}else{
$UNDERSCORE_rest=lcoc_core.$_EMPTY_LIST;
}
return $UNDERSCORE_rest;
}

dc.dynamic $_next$0(){
final lcoc_core.IteratorSeq<E> coll7680$1=this;
late final dc.dynamic o7668$1;
if((coll7680$1 is lcoc_core.ISeq$iface)){
o7668$1=((coll7680$1 as lcoc_core.ISeq$iface).$_rest$0());
}else{
o7668$1=((lcoc_core.ISeq.extensions(coll7680$1, ) as lcoc_core.ISeq$ext).$_rest$0(coll7680$1, ));
}
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
return lcoc_core.cons(o$1, this, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical(new_meta$1, meta, )){
return this;
}
return lcoc_core.IteratorSeq(new_meta$1, value, iter, $UNDERSCORE_rest, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IteratorSeq

// BEGIN Keyword
class Keyword extends dc.Object with lcoc_core.ToStringMixin, lcoc_core.EqualsEquivMixin implements lcoc_core.IPrint$iface, lcoc_core.IEquiv$iface, lcoc_core.IFn$iface, lcoc_core.IHash$iface, lcoc_core.INamed$iface, dc.Comparable<lcoc_core.Keyword> {
final dc.String? ns;
final dc.String name;
final dc.int $UNDERSCORE_hash;

const Keyword(this.ns, this.name, this.$UNDERSCORE_hash, ):super();

dc.dynamic $_print$1(dc.dynamic sink$1, ){
final dc.StringSink sink$2=(sink$1 as dc.StringSink);
sink$2.write(":", );
if((ns!=null)){
sink$2.write(ns, );
sink$2.write("/", );
}else{
}
return (sink$2.write(name, ));
}

dc.dynamic $_equiv$1(dc.dynamic other$1, ){
final dc.bool or$7573_$AUTO_$1=dc.identical((this as dc.Object?), other$1, );
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
final dc.bool and$7533_$AUTO_$1=(other$1 is lcoc_core.Keyword);
if(and$7533_$AUTO_$1){
final lcoc_core.Keyword other$2=(other$1 as lcoc_core.Keyword);
final dc.bool and$7533_$AUTO_$2=(ns==other$2.ns);
if(and$7533_$AUTO_$2){
return (name==other$2.name);
}
return and$7533_$AUTO_$2;
}
return and$7533_$AUTO_$1;
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
return (lcoc_core.$get_.$_invoke$2(coll$1, this, ));
}

dc.dynamic $_invoke$2(dc.dynamic coll$2, dc.dynamic not_found$1, ){
return (lcoc_core.$get_.$_invoke$3(coll$2, this, not_found$1, ));
}

dc.dynamic $_apply$1(dc.dynamic more$1, ){
final dc.int test$7350_$AUTO_$1=lcoc_core.bounded_count(3, more$1, );
switch(test$7350_$AUTO_$1){
case 1:
return (lcoc_core.$get_.$_invoke$2(lcoc_core.first(more$1, ), this, ));
case 2:
return (lcoc_core.$get_.$_invoke$3(lcoc_core.first(more$1, ), this, lcoc_core.second(more$1, ), ));
_default: default:
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("No matching clause: ", (lcoc_core.pr_str.$_invoke$1(test$7350_$AUTO_$1, )), )), );
}
}

dc.dynamic $_hash$0(){
return $UNDERSCORE_hash;
}

dc.dynamic $_name$0(){
return name;
}

dc.dynamic $_namespace$0(){
return ns;
}

dc.int compareTo(lcoc_core.Keyword y$1, ){
final dc.String? nsy$1=y$1.ns;
if((lcoc_core.$EQ_.$_invoke$2(this, y$1, ))){
return 0;
}
final dc.bool and$7533_$AUTO_$3=(null==ns);
late final dc.Object? $if_$1;
if(and$7533_$AUTO_$3){
$if_$1=nsy$1;
}else{
$if_$1=and$7533_$AUTO_$3;
}
if((($if_$1!=false)&&($if_$1!=null))){
return -1;
}
if((ns!=null)){
if((null==nsy$1)){
return 1;
}
final dc.int nsc$1=((ns as dc.String).compareTo((nsy$1 as dc.String), ));
if((0==nsc$1)){
return (name.compareTo(y$1.name, ));
}
return nsc$1;
}
return (name.compareTo(y$1.name, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Keyword

// BEGIN LazySeq
class LazySeq<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E> implements lcoc_core.IPending$iface, lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.ISeqable$iface, lcoc_core.ISeq$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface {
final meta;
dc.dynamic? fn;
var s;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

LazySeq(this.meta, this.fn, this.s, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

lcoc_core.LazySeq<R> cast<R>(){
return lcoc_core.LazySeq<R>(meta, fn, s, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic sval(){
if((null==fn)){
return s;
}
if((fn is dc.Function)){
s=(fn as dc.Function)();
}else if((fn is lcoc_core.IFn$iface)){
s=((fn as lcoc_core.IFn$iface).$_invoke$0());
}else{
s=(lcoc_core.IFn.extensions(fn, ).$_invoke$0(fn, ));
}
fn=null;
return s;
}

dc.dynamic $_realized$QMARK_$0(){
if((fn!=null)){
return false;
}
return true;
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical(new_meta$1, meta, )){
return this;
}
return lcoc_core.LazySeq(new_meta$1, ((){
final lcoc_core.LazySeq<E> o7668$1=this;
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
} as dc.dynamic?), null, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_seq$0(){
this.sval();
if((null==s)){
return null;
}
dc.dynamic ls$1=s;
do {
if((ls$1 is lcoc_core.LazySeq)){
ls$1=((ls$1 as lcoc_core.LazySeq).sval());
continue;
}
s=ls$1;
final dc.dynamic o7668$2=s;
if((o7668$2 is lcoc_core.ISeqable$iface)){
return ((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
} while(true);
}

dc.dynamic $_first$0(){
final lcoc_core.LazySeq<E> o7668$3=this;
if((o7668$3 is lcoc_core.ISeqable$iface)){
(o7668$3 as lcoc_core.ISeqable$iface).$_seq$0();
}else{
(lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, );
}
if((null==s)){
return null;
}
return lcoc_core.first(s, );
}

dc.dynamic $_rest$0(){
final lcoc_core.LazySeq<E> o7668$4=this;
if((o7668$4 is lcoc_core.ISeqable$iface)){
(o7668$4 as lcoc_core.ISeqable$iface).$_seq$0();
}else{
(lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, );
}
if((null==s)){
return lcoc_core.$_EMPTY_LIST;
}
return lcoc_core.rest(s, );
}

dc.dynamic $_next$0(){
final lcoc_core.LazySeq<E> o7668$5=this;
if((o7668$5 is lcoc_core.ISeqable$iface)){
(o7668$5 as lcoc_core.ISeqable$iface).$_seq$0();
}else{
(lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, );
}
if((null==s)){
return null;
}
return lcoc_core.next(s, );
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
return lcoc_core.cons(o$1, this, );
}

dc.dynamic $_empty$0(){
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END LazySeq

// BEGIN PVChunkedSeq
class PVChunkedSeq<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E> implements lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.ISeqable$iface, lcoc_core.ISeq$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.IChunkedSeq$iface, lcoc_core.IReduce$iface {
final lcoc_core.PersistentVector vec;
final dc.List arr;
final dc.int i;
final dc.int off;
final meta;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

PVChunkedSeq(this.vec, this.arr, this.i, this.off, this.meta, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

lcoc_core.PVChunkedSeq<R> cast<R>(){
return lcoc_core.PVChunkedSeq<R>(vec, arr, i, off, meta, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical(new_meta$1, meta, )){
return this;
}
return lcoc_core.PVChunkedSeq(vec, arr, i, off, new_meta$1, -1, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_seq$0(){
return this;
}

dc.dynamic $_first$0(){
return (arr[off]);
}

dc.dynamic $_rest$0(){
if(((1+off)<arr.length)){
return lcoc_core.PVChunkedSeq(vec, arr, i, (1+off), null, -1, );
}
final lcoc_core.PVChunkedSeq<E> coll7766$1=this;
if((coll7766$1 is lcoc_core.IChunkedSeq$iface)){
return ((coll7766$1 as lcoc_core.IChunkedSeq$iface).$_chunked_rest$0());
}
return ((lcoc_core.IChunkedSeq.extensions(coll7766$1, ) as lcoc_core.IChunkedSeq$ext).$_chunked_rest$0(coll7766$1, ));
}

dc.dynamic $_next$0(){
if(((1+off)<arr.length)){
return lcoc_core.PVChunkedSeq(vec, arr, i, (1+off), null, -1, );
}
final lcoc_core.PVChunkedSeq<E> coll7771$1=this;
if((coll7771$1 is lcoc_core.IChunkedSeq$iface)){
return ((coll7771$1 as lcoc_core.IChunkedSeq$iface).$_chunked_next$0());
}
return ((lcoc_core.IChunkedSeq.extensions(coll7771$1, ) as lcoc_core.IChunkedSeq$ext).$_chunked_next$0(coll7771$1, ));
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
return lcoc_core.cons(o$1, this, );
}

dc.dynamic $_empty$0(){
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_chunked_first$0(){
return lcoc_core.ArrayChunk(arr, off, arr.length, );
}

dc.dynamic $_chunked_rest$0(){
final lcoc_core.PVChunkedSeq<E> coll7771$2=this;
late final dc.dynamic? or$7573_$AUTO_$1;
if((coll7771$2 is lcoc_core.IChunkedSeq$iface)){
or$7573_$AUTO_$1=(((coll7771$2 as lcoc_core.IChunkedSeq$iface).$_chunked_next$0()) as dc.dynamic?);
}else{
or$7573_$AUTO_$1=(((lcoc_core.IChunkedSeq.extensions(coll7771$2, ) as lcoc_core.IChunkedSeq$ext).$_chunked_next$0(coll7771$2, )) as dc.dynamic?);
}
if((or$7573_$AUTO_$1!=null)){
return or$7573_$AUTO_$1;
}
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_chunked_next$0(){
final dc.int end$1=(i+arr.length);
final lcoc_core.PersistentVector coll7742$1=vec;
late final dc.dynamic len$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
len$1=((coll7742$1 as lcoc_core.ICounted$iface).$_count$0());
}else{
len$1=((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, ));
}
if((end$1<(len$1 as dc.num))){
late final dc.List $if_$1;
if((end$1<((((len$1 as dc.num)-1) as dc.int)&(~31)))){
$if_$1=lcoc_core.unchecked_array_for(vec.root, vec.shift, end$1, );
}else{
$if_$1=vec.tail;
}
return lcoc_core.PVChunkedSeq(vec, $if_$1, end$1, 0, null, -1, );
}
return null;
}

dc.dynamic $_reduce$1(dc.dynamic f$1, ){
return (lcoc_core.pv_reduce.$_invoke$3(vec, f$1, (i+off), ));
}

dc.dynamic $_reduce$2(dc.dynamic f$2, dc.dynamic start$1, ){
return (lcoc_core.pv_reduce.$_invoke$4(vec, f$2, (i+off), start$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END PVChunkedSeq

// BEGIN PVIterator
class PVIterator<E> extends dc.Object implements dc.Iterator<E> {
final lcoc_core.PersistentVector v;
dc.int i;
final dc.int to;
dc.List curr;

PVIterator(this.v, this.i, this.to, this.curr, ):super();

E get current{
return (curr[((i-1)&31)]);
}

dc.bool moveNext(){
final dc.bool and$7533_$AUTO_$1=(i<to);
if(and$7533_$AUTO_$1){
if((0==(i&31))){
if((((v.cnt-1)&(~31))<=i)){
curr=v.tail;
}else{
curr=lcoc_core.unchecked_array_for(v.root, v.shift, i, );
}
}else{
}
i=(1+i);
return true;
}
return and$7533_$AUTO_$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END PVIterator

// BEGIN PersistentHashMap
class PersistentHashMap<K, V> extends dc.Object with lcoc_core.EqualsEquivMixin, d_collection.MapMixin<K, V>, lcoc_core.ToStringMixin implements lcoc_core.IPrint$iface, lcoc_core.IAssociative$iface, lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.IEquiv$iface, lcoc_core.IHash$iface, lcoc_core.ISeqable$iface, lcoc_core.ICounted$iface, lcoc_core.ILookup$iface, lcoc_core.IFind$iface, lcoc_core.IMap$iface, lcoc_core.IKVReduce$iface, lcoc_core.IFn$iface, lcoc_core.IEditableCollection$iface {
final meta;
final lcoc_core.BitmapNode root;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

PersistentHashMap(this.meta, this.root, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

dc.Iterable<dc.MapEntry<K, V>> get entries{
return lcoc_core.PersistentHashMapReifyoo5awc$1(null, root, );
}

V? operator [](dc.Object? k$1, ){
final lcoc_core.PersistentHashMap<K, V> o7834$1=this;
final dc.dynamic k7835$1=k$1;
if((o7834$1 is lcoc_core.ILookup$iface)){
return ((o7834$1 as lcoc_core.ILookup$iface).$_lookup$2(k7835$1, null, ));
}
return ((lcoc_core.ILookup.extensions(o7834$1, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$1, k7835$1, null, ));
}

void operator []=(K key$1, V val$1, ){
throw dc.UnsupportedError("[]= not supported on PersistentHashMap", );
}

V? remove(dc.Object? val$2, ){
throw dc.UnsupportedError("remove not supported on PersistentHashMap", );
}

void clear(){
throw dc.UnsupportedError("clear not supported on PersistentHashMap", );
}

dc.Iterable<K> get keys{
return lcoc_core.PersistentHashMapReifyoo5awc$2(null, root, );
}

dc.Iterable<V> get values{
return lcoc_core.PersistentHashMapReifyoo5awc$3(null, root, );
}

lcoc_core.PersistentHashMap<RK, RV> cast<RK, RV>(){
return lcoc_core.PersistentHashMap<RK, RV>(meta, root, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_print$1(dc.dynamic sink$1, ){
return lcoc_core.print_map(this, sink$1, );
}

dc.dynamic $_assoc$2(dc.dynamic k$3, dc.dynamic v$2, ){
final dc.dynamic o7900$1=k$3;
late final dc.int cast$1;
if((o7900$1 is lcoc_core.IHash$iface)){
cast$1=(((o7900$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$1=(((lcoc_core.IHash.extensions(o7900$1, ) as lcoc_core.IHash$ext).$_hash$0(o7900$1, )) as dc.int);
}
final lcoc_core.BitmapNode new_root$1=((root.inode_assoc(0, cast$1, k$3, v$2, )) as lcoc_core.BitmapNode);
if(dc.identical((new_root$1 as dc.Object?), (root as dc.Object?), )){
return this;
}
return lcoc_core.PersistentHashMap(meta, new_root$1, -1, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical(new_meta$1, meta, )){
return this;
}
return lcoc_core.PersistentHashMap(new_meta$1, root, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_conj$1(dc.dynamic entry$1, ){
final dc.bool and$7533_$AUTO_$1=((lcoc_core.IVector.satisfies(entry$1, )) as dc.bool);
late final dc.bool $if_$2;
if(and$7533_$AUTO_$1){
final dc.dynamic coll7742$1=entry$1;
late final dc.dynamic $if_$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
$if_$1=((coll7742$1 as lcoc_core.ICounted$iface).$_count$0());
}else{
$if_$1=((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, ));
}
$if_$2=($if_$1==2);
}else{
$if_$2=and$7533_$AUTO_$1;
}
if($if_$2){
final lcoc_core.PersistentHashMap<K, V> coll7790$1=this;
final dc.dynamic coll7829$1=entry$1;
late final dc.dynamic k7791$1;
if((coll7829$1 is lcoc_core.IIndexed$iface)){
k7791$1=((coll7829$1 as lcoc_core.IIndexed$iface).$_nth$1(0, ));
}else{
k7791$1=((lcoc_core.IIndexed.extensions(coll7829$1, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$1, 0, ));
}
final dc.dynamic coll7829$2=entry$1;
late final dc.dynamic v7792$1;
if((coll7829$2 is lcoc_core.IIndexed$iface)){
v7792$1=((coll7829$2 as lcoc_core.IIndexed$iface).$_nth$1(1, ));
}else{
v7792$1=((lcoc_core.IIndexed.extensions(coll7829$2, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$2, 1, ));
}
if((coll7790$1 is lcoc_core.IAssociative$iface)){
return ((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, ));
}
dc.dynamic ret$1=this;
final dc.dynamic o7668$1=entry$1;
dc.dynamic s$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
s$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
do {
if((null==s$1)){
return ret$1;
}
final dc.dynamic e$1=lcoc_core.first(s$1, );
if(((lcoc_core.IVector.satisfies(e$1, )) as dc.bool)){
final dc.dynamic coll7790$2=ret$1;
final dc.dynamic coll7829$3=e$1;
late final dc.dynamic k7791$2;
if((coll7829$3 is lcoc_core.IIndexed$iface)){
k7791$2=((coll7829$3 as lcoc_core.IIndexed$iface).$_nth$1(0, ));
}else{
k7791$2=((lcoc_core.IIndexed.extensions(coll7829$3, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$3, 0, ));
}
final dc.dynamic coll7829$4=e$1;
late final dc.dynamic v7792$2;
if((coll7829$4 is lcoc_core.IIndexed$iface)){
v7792$2=((coll7829$4 as lcoc_core.IIndexed$iface).$_nth$1(1, ));
}else{
v7792$2=((lcoc_core.IIndexed.extensions(coll7829$4, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$4, 1, ));
}
if((coll7790$2 is lcoc_core.IAssociative$iface)){
ret$1=((coll7790$2 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$2, v7792$2, ));
}else{
ret$1=((lcoc_core.IAssociative.extensions(coll7790$2, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$2, k7791$2, v7792$2, ));
}
final dc.dynamic coll7685$1=s$1;
if((coll7685$1 is lcoc_core.ISeq$iface)){
s$1=((coll7685$1 as lcoc_core.ISeq$iface).$_next$0());
}else{
s$1=((lcoc_core.ISeq.extensions(coll7685$1, ) as lcoc_core.ISeq$ext).$_next$0(coll7685$1, ));
}
continue;
}
throw dc.ArgumentError("conj on a map takes map entries or seqables of map entries", );
} while(true);
}

dc.dynamic $_empty$0(){
final lcoc_core.PersistentHashMap o7865$1=lcoc_core.$_EMPTY_MAP;
final dc.dynamic meta7866$1=meta;
if((o7865$1 is lcoc_core.IWithMeta$iface)){
return ((o7865$1 as lcoc_core.IWithMeta$iface).$_with_meta$1(meta7866$1, ));
}
return ((lcoc_core.IWithMeta.extensions(o7865$1, ) as lcoc_core.IWithMeta$ext).$_with_meta$1(o7865$1, meta7866$1, ));
}

dc.dynamic $_equiv$1(dc.dynamic other$1, ){
return lcoc_core.$_equiv_map(this, other$1, );
}

dc.dynamic $_hash$0(){
final dc.int h$8279_$AUTO_$1=$UNDERSCORE_$UNDERSCORE_hash;
if((h$8279_$AUTO_$1<0)){
final dc.int h$8279_$AUTO_$2=lcoc_core.hash_unordered_coll(this, );
$UNDERSCORE_$UNDERSCORE_hash=h$8279_$AUTO_$2;
return h$8279_$AUTO_$2;
}
return h$8279_$AUTO_$1;
}

dc.dynamic $_seq$0(){
return lcoc_core.iterator_seq(this.entries.iterator, );
}

dc.dynamic $_count$0(){
return root.cnt;
}

dc.dynamic $_lookup$1(dc.dynamic k$4, ){
final lcoc_core.PersistentHashMap<K, V> o7834$2=this;
final dc.dynamic k7835$2=k$4;
if((o7834$2 is lcoc_core.ILookup$iface)){
return ((o7834$2 as lcoc_core.ILookup$iface).$_lookup$2(k7835$2, null, ));
}
return ((lcoc_core.ILookup.extensions(o7834$2, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$2, k7835$2, null, ));
}

dc.dynamic $_lookup$2(dc.dynamic k$5, dc.dynamic not_found$1, ){
return (root.inode_lookup(k$5, not_found$1, ));
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$6, ){
final lcoc_core.PersistentHashMap<K, V> o7834$3=this;
final dc.dynamic k7835$3=k$6;
final lcoc_core.PersistentHashMap<K, V> not_found7836$3=this;
late final dc.dynamic $if_$3;
if((o7834$3 is lcoc_core.ILookup$iface)){
$if_$3=((o7834$3 as lcoc_core.ILookup$iface).$_lookup$2(k7835$3, not_found7836$3, ));
}else{
$if_$3=((lcoc_core.ILookup.extensions(o7834$3, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$3, k7835$3, not_found7836$3, ));
}
final dc.bool $1=dc.identical($if_$3, (this as dc.Object?), );
if($1){
return false;
}
return true;
}

dc.dynamic $_find$1(dc.dynamic k$7, ){
final lcoc_core.PersistentHashMap<K, V> o7834$4=this;
final dc.dynamic k7835$4=k$7;
late final dc.dynamic some$7546_$AUTO_$1;
if((o7834$4 is lcoc_core.ILookup$iface)){
some$7546_$AUTO_$1=((o7834$4 as lcoc_core.ILookup$iface).$_lookup$2(k7835$4, null, ));
}else{
some$7546_$AUTO_$1=((lcoc_core.ILookup.extensions(o7834$4, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$4, k7835$4, null, ));
}
if((null==some$7546_$AUTO_$1)){
return null;
}
final dc.dynamic v$3=some$7546_$AUTO_$1;
return dc.MapEntry<K, V>((k$7 as K), (v$3 as V), );
}

dc.dynamic $_dissoc$1(dc.dynamic k$8, ){
final dc.dynamic o7900$2=k$8;
late final dc.int cast$2;
if((o7900$2 is lcoc_core.IHash$iface)){
cast$2=(((o7900$2 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$2=(((lcoc_core.IHash.extensions(o7900$2, ) as lcoc_core.IHash$ext).$_hash$0(o7900$2, )) as dc.int);
}
final dc.dynamic new_root$2=(root.inode_without(0, cast$2, k$8, ));
if(dc.identical(new_root$2, (root as dc.Object?), )){
return this;
}
return lcoc_core.PersistentHashMap(meta, (new_root$2 as lcoc_core.BitmapNode), -1, );
}

dc.dynamic $_kv_reduce$2(dc.dynamic f$1, dc.dynamic init$1, ){
if((0==this.root.cnt)){
return init$1;
}
final lcoc_core.BitmapIterator it$1=lcoc_core.BitmapIterator(root, 0, 0, 0, 1, (dc.List<dc.int>.filled(7, (root.bitmap_hi|root.bitmap_lo), )), (dc.List<lcoc_core.BitmapNode>.filled(7, root, )), null, );
dc.dynamic acc$1=init$1;
do {
late final dc.bool $if_$4;
if((it$1.moveNext())){
$if_$4=false;
}else{
$if_$4=true;
}
if($if_$4){
return acc$1;
}
final dc.int idx$1=it$1.idx;
final dc.List arr$1=it$1.node.arr;
final dc.dynamic arg$2=(arr$1[(idx$1-2)]);
final dc.dynamic arg$1=(arr$1[(idx$1-1)]);
late final dc.dynamic acc$2;
if((f$1 is dc.Function)){
acc$2=(f$1 as dc.Function)(acc$1, arg$2, arg$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
acc$2=((f$1 as lcoc_core.IFn$iface).$_invoke$3(acc$1, arg$2, arg$1, ));
}else{
acc$2=(lcoc_core.IFn.extensions(f$1, ).$_invoke$3(f$1, acc$1, arg$2, arg$1, ));
}
if(lcoc_core.reduced$QMARK_(acc$2, )){
return lcoc_core.unreduced(acc$2, );
}
acc$1=acc$2;
continue;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic k$9, ){
final lcoc_core.PersistentHashMap<K, V> o7838$1=this;
final dc.dynamic k7839$1=k$9;
if((o7838$1 is lcoc_core.ILookup$iface)){
return ((o7838$1 as lcoc_core.ILookup$iface).$_lookup$1(k7839$1, ));
}
return ((lcoc_core.ILookup.extensions(o7838$1, ) as lcoc_core.ILookup$ext).$_lookup$1(o7838$1, k7839$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic k$10, dc.dynamic not_found$2, ){
final lcoc_core.PersistentHashMap<K, V> o7834$5=this;
final dc.dynamic k7835$5=k$10;
final dc.dynamic not_found7836$5=not_found$2;
if((o7834$5 is lcoc_core.ILookup$iface)){
return ((o7834$5 as lcoc_core.ILookup$iface).$_lookup$2(k7835$5, not_found7836$5, ));
}
return ((lcoc_core.ILookup.extensions(o7834$5, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$5, k7835$5, not_found7836$5, ));
}

dc.dynamic $_as_transient$0(){
final dc.int bitmap_hi$1=root.bitmap_hi;
final dc.int bitmap_lo$1=root.bitmap_lo;
final dc.int net_size$1=lcoc_core.u32x2_bit_count(bitmap_hi$1, bitmap_lo$1, );
final dc.int gross_size$1=(-8&(7+net_size$1));
return lcoc_core.TransientHashMap(true, lcoc_core.BitmapNode(root.cnt, (bitmap_hi$1&bitmap_lo$1), (bitmap_hi$1|bitmap_lo$1), lcoc_core.aresize(root.arr, net_size$1, gross_size$1, null, ), ), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END PersistentHashMap

// BEGIN PersistentHashMapReifyoo5awc$1
class PersistentHashMapReifyoo5awc$1<V, K> extends dc.Object with d_collection.IterableMixin<dc.MapEntry<K, V>> implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface {
final meta$1;
final lcoc_core.BitmapNode root;

PersistentHashMapReifyoo5awc$1(this.meta$1, this.root, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.PersistentHashMapReifyoo5awc$1<V, K>(m$2395_$AUTO_$1, root, );
}

dc.Iterator<dc.MapEntry<K, V>> get iterator{
return lcoc_core.BitmapIterator(root, 0, 0, 0, 1, (dc.List<dc.int>.filled(7, (root.bitmap_hi|root.bitmap_lo), )), (dc.List<lcoc_core.BitmapNode>.filled(7, root, )), (dc.dynamic p1$8980_$SHARP_$1, dc.dynamic p2$8981_$SHARP_$1, ){
return dc.MapEntry<K, V>((p1$8980_$SHARP_$1 as K), (p2$8981_$SHARP_$1 as V), );
}, );
}
}

// END PersistentHashMapReifyoo5awc$1

// BEGIN PersistentHashMapReifyoo5awc$2
class PersistentHashMapReifyoo5awc$2<V, K> extends dc.Object with d_collection.IterableMixin<K> implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface {
final meta$2;
final lcoc_core.BitmapNode root;

PersistentHashMapReifyoo5awc$2(this.meta$2, this.root, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.PersistentHashMapReifyoo5awc$2<V, K>(m$2395_$AUTO_$2, root, );
}

dc.Iterator<K> get iterator{
return lcoc_core.BitmapIterator(root, 0, 0, 0, 1, (dc.List<dc.int>.filled(7, (root.bitmap_hi|root.bitmap_lo), )), (dc.List<lcoc_core.BitmapNode>.filled(7, root, )), (dc.dynamic k$2, dc.dynamic $UNDERSCORE_$1, ){
return k$2;
}, );
}
}

// END PersistentHashMapReifyoo5awc$2

// BEGIN PersistentHashMapReifyoo5awc$3
class PersistentHashMapReifyoo5awc$3<V, K> extends dc.Object with d_collection.IterableMixin<V> implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface {
final meta$3;
final lcoc_core.BitmapNode root;

PersistentHashMapReifyoo5awc$3(this.meta$3, this.root, ):super();

dc.dynamic $_meta$0(){
return meta$3;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$3, ){
return lcoc_core.PersistentHashMapReifyoo5awc$3<V, K>(m$2395_$AUTO_$3, root, );
}

dc.Iterator<V> get iterator{
return lcoc_core.BitmapIterator(root, 0, 0, 0, 1, (dc.List<dc.int>.filled(7, (root.bitmap_hi|root.bitmap_lo), )), (dc.List<lcoc_core.BitmapNode>.filled(7, root, )), (dc.dynamic $UNDERSCORE_$2, dc.dynamic v$1, ){
return v$1;
}, );
}
}

// END PersistentHashMapReifyoo5awc$3

// BEGIN PersistentHashSet
class PersistentHashSet<E> extends dc.Object with lcoc_core.EqualsEquivMixin, d_collection.SetMixin<E>, lcoc_core.ToStringMixin implements lcoc_core.IPrint$iface, lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.IEquiv$iface, lcoc_core.IHash$iface, lcoc_core.ISeqable$iface, lcoc_core.ICounted$iface, lcoc_core.ILookup$iface, lcoc_core.ISet$iface, lcoc_core.IFn$iface, lcoc_core.IEditableCollection$iface {
final meta;
final lcoc_core.PersistentHashMap<E, E> hm;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

PersistentHashSet(this.meta, this.hm, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

dc.bool contains(dc.Object? e$1, ){
final lcoc_core.PersistentHashMap<E, E> o7843$1=hm;
final dc.dynamic k7844$1=e$1;
if((o7843$1 is lcoc_core.ILookup$iface)){
return ((o7843$1 as lcoc_core.ILookup$iface).$_contains_key$QMARK_$1(k7844$1, ));
}
return ((lcoc_core.ILookup.extensions(o7843$1, ) as lcoc_core.ILookup$ext).$_contains_key$QMARK_$1(o7843$1, k7844$1, ));
}

E? lookup(dc.Object? e$2, ){
final lcoc_core.PersistentHashMap<E, E> o7834$1=hm;
final dc.dynamic k7835$1=e$2;
if((o7834$1 is lcoc_core.ILookup$iface)){
return ((o7834$1 as lcoc_core.ILookup$iface).$_lookup$2(k7835$1, null, ));
}
return ((lcoc_core.ILookup.extensions(o7834$1, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$1, k7835$1, null, ));
}

dc.bool add(E e$3, ){
throw dc.UnsupportedError("add not supported on PersistentHashSet", );
}

dc.bool remove(dc.Object? e$4, ){
throw dc.UnsupportedError("remove not supported on PersistentHashSet", );
}

void clear(){
throw dc.UnsupportedError("clear not supported on PersistentHashSet", );
}

dc.int get length{
final lcoc_core.PersistentHashMap<E, E> coll7742$1=hm;
if((coll7742$1 is lcoc_core.ICounted$iface)){
return ((coll7742$1 as lcoc_core.ICounted$iface).$_count$0());
}
return ((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, ));
}

dc.Iterator<E> get iterator{
return hm.keys.iterator;
}

dc.Set<E> toSet(){
return this;
}

void retainAll(dc.Iterable<dc.Object?> elements$1, ){
throw dc.UnsupportedError("retainAll not supported on PersistentHashSet", );
}

dc.Set<E> union(dc.Set<E> that$1, ){
return (lcoc_core.into.$_invoke$2(this, that$1, ));
}

dc.Set<E> intersection(dc.Set<dc.Object?> that$2, ){
return (lcoc_core.transduce.$_invoke$4((lcoc_core.remove.$_invoke$1((dc.dynamic p1$8987_$SHARP_$1, ){
return (that$2.contains(p1$8987_$SHARP_$1, ));
}, )), lcoc_core.disj, this, this, ));
}

dc.Set<E> difference(dc.Set<dc.Object?> that$3, ){
final dc.Set<dc.Object?> coll7722$1=that$3;
final lcoc_core.IFn$iface f7723$1=lcoc_core.disj;
final lcoc_core.PersistentHashSet<E> start7724$1=this;
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

lcoc_core.PersistentHashSet<R> cast<R>(){
return lcoc_core.PersistentHashSet<R>(meta, (hm.cast<R, R>()), $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_print$1(dc.dynamic sink$1, ){
return lcoc_core.print_sequential("#{", "}", this, sink$1, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical(new_meta$1, meta, )){
return this;
}
return lcoc_core.PersistentHashSet(new_meta$1, (hm as lcoc_core.PersistentHashMap<dc.dynamic, dc.dynamic>), $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
final lcoc_core.PersistentHashMap<E, E> coll7790$1=hm;
final dc.dynamic k7791$1=o$1;
final dc.dynamic v7792$1=o$1;
late final lcoc_core.PersistentHashMap<dc.dynamic, dc.dynamic> cast$1;
if((coll7790$1 is lcoc_core.IAssociative$iface)){
cast$1=(((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, )) as lcoc_core.PersistentHashMap<dc.dynamic, dc.dynamic>);
}else{
cast$1=(((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, )) as lcoc_core.PersistentHashMap<dc.dynamic, dc.dynamic>);
}
return lcoc_core.PersistentHashSet(meta, cast$1, -1, );
}

dc.dynamic $_empty$0(){
final lcoc_core.PersistentHashSet o7865$1=lcoc_core.$_EMPTY_SET;
final dc.dynamic meta7866$1=meta;
if((o7865$1 is lcoc_core.IWithMeta$iface)){
return ((o7865$1 as lcoc_core.IWithMeta$iface).$_with_meta$1(meta7866$1, ));
}
return ((lcoc_core.IWithMeta.extensions(o7865$1, ) as lcoc_core.IWithMeta$ext).$_with_meta$1(o7865$1, meta7866$1, ));
}

dc.dynamic $_equiv$1(dc.dynamic other$1, ){
final dc.bool and$7533_$AUTO_$1=lcoc_core.set$QMARK_(other$1, );
if(and$7533_$AUTO_$1){
final lcoc_core.PersistentHashMap<E, E> coll7742$2=hm;
late final dc.dynamic $if_$1;
if((coll7742$2 is lcoc_core.ICounted$iface)){
$if_$1=((coll7742$2 as lcoc_core.ICounted$iface).$_count$0());
}else{
$if_$1=((lcoc_core.ICounted.extensions(coll7742$2, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$2, ));
}
final dc.dynamic coll7742$3=other$1;
late final dc.dynamic $if_$2;
if((coll7742$3 is lcoc_core.ICounted$iface)){
$if_$2=((coll7742$3 as lcoc_core.ICounted$iface).$_count$0());
}else{
$if_$2=((lcoc_core.ICounted.extensions(coll7742$3, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$3, ));
}
final dc.bool and$7533_$AUTO_$2=($if_$1==$if_$2);
if(and$7533_$AUTO_$2){
return lcoc_core.every$QMARK_((dc.dynamic p1$8988_$SHARP_$1, ){
final lcoc_core.PersistentHashMap<E, E> o7843$2=hm;
final dc.dynamic k7844$2=p1$8988_$SHARP_$1;
if((o7843$2 is lcoc_core.ILookup$iface)){
return ((o7843$2 as lcoc_core.ILookup$iface).$_contains_key$QMARK_$1(k7844$2, ));
}
return ((lcoc_core.ILookup.extensions(o7843$2, ) as lcoc_core.ILookup$ext).$_contains_key$QMARK_$1(o7843$2, k7844$2, ));
}, other$1, );
}
return and$7533_$AUTO_$2;
}
return and$7533_$AUTO_$1;
}

dc.dynamic $_hash$0(){
final dc.int h$8279_$AUTO_$1=$UNDERSCORE_$UNDERSCORE_hash;
if((h$8279_$AUTO_$1<0)){
final dc.int h$8279_$AUTO_$2=lcoc_core.hash_unordered_coll(this, );
$UNDERSCORE_$UNDERSCORE_hash=h$8279_$AUTO_$2;
return h$8279_$AUTO_$2;
}
return h$8279_$AUTO_$1;
}

dc.dynamic $_seq$0(){
return lcoc_core.iterator_seq(hm.keys.iterator, );
}

dc.dynamic $_count$0(){
final lcoc_core.PersistentHashMap<E, E> coll7742$4=hm;
if((coll7742$4 is lcoc_core.ICounted$iface)){
return ((coll7742$4 as lcoc_core.ICounted$iface).$_count$0());
}
return ((lcoc_core.ICounted.extensions(coll7742$4, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$4, ));
}

dc.dynamic $_lookup$1(dc.dynamic v$1, ){
final lcoc_core.PersistentHashMap<E, E> o7834$2=hm;
final dc.dynamic k7835$2=v$1;
if((o7834$2 is lcoc_core.ILookup$iface)){
return ((o7834$2 as lcoc_core.ILookup$iface).$_lookup$2(k7835$2, null, ));
}
return ((lcoc_core.ILookup.extensions(o7834$2, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$2, k7835$2, null, ));
}

dc.dynamic $_lookup$2(dc.dynamic v$2, dc.dynamic not_found$1, ){
final lcoc_core.PersistentHashMap<E, E> o7834$3=hm;
final dc.dynamic k7835$3=v$2;
final dc.dynamic not_found7836$3=not_found$1;
if((o7834$3 is lcoc_core.ILookup$iface)){
return ((o7834$3 as lcoc_core.ILookup$iface).$_lookup$2(k7835$3, not_found7836$3, ));
}
return ((lcoc_core.ILookup.extensions(o7834$3, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$3, k7835$3, not_found7836$3, ));
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$1, ){
final lcoc_core.PersistentHashMap<E, E> o7843$3=hm;
final dc.dynamic k7844$3=k$1;
if((o7843$3 is lcoc_core.ILookup$iface)){
return ((o7843$3 as lcoc_core.ILookup$iface).$_contains_key$QMARK_$1(k7844$3, ));
}
return ((lcoc_core.ILookup.extensions(o7843$3, ) as lcoc_core.ILookup$ext).$_contains_key$QMARK_$1(o7843$3, k7844$3, ));
}

dc.dynamic $_disjoin$1(dc.dynamic v$3, ){
final lcoc_core.PersistentHashMap<E, E> coll7859$1=hm;
final dc.dynamic k7860$1=v$3;
late final lcoc_core.PersistentHashMap<dc.dynamic, dc.dynamic> cast$2;
if((coll7859$1 is lcoc_core.IMap$iface)){
cast$2=(((coll7859$1 as lcoc_core.IMap$iface).$_dissoc$1(k7860$1, )) as lcoc_core.PersistentHashMap<dc.dynamic, dc.dynamic>);
}else{
cast$2=(((lcoc_core.IMap.extensions(coll7859$1, ) as lcoc_core.IMap$ext).$_dissoc$1(coll7859$1, k7860$1, )) as lcoc_core.PersistentHashMap<dc.dynamic, dc.dynamic>);
}
return lcoc_core.PersistentHashSet(meta, cast$2, -1, );
}

dc.dynamic $_invoke$1(dc.dynamic k$2, ){
final lcoc_core.PersistentHashSet<E> o7838$1=this;
final dc.dynamic k7839$1=k$2;
if((o7838$1 is lcoc_core.ILookup$iface)){
return ((o7838$1 as lcoc_core.ILookup$iface).$_lookup$1(k7839$1, ));
}
return ((lcoc_core.ILookup.extensions(o7838$1, ) as lcoc_core.ILookup$ext).$_lookup$1(o7838$1, k7839$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic k$3, dc.dynamic not_found$2, ){
final lcoc_core.PersistentHashSet<E> o7834$4=this;
final dc.dynamic k7835$4=k$3;
final dc.dynamic not_found7836$4=not_found$2;
if((o7834$4 is lcoc_core.ILookup$iface)){
return ((o7834$4 as lcoc_core.ILookup$iface).$_lookup$2(k7835$4, not_found7836$4, ));
}
return ((lcoc_core.ILookup.extensions(o7834$4, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$4, k7835$4, not_found7836$4, ));
}

dc.dynamic $_as_transient$0(){
final lcoc_core.PersistentHashMap<E, E> coll7928$1=hm;
late final lcoc_core.TransientHashMap cast$3;
if((coll7928$1 is lcoc_core.IEditableCollection$iface)){
cast$3=(((coll7928$1 as lcoc_core.IEditableCollection$iface).$_as_transient$0()) as lcoc_core.TransientHashMap);
}else{
cast$3=(((lcoc_core.IEditableCollection.extensions(coll7928$1, ) as lcoc_core.IEditableCollection$ext).$_as_transient$0(coll7928$1, )) as lcoc_core.TransientHashMap);
}
return lcoc_core.TransientHashSet(cast$3, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END PersistentHashSet

// BEGIN PersistentList
class PersistentList<E> extends dc.Object with d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E>, lcoc_core.EquivSequentialHashMixin implements lcoc_core.IList$iface, lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.ISeq$iface, lcoc_core.IStack$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.ISeqable$iface, lcoc_core.ICounted$iface {
final meta;
final $UNDERSCORE_first;
final rest;
final dc.int count;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

PersistentList(this.meta, this.$UNDERSCORE_first, this.rest, this.count, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

dc.int get length{
return count;
}

lcoc_core.PersistentList<R> cast<R>(){
return lcoc_core.PersistentList<R>(meta, $UNDERSCORE_first, rest, count, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical(new_meta$1, meta, )){
return this;
}
return lcoc_core.PersistentList(new_meta$1, $UNDERSCORE_first, rest, count, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_first$0(){
return $UNDERSCORE_first;
}

dc.dynamic $_rest$0(){
if((count<=1)){
return lcoc_core.$_EMPTY_LIST;
}
return rest;
}

dc.dynamic $_next$0(){
if((count<=1)){
return null;
}
return rest;
}

dc.dynamic $_peek$0(){
return $UNDERSCORE_first;
}

dc.dynamic $_pop$0(){
if((0<count)){
return rest;
}
throw dc.ArgumentError("Can't pop empty list", );
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
return lcoc_core.PersistentList(meta, o$1, this, (1+count), -1, );
}

dc.dynamic $_empty$0(){
final lcoc_core.PersistentList o7865$1=lcoc_core.$_EMPTY_LIST;
final dc.dynamic meta7866$1=meta;
if((o7865$1 is lcoc_core.IWithMeta$iface)){
return ((o7865$1 as lcoc_core.IWithMeta$iface).$_with_meta$1(meta7866$1, ));
}
return ((lcoc_core.IWithMeta.extensions(o7865$1, ) as lcoc_core.IWithMeta$ext).$_with_meta$1(o7865$1, meta7866$1, ));
}

dc.dynamic $_seq$0(){
if((0<count)){
return this;
}
return null;
}

dc.dynamic $_count$0(){
return count;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END PersistentList

// BEGIN PersistentVector
class PersistentVector<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E>, lcoc_core.ToStringMixin implements lcoc_core.IPrint$iface, lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.IStack$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.ISeqable$iface, lcoc_core.ICounted$iface, lcoc_core.IIndexed$iface, lcoc_core.ILookup$iface, lcoc_core.IAssociative$iface, lcoc_core.IFind$iface, lcoc_core.IVector$iface, lcoc_core.IReduce$iface, lcoc_core.IKVReduce$iface, lcoc_core.IFn$iface, lcoc_core.IEditableCollection$iface, lcoc_core.IReversible$iface, dc.Comparable, lcoc_core.ISubvecable$iface {
final meta;
final dc.int cnt;
final dc.int shift;
final lcoc_core.VectorNode root;
final dc.List tail;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

PersistentVector(this.meta, this.cnt, this.shift, this.root, this.tail, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

dc.Iterator<E> get iterator{
return lcoc_core.PVIterator(this, 0, cnt, tail, );
}

lcoc_core.PersistentVector<R> cast<R>(){
return lcoc_core.PersistentVector<R>(meta, cnt, shift, root, tail, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_print$1(dc.dynamic sink$1, ){
return lcoc_core.print_sequential("[", "]", this, sink$1, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical(new_meta$1, meta, )){
return this;
}
return lcoc_core.PersistentVector(new_meta$1, cnt, shift, root, tail, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_peek$0(){
if((0<cnt)){
return (tail[((cnt-1)&31)]);
}
return null;
}

dc.dynamic $_pop$0(){
if((0==cnt)){
throw dc.ArgumentError("Can't pop empty vector", );
}else{
}
final dc.int cnt_1$1=(cnt-1);
if((0==cnt_1$1)){
final lcoc_core.PersistentVector o7865$1=lcoc_core.$_EMPTY_VECTOR;
final dc.dynamic meta7866$1=meta;
if((o7865$1 is lcoc_core.IWithMeta$iface)){
return ((o7865$1 as lcoc_core.IWithMeta$iface).$_with_meta$1(meta7866$1, ));
}
return ((lcoc_core.IWithMeta.extensions(o7865$1, ) as lcoc_core.IWithMeta$ext).$_with_meta$1(o7865$1, meta7866$1, ));
}
final dc.int new_tail_length$1=(cnt_1$1-(cnt_1$1&(~31)));
if((0<new_tail_length$1)){
return lcoc_core.PersistentVector(meta, cnt_1$1, shift, root, lcoc_core.ashrink(tail, new_tail_length$1, ), -1, );
}
if((5==shift)){
final dc.int new_root_length$1=((cnt_1$1>>(31&5))-1);
final dc.List arr$1=root.arr;
return lcoc_core.PersistentVector(meta, cnt_1$1, 5, lcoc_core.VectorNode(null, lcoc_core.ashrink(arr$1, new_root_length$1, ), ), ((arr$1[new_root_length$1]) as lcoc_core.VectorNode).arr, -1, );
}
if(((cnt_1$1-32)==(4294967295&(1<<(31&shift))))){
return lcoc_core.PersistentVector(meta, cnt_1$1, (shift-5), ((root.arr[0]) as lcoc_core.VectorNode), lcoc_core.unchecked_array_for(root, shift, (cnt_1$1-1), ), -1, );
}
return lcoc_core.PersistentVector(meta, cnt_1$1, shift, (lcoc_core.pop_tail(this, shift, root, ) as lcoc_core.VectorNode), lcoc_core.unchecked_array_for(root, shift, (cnt_1$1-1), ), -1, );
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
final dc.int tail_len$1=(cnt&31);
final dc.bool or$7573_$AUTO_$1=(0<tail_len$1);
late final dc.bool $if_$1;
if(or$7573_$AUTO_$1){
$if_$1=or$7573_$AUTO_$1;
}else{
$if_$1=(0==cnt);
}
if($if_$1){
return lcoc_core.PersistentVector(meta, (1+cnt), shift, root, lcoc_core.aresize(tail, tail_len$1, (1+tail_len$1), o$1, ), -1, );
}
final dc.bool root_overflow$QMARK_$1=((4294967295&(1<<(31&shift)))<(cnt>>(31&5)));
late final dc.int new_shift$1;
if(root_overflow$QMARK_$1){
new_shift$1=(shift+5);
}else{
new_shift$1=shift;
}
late final lcoc_core.VectorNode new_root$1;
if(root_overflow$QMARK_$1){
final dc.List<lcoc_core.VectorNode> fl$1=(dc.List<lcoc_core.VectorNode>.filled(2, root, ));
fl$1[1]=lcoc_core.new_path(shift, lcoc_core.VectorNode(null, tail, ), );
new_root$1=lcoc_core.VectorNode(null, fl$1, );
}else{
new_root$1=lcoc_core.push_tail(this, shift, root, lcoc_core.VectorNode(null, tail, ), );
}
final dc.int arg$1=(1+cnt);
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(1, o$1, ));
return lcoc_core.PersistentVector(meta, arg$1, new_shift$1, new_root$1, fl$2, -1, );
}

dc.dynamic $_empty$0(){
final lcoc_core.PersistentVector o7865$2=lcoc_core.$_EMPTY_VECTOR;
final dc.dynamic meta7866$2=meta;
if((o7865$2 is lcoc_core.IWithMeta$iface)){
return ((o7865$2 as lcoc_core.IWithMeta$iface).$_with_meta$1(meta7866$2, ));
}
return ((lcoc_core.IWithMeta.extensions(o7865$2, ) as lcoc_core.IWithMeta$ext).$_with_meta$1(o7865$2, meta7866$2, ));
}

dc.dynamic $_seq$0(){
if((0==cnt)){
return null;
}
if((cnt<=32)){
final dc.List o7668$1=tail;
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return lcoc_core.PVChunkedSeq(this, lcoc_core.unchecked_array_for(root, shift, 0, ), 0, 0, null, -1, );
}

dc.dynamic $_count$0(){
return cnt;
}

dc.dynamic $_nth$1(dc.dynamic n$1, ){
final dc.bool or$7573_$AUTO_$2=(cnt<=(n$1 as dc.num));
late final dc.bool $if_$2;
if(or$7573_$AUTO_$2){
$if_$2=or$7573_$AUTO_$2;
}else{
$if_$2=((n$1 as dc.num)<0);
}
if($if_$2){
throw dc.ArgumentError((lcoc_core.str.$_invoke$4("No item ", n$1, " in vector of length ", cnt, )), );
}else{
}
late final dc.List arr$2;
if((((cnt-1)&(~31))<=(n$1 as dc.num))){
arr$2=tail;
}else{
arr$2=lcoc_core.unchecked_array_for(root, shift, n$1, );
}
return (arr$2[((n$1 as dc.int)&31)]);
}

dc.dynamic $_nth$2(dc.dynamic n$2, dc.dynamic not_found$1, ){
final dc.bool or$7573_$AUTO_$3=(cnt<=(n$2 as dc.num));
late final dc.bool $if_$3;
if(or$7573_$AUTO_$3){
$if_$3=or$7573_$AUTO_$3;
}else{
$if_$3=((n$2 as dc.int)<0);
}
if($if_$3){
return not_found$1;
}
late final dc.List arr$3;
if((((cnt-1)&(~31))<=(n$2 as dc.num))){
arr$3=tail;
}else{
arr$3=lcoc_core.unchecked_array_for(root, shift, n$2, );
}
return (arr$3[((n$2 as dc.int)&31)]);
}

dc.dynamic $_lookup$1(dc.dynamic k$1, ){
final lcoc_core.PersistentVector<E> o7834$1=this;
final dc.dynamic k7835$1=k$1;
if((o7834$1 is lcoc_core.ILookup$iface)){
return ((o7834$1 as lcoc_core.ILookup$iface).$_lookup$2(k7835$1, null, ));
}
return ((lcoc_core.ILookup.extensions(o7834$1, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$1, k7835$1, null, ));
}

dc.dynamic $_lookup$2(dc.dynamic k$2, dc.dynamic not_found$2, ){
if((k$2 is dc.int)){
final lcoc_core.PersistentVector<E> coll7825$1=this;
final dc.dynamic n7826$1=k$2;
final dc.dynamic not_found7827$1=not_found$2;
if((coll7825$1 is lcoc_core.IIndexed$iface)){
return ((coll7825$1 as lcoc_core.IIndexed$iface).$_nth$2(n7826$1, not_found7827$1, ));
}
return ((lcoc_core.IIndexed.extensions(coll7825$1, ) as lcoc_core.IIndexed$ext).$_nth$2(coll7825$1, n7826$1, not_found7827$1, ));
}
return not_found$2;
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$3, ){
if((k$3 is dc.int)){
final dc.bool and$7533_$AUTO_$1=(0<=(k$3 as dc.num));
if(and$7533_$AUTO_$1){
return ((k$3 as dc.int)<cnt);
}
return and$7533_$AUTO_$1;
}
return false;
}

dc.dynamic $_assoc$2(dc.dynamic k$4, dc.dynamic v$1, ){
if((k$4 is dc.int)){
final lcoc_core.PersistentVector<E> coll7776$1=this;
final dc.dynamic n7777$1=k$4;
final dc.dynamic val7778$1=v$1;
if((coll7776$1 is lcoc_core.IVector$iface)){
return ((coll7776$1 as lcoc_core.IVector$iface).$_assoc_n$2(n7777$1, val7778$1, ));
}
return ((lcoc_core.IVector.extensions(coll7776$1, ) as lcoc_core.IVector$ext).$_assoc_n$2(coll7776$1, n7777$1, val7778$1, ));
}
throw dc.ArgumentError("Vector's key for assoc must be a number.", );
}

dc.dynamic $_find$1(dc.dynamic n$3, ){
final lcoc_core.PersistentVector<E> o7834$2=this;
final dc.dynamic k7835$2=n$3;
late final dc.dynamic some$7546_$AUTO_$1;
if((o7834$2 is lcoc_core.ILookup$iface)){
some$7546_$AUTO_$1=((o7834$2 as lcoc_core.ILookup$iface).$_lookup$2(k7835$2, null, ));
}else{
some$7546_$AUTO_$1=((lcoc_core.ILookup.extensions(o7834$2, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$2, k7835$2, null, ));
}
if((null==some$7546_$AUTO_$1)){
return null;
}
final dc.dynamic v$PRIME_$1=some$7546_$AUTO_$1;
return dc.MapEntry<dc.int, E>((n$3 as dc.int), (v$PRIME_$1 as E), );
}

dc.dynamic $_assoc_n$2(dc.dynamic n$4, dc.dynamic val$1, ){
final dc.bool or$7573_$AUTO_$4=(cnt<(n$4 as dc.num));
late final dc.bool $if_$4;
if(or$7573_$AUTO_$4){
$if_$4=or$7573_$AUTO_$4;
}else{
$if_$4=((n$4 as dc.num)<0);
}
if($if_$4){
throw dc.ArgumentError((lcoc_core.str.$_invoke$5("Index ", n$4, " out of bounds  [0,", cnt, "]", )), );
}else{
}
if((n$4==cnt)){
final lcoc_core.PersistentVector<E> coll7707$1=this;
final dc.dynamic o7708$1=val$1;
if((coll7707$1 is lcoc_core.ICollection$iface)){
return ((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}
return ((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
}
if((((cnt-1)&(~31))<=(n$4 as dc.num))){
final dc.List<dc.dynamic> new_tail$1=(dc.List.from(tail, growable: false, ));
final dc.dynamic v$8151_$AUTO_$1=val$1;
new_tail$1[((n$4 as dc.int)&31)]=v$8151_$AUTO_$1;
return lcoc_core.PersistentVector(meta, cnt, shift, root, new_tail$1, -1, );
}
return lcoc_core.PersistentVector(meta, cnt, shift, lcoc_core.do_assoc(shift, root, n$4, val$1, ), tail, -1, );
}

dc.dynamic $_reduce$1(dc.dynamic f$1, ){
return (lcoc_core.pv_reduce.$_invoke$3(this, f$1, 0, ));
}

dc.dynamic $_reduce$2(dc.dynamic f$2, dc.dynamic init$1, ){
return (lcoc_core.pv_reduce.$_invoke$4(this, f$2, 0, init$1, ));
}

dc.dynamic $_kv_reduce$2(dc.dynamic f$3, dc.dynamic init$2, ){
return lcoc_core.pv_kv_reduce(this, f$3, 0, cnt, init$2, );
}

dc.dynamic $_invoke$1(dc.dynamic k$5, ){
final lcoc_core.PersistentVector<E> coll7829$1=this;
final dc.dynamic n7830$1=k$5;
if((coll7829$1 is lcoc_core.IIndexed$iface)){
return ((coll7829$1 as lcoc_core.IIndexed$iface).$_nth$1(n7830$1, ));
}
return ((lcoc_core.IIndexed.extensions(coll7829$1, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$1, n7830$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic k$6, dc.dynamic not_found$3, ){
final lcoc_core.PersistentVector<E> coll7825$2=this;
final dc.dynamic n7826$2=k$6;
final dc.dynamic not_found7827$2=not_found$3;
if((coll7825$2 is lcoc_core.IIndexed$iface)){
return ((coll7825$2 as lcoc_core.IIndexed$iface).$_nth$2(n7826$2, not_found7827$2, ));
}
return ((lcoc_core.IIndexed.extensions(coll7825$2, ) as lcoc_core.IIndexed$ext).$_nth$2(coll7825$2, n7826$2, not_found7827$2, ));
}

dc.dynamic $_as_transient$0(){
return lcoc_core.TransientVector(cnt, shift, (dc.Object() as dc.dynamic?), root, lcoc_core.aresize(tail, tail.length, 32, null, ), );
}

dc.dynamic $_rseq$0(){
if((0<cnt)){
return lcoc_core.iterator_seq(lcoc_core.RPVIterator(this, 0, cnt, tail, ), );
}
return null;
}

dc.int compareTo(dc.dynamic y$1, ){
if(lcoc_core.vector$QMARK_(y$1, )){
return lcoc_core.compare_indexed(this, y$1, );
}
throw dc.ArgumentError((lcoc_core.str.$_invoke$4("Cannot compare ", this, " to ", y$1, )), );
}

dc.dynamic $_subvec$2(dc.dynamic start$1, dc.dynamic end$1, ){
return lcoc_core.SubVec(null, this, (start$1 as dc.int), (end$1 as dc.int), -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END PersistentVector

// BEGIN RNG
dc.dynamic RNG=d_math.Random();

// END RNG

// BEGIN RPVIterator
class RPVIterator<E> extends dc.Object implements dc.Iterator<E> {
final lcoc_core.PersistentVector v;
final dc.int to;
dc.int i;
dc.List curr;

RPVIterator(this.v, this.to, this.i, this.curr, ):super();

E get current{
return (curr[(i&31)]);
}

dc.bool moveNext(){
final dc.bool and$7533_$AUTO_$1=(to<i);
if(and$7533_$AUTO_$1){
final dc.int i_1$1=(i-1);
final dc.bool and$7533_$AUTO_$2=(0==(i&31));
late final dc.bool $if_$1;
if(and$7533_$AUTO_$2){
$if_$1=(i<v.cnt);
}else{
$if_$1=and$7533_$AUTO_$2;
}
if($if_$1){
curr=lcoc_core.unchecked_array_for(v.root, v.shift, i_1$1, );
}else{
}
i=i_1$1;
return true;
}
return and$7533_$AUTO_$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END RPVIterator

// BEGIN Reduced
class Reduced extends dc.Object implements lcoc_core.IDeref$iface {
final val;

const Reduced(this.val, ):super();

dc.dynamic $_deref$0(){
return val;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reduced

// BEGIN SeqListMixin
mixin SeqListMixin<E> on dc.Object implements lcoc_core.IPrint$iface, dc.List<E>, lcoc_core.IIndexed$iface {

dc.String toString(){
final dc.StringBuffer sb$1=dc.StringBuffer();
final lcoc_core.SeqListMixin<E> o7635$1=this;
final dc.StringBuffer string_sink7636$1=sb$1;
if((o7635$1 is lcoc_core.IPrint$iface)){
(o7635$1 as lcoc_core.IPrint$iface).$_print$1(string_sink7636$1, );
}else{
(lcoc_core.IPrint.extensions(o7635$1, ) as lcoc_core.IPrint$ext).$_print$1(o7635$1, string_sink7636$1, );
}
return (sb$1.toString());
}

dc.dynamic $_print$1(dc.dynamic sink$1, ){
return lcoc_core.print_sequential("(", ")", this, sink$1, );
}

set length(dc.int val$1, ){
throw dc.UnsupportedError("length= not supported on Cons", );
}

void add(E $UNDERSCORE_$1, ){
throw dc.UnsupportedError("add not supported on Cons", );
}

void operator []=(dc.int index$1, E value$1, ){
throw dc.UnsupportedError("[]= not supported on Cons", );
}

E operator [](dc.int idx$1, ){
final lcoc_core.SeqListMixin<E> coll7829$1=this;
final dc.int n7830$1=idx$1;
if((coll7829$1 is lcoc_core.IIndexed$iface)){
return ((coll7829$1 as lcoc_core.IIndexed$iface).$_nth$1(n7830$1, ));
}
return ((lcoc_core.IIndexed.extensions(coll7829$1, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$1, n7830$1, ));
}

dc.int get length{
final lcoc_core.SeqListMixin<E> coll7742$1=this;
if((coll7742$1 is lcoc_core.ICounted$iface)){
return ((coll7742$1 as lcoc_core.ICounted$iface).$_count$0());
}
return ((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, ));
}

dc.dynamic $_nth$1(dc.dynamic n$1, ){
if((0>(n$1 as dc.num))){
throw dc.ArgumentError("Index out of bounds", );
}else{
}
final lcoc_core.SeqListMixin<E> o7668$1=this;
dc.dynamic xs$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
xs$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
xs$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
dc.int i$1=(n$1 as dc.int);
do {
if((null==xs$1)){
throw dc.ArgumentError("Index out of bounds", );
}
if((0==i$1)){
return lcoc_core.first(xs$1, );
}
xs$1=lcoc_core.next(xs$1, );
i$1=(i$1-1);
continue;
} while(true);
}

dc.dynamic $_nth$2(dc.dynamic n$2, dc.dynamic not_found$1, ){
if((0>(n$2 as dc.num))){
return not_found$1;
}
final lcoc_core.SeqListMixin<E> o7668$2=this;
dc.dynamic xs$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
xs$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
xs$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
dc.int i$2=(n$2 as dc.int);
do {
if((null==xs$2)){
return not_found$1;
}
if((0==i$2)){
return lcoc_core.first(xs$2, );
}
xs$2=lcoc_core.next(xs$2, );
i$2=(i$2-1);
continue;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END SeqListMixin

// BEGIN StringSeq
class StringSeq<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E> implements lcoc_core.ISeqable$iface, lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.ISeq$iface, lcoc_core.ICounted$iface, lcoc_core.IIndexed$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.IReduce$iface {
final dc.String string;
final dc.int i;
final meta;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

StringSeq(this.string, this.i, this.meta, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

lcoc_core.StringSeq<R> cast<R>(){
return lcoc_core.StringSeq<R>(string, i, meta, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_seq$0(){
if((i<string.length)){
return this;
}
return null;
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical(new_meta$1, meta, )){
return this;
}
return lcoc_core.StringSeq(string, i, new_meta$1, -1, );
}

dc.dynamic $_first$0(){
return (string[i]);
}

dc.dynamic $_rest$0(){
if(((1+i)<string.length)){
return lcoc_core.StringSeq(string, (1+i), null, -1, );
}
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_next$0(){
if(((1+i)<string.length)){
return lcoc_core.StringSeq(string, (1+i), null, -1, );
}
return null;
}

dc.dynamic $_count$0(){
return (string.length-i);
}

dc.dynamic $_nth$1(dc.dynamic n$1, ){
final dc.int n$2=(n$1 as dc.int);
if((n$2<0)){
throw dc.ArgumentError("Index out of bounds", );
}
final dc.int i$1=(n$2+i);
if((i$1<string.length)){
return (string[i$1]);
}
throw dc.ArgumentError("Index out of bounds", );
}

dc.dynamic $_nth$2(dc.dynamic n$3, dc.dynamic not_found$1, ){
final dc.int n$4=(n$3 as dc.int);
if((n$4<0)){
return not_found$1;
}
final dc.int i$2=(n$4+i);
if((i$2<string.length)){
return (string[i$2]);
}
return not_found$1;
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
return lcoc_core.cons(o$1, this, );
}

dc.dynamic $_empty$0(){
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_reduce$1(dc.dynamic f$1, ){
final dc.int l$1=string.length;
final dc.String x$1=(string[i]);
final dc.int i$PRIME_$1=(1+i);
if((i$PRIME_$1<l$1)){
dc.dynamic acc$1=x$1;
dc.int idx$1=i$PRIME_$1;
do {
if((idx$1<l$1)){
final dc.String arg$1=(string[idx$1]);
late final dc.dynamic val$1;
if((f$1 is dc.Function)){
val$1=(f$1 as dc.Function)(acc$1, arg$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
val$1=((f$1 as lcoc_core.IFn$iface).$_invoke$2(acc$1, arg$1, ));
}else{
val$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, acc$1, arg$1, ));
}
if(lcoc_core.reduced$QMARK_(val$1, )){
return lcoc_core.deref(val$1, );
}
acc$1=val$1;
idx$1=(1+idx$1);
continue;
}
return acc$1;
} while(true);
}
return x$1;
}

dc.dynamic $_reduce$2(dc.dynamic f$2, dc.dynamic start$1, ){
final dc.int l$2=string.length;
dc.dynamic acc$2=start$1;
dc.int idx$2=i;
do {
if((idx$2<l$2)){
final dc.String arg$2=(string[idx$2]);
late final dc.dynamic val$2;
if((f$2 is dc.Function)){
val$2=(f$2 as dc.Function)(acc$2, arg$2, );
}else if((f$2 is lcoc_core.IFn$iface)){
val$2=((f$2 as lcoc_core.IFn$iface).$_invoke$2(acc$2, arg$2, ));
}else{
val$2=(lcoc_core.IFn.extensions(f$2, ).$_invoke$2(f$2, acc$2, arg$2, ));
}
if(lcoc_core.reduced$QMARK_(val$2, )){
return lcoc_core.deref(val$2, );
}
acc$2=val$2;
idx$2=(1+idx$2);
continue;
}
return acc$2;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END StringSeq

// BEGIN SubVec
class SubVec<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E>, lcoc_core.ToStringMixin implements lcoc_core.IPrint$iface, lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.IStack$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.ISeqable$iface, lcoc_core.ICounted$iface, lcoc_core.IIndexed$iface, lcoc_core.ILookup$iface, lcoc_core.IAssociative$iface, lcoc_core.IFind$iface, lcoc_core.IVector$iface, lcoc_core.IReduce$iface, lcoc_core.IKVReduce$iface, lcoc_core.IFn$iface, dc.Comparable, lcoc_core.ISubvecable$iface, lcoc_core.IReversible$iface {
final meta;
final lcoc_core.PersistentVector v;
final dc.int start;
final dc.int end;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

SubVec(this.meta, this.v, this.start, this.end, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

dc.Iterator<E> get iterator{
late final dc.List $if_$1;
if((((v.cnt-1)&(~31))<=start)){
$if_$1=v.tail;
}else{
$if_$1=lcoc_core.unchecked_array_for(v.root, v.shift, start, );
}
return lcoc_core.PVIterator(v, start, end, $if_$1, );
}

lcoc_core.SubVec<R> cast<R>(){
return lcoc_core.SubVec<R>(meta, v, start, end, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_print$1(dc.dynamic sink$1, ){
return lcoc_core.print_sequential("[", "]", this, sink$1, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical(new_meta$1, meta, )){
return this;
}
return lcoc_core.SubVec(new_meta$1, v, start, end, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_peek$0(){
if((start<end)){
final lcoc_core.PersistentVector coll7829$1=v;
final dc.int n7830$1=(end-1);
if((coll7829$1 is lcoc_core.IIndexed$iface)){
return ((coll7829$1 as lcoc_core.IIndexed$iface).$_nth$1(n7830$1, ));
}
return ((lcoc_core.IIndexed.extensions(coll7829$1, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$1, n7830$1, ));
}
return null;
}

dc.dynamic $_pop$0(){
if((start<end)){
return lcoc_core.SubVec(meta, v, start, (end-1), -1, );
}
throw dc.Exception("Can't pop empty vector", );
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
final lcoc_core.PersistentVector coll7776$1=v;
final dc.int n7777$1=end;
final dc.dynamic val7778$1=o$1;
late final lcoc_core.PersistentVector cast$1;
if((coll7776$1 is lcoc_core.IVector$iface)){
cast$1=(((coll7776$1 as lcoc_core.IVector$iface).$_assoc_n$2(n7777$1, val7778$1, )) as lcoc_core.PersistentVector);
}else{
cast$1=(((lcoc_core.IVector.extensions(coll7776$1, ) as lcoc_core.IVector$ext).$_assoc_n$2(coll7776$1, n7777$1, val7778$1, )) as lcoc_core.PersistentVector);
}
return lcoc_core.SubVec(meta, cast$1, start, (1+end), -1, );
}

dc.dynamic $_empty$0(){
final lcoc_core.PersistentVector o7865$1=lcoc_core.$_EMPTY_VECTOR;
final dc.dynamic meta7866$1=meta;
if((o7865$1 is lcoc_core.IWithMeta$iface)){
return ((o7865$1 as lcoc_core.IWithMeta$iface).$_with_meta$1(meta7866$1, ));
}
return ((lcoc_core.IWithMeta.extensions(o7865$1, ) as lcoc_core.IWithMeta$ext).$_with_meta$1(o7865$1, meta7866$1, ));
}

dc.dynamic $_seq$0(){
return lcoc_core.iterator_seq(this.iterator, );
}

dc.dynamic $_count$0(){
return (end-start);
}

dc.dynamic $_nth$1(dc.dynamic n$1, ){
final dc.num i$1=(start+(n$1 as dc.num));
final dc.bool or$7573_$AUTO_$1=(end<=i$1);
late final dc.bool $if_$2;
if(or$7573_$AUTO_$1){
$if_$2=or$7573_$AUTO_$1;
}else{
$if_$2=((n$1 as dc.num)<0);
}
if($if_$2){
throw dc.ArgumentError((lcoc_core.str.$_invoke$4("No item ", n$1, " in vector of length ", (end-start), )), );
}else{
}
final lcoc_core.PersistentVector coll7829$2=v;
final dc.num n7830$2=i$1;
if((coll7829$2 is lcoc_core.IIndexed$iface)){
return ((coll7829$2 as lcoc_core.IIndexed$iface).$_nth$1(n7830$2, ));
}
return ((lcoc_core.IIndexed.extensions(coll7829$2, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$2, n7830$2, ));
}

dc.dynamic $_nth$2(dc.dynamic n$2, dc.dynamic not_found$1, ){
final dc.num i$2=(start+(n$2 as dc.num));
final dc.bool or$7573_$AUTO_$2=(end<=i$2);
late final dc.bool $if_$3;
if(or$7573_$AUTO_$2){
$if_$3=or$7573_$AUTO_$2;
}else{
$if_$3=((n$2 as dc.int)<0);
}
if($if_$3){
return not_found$1;
}
final lcoc_core.PersistentVector coll7825$1=v;
final dc.num n7826$1=i$2;
final dc.dynamic not_found7827$1=not_found$1;
if((coll7825$1 is lcoc_core.IIndexed$iface)){
return ((coll7825$1 as lcoc_core.IIndexed$iface).$_nth$2(n7826$1, not_found7827$1, ));
}
return ((lcoc_core.IIndexed.extensions(coll7825$1, ) as lcoc_core.IIndexed$ext).$_nth$2(coll7825$1, n7826$1, not_found7827$1, ));
}

dc.dynamic $_lookup$1(dc.dynamic k$1, ){
final lcoc_core.SubVec<E> o7834$1=this;
final dc.dynamic k7835$1=k$1;
if((o7834$1 is lcoc_core.ILookup$iface)){
return ((o7834$1 as lcoc_core.ILookup$iface).$_lookup$2(k7835$1, null, ));
}
return ((lcoc_core.ILookup.extensions(o7834$1, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$1, k7835$1, null, ));
}

dc.dynamic $_lookup$2(dc.dynamic k$2, dc.dynamic not_found$2, ){
if((k$2 is dc.int)){
final lcoc_core.SubVec<E> coll7825$2=this;
final dc.dynamic n7826$2=k$2;
final dc.dynamic not_found7827$2=not_found$2;
if((coll7825$2 is lcoc_core.IIndexed$iface)){
return ((coll7825$2 as lcoc_core.IIndexed$iface).$_nth$2(n7826$2, not_found7827$2, ));
}
return ((lcoc_core.IIndexed.extensions(coll7825$2, ) as lcoc_core.IIndexed$ext).$_nth$2(coll7825$2, n7826$2, not_found7827$2, ));
}
return not_found$2;
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$3, ){
if((k$3 is dc.int)){
final dc.bool and$7533_$AUTO_$1=(0<=(k$3 as dc.num));
if(and$7533_$AUTO_$1){
return ((start+(k$3 as dc.num))<end);
}
return and$7533_$AUTO_$1;
}
return false;
}

dc.dynamic $_assoc$2(dc.dynamic k$4, dc.dynamic v$1, ){
if((k$4 is dc.int)){
final lcoc_core.SubVec<E> coll7776$2=this;
final dc.dynamic n7777$2=k$4;
final dc.dynamic val7778$2=v$1;
if((coll7776$2 is lcoc_core.IVector$iface)){
return ((coll7776$2 as lcoc_core.IVector$iface).$_assoc_n$2(n7777$2, val7778$2, ));
}
return ((lcoc_core.IVector.extensions(coll7776$2, ) as lcoc_core.IVector$ext).$_assoc_n$2(coll7776$2, n7777$2, val7778$2, ));
}
throw dc.ArgumentError("Vector's key for assoc must be a number.", );
}

dc.dynamic $_find$1(dc.dynamic n$3, ){
final lcoc_core.SubVec<E> o7834$2=this;
final dc.dynamic k7835$2=n$3;
late final dc.dynamic some$7546_$AUTO_$1;
if((o7834$2 is lcoc_core.ILookup$iface)){
some$7546_$AUTO_$1=((o7834$2 as lcoc_core.ILookup$iface).$_lookup$2(k7835$2, null, ));
}else{
some$7546_$AUTO_$1=((lcoc_core.ILookup.extensions(o7834$2, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$2, k7835$2, null, ));
}
if((null==some$7546_$AUTO_$1)){
return null;
}
final dc.dynamic v$PRIME_$1=some$7546_$AUTO_$1;
return dc.MapEntry<dc.int, E>((n$3 as dc.int), (v$PRIME_$1 as E), );
}

dc.dynamic $_assoc_n$2(dc.dynamic n$4, dc.dynamic val$1, ){
final dc.int n$5=(n$4 as dc.int);
final dc.int i$3=(start+n$5);
final dc.bool or$7573_$AUTO_$3=(end<i$3);
late final dc.bool $if_$4;
if(or$7573_$AUTO_$3){
$if_$4=or$7573_$AUTO_$3;
}else{
$if_$4=(n$5<0);
}
if($if_$4){
throw dc.ArgumentError((lcoc_core.str.$_invoke$5("Index ", n$5, " out of bounds  [0,", (end-start), "]", )), );
}else{
}
final lcoc_core.PersistentVector coll7790$1=v;
final dc.int k7791$1=i$3;
final dc.dynamic v7792$1=val$1;
late final lcoc_core.PersistentVector cast$2;
if((coll7790$1 is lcoc_core.IAssociative$iface)){
cast$2=(((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, )) as lcoc_core.PersistentVector);
}else{
cast$2=(((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, )) as lcoc_core.PersistentVector);
}
return lcoc_core.SubVec(meta, cast$2, start, (d_math.max<dc.num>(end, (1+i$3), ) as dc.int), -1, );
}

dc.dynamic $_reduce$1(dc.dynamic f$1, ){
if((start<end)){
final dc.int arg$1=(1+start);
final lcoc_core.PersistentVector coll7829$3=v;
final dc.int n7830$3=start;
late final dc.dynamic $if_$5;
if((coll7829$3 is lcoc_core.IIndexed$iface)){
$if_$5=((coll7829$3 as lcoc_core.IIndexed$iface).$_nth$1(n7830$3, ));
}else{
$if_$5=((lcoc_core.IIndexed.extensions(coll7829$3, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$3, n7830$3, ));
}
return (lcoc_core.pv_reduce.$_invoke$5(v, f$1, arg$1, end, $if_$5, ));
}
if((f$1 is dc.Function)){
return (f$1 as dc.Function)();
}
if((f$1 is lcoc_core.IFn$iface)){
return ((f$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(f$1, ).$_invoke$0(f$1, ));
}

dc.dynamic $_reduce$2(dc.dynamic f$2, dc.dynamic init$1, ){
return (lcoc_core.pv_reduce.$_invoke$5(v, f$2, start, end, init$1, ));
}

dc.dynamic $_kv_reduce$2(dc.dynamic f$3, dc.dynamic init$2, ){
return lcoc_core.pv_kv_reduce(v, f$3, start, end, init$2, );
}

dc.dynamic $_invoke$1(dc.dynamic k$5, ){
final lcoc_core.SubVec<E> coll7829$4=this;
final dc.dynamic n7830$4=k$5;
if((coll7829$4 is lcoc_core.IIndexed$iface)){
return ((coll7829$4 as lcoc_core.IIndexed$iface).$_nth$1(n7830$4, ));
}
return ((lcoc_core.IIndexed.extensions(coll7829$4, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$4, n7830$4, ));
}

dc.dynamic $_invoke$2(dc.dynamic k$6, dc.dynamic not_found$3, ){
final lcoc_core.SubVec<E> coll7825$3=this;
final dc.dynamic n7826$3=k$6;
final dc.dynamic not_found7827$3=not_found$3;
if((coll7825$3 is lcoc_core.IIndexed$iface)){
return ((coll7825$3 as lcoc_core.IIndexed$iface).$_nth$2(n7826$3, not_found7827$3, ));
}
return ((lcoc_core.IIndexed.extensions(coll7825$3, ) as lcoc_core.IIndexed$ext).$_nth$2(coll7825$3, n7826$3, not_found7827$3, ));
}

dc.int compareTo(dc.dynamic y$1, ){
if(lcoc_core.vector$QMARK_(y$1, )){
return lcoc_core.compare_indexed(this, y$1, );
}
throw dc.ArgumentError((lcoc_core.str.$_invoke$4("Cannot compare ", this, " to ", y$1, )), );
}

dc.dynamic $_subvec$2(dc.dynamic start1$1, dc.dynamic end1$1, ){
return lcoc_core.SubVec(null, v, (start+(start1$1 as dc.int)), (start+(end1$1 as dc.int)), -1, );
}

dc.dynamic $_rseq$0(){
if((start<end)){
final dc.int n$6=(end-1);
late final dc.List arr$1;
if((((v.cnt-1)&(~31))<=n$6)){
arr$1=v.tail;
}else{
arr$1=lcoc_core.unchecked_array_for(v.root, v.shift, n$6, );
}
return lcoc_core.iterator_seq(lcoc_core.RPVIterator(v, start, end, arr$1, ), );
}
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END SubVec

// BEGIN Symbol
class Symbol extends dc.Object with lcoc_core.ToStringMixin, lcoc_core.EqualsEquivMixin implements lcoc_core.IPrint$iface, lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.INamed$iface, lcoc_core.IFn$iface, lcoc_core.IEquiv$iface, lcoc_core.IHash$iface, dc.Comparable<lcoc_core.Symbol> {
final dc.String? ns;
final dc.String name;
final meta;
dc.int $UNDERSCORE_hash;

Symbol(this.ns, this.name, this.meta, this.$UNDERSCORE_hash, ):super();

dc.dynamic $_print$1(dc.dynamic sink$1, ){
final dc.StringSink sink$2=(sink$1 as dc.StringSink);
if((ns!=null)){
sink$2.write(ns, );
sink$2.write("/", );
}else{
}
return (sink$2.write(name, ));
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical(new_meta$1, meta, )){
return this;
}
return lcoc_core.Symbol(ns, name, new_meta$1, $UNDERSCORE_hash, );
}

dc.dynamic $_name$0(){
return name;
}

dc.dynamic $_namespace$0(){
return ns;
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
return (lcoc_core.$get_.$_invoke$2(coll$1, this, ));
}

dc.dynamic $_invoke$2(dc.dynamic coll$2, dc.dynamic not_found$1, ){
return (lcoc_core.$get_.$_invoke$3(coll$2, this, not_found$1, ));
}

dc.dynamic $_apply$1(dc.dynamic more$1, ){
final dc.int test$7350_$AUTO_$1=lcoc_core.bounded_count(3, more$1, );
switch(test$7350_$AUTO_$1){
case 1:
return (lcoc_core.$get_.$_invoke$2(lcoc_core.first(more$1, ), this, ));
case 2:
return (lcoc_core.$get_.$_invoke$3(lcoc_core.first(more$1, ), this, lcoc_core.second(more$1, ), ));
_default: default:
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("No matching clause: ", (lcoc_core.pr_str.$_invoke$1(test$7350_$AUTO_$1, )), )), );
}
}

dc.dynamic $_equiv$1(dc.dynamic other$1, ){
final dc.bool and$7533_$AUTO_$1=(other$1 is lcoc_core.Symbol);
if(and$7533_$AUTO_$1){
final lcoc_core.Symbol other$2=(other$1 as lcoc_core.Symbol);
final dc.bool and$7533_$AUTO_$2=(ns==other$2.ns);
if(and$7533_$AUTO_$2){
return (name==other$2.name);
}
return and$7533_$AUTO_$2;
}
return and$7533_$AUTO_$1;
}

dc.dynamic $_hash$0(){
final dc.int h$8279_$AUTO_$1=$UNDERSCORE_hash;
if((h$8279_$AUTO_$1<0)){
final dc.int h$8279_$AUTO_$2=lcoc_core.hash_symbol(this, );
$UNDERSCORE_hash=h$8279_$AUTO_$2;
return h$8279_$AUTO_$2;
}
return h$8279_$AUTO_$1;
}

dc.int compareTo(lcoc_core.Symbol y$1, ){
final dc.String? nsy$1=y$1.ns;
if((lcoc_core.$EQ_.$_invoke$2(this, y$1, ))){
return 0;
}
final dc.bool and$7533_$AUTO_$3=(null==ns);
late final dc.Object? $if_$1;
if(and$7533_$AUTO_$3){
$if_$1=nsy$1;
}else{
$if_$1=and$7533_$AUTO_$3;
}
if((($if_$1!=false)&&($if_$1!=null))){
return -1;
}
if((ns!=null)){
if((null==nsy$1)){
return 1;
}
final dc.int nsc$1=((ns as dc.String).compareTo((nsy$1 as dc.String), ));
if((0==nsc$1)){
return (name.compareTo(y$1.name, ));
}
return nsc$1;
}
return (name.compareTo(y$1.name, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Symbol

// BEGIN ToStringMixin
mixin ToStringMixin on dc.Object {

dc.String toString(){
final dc.StringBuffer sb$1=dc.StringBuffer();
final lcoc_core.ToStringMixin o7635$1=this;
final dc.StringBuffer string_sink7636$1=sb$1;
if((o7635$1 is lcoc_core.IPrint$iface)){
(o7635$1 as lcoc_core.IPrint$iface).$_print$1(string_sink7636$1, );
}else{
(lcoc_core.IPrint.extensions(o7635$1, ) as lcoc_core.IPrint$ext).$_print$1(o7635$1, string_sink7636$1, );
}
return (sb$1.toString());
}
}

// END ToStringMixin

// BEGIN TransientHashMap
class TransientHashMap extends dc.Object implements lcoc_core.ITransientCollection$iface, lcoc_core.ITransientAssociative$iface, lcoc_core.ITransientMap$iface, lcoc_core.ICounted$iface, lcoc_core.ILookup$iface, lcoc_core.IFn$iface {
dc.bool editable;
lcoc_core.BitmapNode root;

TransientHashMap(this.editable, this.root, ):super();

dc.dynamic $_conj$BANG_$1(dc.dynamic o$1, ){
if(editable){
}else{
throw dc.ArgumentError("conj! after persistent!", );
}
if(lcoc_core.map_entry$QMARK_(o$1, )){
final lcoc_core.TransientHashMap tcoll7800$1=this;
final dc.dynamic key7801$1=lcoc_core.key(o$1, );
final dc.dynamic val7802$1=lcoc_core.val(o$1, );
if((tcoll7800$1 is lcoc_core.ITransientAssociative$iface)){
return ((tcoll7800$1 as lcoc_core.ITransientAssociative$iface).$_assoc$BANG_$2(key7801$1, val7802$1, ));
}
return ((lcoc_core.ITransientAssociative.extensions(tcoll7800$1, ) as lcoc_core.ITransientAssociative$ext).$_assoc$BANG_$2(tcoll7800$1, key7801$1, val7802$1, ));
}
if(lcoc_core.vector$QMARK_(o$1, )){
final lcoc_core.TransientHashMap tcoll7800$2=this;
final dc.dynamic coll7829$1=o$1;
late final dc.dynamic key7801$2;
if((coll7829$1 is lcoc_core.IIndexed$iface)){
key7801$2=((coll7829$1 as lcoc_core.IIndexed$iface).$_nth$1(0, ));
}else{
key7801$2=((lcoc_core.IIndexed.extensions(coll7829$1, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$1, 0, ));
}
final dc.dynamic coll7829$2=o$1;
late final dc.dynamic val7802$2;
if((coll7829$2 is lcoc_core.IIndexed$iface)){
val7802$2=((coll7829$2 as lcoc_core.IIndexed$iface).$_nth$1(1, ));
}else{
val7802$2=((lcoc_core.IIndexed.extensions(coll7829$2, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$2, 1, ));
}
if((tcoll7800$2 is lcoc_core.ITransientAssociative$iface)){
return ((tcoll7800$2 as lcoc_core.ITransientAssociative$iface).$_assoc$BANG_$2(key7801$2, val7802$2, ));
}
return ((lcoc_core.ITransientAssociative.extensions(tcoll7800$2, ) as lcoc_core.ITransientAssociative$ext).$_assoc$BANG_$2(tcoll7800$2, key7801$2, val7802$2, ));
}
final dc.dynamic coll7722$1=o$1;
final dc.Function f7723$1=lcoc_core.$_conj$BANG_;
final lcoc_core.TransientHashMap start7724$1=this;
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_persistent$BANG_$0(){
if(editable){
}else{
throw dc.ArgumentError("persistent! called twice", );
}
editable=false;
return lcoc_core.PersistentHashMap(null, root, -1, );
}

dc.dynamic $_assoc$BANG_$2(dc.dynamic k$1, dc.dynamic v$1, ){
if(editable){
}else{
throw dc.ArgumentError("assoc! after persistent!", );
}
final dc.dynamic o7900$1=k$1;
late final dc.int cast$1;
if((o7900$1 is lcoc_core.IHash$iface)){
cast$1=(((o7900$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$1=(((lcoc_core.IHash.extensions(o7900$1, ) as lcoc_core.IHash$ext).$_hash$0(o7900$1, )) as dc.int);
}
root=(root.inode_assoc_transient(0, cast$1, k$1, v$1, ));
return this;
}

dc.dynamic $_dissoc$BANG_$1(dc.dynamic k$2, ){
if(editable){
}else{
throw dc.ArgumentError("dissoc! after persistent!", );
}
final dc.dynamic o7900$2=k$2;
late final dc.int cast$2;
if((o7900$2 is lcoc_core.IHash$iface)){
cast$2=(((o7900$2 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$2=(((lcoc_core.IHash.extensions(o7900$2, ) as lcoc_core.IHash$ext).$_hash$0(o7900$2, )) as dc.int);
}
root=(root.inode_without_transient(0, cast$2, k$2, ));
return this;
}

dc.dynamic $_count$0(){
if(editable){
}else{
throw dc.ArgumentError("count after persistent!", );
}
return root.cnt;
}

dc.dynamic $_lookup$1(dc.dynamic k$3, ){
if(editable){
}else{
throw dc.ArgumentError("lookup after persistent!", );
}
final lcoc_core.TransientHashMap o7834$1=this;
final dc.dynamic k7835$1=k$3;
if((o7834$1 is lcoc_core.ILookup$iface)){
return ((o7834$1 as lcoc_core.ILookup$iface).$_lookup$2(k7835$1, null, ));
}
return ((lcoc_core.ILookup.extensions(o7834$1, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$1, k7835$1, null, ));
}

dc.dynamic $_lookup$2(dc.dynamic k$4, dc.dynamic not_found$1, ){
if(editable){
}else{
throw dc.ArgumentError("lookup after persistent!", );
}
return (root.inode_lookup(k$4, not_found$1, ));
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$5, ){
if(editable){
}else{
throw dc.ArgumentError("lookup after persistent!", );
}
if(dc.identical((root as dc.Object?), (root.inode_lookup(k$5, root, )), )){
return false;
}
return true;
}

dc.dynamic $_invoke$1(dc.dynamic k$6, ){
final lcoc_core.TransientHashMap o7838$1=this;
final dc.dynamic k7839$1=k$6;
if((o7838$1 is lcoc_core.ILookup$iface)){
return ((o7838$1 as lcoc_core.ILookup$iface).$_lookup$1(k7839$1, ));
}
return ((lcoc_core.ILookup.extensions(o7838$1, ) as lcoc_core.ILookup$ext).$_lookup$1(o7838$1, k7839$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic k$7, dc.dynamic not_found$2, ){
final lcoc_core.TransientHashMap o7834$2=this;
final dc.dynamic k7835$2=k$7;
final dc.dynamic not_found7836$2=not_found$2;
if((o7834$2 is lcoc_core.ILookup$iface)){
return ((o7834$2 as lcoc_core.ILookup$iface).$_lookup$2(k7835$2, not_found7836$2, ));
}
return ((lcoc_core.ILookup.extensions(o7834$2, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$2, k7835$2, not_found7836$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END TransientHashMap

// BEGIN TransientHashSet
class TransientHashSet extends dc.Object implements lcoc_core.ITransientCollection$iface, lcoc_core.ITransientSet$iface, lcoc_core.ICounted$iface, lcoc_core.ILookup$iface, lcoc_core.IFn$iface {
lcoc_core.TransientHashMap transient_map;

TransientHashSet(this.transient_map, ):super();

dc.dynamic $_conj$BANG_$1(dc.dynamic o$1, ){
transient_map=(lcoc_core.assoc$BANG_.$_invoke$3(transient_map, o$1, o$1, ));
return this;
}

dc.dynamic $_persistent$BANG_$0(){
return lcoc_core.PersistentHashSet(null, (lcoc_core.persistent$BANG_(transient_map, ) as lcoc_core.PersistentHashMap<dc.dynamic, dc.dynamic>), -1, );
}

dc.dynamic $_disjoin$BANG_$1(dc.dynamic v$1, ){
transient_map=(lcoc_core.dissoc$BANG_.$_invoke$2(transient_map, v$1, ));
return this;
}

dc.dynamic $_count$0(){
final lcoc_core.TransientHashMap coll7742$1=transient_map;
if((coll7742$1 is lcoc_core.ICounted$iface)){
return (((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}
return (((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}

dc.dynamic $_lookup$1(dc.dynamic v$2, ){
final lcoc_core.TransientHashSet o7834$1=this;
final dc.dynamic k7835$1=v$2;
if((o7834$1 is lcoc_core.ILookup$iface)){
return ((o7834$1 as lcoc_core.ILookup$iface).$_lookup$2(k7835$1, null, ));
}
return ((lcoc_core.ILookup.extensions(o7834$1, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$1, k7835$1, null, ));
}

dc.dynamic $_lookup$2(dc.dynamic v$3, dc.dynamic not_found$1, ){
final lcoc_core.TransientHashMap o7834$2=transient_map;
final dc.dynamic k7835$2=v$3;
final dc.dynamic not_found7836$2=not_found$1;
if((o7834$2 is lcoc_core.ILookup$iface)){
return ((o7834$2 as lcoc_core.ILookup$iface).$_lookup$2(k7835$2, not_found7836$2, ));
}
return ((lcoc_core.ILookup.extensions(o7834$2, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$2, k7835$2, not_found7836$2, ));
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$1, ){
final lcoc_core.TransientHashMap o7843$1=transient_map;
final dc.dynamic k7844$1=k$1;
if((o7843$1 is lcoc_core.ILookup$iface)){
return ((o7843$1 as lcoc_core.ILookup$iface).$_contains_key$QMARK_$1(k7844$1, ));
}
return ((lcoc_core.ILookup.extensions(o7843$1, ) as lcoc_core.ILookup$ext).$_contains_key$QMARK_$1(o7843$1, k7844$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic k$2, ){
final lcoc_core.TransientHashSet o7834$3=this;
final dc.dynamic k7835$3=k$2;
if((o7834$3 is lcoc_core.ILookup$iface)){
return ((o7834$3 as lcoc_core.ILookup$iface).$_lookup$2(k7835$3, null, ));
}
return ((lcoc_core.ILookup.extensions(o7834$3, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$3, k7835$3, null, ));
}

dc.dynamic $_invoke$2(dc.dynamic k$3, dc.dynamic not_found$2, ){
final lcoc_core.TransientHashSet o7834$4=this;
final dc.dynamic k7835$4=k$3;
final dc.dynamic not_found7836$4=not_found$2;
if((o7834$4 is lcoc_core.ILookup$iface)){
return ((o7834$4 as lcoc_core.ILookup$iface).$_lookup$2(k7835$4, not_found7836$4, ));
}
return ((lcoc_core.ILookup.extensions(o7834$4, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$4, k7835$4, not_found7836$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END TransientHashSet

// BEGIN TransientVector
class TransientVector extends dc.Object implements lcoc_core.ITransientCollection$iface, lcoc_core.ITransientAssociative$iface, lcoc_core.ITransientVector$iface, lcoc_core.ICounted$iface, lcoc_core.IIndexed$iface, lcoc_core.ILookup$iface, lcoc_core.IFn$iface {
dc.int cnt;
dc.int shift;
dc.dynamic? edit;
lcoc_core.VectorNode root;
dc.List tail;

TransientVector(this.cnt, this.shift, this.edit, this.root, this.tail, ):super();

dc.dynamic $_conj$BANG_$1(dc.dynamic o$1, ){
if((edit!=null)){
}else{
throw dc.ArgumentError("conj! after persistent!", );
}
final dc.int tail_len$1=(cnt&31);
final dc.bool or$7573_$AUTO_$1=(0<tail_len$1);
late final dc.bool $if_$1;
if(or$7573_$AUTO_$1){
$if_$1=or$7573_$AUTO_$1;
}else{
$if_$1=(0==cnt);
}
if($if_$1){
final dc.dynamic v$8151_$AUTO_$1=o$1;
tail[tail_len$1]=v$8151_$AUTO_$1;
}else{
final lcoc_core.VectorNode tail_node$1=lcoc_core.VectorNode(edit, tail, );
final dc.List<dc.dynamic> new_tail$1=(dc.List<dc.dynamic>.filled(32, null, ));
final dc.dynamic v$8151_$AUTO_$2=o$1;
new_tail$1[0]=v$8151_$AUTO_$2;
tail=new_tail$1;
if(((4294967295&(1<<(31&shift)))<(cnt>>(31&5)))){
final dc.List<dc.dynamic> new_root_array$1=(dc.List<dc.dynamic>.filled(32, null, ));
final dc.int new_shift$1=(shift+5);
final lcoc_core.VectorNode v$8151_$AUTO_$3=root;
new_root_array$1[0]=v$8151_$AUTO_$3;
final lcoc_core.VectorNode v$8151_$AUTO_$4=lcoc_core.tv_new_path(edit, shift, tail_node$1, );
new_root_array$1[1]=v$8151_$AUTO_$4;
root=lcoc_core.VectorNode(edit, new_root_array$1, );
shift=new_shift$1;
}else{
root=lcoc_core.tv_push_tail(this, shift, root, tail_node$1, );
}
}
cnt=(1+cnt);
return this;
}

dc.dynamic $_persistent$BANG_$0(){
if((edit!=null)){
}else{
throw dc.ArgumentError("persistent! called twice", );
}
edit=null;
final dc.int cnt32$1=(cnt&31);
if((0<cnt32$1)){
return lcoc_core.PersistentVector(null, cnt, shift, root, lcoc_core.ashrink(tail, cnt32$1, ), -1, );
}
if((0==cnt)){
return lcoc_core.$_EMPTY_VECTOR;
}
return lcoc_core.PersistentVector(null, cnt, shift, root, tail, -1, );
}

dc.dynamic $_assoc$BANG_$2(dc.dynamic key$1, dc.dynamic val$1, ){
if((key$1 is dc.int)){
}else{
throw dc.ArgumentError("TransientVector's key for assoc! must be a number.", );
}
final lcoc_core.TransientVector tcoll7807$1=this;
final dc.dynamic n7808$1=key$1;
final dc.dynamic val7809$1=val$1;
if((tcoll7807$1 is lcoc_core.ITransientVector$iface)){
return ((tcoll7807$1 as lcoc_core.ITransientVector$iface).$_assoc_n$BANG_$2(n7808$1, val7809$1, ));
}
return ((lcoc_core.ITransientVector.extensions(tcoll7807$1, ) as lcoc_core.ITransientVector$ext).$_assoc_n$BANG_$2(tcoll7807$1, n7808$1, val7809$1, ));
}

dc.dynamic $_assoc_n$BANG_$2(dc.dynamic n$1, dc.dynamic val$2, ){
if((edit!=null)){
}else{
throw dc.ArgumentError("assoc! after persistent!", );
}
final dc.bool and$7533_$AUTO_$1=(0<=(n$1 as dc.num));
late final dc.bool $if_$2;
if(and$7533_$AUTO_$1){
$if_$2=((n$1 as dc.num)<=cnt);
}else{
$if_$2=and$7533_$AUTO_$1;
}
if($if_$2){
}else{
throw dc.ArgumentError((lcoc_core.str.$_invoke$5("Index ", n$1, " out of bounds  [0,", cnt, "]", )), );
}
if((n$1==cnt)){
final lcoc_core.TransientVector tcoll7933$1=this;
final dc.dynamic val7934$1=val$2;
if((tcoll7933$1 is lcoc_core.ITransientCollection$iface)){
(tcoll7933$1 as lcoc_core.ITransientCollection$iface).$_conj$BANG_$1(val7934$1, );
}else{
(lcoc_core.ITransientCollection.extensions(tcoll7933$1, ) as lcoc_core.ITransientCollection$ext).$_conj$BANG_$1(tcoll7933$1, val7934$1, );
}
}else if((((cnt-1)&(~31))<=(n$1 as dc.num))){
final dc.dynamic v$8151_$AUTO_$5=val$2;
tail[((n$1 as dc.int)&31)]=v$8151_$AUTO_$5;
}else{
root=lcoc_core.tv_ensure_editable(edit, root, );
dc.List arr$1=root.arr;
dc.int level$1=shift;
do {
final dc.int subidx$1=(((n$1 as dc.int)>>(31&shift))&31);
if((0<level$1)){
final lcoc_core.VectorNode child$1=lcoc_core.tv_ensure_editable(edit, (arr$1[subidx$1]), );
final lcoc_core.VectorNode v$8151_$AUTO_$7=child$1;
arr$1[subidx$1]=v$8151_$AUTO_$7;
arr$1=v$8151_$AUTO_$7.arr;
level$1=(level$1-5);
continue;
}else{
final dc.dynamic v$8151_$AUTO_$6=val$2;
arr$1[((n$1 as dc.int)&31)]=v$8151_$AUTO_$6;
}
break;
} while(true);
}
return this;
}

dc.dynamic $_pop$BANG_$0(){
if((edit!=null)){
}else{
throw dc.ArgumentError("pop! after persistent!", );
}
if((0==cnt)){
throw dc.ArgumentError("Can't pop empty vector", );
}else{
}
final dc.int cnt_1$1=(cnt-1);
final dc.int subidx$2=(cnt_1$1&31);
final dc.bool or$7573_$AUTO_$2=(0<subidx$2);
late final dc.bool $if_$3;
if(or$7573_$AUTO_$2){
$if_$3=or$7573_$AUTO_$2;
}else{
$if_$3=(0==cnt_1$1);
}
if($if_$3){
tail[subidx$2]=null;
}else{
final dc.int new_tail_length$1=(cnt_1$1-(cnt_1$1&(~31)));
tail=lcoc_core.tv_editable_array_for(this, cnt_1$1, );
if((5==shift)){
root.arr[((cnt_1$1-1)>>(31&5))]=null;
}else if(((cnt_1$1-32)==(4294967295&(1<<(31&shift))))){
root=(root.arr[0]);
shift=(shift-5);
}else{
lcoc_core.tv_pop_tail$BANG_(this, shift, root, );
}
}
cnt=(cnt-1);
return this;
}

dc.dynamic $_count$0(){
if((edit!=null)){
}else{
throw dc.ArgumentError("count after persistent!", );
}
return cnt;
}

dc.dynamic $_nth$1(dc.dynamic n$2, ){
if((edit!=null)){
}else{
throw dc.ArgumentError("nth after persistent!", );
}
final dc.bool or$7573_$AUTO_$3=(cnt<=(n$2 as dc.num));
late final dc.bool $if_$4;
if(or$7573_$AUTO_$3){
$if_$4=or$7573_$AUTO_$3;
}else{
$if_$4=((n$2 as dc.num)<0);
}
if($if_$4){
throw dc.ArgumentError((lcoc_core.str.$_invoke$4("No item ", n$2, " in vector of length ", cnt, )), );
}else{
}
late final dc.List arr$2;
if((((cnt-1)&(~31))<=(n$2 as dc.num))){
arr$2=tail;
}else{
arr$2=lcoc_core.unchecked_array_for(root, shift, n$2, );
}
return (arr$2[((n$2 as dc.int)&31)]);
}

dc.dynamic $_nth$2(dc.dynamic n$3, dc.dynamic not_found$1, ){
if((edit!=null)){
}else{
throw dc.ArgumentError("nth after persistent!", );
}
final dc.bool or$7573_$AUTO_$4=(cnt<=(n$3 as dc.num));
late final dc.bool $if_$5;
if(or$7573_$AUTO_$4){
$if_$5=or$7573_$AUTO_$4;
}else{
$if_$5=((n$3 as dc.num)<0);
}
if($if_$5){
return not_found$1;
}
late final dc.List arr$3;
if((((cnt-1)&(~31))<=(n$3 as dc.num))){
arr$3=tail;
}else{
arr$3=lcoc_core.unchecked_array_for(root, shift, n$3, );
}
return (arr$3[((n$3 as dc.int)&31)]);
}

dc.dynamic $_lookup$1(dc.dynamic k$1, ){
final lcoc_core.TransientVector o7834$1=this;
final dc.dynamic k7835$1=k$1;
if((o7834$1 is lcoc_core.ILookup$iface)){
return ((o7834$1 as lcoc_core.ILookup$iface).$_lookup$2(k7835$1, null, ));
}
return ((lcoc_core.ILookup.extensions(o7834$1, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$1, k7835$1, null, ));
}

dc.dynamic $_lookup$2(dc.dynamic k$2, dc.dynamic not_found$2, ){
if((edit!=null)){
}else{
throw dc.ArgumentError("lookup after persistent!", );
}
if((k$2 is dc.int)){
final lcoc_core.TransientVector coll7825$1=this;
final dc.dynamic n7826$1=k$2;
final dc.dynamic not_found7827$1=not_found$2;
if((coll7825$1 is lcoc_core.IIndexed$iface)){
return ((coll7825$1 as lcoc_core.IIndexed$iface).$_nth$2(n7826$1, not_found7827$1, ));
}
return ((lcoc_core.IIndexed.extensions(coll7825$1, ) as lcoc_core.IIndexed$ext).$_nth$2(coll7825$1, n7826$1, not_found7827$1, ));
}
return not_found$2;
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic n$4, ){
if((edit!=null)){
}else{
throw dc.ArgumentError("contains? after persistent!", );
}
final dc.bool and$7533_$AUTO_$2=(0<=(n$4 as dc.num));
if(and$7533_$AUTO_$2){
return ((n$4 as dc.num)<cnt);
}
return and$7533_$AUTO_$2;
}

dc.dynamic $_invoke$1(dc.dynamic k$3, ){
final lcoc_core.TransientVector o7838$1=this;
final dc.dynamic k7839$1=k$3;
if((o7838$1 is lcoc_core.ILookup$iface)){
return ((o7838$1 as lcoc_core.ILookup$iface).$_lookup$1(k7839$1, ));
}
return ((lcoc_core.ILookup.extensions(o7838$1, ) as lcoc_core.ILookup$ext).$_lookup$1(o7838$1, k7839$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic k$4, dc.dynamic not_found$3, ){
final lcoc_core.TransientVector o7834$2=this;
final dc.dynamic k7835$2=k$4;
final dc.dynamic not_found7836$2=not_found$3;
if((o7834$2 is lcoc_core.ILookup$iface)){
return ((o7834$2 as lcoc_core.ILookup$iface).$_lookup$2(k7835$2, not_found7836$2, ));
}
return ((lcoc_core.ILookup.extensions(o7834$2, ) as lcoc_core.ILookup$ext).$_lookup$2(o7834$2, k7835$2, not_found7836$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END TransientVector

// BEGIN TreapIterator
class TreapIterator<E> extends dc.Object implements dc.Iterator<E> {
lcoc_core.TreapNode node;
dc.int idx;
dc.int rank;
final dc.List<dc.int> idxs;
final dc.List<lcoc_core.TreapNode> nodes;
final mk_value;
final stop_node;
final dc.int stop_idx;

TreapIterator(this.node, this.idx, this.rank, this.idxs, this.nodes, this.mk_value, this.stop_node, this.stop_idx, ):super();

E get current{
final dc.List arr$1=node.arr;
return mk_value((arr$1[(idx-2)]), (arr$1[(idx-1)]), );
}

dc.bool moveNext(){
do {
if((idx<node.arr.length)){
if((0==rank)){
late final dc.bool or$7573_$AUTO_$1;
if(dc.identical((node as dc.Object?), stop_node, )){
or$7573_$AUTO_$1=false;
}else{
or$7573_$AUTO_$1=true;
}
late final dc.bool can_move$1;
if(or$7573_$AUTO_$1){
can_move$1=or$7573_$AUTO_$1;
}else{
can_move$1=(idx<stop_idx);
}
idx=(2+idx);
return can_move$1;
}
final dc.int rank_1$1=(rank-1);
final dc.dynamic child$1=(node.arr[idx]);
final lcoc_core.TreapNode v$8151_$AUTO_$1=node;
nodes[rank_1$1]=v$8151_$AUTO_$1;
final dc.int v$8151_$AUTO_$2=(2+idx);
idxs[rank_1$1]=v$8151_$AUTO_$2;
node=child$1;
idx=0;
rank=rank_1$1;
continue;
}
if(dc.identical((node as dc.Object?), stop_node, )){
return false;
}
if((rank<idxs.length)){
node=(nodes[rank]);
idx=(idxs[rank]);
rank=(1+rank);
continue;
}
return false;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END TreapIterator

// BEGIN TreapNode
class TreapNode extends dc.Object {
final dc.int cnt;
final dc.List arr;

const TreapNode(this.cnt, this.arr, ):super();

dc.int tnode_leaf_search(dc.dynamic k$1, dc.int Function(dc.dynamic, dc.dynamic, ) cmp$1, ){
assert((){
late final dc.bool $if_$1;
if(arr.length.isEven){
$if_$1=true;
}else{
$if_$1=false;
}
return $if_$1;
}(), (){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "even?", )), ));
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "alength", )), ));
fl$2[1]=(lcoc_core.symbol.$_invoke$2(null, "arr", ));
final lcoc_core.PersistentList $2=lcoc_core.$_list_lit(fl$2, );
final dc.List<dc.dynamic> fl$3=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$3[1]=7434;
fl$3[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$3[3]=19;
final lcoc_core.PersistentHashMap $3=lcoc_core.$_map_lit(fl$3, );
final dc.dynamic $4=lcoc_core.with_meta($2, $3, );
fl$1[1]=$4;
final lcoc_core.PersistentList $1=lcoc_core.$_list_lit(fl$1, );
final dc.List<dc.dynamic> fl$4=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$4[1]=7434;
fl$4[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$4[3]=12;
final lcoc_core.PersistentHashMap $5=lcoc_core.$_map_lit(fl$4, );
final dc.dynamic $6=lcoc_core.with_meta($1, $5, );
final dc.String $7=(lcoc_core.pr_str.$_invoke$1($6, ));
final dc.String $8=(lcoc_core.str.$_invoke$2("Assert failed: ", $7, ));
return $8;
}());
dc.int i$1=-1;
dc.int j$1=(arr.length-1);
do {
if((i$1<j$1)){
final dc.int m$1=(((i$1+j$1)~/2)&4294967294);
final dc.dynamic z$1=cmp$1(k$1, (arr[m$1]), );
if((0>(z$1 as dc.num))){
j$1=(m$1-1);
continue;
}
if((0==z$1)){
return m$1;
}
i$1=(1+m$1);
continue;
}
return i$1;
} while(true);
}

dc.int tnode_branch_search(dc.dynamic k$2, dc.int Function(dc.dynamic, dc.dynamic, ) cmp$2, ){
assert((){
late final dc.bool $if_$2;
if(arr.length.isOdd){
$if_$2=true;
}else{
$if_$2=false;
}
return $if_$2;
}(), (){
final dc.List<dc.dynamic> fl$5=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "odd?", )), ));
final dc.List<dc.dynamic> fl$6=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "alength", )), ));
fl$6[1]=(lcoc_core.symbol.$_invoke$2(null, "arr", ));
final lcoc_core.PersistentList $10=lcoc_core.$_list_lit(fl$6, );
final dc.List<dc.dynamic> fl$7=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$7[1]=7447;
fl$7[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$7[3]=18;
final lcoc_core.PersistentHashMap $11=lcoc_core.$_map_lit(fl$7, );
final dc.dynamic $12=lcoc_core.with_meta($10, $11, );
fl$5[1]=$12;
final lcoc_core.PersistentList $9=lcoc_core.$_list_lit(fl$5, );
final dc.List<dc.dynamic> fl$8=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$8[1]=7447;
fl$8[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$8[3]=12;
final lcoc_core.PersistentHashMap $13=lcoc_core.$_map_lit(fl$8, );
final dc.dynamic $14=lcoc_core.with_meta($9, $13, );
final dc.String $15=(lcoc_core.pr_str.$_invoke$1($14, ));
final dc.String $16=(lcoc_core.str.$_invoke$2("Assert failed: ", $15, ));
return $16;
}());
dc.int i$2=0;
dc.int j$2=(arr.length-1);
do {
if((i$2<j$2)){
final dc.int m$2=(((i$2+j$2)~/2)|1);
final dc.dynamic z$2=cmp$2(k$2, (arr[m$2]), );
if((0>(z$2 as dc.num))){
j$2=(m$2-1);
continue;
}
if((0==z$2)){
return m$2;
}
i$2=(1+m$2);
continue;
}
return i$2;
} while(true);
}

dc.dynamic tnode_lookup(dc.dynamic k$3, dc.dynamic not_found$1, dc.int rank$1, dc.int Function(dc.dynamic, dc.dynamic, ) cmp$3, ){
assert((){
late final dc.bool $if_$3;
if((lcoc_core.$EQ_.$_invoke$2((0==rank$1), arr.length.isEven, ))){
$if_$3=true;
}else{
$if_$3=false;
}
return $if_$3;
}(), (){
final dc.List<dc.dynamic> fl$9=(dc.List<dc.dynamic>.filled(3, (lcoc_core.symbol.$_invoke$2(null, "=", )), ));
final dc.List<dc.dynamic> fl$10=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "zero?", )), ));
fl$10[1]=(lcoc_core.symbol.$_invoke$2(null, "rank", ));
final lcoc_core.PersistentList $18=lcoc_core.$_list_lit(fl$10, );
final dc.List<dc.dynamic> fl$11=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$11[1]=7460;
fl$11[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$11[3]=16;
final lcoc_core.PersistentHashMap $19=lcoc_core.$_map_lit(fl$11, );
final dc.dynamic $20=lcoc_core.with_meta($18, $19, );
fl$9[1]=$20;
final dc.List<dc.dynamic> fl$12=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "even?", )), ));
final dc.List<dc.dynamic> fl$13=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "alength", )), ));
fl$13[1]=(lcoc_core.symbol.$_invoke$2(null, "arr", ));
final lcoc_core.PersistentList $22=lcoc_core.$_list_lit(fl$13, );
final dc.List<dc.dynamic> fl$14=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$14[1]=7460;
fl$14[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$14[3]=36;
final lcoc_core.PersistentHashMap $23=lcoc_core.$_map_lit(fl$14, );
final dc.dynamic $24=lcoc_core.with_meta($22, $23, );
fl$12[1]=$24;
final lcoc_core.PersistentList $21=lcoc_core.$_list_lit(fl$12, );
final dc.List<dc.dynamic> fl$15=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$15[1]=7460;
fl$15[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$15[3]=29;
final lcoc_core.PersistentHashMap $25=lcoc_core.$_map_lit(fl$15, );
final dc.dynamic $26=lcoc_core.with_meta($21, $25, );
fl$9[2]=$26;
final lcoc_core.PersistentList $17=lcoc_core.$_list_lit(fl$9, );
final dc.List<dc.dynamic> fl$16=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$16[1]=7460;
fl$16[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$16[3]=13;
final lcoc_core.PersistentHashMap $27=lcoc_core.$_map_lit(fl$16, );
final dc.dynamic $28=lcoc_core.with_meta($17, $27, );
final dc.String $29=(lcoc_core.pr_str.$_invoke$1($28, ));
final dc.String $30=(lcoc_core.str.$_invoke$2("Assert failed: ", $29, ));
return $30;
}());
if((0==rank$1)){
final dc.int i$3=(this.tnode_leaf_search(k$3, cmp$3, ));
if(i$3.isEven){
return (arr[(1+i$3)]);
}
return not_found$1;
}
final dc.int i$4=(this.tnode_branch_search(k$3, cmp$3, ));
if(i$4.isOdd){
return (((arr[(1+i$4)]) as lcoc_core.TreapNode).tnode_lookup(k$3, not_found$1, (rank$1-1), cmp$3, ));
}
final dc.dynamic some$7546_$AUTO_$1=(arr[i$4]);
if((null==some$7546_$AUTO_$1)){
return not_found$1;
}
final lcoc_core.TreapNode child$1=(some$7546_$AUTO_$1 as lcoc_core.TreapNode);
return (child$1.tnode_lookup(k$3, not_found$1, (rank$1-1), cmp$3, ));
}

lcoc_core.TreapNode tnode_set_leftmost(dc.int rank$2, dc.dynamic k$4, dc.dynamic v$1, ){
assert((){
late final dc.bool $if_$4;
if((lcoc_core.$EQ_.$_invoke$2((0==rank$2), arr.length.isEven, ))){
$if_$4=true;
}else{
$if_$4=false;
}
return $if_$4;
}(), (){
final dc.List<dc.dynamic> fl$17=(dc.List<dc.dynamic>.filled(3, (lcoc_core.symbol.$_invoke$2(null, "=", )), ));
final dc.List<dc.dynamic> fl$18=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "zero?", )), ));
fl$18[1]=(lcoc_core.symbol.$_invoke$2(null, "rank", ));
final lcoc_core.PersistentList $32=lcoc_core.$_list_lit(fl$18, );
final dc.List<dc.dynamic> fl$19=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$19[1]=7473;
fl$19[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$19[3]=15;
final lcoc_core.PersistentHashMap $33=lcoc_core.$_map_lit(fl$19, );
final dc.dynamic $34=lcoc_core.with_meta($32, $33, );
fl$17[1]=$34;
final dc.List<dc.dynamic> fl$20=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "even?", )), ));
final dc.List<dc.dynamic> fl$21=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "alength", )), ));
fl$21[1]=(lcoc_core.symbol.$_invoke$2(null, "arr", ));
final lcoc_core.PersistentList $36=lcoc_core.$_list_lit(fl$21, );
final dc.List<dc.dynamic> fl$22=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$22[1]=7473;
fl$22[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$22[3]=35;
final lcoc_core.PersistentHashMap $37=lcoc_core.$_map_lit(fl$22, );
final dc.dynamic $38=lcoc_core.with_meta($36, $37, );
fl$20[1]=$38;
final lcoc_core.PersistentList $35=lcoc_core.$_list_lit(fl$20, );
final dc.List<dc.dynamic> fl$23=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$23[1]=7473;
fl$23[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$23[3]=28;
final lcoc_core.PersistentHashMap $39=lcoc_core.$_map_lit(fl$23, );
final dc.dynamic $40=lcoc_core.with_meta($35, $39, );
fl$17[2]=$40;
final lcoc_core.PersistentList $31=lcoc_core.$_list_lit(fl$17, );
final dc.List<dc.dynamic> fl$24=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$24[1]=7473;
fl$24[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$24[3]=12;
final lcoc_core.PersistentHashMap $41=lcoc_core.$_map_lit(fl$24, );
final dc.dynamic $42=lcoc_core.with_meta($31, $41, );
final dc.String $43=(lcoc_core.pr_str.$_invoke$1($42, ));
final dc.String $44=(lcoc_core.str.$_invoke$2("Assert failed: ", $43, ));
return $44;
}());
late final dc.List<dc.dynamic> $if_$5;
if((0==rank$2)){
final dc.int size$8541_$AUTO_$1=(2+(arr.length-2));
final dc.List<dc.dynamic> dest$8537_$AUTO_$1=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$1, null, ));
final dc.dynamic v$8151_$AUTO_$1=k$4;
dest$8537_$AUTO_$1[0]=v$8151_$AUTO_$1;
final dc.int pos$8536_$AUTO_$2=(1+0);
final dc.dynamic v$8151_$AUTO_$2=v$1;
dest$8537_$AUTO_$1[pos$8536_$AUTO_$2]=v$8151_$AUTO_$2;
final dc.int pos$8536_$AUTO_$3=(1+pos$8536_$AUTO_$2);
final dc.int to$8538_$AUTO_$1=arr.length;
late final dc.int pos$8536_$AUTO_$4;
dc.int i$8539_$AUTO_$1=pos$8536_$AUTO_$3;
dc.int j$8540_$AUTO_$1=2;
do {
if((j$8540_$AUTO_$1<to$8538_$AUTO_$1)){
final dc.dynamic v$8151_$AUTO_$3=(arr[j$8540_$AUTO_$1]);
dest$8537_$AUTO_$1[i$8539_$AUTO_$1]=v$8151_$AUTO_$3;
i$8539_$AUTO_$1=(1+i$8539_$AUTO_$1);
j$8540_$AUTO_$1=(1+j$8540_$AUTO_$1);
continue;
}else{
pos$8536_$AUTO_$4=i$8539_$AUTO_$1;
}
break;
} while(true);
$if_$5=dest$8537_$AUTO_$1;
}else{
final dc.int size$8541_$AUTO_$2=(1+(arr.length-1));
final dc.List<dc.dynamic> dest$8537_$AUTO_$2=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$2, null, ));
final lcoc_core.TreapNode v$8151_$AUTO_$4=(((arr[0]) as lcoc_core.TreapNode).tnode_set_leftmost((rank$2-1), k$4, v$1, ));
dest$8537_$AUTO_$2[0]=v$8151_$AUTO_$4;
final dc.int pos$8536_$AUTO_$6=(1+0);
final dc.int to$8538_$AUTO_$2=arr.length;
late final dc.int pos$8536_$AUTO_$7;
dc.int i$8539_$AUTO_$2=pos$8536_$AUTO_$6;
dc.int j$8540_$AUTO_$2=1;
do {
if((j$8540_$AUTO_$2<to$8538_$AUTO_$2)){
final dc.dynamic v$8151_$AUTO_$5=(arr[j$8540_$AUTO_$2]);
dest$8537_$AUTO_$2[i$8539_$AUTO_$2]=v$8151_$AUTO_$5;
i$8539_$AUTO_$2=(1+i$8539_$AUTO_$2);
j$8540_$AUTO_$2=(1+j$8540_$AUTO_$2);
continue;
}else{
pos$8536_$AUTO_$7=i$8539_$AUTO_$2;
}
break;
} while(true);
$if_$5=dest$8537_$AUTO_$2;
}
return lcoc_core.TreapNode(cnt, $if_$5, );
}

lcoc_core.TreapNode tnode_partial_zip(lcoc_core.TreapNode lnode$1, dc.int rank$3, dc.int krank$1, dc.dynamic k$5, dc.dynamic v$2, ){
assert((){
late final dc.bool $if_$6;
if((lcoc_core.$EQ_.$_invoke$2((0==rank$3), arr.length.isEven, ))){
$if_$6=true;
}else{
$if_$6=false;
}
return $if_$6;
}(), (){
final dc.List<dc.dynamic> fl$25=(dc.List<dc.dynamic>.filled(3, (lcoc_core.symbol.$_invoke$2(null, "=", )), ));
final dc.List<dc.dynamic> fl$26=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "zero?", )), ));
fl$26[1]=(lcoc_core.symbol.$_invoke$2(null, "rank", ));
final lcoc_core.PersistentList $46=lcoc_core.$_list_lit(fl$26, );
final dc.List<dc.dynamic> fl$27=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$27[1]=7479;
fl$27[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$27[3]=16;
final lcoc_core.PersistentHashMap $47=lcoc_core.$_map_lit(fl$27, );
final dc.dynamic $48=lcoc_core.with_meta($46, $47, );
fl$25[1]=$48;
final dc.List<dc.dynamic> fl$28=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "even?", )), ));
final dc.List<dc.dynamic> fl$29=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "alength", )), ));
fl$29[1]=(lcoc_core.symbol.$_invoke$2(null, "arr", ));
final lcoc_core.PersistentList $50=lcoc_core.$_list_lit(fl$29, );
final dc.List<dc.dynamic> fl$30=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$30[1]=7479;
fl$30[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$30[3]=36;
final lcoc_core.PersistentHashMap $51=lcoc_core.$_map_lit(fl$30, );
final dc.dynamic $52=lcoc_core.with_meta($50, $51, );
fl$28[1]=$52;
final lcoc_core.PersistentList $49=lcoc_core.$_list_lit(fl$28, );
final dc.List<dc.dynamic> fl$31=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$31[1]=7479;
fl$31[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$31[3]=29;
final lcoc_core.PersistentHashMap $53=lcoc_core.$_map_lit(fl$31, );
final dc.dynamic $54=lcoc_core.with_meta($49, $53, );
fl$25[2]=$54;
final lcoc_core.PersistentList $45=lcoc_core.$_list_lit(fl$25, );
final dc.List<dc.dynamic> fl$32=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$32[1]=7479;
fl$32[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$32[3]=13;
final lcoc_core.PersistentHashMap $55=lcoc_core.$_map_lit(fl$32, );
final dc.dynamic $56=lcoc_core.with_meta($45, $55, );
final dc.String $57=(lcoc_core.pr_str.$_invoke$1($56, ));
final dc.String $58=(lcoc_core.str.$_invoke$2("Assert failed: ", $57, ));
return $58;
}());
assert((){
late final dc.bool $if_$7;
if((krank$1<=rank$3)){
$if_$7=true;
}else{
$if_$7=false;
}
return $if_$7;
}(), (){
final dc.List<dc.dynamic> fl$33=(dc.List<dc.dynamic>.filled(3, (lcoc_core.symbol.$_invoke$2(null, "<=", )), ));
fl$33[1]=(lcoc_core.symbol.$_invoke$2(null, "krank", ));
fl$33[2]=(lcoc_core.symbol.$_invoke$2(null, "rank", ));
final lcoc_core.PersistentList $59=lcoc_core.$_list_lit(fl$33, );
final dc.List<dc.dynamic> fl$34=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$34[1]=7481;
fl$34[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$34[3]=13;
final lcoc_core.PersistentHashMap $60=lcoc_core.$_map_lit(fl$34, );
final dc.dynamic $61=lcoc_core.with_meta($59, $60, );
final dc.String $62=(lcoc_core.pr_str.$_invoke$1($61, ));
final dc.String $63=(lcoc_core.str.$_invoke$2("Assert failed: ", $62, ));
return $63;
}());
late final dc.List<dc.dynamic> $if_$8;
if((0==rank$3)){
final dc.int size$8541_$AUTO_$3=(((lnode$1.arr.length-0)+2)+(arr.length-2));
final dc.List<dc.dynamic> dest$8537_$AUTO_$3=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$3, null, ));
final dc.int to$8538_$AUTO_$3=lnode$1.arr.length;
late final dc.int pos$8536_$AUTO_$9;
dc.int i$8539_$AUTO_$3=0;
dc.int j$8540_$AUTO_$3=0;
do {
if((j$8540_$AUTO_$3<to$8538_$AUTO_$3)){
final dc.dynamic v$8151_$AUTO_$6=(lnode$1.arr[j$8540_$AUTO_$3]);
dest$8537_$AUTO_$3[i$8539_$AUTO_$3]=v$8151_$AUTO_$6;
i$8539_$AUTO_$3=(1+i$8539_$AUTO_$3);
j$8540_$AUTO_$3=(1+j$8540_$AUTO_$3);
continue;
}else{
pos$8536_$AUTO_$9=i$8539_$AUTO_$3;
}
break;
} while(true);
final dc.dynamic v$8151_$AUTO_$7=k$5;
dest$8537_$AUTO_$3[pos$8536_$AUTO_$9]=v$8151_$AUTO_$7;
final dc.int pos$8536_$AUTO_$10=(1+pos$8536_$AUTO_$9);
final dc.dynamic v$8151_$AUTO_$8=v$2;
dest$8537_$AUTO_$3[pos$8536_$AUTO_$10]=v$8151_$AUTO_$8;
final dc.int pos$8536_$AUTO_$11=(1+pos$8536_$AUTO_$10);
final dc.int to$8538_$AUTO_$4=arr.length;
late final dc.int pos$8536_$AUTO_$12;
dc.int i$8539_$AUTO_$4=pos$8536_$AUTO_$11;
dc.int j$8540_$AUTO_$4=2;
do {
if((j$8540_$AUTO_$4<to$8538_$AUTO_$4)){
final dc.dynamic v$8151_$AUTO_$9=(arr[j$8540_$AUTO_$4]);
dest$8537_$AUTO_$3[i$8539_$AUTO_$4]=v$8151_$AUTO_$9;
i$8539_$AUTO_$4=(1+i$8539_$AUTO_$4);
j$8540_$AUTO_$4=(1+j$8540_$AUTO_$4);
continue;
}else{
pos$8536_$AUTO_$12=i$8539_$AUTO_$4;
}
break;
} while(true);
$if_$8=dest$8537_$AUTO_$3;
}else if((rank$3>krank$1)){
final dc.List larr$1=lnode$1.arr;
final dc.int ln_1$1=(larr$1.length-1);
final dc.int size$8541_$AUTO_$4=(((ln_1$1-0)+1)+(arr.length-1));
final dc.List<dc.dynamic> dest$8537_$AUTO_$4=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$4, null, ));
final dc.int to$8538_$AUTO_$5=ln_1$1;
late final dc.int pos$8536_$AUTO_$14;
dc.int i$8539_$AUTO_$5=0;
dc.int j$8540_$AUTO_$5=0;
do {
if((j$8540_$AUTO_$5<to$8538_$AUTO_$5)){
final dc.dynamic v$8151_$AUTO_$10=(larr$1[j$8540_$AUTO_$5]);
dest$8537_$AUTO_$4[i$8539_$AUTO_$5]=v$8151_$AUTO_$10;
i$8539_$AUTO_$5=(1+i$8539_$AUTO_$5);
j$8540_$AUTO_$5=(1+j$8540_$AUTO_$5);
continue;
}else{
pos$8536_$AUTO_$14=i$8539_$AUTO_$5;
}
break;
} while(true);
final lcoc_core.TreapNode v$8151_$AUTO_$11=(((arr[0]) as lcoc_core.TreapNode).tnode_partial_zip(((larr$1[ln_1$1]) as lcoc_core.TreapNode), (rank$3-1), krank$1, k$5, v$2, ));
dest$8537_$AUTO_$4[pos$8536_$AUTO_$14]=v$8151_$AUTO_$11;
final dc.int pos$8536_$AUTO_$15=(1+pos$8536_$AUTO_$14);
final dc.int to$8538_$AUTO_$6=arr.length;
late final dc.int pos$8536_$AUTO_$16;
dc.int i$8539_$AUTO_$6=pos$8536_$AUTO_$15;
dc.int j$8540_$AUTO_$6=1;
do {
if((j$8540_$AUTO_$6<to$8538_$AUTO_$6)){
final dc.dynamic v$8151_$AUTO_$12=(arr[j$8540_$AUTO_$6]);
dest$8537_$AUTO_$4[i$8539_$AUTO_$6]=v$8151_$AUTO_$12;
i$8539_$AUTO_$6=(1+i$8539_$AUTO_$6);
j$8540_$AUTO_$6=(1+j$8540_$AUTO_$6);
continue;
}else{
pos$8536_$AUTO_$16=i$8539_$AUTO_$6;
}
break;
} while(true);
$if_$8=dest$8537_$AUTO_$4;
}else{
final dc.int size$8541_$AUTO_$5=(((lnode$1.arr.length-0)+2)+(arr.length-1));
final dc.List<dc.dynamic> dest$8537_$AUTO_$5=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$5, null, ));
final dc.int to$8538_$AUTO_$7=lnode$1.arr.length;
late final dc.int pos$8536_$AUTO_$18;
dc.int i$8539_$AUTO_$7=0;
dc.int j$8540_$AUTO_$7=0;
do {
if((j$8540_$AUTO_$7<to$8538_$AUTO_$7)){
final dc.dynamic v$8151_$AUTO_$13=(lnode$1.arr[j$8540_$AUTO_$7]);
dest$8537_$AUTO_$5[i$8539_$AUTO_$7]=v$8151_$AUTO_$13;
i$8539_$AUTO_$7=(1+i$8539_$AUTO_$7);
j$8540_$AUTO_$7=(1+j$8540_$AUTO_$7);
continue;
}else{
pos$8536_$AUTO_$18=i$8539_$AUTO_$7;
}
break;
} while(true);
final dc.dynamic v$8151_$AUTO_$14=k$5;
dest$8537_$AUTO_$5[pos$8536_$AUTO_$18]=v$8151_$AUTO_$14;
final dc.int pos$8536_$AUTO_$19=(1+pos$8536_$AUTO_$18);
final lcoc_core.TreapNode v$8151_$AUTO_$15=(((arr[0]) as lcoc_core.TreapNode).tnode_set_leftmost((rank$3-1), k$5, v$2, ));
dest$8537_$AUTO_$5[pos$8536_$AUTO_$19]=v$8151_$AUTO_$15;
final dc.int pos$8536_$AUTO_$20=(1+pos$8536_$AUTO_$19);
final dc.int to$8538_$AUTO_$8=arr.length;
late final dc.int pos$8536_$AUTO_$21;
dc.int i$8539_$AUTO_$8=pos$8536_$AUTO_$20;
dc.int j$8540_$AUTO_$8=1;
do {
if((j$8540_$AUTO_$8<to$8538_$AUTO_$8)){
final dc.dynamic v$8151_$AUTO_$16=(arr[j$8540_$AUTO_$8]);
dest$8537_$AUTO_$5[i$8539_$AUTO_$8]=v$8151_$AUTO_$16;
i$8539_$AUTO_$8=(1+i$8539_$AUTO_$8);
j$8540_$AUTO_$8=(1+j$8540_$AUTO_$8);
continue;
}else{
pos$8536_$AUTO_$21=i$8539_$AUTO_$8;
}
break;
} while(true);
$if_$8=dest$8537_$AUTO_$5;
}
return lcoc_core.TreapNode(cnt, $if_$8, );
}

lcoc_core.TreapNode tnode_zip(lcoc_core.TreapNode lnode$2, dc.int rank$4, ){
assert((){
late final dc.bool $if_$9;
if((lcoc_core.$EQ_.$_invoke$2((0==rank$4), arr.length.isEven, ))){
$if_$9=true;
}else{
$if_$9=false;
}
return $if_$9;
}(), (){
final dc.List<dc.dynamic> fl$35=(dc.List<dc.dynamic>.filled(3, (lcoc_core.symbol.$_invoke$2(null, "=", )), ));
final dc.List<dc.dynamic> fl$36=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "zero?", )), ));
fl$36[1]=(lcoc_core.symbol.$_invoke$2(null, "rank", ));
final lcoc_core.PersistentList $65=lcoc_core.$_list_lit(fl$36, );
final dc.List<dc.dynamic> fl$37=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$37[1]=7499;
fl$37[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$37[3]=16;
final lcoc_core.PersistentHashMap $66=lcoc_core.$_map_lit(fl$37, );
final dc.dynamic $67=lcoc_core.with_meta($65, $66, );
fl$35[1]=$67;
final dc.List<dc.dynamic> fl$38=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "even?", )), ));
final dc.List<dc.dynamic> fl$39=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "alength", )), ));
fl$39[1]=(lcoc_core.symbol.$_invoke$2(null, "arr", ));
final lcoc_core.PersistentList $69=lcoc_core.$_list_lit(fl$39, );
final dc.List<dc.dynamic> fl$40=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$40[1]=7499;
fl$40[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$40[3]=36;
final lcoc_core.PersistentHashMap $70=lcoc_core.$_map_lit(fl$40, );
final dc.dynamic $71=lcoc_core.with_meta($69, $70, );
fl$38[1]=$71;
final lcoc_core.PersistentList $68=lcoc_core.$_list_lit(fl$38, );
final dc.List<dc.dynamic> fl$41=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$41[1]=7499;
fl$41[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$41[3]=29;
final lcoc_core.PersistentHashMap $72=lcoc_core.$_map_lit(fl$41, );
final dc.dynamic $73=lcoc_core.with_meta($68, $72, );
fl$35[2]=$73;
final lcoc_core.PersistentList $64=lcoc_core.$_list_lit(fl$35, );
final dc.List<dc.dynamic> fl$42=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$42[1]=7499;
fl$42[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$42[3]=13;
final lcoc_core.PersistentHashMap $74=lcoc_core.$_map_lit(fl$42, );
final dc.dynamic $75=lcoc_core.with_meta($64, $74, );
final dc.String $76=(lcoc_core.pr_str.$_invoke$1($75, ));
final dc.String $77=(lcoc_core.str.$_invoke$2("Assert failed: ", $76, ));
return $77;
}());
final dc.int arg$1=(cnt-1);
late final dc.List<dc.dynamic> $if_$10;
if((0==rank$4)){
final dc.int size$8541_$AUTO_$6=((lnode$2.arr.length-0)+(arr.length-2));
final dc.List<dc.dynamic> dest$8537_$AUTO_$6=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$6, null, ));
final dc.int to$8538_$AUTO_$9=lnode$2.arr.length;
late final dc.int pos$8536_$AUTO_$23;
dc.int i$8539_$AUTO_$9=0;
dc.int j$8540_$AUTO_$9=0;
do {
if((j$8540_$AUTO_$9<to$8538_$AUTO_$9)){
final dc.dynamic v$8151_$AUTO_$17=(lnode$2.arr[j$8540_$AUTO_$9]);
dest$8537_$AUTO_$6[i$8539_$AUTO_$9]=v$8151_$AUTO_$17;
i$8539_$AUTO_$9=(1+i$8539_$AUTO_$9);
j$8540_$AUTO_$9=(1+j$8540_$AUTO_$9);
continue;
}else{
pos$8536_$AUTO_$23=i$8539_$AUTO_$9;
}
break;
} while(true);
final dc.int to$8538_$AUTO_$10=arr.length;
late final dc.int pos$8536_$AUTO_$24;
dc.int i$8539_$AUTO_$10=pos$8536_$AUTO_$23;
dc.int j$8540_$AUTO_$10=2;
do {
if((j$8540_$AUTO_$10<to$8538_$AUTO_$10)){
final dc.dynamic v$8151_$AUTO_$18=(arr[j$8540_$AUTO_$10]);
dest$8537_$AUTO_$6[i$8539_$AUTO_$10]=v$8151_$AUTO_$18;
i$8539_$AUTO_$10=(1+i$8539_$AUTO_$10);
j$8540_$AUTO_$10=(1+j$8540_$AUTO_$10);
continue;
}else{
pos$8536_$AUTO_$24=i$8539_$AUTO_$10;
}
break;
} while(true);
$if_$10=dest$8537_$AUTO_$6;
}else{
final dc.List larr$2=lnode$2.arr;
final dc.int ln_1$2=(larr$2.length-1);
final dc.int size$8541_$AUTO_$7=(((ln_1$2-0)+1)+(arr.length-1));
final dc.List<dc.dynamic> dest$8537_$AUTO_$7=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$7, null, ));
final dc.int to$8538_$AUTO_$11=ln_1$2;
late final dc.int pos$8536_$AUTO_$26;
dc.int i$8539_$AUTO_$11=0;
dc.int j$8540_$AUTO_$11=0;
do {
if((j$8540_$AUTO_$11<to$8538_$AUTO_$11)){
final dc.dynamic v$8151_$AUTO_$19=(larr$2[j$8540_$AUTO_$11]);
dest$8537_$AUTO_$7[i$8539_$AUTO_$11]=v$8151_$AUTO_$19;
i$8539_$AUTO_$11=(1+i$8539_$AUTO_$11);
j$8540_$AUTO_$11=(1+j$8540_$AUTO_$11);
continue;
}else{
pos$8536_$AUTO_$26=i$8539_$AUTO_$11;
}
break;
} while(true);
final lcoc_core.TreapNode v$8151_$AUTO_$20=(((arr[0]) as lcoc_core.TreapNode).tnode_zip(((larr$2[ln_1$2]) as lcoc_core.TreapNode), (rank$4-1), ));
dest$8537_$AUTO_$7[pos$8536_$AUTO_$26]=v$8151_$AUTO_$20;
final dc.int pos$8536_$AUTO_$27=(1+pos$8536_$AUTO_$26);
final dc.int to$8538_$AUTO_$12=arr.length;
late final dc.int pos$8536_$AUTO_$28;
dc.int i$8539_$AUTO_$12=pos$8536_$AUTO_$27;
dc.int j$8540_$AUTO_$12=1;
do {
if((j$8540_$AUTO_$12<to$8538_$AUTO_$12)){
final dc.dynamic v$8151_$AUTO_$21=(arr[j$8540_$AUTO_$12]);
dest$8537_$AUTO_$7[i$8539_$AUTO_$12]=v$8151_$AUTO_$21;
i$8539_$AUTO_$12=(1+i$8539_$AUTO_$12);
j$8540_$AUTO_$12=(1+j$8540_$AUTO_$12);
continue;
}else{
pos$8536_$AUTO_$28=i$8539_$AUTO_$12;
}
break;
} while(true);
$if_$10=dest$8537_$AUTO_$7;
}
return lcoc_core.TreapNode(arg$1, $if_$10, );
}

dc.int tnode_split(dc.int rank$5, dc.dynamic k$6, dc.dynamic v$3, dc.List lparr$1, dc.int li$1, dc.List rparr$1, dc.int ri$1, dc.int Function(dc.dynamic, dc.dynamic, ) cmp$4, ){
assert((){
late final dc.bool $if_$11;
if((lcoc_core.$EQ_.$_invoke$2((0==rank$5), arr.length.isEven, ))){
$if_$11=true;
}else{
$if_$11=false;
}
return $if_$11;
}(), (){
final dc.List<dc.dynamic> fl$43=(dc.List<dc.dynamic>.filled(3, (lcoc_core.symbol.$_invoke$2(null, "=", )), ));
final dc.List<dc.dynamic> fl$44=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "zero?", )), ));
fl$44[1]=(lcoc_core.symbol.$_invoke$2(null, "rank", ));
final lcoc_core.PersistentList $79=lcoc_core.$_list_lit(fl$44, );
final dc.List<dc.dynamic> fl$45=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$45[1]=7511;
fl$45[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$45[3]=16;
final lcoc_core.PersistentHashMap $80=lcoc_core.$_map_lit(fl$45, );
final dc.dynamic $81=lcoc_core.with_meta($79, $80, );
fl$43[1]=$81;
final dc.List<dc.dynamic> fl$46=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "even?", )), ));
final dc.List<dc.dynamic> fl$47=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "alength", )), ));
fl$47[1]=(lcoc_core.symbol.$_invoke$2(null, "arr", ));
final lcoc_core.PersistentList $83=lcoc_core.$_list_lit(fl$47, );
final dc.List<dc.dynamic> fl$48=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$48[1]=7511;
fl$48[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$48[3]=36;
final lcoc_core.PersistentHashMap $84=lcoc_core.$_map_lit(fl$48, );
final dc.dynamic $85=lcoc_core.with_meta($83, $84, );
fl$46[1]=$85;
final lcoc_core.PersistentList $82=lcoc_core.$_list_lit(fl$46, );
final dc.List<dc.dynamic> fl$49=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$49[1]=7511;
fl$49[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$49[3]=29;
final lcoc_core.PersistentHashMap $86=lcoc_core.$_map_lit(fl$49, );
final dc.dynamic $87=lcoc_core.with_meta($82, $86, );
fl$43[2]=$87;
final lcoc_core.PersistentList $78=lcoc_core.$_list_lit(fl$43, );
final dc.List<dc.dynamic> fl$50=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$50[1]=7511;
fl$50[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$50[3]=13;
final lcoc_core.PersistentHashMap $88=lcoc_core.$_map_lit(fl$50, );
final dc.dynamic $89=lcoc_core.with_meta($78, $88, );
final dc.String $90=(lcoc_core.pr_str.$_invoke$1($89, ));
final dc.String $91=(lcoc_core.str.$_invoke$2("Assert failed: ", $90, ));
return $91;
}());
if((0==rank$5)){
final dc.int i$5=(this.tnode_leaf_search(k$6, cmp$4, ));
if(i$5.isEven){
final dc.int lcnt$1=(i$5~/2);
final dc.int rcnt$1=(cnt-lcnt$1);
final dc.int size$8541_$AUTO_$8=(i$5-0);
final dc.List<dc.dynamic> dest$8537_$AUTO_$8=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$8, null, ));
final dc.int to$8538_$AUTO_$13=i$5;
late final dc.int pos$8536_$AUTO_$30;
dc.int i$8539_$AUTO_$13=0;
dc.int j$8540_$AUTO_$13=0;
do {
if((j$8540_$AUTO_$13<to$8538_$AUTO_$13)){
final dc.dynamic v$8151_$AUTO_$22=(arr[j$8540_$AUTO_$13]);
dest$8537_$AUTO_$8[i$8539_$AUTO_$13]=v$8151_$AUTO_$22;
i$8539_$AUTO_$13=(1+i$8539_$AUTO_$13);
j$8540_$AUTO_$13=(1+j$8540_$AUTO_$13);
continue;
}else{
pos$8536_$AUTO_$30=i$8539_$AUTO_$13;
}
break;
} while(true);
final lcoc_core.TreapNode v$8151_$AUTO_$23=lcoc_core.TreapNode(lcnt$1, dest$8537_$AUTO_$8, );
lparr$1[li$1]=v$8151_$AUTO_$23;
final dc.int size$8541_$AUTO_$9=(2+(arr.length-(i$5+2)));
final dc.List<dc.dynamic> dest$8537_$AUTO_$9=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$9, null, ));
final dc.dynamic v$8151_$AUTO_$24=k$6;
dest$8537_$AUTO_$9[0]=v$8151_$AUTO_$24;
final dc.int pos$8536_$AUTO_$32=(1+0);
final dc.dynamic v$8151_$AUTO_$25=v$3;
dest$8537_$AUTO_$9[pos$8536_$AUTO_$32]=v$8151_$AUTO_$25;
final dc.int pos$8536_$AUTO_$33=(1+pos$8536_$AUTO_$32);
final dc.int to$8538_$AUTO_$14=arr.length;
late final dc.int pos$8536_$AUTO_$34;
dc.int i$8539_$AUTO_$14=pos$8536_$AUTO_$33;
dc.int j$8540_$AUTO_$14=(i$5+2);
do {
if((j$8540_$AUTO_$14<to$8538_$AUTO_$14)){
final dc.dynamic v$8151_$AUTO_$26=(arr[j$8540_$AUTO_$14]);
dest$8537_$AUTO_$9[i$8539_$AUTO_$14]=v$8151_$AUTO_$26;
i$8539_$AUTO_$14=(1+i$8539_$AUTO_$14);
j$8540_$AUTO_$14=(1+j$8540_$AUTO_$14);
continue;
}else{
pos$8536_$AUTO_$34=i$8539_$AUTO_$14;
}
break;
} while(true);
final lcoc_core.TreapNode v$8151_$AUTO_$27=lcoc_core.TreapNode(rcnt$1, dest$8537_$AUTO_$9, );
rparr$1[ri$1]=v$8151_$AUTO_$27;
return 0;
}
final dc.int i$6=(1+i$5);
final dc.int lcnt$2=(i$6~/2);
final dc.int rcnt$2=(1+(cnt-lcnt$2));
final dc.int size$8541_$AUTO_$10=(i$6-0);
final dc.List<dc.dynamic> dest$8537_$AUTO_$10=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$10, null, ));
final dc.int to$8538_$AUTO_$15=i$6;
late final dc.int pos$8536_$AUTO_$36;
dc.int i$8539_$AUTO_$15=0;
dc.int j$8540_$AUTO_$15=0;
do {
if((j$8540_$AUTO_$15<to$8538_$AUTO_$15)){
final dc.dynamic v$8151_$AUTO_$28=(arr[j$8540_$AUTO_$15]);
dest$8537_$AUTO_$10[i$8539_$AUTO_$15]=v$8151_$AUTO_$28;
i$8539_$AUTO_$15=(1+i$8539_$AUTO_$15);
j$8540_$AUTO_$15=(1+j$8540_$AUTO_$15);
continue;
}else{
pos$8536_$AUTO_$36=i$8539_$AUTO_$15;
}
break;
} while(true);
final lcoc_core.TreapNode v$8151_$AUTO_$29=lcoc_core.TreapNode(lcnt$2, dest$8537_$AUTO_$10, );
lparr$1[li$1]=v$8151_$AUTO_$29;
final dc.int size$8541_$AUTO_$11=(2+(arr.length-i$6));
final dc.List<dc.dynamic> dest$8537_$AUTO_$11=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$11, null, ));
final dc.dynamic v$8151_$AUTO_$30=k$6;
dest$8537_$AUTO_$11[0]=v$8151_$AUTO_$30;
final dc.int pos$8536_$AUTO_$38=(1+0);
final dc.dynamic v$8151_$AUTO_$31=v$3;
dest$8537_$AUTO_$11[pos$8536_$AUTO_$38]=v$8151_$AUTO_$31;
final dc.int pos$8536_$AUTO_$39=(1+pos$8536_$AUTO_$38);
final dc.int to$8538_$AUTO_$16=arr.length;
late final dc.int pos$8536_$AUTO_$40;
dc.int i$8539_$AUTO_$16=pos$8536_$AUTO_$39;
dc.int j$8540_$AUTO_$16=i$6;
do {
if((j$8540_$AUTO_$16<to$8538_$AUTO_$16)){
final dc.dynamic v$8151_$AUTO_$32=(arr[j$8540_$AUTO_$16]);
dest$8537_$AUTO_$11[i$8539_$AUTO_$16]=v$8151_$AUTO_$32;
i$8539_$AUTO_$16=(1+i$8539_$AUTO_$16);
j$8540_$AUTO_$16=(1+j$8540_$AUTO_$16);
continue;
}else{
pos$8536_$AUTO_$40=i$8539_$AUTO_$16;
}
break;
} while(true);
final lcoc_core.TreapNode v$8151_$AUTO_$33=lcoc_core.TreapNode(rcnt$2, dest$8537_$AUTO_$11, );
rparr$1[ri$1]=v$8151_$AUTO_$33;
return 1;
}
final dc.int i$7=(this.tnode_branch_search(k$6, cmp$4, ));
if(i$7.isOdd){
late final dc.dynamic lcnt$3;
dc.dynamic j$3=0;
dc.dynamic n$1=0;
do {
if(((j$3 as dc.num)<i$7)){
final dc.dynamic j$3tmp=((j$3 as dc.num)+2);
n$1=((n$1 as dc.num)+((arr[(j$3 as dc.int)]) as lcoc_core.TreapNode).cnt);
j$3=j$3tmp;
continue;
}else{
lcnt$3=n$1;
}
break;
} while(true);
final dc.num rcnt$3=(cnt-(lcnt$3 as dc.num));
final lcoc_core.TreapNode knode$1=((arr[(1+i$7)]) as lcoc_core.TreapNode);
final dc.int arg$2=(lcnt$3 as dc.int);
final dc.int size$8541_$AUTO_$12=(i$7-0);
final dc.List<dc.dynamic> dest$8537_$AUTO_$12=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$12, null, ));
final dc.int to$8538_$AUTO_$17=i$7;
late final dc.int pos$8536_$AUTO_$42;
dc.int i$8539_$AUTO_$17=0;
dc.int j$8540_$AUTO_$17=0;
do {
if((j$8540_$AUTO_$17<to$8538_$AUTO_$17)){
final dc.dynamic v$8151_$AUTO_$34=(arr[j$8540_$AUTO_$17]);
dest$8537_$AUTO_$12[i$8539_$AUTO_$17]=v$8151_$AUTO_$34;
i$8539_$AUTO_$17=(1+i$8539_$AUTO_$17);
j$8540_$AUTO_$17=(1+j$8540_$AUTO_$17);
continue;
}else{
pos$8536_$AUTO_$42=i$8539_$AUTO_$17;
}
break;
} while(true);
final lcoc_core.TreapNode v$8151_$AUTO_$35=lcoc_core.TreapNode(arg$2, dest$8537_$AUTO_$12, );
lparr$1[li$1]=v$8151_$AUTO_$35;
final dc.int arg$3=(rcnt$3 as dc.int);
final dc.int size$8541_$AUTO_$13=(1+(arr.length-(2+i$7)));
final dc.List<dc.dynamic> dest$8537_$AUTO_$13=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$13, null, ));
final lcoc_core.TreapNode v$8151_$AUTO_$36=(knode$1.tnode_set_leftmost((rank$5-1), k$6, v$3, ));
dest$8537_$AUTO_$13[0]=v$8151_$AUTO_$36;
final dc.int pos$8536_$AUTO_$44=(1+0);
final dc.int to$8538_$AUTO_$18=arr.length;
late final dc.int pos$8536_$AUTO_$45;
dc.int i$8539_$AUTO_$18=pos$8536_$AUTO_$44;
dc.int j$8540_$AUTO_$18=(2+i$7);
do {
if((j$8540_$AUTO_$18<to$8538_$AUTO_$18)){
final dc.dynamic v$8151_$AUTO_$37=(arr[j$8540_$AUTO_$18]);
dest$8537_$AUTO_$13[i$8539_$AUTO_$18]=v$8151_$AUTO_$37;
i$8539_$AUTO_$18=(1+i$8539_$AUTO_$18);
j$8540_$AUTO_$18=(1+j$8540_$AUTO_$18);
continue;
}else{
pos$8536_$AUTO_$45=i$8539_$AUTO_$18;
}
break;
} while(true);
final lcoc_core.TreapNode v$8151_$AUTO_$38=lcoc_core.TreapNode(arg$3, dest$8537_$AUTO_$13, );
rparr$1[ri$1]=v$8151_$AUTO_$38;
return 0;
}
final dc.int size$8541_$AUTO_$14=((1+i$7)-0);
final dc.List<dc.dynamic> dest$8537_$AUTO_$14=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$14, null, ));
final dc.int to$8538_$AUTO_$19=(1+i$7);
late final dc.int pos$8536_$AUTO_$47;
dc.int i$8539_$AUTO_$19=0;
dc.int j$8540_$AUTO_$19=0;
do {
if((j$8540_$AUTO_$19<to$8538_$AUTO_$19)){
final dc.dynamic v$8151_$AUTO_$39=(arr[j$8540_$AUTO_$19]);
dest$8537_$AUTO_$14[i$8539_$AUTO_$19]=v$8151_$AUTO_$39;
i$8539_$AUTO_$19=(1+i$8539_$AUTO_$19);
j$8540_$AUTO_$19=(1+j$8540_$AUTO_$19);
continue;
}else{
pos$8536_$AUTO_$47=i$8539_$AUTO_$19;
}
break;
} while(true);
final dc.List<dc.dynamic> larr$3=dest$8537_$AUTO_$14;
final dc.int size$8541_$AUTO_$15=(arr.length-i$7);
final dc.List<dc.dynamic> dest$8537_$AUTO_$15=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$15, null, ));
final dc.int to$8538_$AUTO_$20=arr.length;
late final dc.int pos$8536_$AUTO_$49;
dc.int i$8539_$AUTO_$20=0;
dc.int j$8540_$AUTO_$20=i$7;
do {
if((j$8540_$AUTO_$20<to$8538_$AUTO_$20)){
final dc.dynamic v$8151_$AUTO_$40=(arr[j$8540_$AUTO_$20]);
dest$8537_$AUTO_$15[i$8539_$AUTO_$20]=v$8151_$AUTO_$40;
i$8539_$AUTO_$20=(1+i$8539_$AUTO_$20);
j$8540_$AUTO_$20=(1+j$8540_$AUTO_$20);
continue;
}else{
pos$8536_$AUTO_$49=i$8539_$AUTO_$20;
}
break;
} while(true);
final dc.List<dc.dynamic> rarr$1=dest$8537_$AUTO_$15;
final dc.int cnt_inc$1=(((arr[i$7]) as lcoc_core.TreapNode).tnode_split((rank$5-1), k$6, v$3, larr$3, i$7, rarr$1, 0, cmp$4, ));
late final dc.dynamic lcnt$4;
dc.dynamic j$4=0;
dc.dynamic n$2=0;
do {
if(((j$4 as dc.num)<i$7)){
final dc.dynamic j$4tmp=((j$4 as dc.num)+2);
n$2=((n$2 as dc.num)+((larr$3[(j$4 as dc.int)]) as lcoc_core.TreapNode).cnt);
j$4=j$4tmp;
continue;
}else{
lcnt$4=n$2;
}
break;
} while(true);
final dc.num rcnt$4=(cnt-(lcnt$4 as dc.num));
final lcoc_core.TreapNode v$8151_$AUTO_$41=lcoc_core.TreapNode((lcnt$4 as dc.int), larr$3, );
lparr$1[li$1]=v$8151_$AUTO_$41;
final lcoc_core.TreapNode v$8151_$AUTO_$42=lcoc_core.TreapNode((rcnt$4 as dc.int), rarr$1, );
rparr$1[ri$1]=v$8151_$AUTO_$42;
return cnt_inc$1;
}

lcoc_core.TreapNode tnode_without(dc.int rank$6, dc.int krank$2, dc.dynamic k$7, dc.int Function(dc.dynamic, dc.dynamic, ) cmp$5, ){
assert((){
late final dc.bool $if_$12;
if((lcoc_core.$EQ_.$_invoke$2((0==rank$6), arr.length.isEven, ))){
$if_$12=true;
}else{
$if_$12=false;
}
return $if_$12;
}(), (){
final dc.List<dc.dynamic> fl$51=(dc.List<dc.dynamic>.filled(3, (lcoc_core.symbol.$_invoke$2(null, "=", )), ));
final dc.List<dc.dynamic> fl$52=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "zero?", )), ));
fl$52[1]=(lcoc_core.symbol.$_invoke$2(null, "rank", ));
final lcoc_core.PersistentList $93=lcoc_core.$_list_lit(fl$52, );
final dc.List<dc.dynamic> fl$53=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$53[1]=7555;
fl$53[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$53[3]=15;
final lcoc_core.PersistentHashMap $94=lcoc_core.$_map_lit(fl$53, );
final dc.dynamic $95=lcoc_core.with_meta($93, $94, );
fl$51[1]=$95;
final dc.List<dc.dynamic> fl$54=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "even?", )), ));
final dc.List<dc.dynamic> fl$55=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "alength", )), ));
fl$55[1]=(lcoc_core.symbol.$_invoke$2(null, "arr", ));
final lcoc_core.PersistentList $97=lcoc_core.$_list_lit(fl$55, );
final dc.List<dc.dynamic> fl$56=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$56[1]=7555;
fl$56[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$56[3]=35;
final lcoc_core.PersistentHashMap $98=lcoc_core.$_map_lit(fl$56, );
final dc.dynamic $99=lcoc_core.with_meta($97, $98, );
fl$54[1]=$99;
final lcoc_core.PersistentList $96=lcoc_core.$_list_lit(fl$54, );
final dc.List<dc.dynamic> fl$57=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$57[1]=7555;
fl$57[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$57[3]=28;
final lcoc_core.PersistentHashMap $100=lcoc_core.$_map_lit(fl$57, );
final dc.dynamic $101=lcoc_core.with_meta($96, $100, );
fl$51[2]=$101;
final lcoc_core.PersistentList $92=lcoc_core.$_list_lit(fl$51, );
final dc.List<dc.dynamic> fl$58=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$58[1]=7555;
fl$58[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$58[3]=12;
final lcoc_core.PersistentHashMap $102=lcoc_core.$_map_lit(fl$58, );
final dc.dynamic $103=lcoc_core.with_meta($92, $102, );
final dc.String $104=(lcoc_core.pr_str.$_invoke$1($103, ));
final dc.String $105=(lcoc_core.str.$_invoke$2("Assert failed: ", $104, ));
return $105;
}());
assert((){
late final dc.bool $if_$13;
if((krank$2<=rank$6)){
$if_$13=true;
}else{
$if_$13=false;
}
return $if_$13;
}(), (){
final dc.List<dc.dynamic> fl$59=(dc.List<dc.dynamic>.filled(3, (lcoc_core.symbol.$_invoke$2(null, "<=", )), ));
fl$59[1]=(lcoc_core.symbol.$_invoke$2(null, "krank", ));
fl$59[2]=(lcoc_core.symbol.$_invoke$2(null, "rank", ));
final lcoc_core.PersistentList $106=lcoc_core.$_list_lit(fl$59, );
final dc.List<dc.dynamic> fl$60=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$60[1]=7556;
fl$60[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$60[3]=12;
final lcoc_core.PersistentHashMap $107=lcoc_core.$_map_lit(fl$60, );
final dc.dynamic $108=lcoc_core.with_meta($106, $107, );
final dc.String $109=(lcoc_core.pr_str.$_invoke$1($108, ));
final dc.String $110=(lcoc_core.str.$_invoke$2("Assert failed: ", $109, ));
return $110;
}());
if((0==rank$6)){
final dc.int i$8=(this.tnode_leaf_search(k$7, cmp$5, ));
if(i$8.isEven){
final dc.int arg$4=(cnt-1);
final dc.int size$8541_$AUTO_$16=((i$8-0)+(arr.length-(2+i$8)));
final dc.List<dc.dynamic> dest$8537_$AUTO_$16=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$16, null, ));
final dc.int to$8538_$AUTO_$21=i$8;
late final dc.int pos$8536_$AUTO_$51;
dc.int i$8539_$AUTO_$21=0;
dc.int j$8540_$AUTO_$21=0;
do {
if((j$8540_$AUTO_$21<to$8538_$AUTO_$21)){
final dc.dynamic v$8151_$AUTO_$43=(arr[j$8540_$AUTO_$21]);
dest$8537_$AUTO_$16[i$8539_$AUTO_$21]=v$8151_$AUTO_$43;
i$8539_$AUTO_$21=(1+i$8539_$AUTO_$21);
j$8540_$AUTO_$21=(1+j$8540_$AUTO_$21);
continue;
}else{
pos$8536_$AUTO_$51=i$8539_$AUTO_$21;
}
break;
} while(true);
final dc.int to$8538_$AUTO_$22=arr.length;
late final dc.int pos$8536_$AUTO_$52;
dc.int i$8539_$AUTO_$22=pos$8536_$AUTO_$51;
dc.int j$8540_$AUTO_$22=(2+i$8);
do {
if((j$8540_$AUTO_$22<to$8538_$AUTO_$22)){
final dc.dynamic v$8151_$AUTO_$44=(arr[j$8540_$AUTO_$22]);
dest$8537_$AUTO_$16[i$8539_$AUTO_$22]=v$8151_$AUTO_$44;
i$8539_$AUTO_$22=(1+i$8539_$AUTO_$22);
j$8540_$AUTO_$22=(1+j$8540_$AUTO_$22);
continue;
}else{
pos$8536_$AUTO_$52=i$8539_$AUTO_$22;
}
break;
} while(true);
return lcoc_core.TreapNode(arg$4, dest$8537_$AUTO_$16, );
}
return this;
}
final dc.int i$9=(this.tnode_branch_search(k$7, cmp$5, ));
if(i$9.isOdd){
final dc.int arg$5=(cnt-1);
final dc.int size$8541_$AUTO_$17=((((i$9-1)-0)+1)+(arr.length-(2+i$9)));
final dc.List<dc.dynamic> dest$8537_$AUTO_$17=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$17, null, ));
final dc.int to$8538_$AUTO_$23=(i$9-1);
late final dc.int pos$8536_$AUTO_$54;
dc.int i$8539_$AUTO_$23=0;
dc.int j$8540_$AUTO_$23=0;
do {
if((j$8540_$AUTO_$23<to$8538_$AUTO_$23)){
final dc.dynamic v$8151_$AUTO_$45=(arr[j$8540_$AUTO_$23]);
dest$8537_$AUTO_$17[i$8539_$AUTO_$23]=v$8151_$AUTO_$45;
i$8539_$AUTO_$23=(1+i$8539_$AUTO_$23);
j$8540_$AUTO_$23=(1+j$8540_$AUTO_$23);
continue;
}else{
pos$8536_$AUTO_$54=i$8539_$AUTO_$23;
}
break;
} while(true);
final lcoc_core.TreapNode v$8151_$AUTO_$46=(((arr[(i$9-1)]) as lcoc_core.TreapNode).tnode_zip(((arr[(1+i$9)]) as lcoc_core.TreapNode), (rank$6-1), ));
dest$8537_$AUTO_$17[pos$8536_$AUTO_$54]=v$8151_$AUTO_$46;
final dc.int pos$8536_$AUTO_$55=(1+pos$8536_$AUTO_$54);
final dc.int to$8538_$AUTO_$24=arr.length;
late final dc.int pos$8536_$AUTO_$56;
dc.int i$8539_$AUTO_$24=pos$8536_$AUTO_$55;
dc.int j$8540_$AUTO_$24=(2+i$9);
do {
if((j$8540_$AUTO_$24<to$8538_$AUTO_$24)){
final dc.dynamic v$8151_$AUTO_$47=(arr[j$8540_$AUTO_$24]);
dest$8537_$AUTO_$17[i$8539_$AUTO_$24]=v$8151_$AUTO_$47;
i$8539_$AUTO_$24=(1+i$8539_$AUTO_$24);
j$8540_$AUTO_$24=(1+j$8540_$AUTO_$24);
continue;
}else{
pos$8536_$AUTO_$56=i$8539_$AUTO_$24;
}
break;
} while(true);
return lcoc_core.TreapNode(arg$5, dest$8537_$AUTO_$17, );
}
final dc.dynamic child$2=(arr[i$9]);
final lcoc_core.TreapNode child$PRIME_$1=((child$2 as lcoc_core.TreapNode).tnode_without((rank$6-1), krank$2, k$7, cmp$5, ));
if(dc.identical(child$2, (child$PRIME_$1 as dc.Object?), )){
return this;
}
final dc.int arg$6=(cnt-1);
final dc.int size$8541_$AUTO_$18=(((i$9-0)+1)+(arr.length-(1+i$9)));
final dc.List<dc.dynamic> dest$8537_$AUTO_$18=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$18, null, ));
final dc.int to$8538_$AUTO_$25=i$9;
late final dc.int pos$8536_$AUTO_$58;
dc.int i$8539_$AUTO_$25=0;
dc.int j$8540_$AUTO_$25=0;
do {
if((j$8540_$AUTO_$25<to$8538_$AUTO_$25)){
final dc.dynamic v$8151_$AUTO_$48=(arr[j$8540_$AUTO_$25]);
dest$8537_$AUTO_$18[i$8539_$AUTO_$25]=v$8151_$AUTO_$48;
i$8539_$AUTO_$25=(1+i$8539_$AUTO_$25);
j$8540_$AUTO_$25=(1+j$8540_$AUTO_$25);
continue;
}else{
pos$8536_$AUTO_$58=i$8539_$AUTO_$25;
}
break;
} while(true);
final lcoc_core.TreapNode v$8151_$AUTO_$49=child$PRIME_$1;
dest$8537_$AUTO_$18[pos$8536_$AUTO_$58]=v$8151_$AUTO_$49;
final dc.int pos$8536_$AUTO_$59=(1+pos$8536_$AUTO_$58);
final dc.int to$8538_$AUTO_$26=arr.length;
late final dc.int pos$8536_$AUTO_$60;
dc.int i$8539_$AUTO_$26=pos$8536_$AUTO_$59;
dc.int j$8540_$AUTO_$26=(1+i$9);
do {
if((j$8540_$AUTO_$26<to$8538_$AUTO_$26)){
final dc.dynamic v$8151_$AUTO_$50=(arr[j$8540_$AUTO_$26]);
dest$8537_$AUTO_$18[i$8539_$AUTO_$26]=v$8151_$AUTO_$50;
i$8539_$AUTO_$26=(1+i$8539_$AUTO_$26);
j$8540_$AUTO_$26=(1+j$8540_$AUTO_$26);
continue;
}else{
pos$8536_$AUTO_$60=i$8539_$AUTO_$26;
}
break;
} while(true);
return lcoc_core.TreapNode(arg$6, dest$8537_$AUTO_$18, );
}

lcoc_core.TreapNode tnode_assoc(dc.int rank$7, dc.int krank$3, dc.dynamic k$8, dc.dynamic v$4, dc.int Function(dc.dynamic, dc.dynamic, ) cmp$6, ){
assert((){
late final dc.bool $if_$14;
if((lcoc_core.$EQ_.$_invoke$2((0==rank$7), arr.length.isEven, ))){
$if_$14=true;
}else{
$if_$14=false;
}
return $if_$14;
}(), (){
final dc.List<dc.dynamic> fl$61=(dc.List<dc.dynamic>.filled(3, (lcoc_core.symbol.$_invoke$2(null, "=", )), ));
final dc.List<dc.dynamic> fl$62=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "zero?", )), ));
fl$62[1]=(lcoc_core.symbol.$_invoke$2(null, "rank", ));
final lcoc_core.PersistentList $112=lcoc_core.$_list_lit(fl$62, );
final dc.List<dc.dynamic> fl$63=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$63[1]=7575;
fl$63[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$63[3]=16;
final lcoc_core.PersistentHashMap $113=lcoc_core.$_map_lit(fl$63, );
final dc.dynamic $114=lcoc_core.with_meta($112, $113, );
fl$61[1]=$114;
final dc.List<dc.dynamic> fl$64=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "even?", )), ));
final dc.List<dc.dynamic> fl$65=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "alength", )), ));
fl$65[1]=(lcoc_core.symbol.$_invoke$2(null, "arr", ));
final lcoc_core.PersistentList $116=lcoc_core.$_list_lit(fl$65, );
final dc.List<dc.dynamic> fl$66=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$66[1]=7575;
fl$66[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$66[3]=36;
final lcoc_core.PersistentHashMap $117=lcoc_core.$_map_lit(fl$66, );
final dc.dynamic $118=lcoc_core.with_meta($116, $117, );
fl$64[1]=$118;
final lcoc_core.PersistentList $115=lcoc_core.$_list_lit(fl$64, );
final dc.List<dc.dynamic> fl$67=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$67[1]=7575;
fl$67[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$67[3]=29;
final lcoc_core.PersistentHashMap $119=lcoc_core.$_map_lit(fl$67, );
final dc.dynamic $120=lcoc_core.with_meta($115, $119, );
fl$61[2]=$120;
final lcoc_core.PersistentList $111=lcoc_core.$_list_lit(fl$61, );
final dc.List<dc.dynamic> fl$68=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$68[1]=7575;
fl$68[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$68[3]=13;
final lcoc_core.PersistentHashMap $121=lcoc_core.$_map_lit(fl$68, );
final dc.dynamic $122=lcoc_core.with_meta($111, $121, );
final dc.String $123=(lcoc_core.pr_str.$_invoke$1($122, ));
final dc.String $124=(lcoc_core.str.$_invoke$2("Assert failed: ", $123, ));
return $124;
}());
assert((){
late final dc.bool $if_$15;
if((krank$3<=rank$7)){
$if_$15=true;
}else{
$if_$15=false;
}
return $if_$15;
}(), (){
final dc.List<dc.dynamic> fl$69=(dc.List<dc.dynamic>.filled(3, (lcoc_core.symbol.$_invoke$2(null, "<=", )), ));
fl$69[1]=(lcoc_core.symbol.$_invoke$2(null, "krank", ));
fl$69[2]=(lcoc_core.symbol.$_invoke$2(null, "rank", ));
final lcoc_core.PersistentList $125=lcoc_core.$_list_lit(fl$69, );
final dc.List<dc.dynamic> fl$70=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$70[1]=7576;
fl$70[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$70[3]=13;
final lcoc_core.PersistentHashMap $126=lcoc_core.$_map_lit(fl$70, );
final dc.dynamic $127=lcoc_core.with_meta($125, $126, );
final dc.String $128=(lcoc_core.pr_str.$_invoke$1($127, ));
final dc.String $129=(lcoc_core.str.$_invoke$2("Assert failed: ", $128, ));
return $129;
}());
if((0==rank$7)){
final dc.int i$10=(this.tnode_leaf_search(k$8, cmp$6, ));
if(i$10.isEven){
final dc.int size$8541_$AUTO_$19=(((i$10-0)+2)+(arr.length-(i$10+2)));
final dc.List<dc.dynamic> dest$8537_$AUTO_$19=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$19, null, ));
final dc.int to$8538_$AUTO_$27=i$10;
late final dc.int pos$8536_$AUTO_$62;
dc.int i$8539_$AUTO_$27=0;
dc.int j$8540_$AUTO_$27=0;
do {
if((j$8540_$AUTO_$27<to$8538_$AUTO_$27)){
final dc.dynamic v$8151_$AUTO_$51=(arr[j$8540_$AUTO_$27]);
dest$8537_$AUTO_$19[i$8539_$AUTO_$27]=v$8151_$AUTO_$51;
i$8539_$AUTO_$27=(1+i$8539_$AUTO_$27);
j$8540_$AUTO_$27=(1+j$8540_$AUTO_$27);
continue;
}else{
pos$8536_$AUTO_$62=i$8539_$AUTO_$27;
}
break;
} while(true);
final dc.dynamic v$8151_$AUTO_$52=k$8;
dest$8537_$AUTO_$19[pos$8536_$AUTO_$62]=v$8151_$AUTO_$52;
final dc.int pos$8536_$AUTO_$63=(1+pos$8536_$AUTO_$62);
final dc.dynamic v$8151_$AUTO_$53=v$4;
dest$8537_$AUTO_$19[pos$8536_$AUTO_$63]=v$8151_$AUTO_$53;
final dc.int pos$8536_$AUTO_$64=(1+pos$8536_$AUTO_$63);
final dc.int to$8538_$AUTO_$28=arr.length;
late final dc.int pos$8536_$AUTO_$65;
dc.int i$8539_$AUTO_$28=pos$8536_$AUTO_$64;
dc.int j$8540_$AUTO_$28=(i$10+2);
do {
if((j$8540_$AUTO_$28<to$8538_$AUTO_$28)){
final dc.dynamic v$8151_$AUTO_$54=(arr[j$8540_$AUTO_$28]);
dest$8537_$AUTO_$19[i$8539_$AUTO_$28]=v$8151_$AUTO_$54;
i$8539_$AUTO_$28=(1+i$8539_$AUTO_$28);
j$8540_$AUTO_$28=(1+j$8540_$AUTO_$28);
continue;
}else{
pos$8536_$AUTO_$65=i$8539_$AUTO_$28;
}
break;
} while(true);
return lcoc_core.TreapNode(cnt, dest$8537_$AUTO_$19, );
}
final dc.int arg$7=(1+cnt);
final dc.int size$8541_$AUTO_$20=((((1+i$10)-0)+2)+(arr.length-(1+i$10)));
final dc.List<dc.dynamic> dest$8537_$AUTO_$20=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$20, null, ));
final dc.int to$8538_$AUTO_$29=(1+i$10);
late final dc.int pos$8536_$AUTO_$67;
dc.int i$8539_$AUTO_$29=0;
dc.int j$8540_$AUTO_$29=0;
do {
if((j$8540_$AUTO_$29<to$8538_$AUTO_$29)){
final dc.dynamic v$8151_$AUTO_$55=(arr[j$8540_$AUTO_$29]);
dest$8537_$AUTO_$20[i$8539_$AUTO_$29]=v$8151_$AUTO_$55;
i$8539_$AUTO_$29=(1+i$8539_$AUTO_$29);
j$8540_$AUTO_$29=(1+j$8540_$AUTO_$29);
continue;
}else{
pos$8536_$AUTO_$67=i$8539_$AUTO_$29;
}
break;
} while(true);
final dc.dynamic v$8151_$AUTO_$56=k$8;
dest$8537_$AUTO_$20[pos$8536_$AUTO_$67]=v$8151_$AUTO_$56;
final dc.int pos$8536_$AUTO_$68=(1+pos$8536_$AUTO_$67);
final dc.dynamic v$8151_$AUTO_$57=v$4;
dest$8537_$AUTO_$20[pos$8536_$AUTO_$68]=v$8151_$AUTO_$57;
final dc.int pos$8536_$AUTO_$69=(1+pos$8536_$AUTO_$68);
final dc.int to$8538_$AUTO_$30=arr.length;
late final dc.int pos$8536_$AUTO_$70;
dc.int i$8539_$AUTO_$30=pos$8536_$AUTO_$69;
dc.int j$8540_$AUTO_$30=(1+i$10);
do {
if((j$8540_$AUTO_$30<to$8538_$AUTO_$30)){
final dc.dynamic v$8151_$AUTO_$58=(arr[j$8540_$AUTO_$30]);
dest$8537_$AUTO_$20[i$8539_$AUTO_$30]=v$8151_$AUTO_$58;
i$8539_$AUTO_$30=(1+i$8539_$AUTO_$30);
j$8540_$AUTO_$30=(1+j$8540_$AUTO_$30);
continue;
}else{
pos$8536_$AUTO_$70=i$8539_$AUTO_$30;
}
break;
} while(true);
return lcoc_core.TreapNode(arg$7, dest$8537_$AUTO_$20, );
}
if((lcoc_core.$EQ_.$_invoke$2(rank$7, krank$3, ))){
final dc.int i$11=(this.tnode_branch_search(k$8, cmp$6, ));
if(i$11.isOdd){
final dc.int size$8541_$AUTO_$21=(((i$11-0)+2)+(arr.length-(2+i$11)));
final dc.List<dc.dynamic> dest$8537_$AUTO_$21=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$21, null, ));
final dc.int to$8538_$AUTO_$31=i$11;
late final dc.int pos$8536_$AUTO_$72;
dc.int i$8539_$AUTO_$31=0;
dc.int j$8540_$AUTO_$31=0;
do {
if((j$8540_$AUTO_$31<to$8538_$AUTO_$31)){
final dc.dynamic v$8151_$AUTO_$59=(arr[j$8540_$AUTO_$31]);
dest$8537_$AUTO_$21[i$8539_$AUTO_$31]=v$8151_$AUTO_$59;
i$8539_$AUTO_$31=(1+i$8539_$AUTO_$31);
j$8540_$AUTO_$31=(1+j$8540_$AUTO_$31);
continue;
}else{
pos$8536_$AUTO_$72=i$8539_$AUTO_$31;
}
break;
} while(true);
final dc.dynamic v$8151_$AUTO_$60=k$8;
dest$8537_$AUTO_$21[pos$8536_$AUTO_$72]=v$8151_$AUTO_$60;
final dc.int pos$8536_$AUTO_$73=(1+pos$8536_$AUTO_$72);
final lcoc_core.TreapNode v$8151_$AUTO_$61=(((arr[(1+i$11)]) as lcoc_core.TreapNode).tnode_set_leftmost((rank$7-1), k$8, v$4, ));
dest$8537_$AUTO_$21[pos$8536_$AUTO_$73]=v$8151_$AUTO_$61;
final dc.int pos$8536_$AUTO_$74=(1+pos$8536_$AUTO_$73);
final dc.int to$8538_$AUTO_$32=arr.length;
late final dc.int pos$8536_$AUTO_$75;
dc.int i$8539_$AUTO_$32=pos$8536_$AUTO_$74;
dc.int j$8540_$AUTO_$32=(2+i$11);
do {
if((j$8540_$AUTO_$32<to$8538_$AUTO_$32)){
final dc.dynamic v$8151_$AUTO_$62=(arr[j$8540_$AUTO_$32]);
dest$8537_$AUTO_$21[i$8539_$AUTO_$32]=v$8151_$AUTO_$62;
i$8539_$AUTO_$32=(1+i$8539_$AUTO_$32);
j$8540_$AUTO_$32=(1+j$8540_$AUTO_$32);
continue;
}else{
pos$8536_$AUTO_$75=i$8539_$AUTO_$32;
}
break;
} while(true);
return lcoc_core.TreapNode(cnt, dest$8537_$AUTO_$21, );
}
final dc.int size$8541_$AUTO_$22=(((i$11-0)+3)+(arr.length-(1+i$11)));
final dc.List<dc.dynamic> dest$8537_$AUTO_$22=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$22, null, ));
final dc.int to$8538_$AUTO_$33=i$11;
late final dc.int pos$8536_$AUTO_$77;
dc.int i$8539_$AUTO_$33=0;
dc.int j$8540_$AUTO_$33=0;
do {
if((j$8540_$AUTO_$33<to$8538_$AUTO_$33)){
final dc.dynamic v$8151_$AUTO_$63=(arr[j$8540_$AUTO_$33]);
dest$8537_$AUTO_$22[i$8539_$AUTO_$33]=v$8151_$AUTO_$63;
i$8539_$AUTO_$33=(1+i$8539_$AUTO_$33);
j$8540_$AUTO_$33=(1+j$8540_$AUTO_$33);
continue;
}else{
pos$8536_$AUTO_$77=i$8539_$AUTO_$33;
}
break;
} while(true);
dest$8537_$AUTO_$22[pos$8536_$AUTO_$77]=null;
final dc.int pos$8536_$AUTO_$78=(1+pos$8536_$AUTO_$77);
final dc.dynamic v$8151_$AUTO_$65=k$8;
dest$8537_$AUTO_$22[pos$8536_$AUTO_$78]=v$8151_$AUTO_$65;
final dc.int pos$8536_$AUTO_$79=(1+pos$8536_$AUTO_$78);
dest$8537_$AUTO_$22[pos$8536_$AUTO_$79]=null;
final dc.int pos$8536_$AUTO_$80=(1+pos$8536_$AUTO_$79);
final dc.int to$8538_$AUTO_$34=arr.length;
late final dc.int pos$8536_$AUTO_$81;
dc.int i$8539_$AUTO_$34=pos$8536_$AUTO_$80;
dc.int j$8540_$AUTO_$34=(1+i$11);
do {
if((j$8540_$AUTO_$34<to$8538_$AUTO_$34)){
final dc.dynamic v$8151_$AUTO_$67=(arr[j$8540_$AUTO_$34]);
dest$8537_$AUTO_$22[i$8539_$AUTO_$34]=v$8151_$AUTO_$67;
i$8539_$AUTO_$34=(1+i$8539_$AUTO_$34);
j$8540_$AUTO_$34=(1+j$8540_$AUTO_$34);
continue;
}else{
pos$8536_$AUTO_$81=i$8539_$AUTO_$34;
}
break;
} while(true);
final dc.List<dc.dynamic> arr$PRIME_$1=dest$8537_$AUTO_$22;
final dc.int inc_cnt$1=(((arr[i$11]) as lcoc_core.TreapNode).tnode_split((rank$7-1), k$8, v$4, arr$PRIME_$1, i$11, arr$PRIME_$1, (2+i$11), cmp$6, ));
return lcoc_core.TreapNode((inc_cnt$1+cnt), arr$PRIME_$1, );
}
final dc.int i$12=(this.tnode_branch_search(k$8, cmp$6, ));
if(i$12.isOdd){
final lcoc_core.TreapNode lnode$3=((arr[(i$12-1)]) as lcoc_core.TreapNode);
final lcoc_core.TreapNode rnode$1=((arr[(1+i$12)]) as lcoc_core.TreapNode);
final dc.int size$8541_$AUTO_$23=((((i$12-1)-0)+1)+(arr.length-(2+i$12)));
final dc.List<dc.dynamic> dest$8537_$AUTO_$23=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$23, null, ));
final dc.int to$8538_$AUTO_$35=(i$12-1);
late final dc.int pos$8536_$AUTO_$83;
dc.int i$8539_$AUTO_$35=0;
dc.int j$8540_$AUTO_$35=0;
do {
if((j$8540_$AUTO_$35<to$8538_$AUTO_$35)){
final dc.dynamic v$8151_$AUTO_$68=(arr[j$8540_$AUTO_$35]);
dest$8537_$AUTO_$23[i$8539_$AUTO_$35]=v$8151_$AUTO_$68;
i$8539_$AUTO_$35=(1+i$8539_$AUTO_$35);
j$8540_$AUTO_$35=(1+j$8540_$AUTO_$35);
continue;
}else{
pos$8536_$AUTO_$83=i$8539_$AUTO_$35;
}
break;
} while(true);
final lcoc_core.TreapNode v$8151_$AUTO_$69=(rnode$1.tnode_partial_zip(lnode$3, (rank$7-1), krank$3, k$8, v$4, ));
dest$8537_$AUTO_$23[pos$8536_$AUTO_$83]=v$8151_$AUTO_$69;
final dc.int pos$8536_$AUTO_$84=(1+pos$8536_$AUTO_$83);
final dc.int to$8538_$AUTO_$36=arr.length;
late final dc.int pos$8536_$AUTO_$85;
dc.int i$8539_$AUTO_$36=pos$8536_$AUTO_$84;
dc.int j$8540_$AUTO_$36=(2+i$12);
do {
if((j$8540_$AUTO_$36<to$8538_$AUTO_$36)){
final dc.dynamic v$8151_$AUTO_$70=(arr[j$8540_$AUTO_$36]);
dest$8537_$AUTO_$23[i$8539_$AUTO_$36]=v$8151_$AUTO_$70;
i$8539_$AUTO_$36=(1+i$8539_$AUTO_$36);
j$8540_$AUTO_$36=(1+j$8540_$AUTO_$36);
continue;
}else{
pos$8536_$AUTO_$85=i$8539_$AUTO_$36;
}
break;
} while(true);
return lcoc_core.TreapNode(cnt, dest$8537_$AUTO_$23, );
}
final lcoc_core.TreapNode child$3=((arr[i$12]) as lcoc_core.TreapNode);
final lcoc_core.TreapNode child$PRIME_$2=(child$3.tnode_assoc((rank$7-1), krank$3, k$8, v$4, cmp$6, ));
final dc.int arg$8=((cnt-child$3.cnt)+child$PRIME_$2.cnt);
final dc.int size$8541_$AUTO_$24=(((i$12-0)+1)+(arr.length-(1+i$12)));
final dc.List<dc.dynamic> dest$8537_$AUTO_$24=(dc.List<dc.dynamic>.filled(size$8541_$AUTO_$24, null, ));
final dc.int to$8538_$AUTO_$37=i$12;
late final dc.int pos$8536_$AUTO_$87;
dc.int i$8539_$AUTO_$37=0;
dc.int j$8540_$AUTO_$37=0;
do {
if((j$8540_$AUTO_$37<to$8538_$AUTO_$37)){
final dc.dynamic v$8151_$AUTO_$71=(arr[j$8540_$AUTO_$37]);
dest$8537_$AUTO_$24[i$8539_$AUTO_$37]=v$8151_$AUTO_$71;
i$8539_$AUTO_$37=(1+i$8539_$AUTO_$37);
j$8540_$AUTO_$37=(1+j$8540_$AUTO_$37);
continue;
}else{
pos$8536_$AUTO_$87=i$8539_$AUTO_$37;
}
break;
} while(true);
final lcoc_core.TreapNode v$8151_$AUTO_$72=child$PRIME_$2;
dest$8537_$AUTO_$24[pos$8536_$AUTO_$87]=v$8151_$AUTO_$72;
final dc.int pos$8536_$AUTO_$88=(1+pos$8536_$AUTO_$87);
final dc.int to$8538_$AUTO_$38=arr.length;
late final dc.int pos$8536_$AUTO_$89;
dc.int i$8539_$AUTO_$38=pos$8536_$AUTO_$88;
dc.int j$8540_$AUTO_$38=(1+i$12);
do {
if((j$8540_$AUTO_$38<to$8538_$AUTO_$38)){
final dc.dynamic v$8151_$AUTO_$73=(arr[j$8540_$AUTO_$38]);
dest$8537_$AUTO_$24[i$8539_$AUTO_$38]=v$8151_$AUTO_$73;
i$8539_$AUTO_$38=(1+i$8539_$AUTO_$38);
j$8540_$AUTO_$38=(1+j$8540_$AUTO_$38);
continue;
}else{
pos$8536_$AUTO_$89=i$8539_$AUTO_$38;
}
break;
} while(true);
return lcoc_core.TreapNode(arg$8, dest$8537_$AUTO_$24, );
}
}

// END TreapNode

// BEGIN TreapReverseIterator
class TreapReverseIterator<E> extends dc.Object implements dc.Iterator<E> {
lcoc_core.TreapNode node;
dc.int idx;
dc.int rank;
final dc.List<dc.int> idxs;
final dc.List<lcoc_core.TreapNode> nodes;
final mk_value;
final stop_node;
final dc.int stop_idx;

TreapReverseIterator(this.node, this.idx, this.rank, this.idxs, this.nodes, this.mk_value, this.stop_node, this.stop_idx, ):super();

E get current{
final dc.List arr$1=node.arr;
return mk_value((arr$1[idx]), (arr$1[(1+idx)]), );
}

dc.bool moveNext(){
do {
if((0<idx)){
if((0==rank)){
late final dc.bool or$7573_$AUTO_$1;
if(dc.identical((node as dc.Object?), stop_node, )){
or$7573_$AUTO_$1=false;
}else{
or$7573_$AUTO_$1=true;
}
late final dc.bool can_move$1;
if(or$7573_$AUTO_$1){
can_move$1=or$7573_$AUTO_$1;
}else{
can_move$1=(stop_idx<idx);
}
idx=(idx-2);
return can_move$1;
}
final dc.int idx_1$1=(idx-1);
final lcoc_core.TreapNode child$1=((node.arr[idx_1$1]) as lcoc_core.TreapNode);
final dc.int rank_1$1=(rank-1);
final lcoc_core.TreapNode v$8151_$AUTO_$1=node;
nodes[rank_1$1]=v$8151_$AUTO_$1;
final dc.int v$8151_$AUTO_$2=(idx_1$1-1);
idxs[rank_1$1]=v$8151_$AUTO_$2;
node=child$1;
idx=child$1.arr.length;
rank=rank_1$1;
continue;
}
if(dc.identical((node as dc.Object?), stop_node, )){
return false;
}
if((rank<idxs.length)){
node=(nodes[rank]);
idx=(idxs[rank]);
rank=(1+rank);
continue;
}
return false;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END TreapReverseIterator

// BEGIN VectorNode
class VectorNode extends dc.Object {
final edit;
final dc.List arr;

const VectorNode(this.edit, this.arr, ):super();
}

// END VectorNode

// BEGIN Volatile
class Volatile extends dc.Object implements lcoc_core.IVolatile$iface, lcoc_core.IDeref$iface {
var state;

Volatile(this.state, ):super();

dc.dynamic $_vreset$BANG_$1(dc.dynamic new_state$1, ){
state=new_state$1;
return state;
}

dc.dynamic $_deref$0(){
return state;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Volatile

// BEGIN XformIterator
class XformIterator<E> extends dc.Object implements dc.Iterator<E> {
final dc.List buf;
dc.int i;
final move_next;
dc.bool in_progress;

XformIterator(this.buf, this.i, this.move_next, this.in_progress, ):super();

E get current{
return (buf[i]);
}

dc.bool moveNext(){
i=(1+i);
final dc.bool or$7573_$AUTO_$1=(i<buf.length);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
buf.clear();
i=0;
do {
final dc.bool and$7533_$AUTO_$1=in_progress;
late final dc.dynamic $if_$1;
if(and$7533_$AUTO_$1){
if((move_next is dc.Function)){
$if_$1=(move_next as dc.Function)();
}else if((move_next is lcoc_core.IFn$iface)){
$if_$1=((move_next as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$1=(lcoc_core.IFn.extensions(move_next, ).$_invoke$0(move_next, ));
}
}else{
$if_$1=and$7533_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
final dc.bool or$7573_$AUTO_$2=(0<buf.length);
if(or$7573_$AUTO_$2){
return or$7573_$AUTO_$2;
}
continue;
}
in_progress=false;
return (0<buf.length);
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END XformIterator

// BEGIN abs
dc.num abs(dc.dynamic a$1, ){
return ((a$1 as dc.num).abs());
}

// END abs

// BEGIN aclone
dc.List aclone(dc.dynamic arr$1, ){
return (dc.List.from((arr$1 as dc.List), growable: false, ));
}

// END aclone

// BEGIN add-watch
dc.dynamic add_watch(dc.dynamic reference$1, dc.dynamic key$1, dc.dynamic fn$1, ){
final dc.dynamic G$8891_$1=reference$1;
final dc.dynamic this7993$1=G$8891_$1;
final dc.dynamic key7994$1=key$1;
final dc.dynamic f7995$1=fn$1;
if((this7993$1 is lcoc_core.IWatchable$iface)){
(this7993$1 as lcoc_core.IWatchable$iface).$_add_watch$2(key7994$1, f7995$1, );
}else{
(lcoc_core.IWatchable.extensions(this7993$1, ) as lcoc_core.IWatchable$ext).$_add_watch$2(this7993$1, key7994$1, f7995$1, );
}
return G$8891_$1;
}

// END add-watch

// BEGIN aget
lcoc_core.IFn$iface aget=lcoc_core.agetifn18695hm$1(null, );

// END aget

// BEGIN agetifn18695hm$1
class agetifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

agetifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.agetifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic array$1, dc.dynamic idx$1, dc.dynamic idxs$1, ){
final dc.List array$2=(array$1 as dc.List);
final dc.int idx$2=(idx$1 as dc.int);
return (lcoc_core.apply.$_invoke$3(lcoc_core.aget, (array$2[idx$2]), idxs$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic array$3, dc.dynamic idx$3, ){
final dc.List array$4=(array$3 as dc.List);
final dc.int idx$4=(idx$3 as dc.int);
return (array$4[idx$4]);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END agetifn18695hm$1

// BEGIN alength
dc.int alength(dc.dynamic array$1, ){
return (array$1 as dc.List).length;
}

// END alength

// BEGIN alter-meta!
lcoc_core.IFn$iface alter_meta$BANG_=lcoc_core.alter_meta$BANG_ifn18695hm$1(null, );

// END alter-meta!

// BEGIN alter_meta$BANG_ifn18695hm$1
class alter_meta$BANG_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

alter_meta$BANG_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.alter_meta$BANG_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic atom$1, dc.dynamic f$1, dc.dynamic args$1, ){
final lcoc_core.Atom atom$2=(atom$1 as lcoc_core.Atom);
final dc.dynamic arg$1=(lcoc_core.apply.$_invoke$3(f$1, atom$2.meta, args$1, ));
atom$2.meta=arg$1;
return arg$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END alter_meta$BANG_ifn18695hm$1

// BEGIN amap
dc.dynamic amap(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic a$1, dc.dynamic idx$1, dc.dynamic ret$1, dc.dynamic expr$1, ){
final dc.dynamic arg$10=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "a__8932__auto__", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1(a$1, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(ret$1, ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "aclone", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "a__8932__auto__", )), )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$4(arg$3, arg$2, arg$1, $1, ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $13=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic arg$9=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "loop", )), ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(idx$1, )), (lcoc_core.list.$_invoke$1(0, )), ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $3=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $11=(lcoc_core.list.$_invoke$1($3, ));
final dc.dynamic arg$8=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$5=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "<", )), ));
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1(idx$1, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "alength", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "a__8932__auto__", )), )), ));
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$3(arg$5, arg$4, $4, ));
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $9=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic arg$7=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "aset", )), )), (lcoc_core.list.$_invoke$1(ret$1, )), (lcoc_core.list.$_invoke$1(idx$1, )), (lcoc_core.list.$_invoke$1(expr$1, )), ));
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic arg$6=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7668$7=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "inc", )), )), (lcoc_core.list.$_invoke$1(idx$1, )), ));
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$7, ));
final dc.dynamic o7668$8=(lcoc_core.concat.$_invoke$2(arg$6, $5, ));
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$8, ));
final dc.dynamic o7668$9=(lcoc_core.concat.$_invoke$3(arg$7, $7, $6, ));
late final dc.dynamic $if_$9;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
final dc.dynamic $8=(lcoc_core.list.$_invoke$1($if_$9, ));
final dc.dynamic o7668$10=(lcoc_core.concat.$_invoke$4(arg$8, $9, $8, (lcoc_core.list.$_invoke$1(ret$1, )), ));
late final dc.dynamic $if_$10;
if((o7668$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
final dc.dynamic $10=(lcoc_core.list.$_invoke$1($if_$10, ));
final dc.dynamic o7668$11=(lcoc_core.concat.$_invoke$3(arg$9, $11, $10, ));
late final dc.dynamic $if_$11;
if((o7668$11 is lcoc_core.ISeqable$iface)){
$if_$11=((o7668$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7668$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$11, ));
}
final dc.dynamic $12=(lcoc_core.list.$_invoke$1($if_$11, ));
final dc.dynamic o7668$12=(lcoc_core.concat.$_invoke$3(arg$10, $13, $12, ));
if((o7668$12 is lcoc_core.ISeqable$iface)){
return ((o7668$12 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$12, ));
}

// END amap

// BEGIN and
lcoc_core.IFn$iface and=lcoc_core.andifn18695hm$1(null, );

// END and

// BEGIN andifn18695hm$1
class andifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

andifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.andifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic x$1, dc.dynamic next$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$10=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "and__8687__auto__", )), )), (lcoc_core.list.$_invoke$1(x$1, )), ));
late final dc.dynamic $if_$9;
if((o7668$10 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$9, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "and__8687__auto__", )), ));
final dc.dynamic o7668$11=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "and", )), )), next$1, ));
late final dc.dynamic $if_$10;
if((o7668$11 is lcoc_core.ISeqable$iface)){
$if_$10=((o7668$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7668$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$11, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$10, ));
final dc.dynamic o7668$12=(lcoc_core.concat.$_invoke$4(arg$2, arg$1, $2, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "and__8687__auto__", )), )), ));
late final dc.dynamic $if_$11;
if((o7668$12 is lcoc_core.ISeqable$iface)){
$if_$11=((o7668$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7668$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$12, ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$11, ));
final dc.dynamic o7668$13=(lcoc_core.concat.$_invoke$3(arg$3, $4, $3, ));
if((o7668$13 is lcoc_core.ISeqable$iface)){
return ((o7668$13 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$13, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$13, ));
}

dc.dynamic $_invoke$2(dc.dynamic $AMPERSAND_form$2, dc.dynamic $AMPERSAND_env$2, ){
return true;
}

dc.dynamic $_invoke$3(dc.dynamic $AMPERSAND_form$3, dc.dynamic $AMPERSAND_env$3, dc.dynamic x$2, ){
return x$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END andifn18695hm$1

// BEGIN any?
dc.bool any$QMARK_(dc.dynamic x$1, ){
return true;
}

// END any?

// BEGIN apply
lcoc_core.IFn$iface apply=lcoc_core.applyifn18695hm$1(null, );

// END apply

// BEGIN applyifn18695hm$1
class applyifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

applyifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.applyifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic a$1, dc.dynamic b$1, dc.dynamic c$1, dc.dynamic d$1, dc.dynamic args$1, ){
final dc.dynamic args$2=lcoc_core.cons(a$1, lcoc_core.cons(b$1, lcoc_core.cons(c$1, lcoc_core.cons(d$1, lcoc_core.spread(args$1, ), ), ), ), );
if(((lcoc_core.IFn.satisfies(f$1, )) as dc.bool)){
final dc.dynamic this7498$1=f$1;
final dc.dynamic more7499$1=args$2;
if((this7498$1 is lcoc_core.IFn$iface)){
return ((this7498$1 as lcoc_core.IFn$iface).$_apply$1(more7499$1, ));
}
return ((lcoc_core.IFn.extensions(this7498$1, ) as lcoc_core.IFn$ext).$_apply$1(this7498$1, more7499$1, ));
}
final dc.dynamic maybe_f$1=f$1;
late final dc.Function wrapper_f$1;
if((maybe_f$1 is dc.Function)){
wrapper_f$1=maybe_f$1;
}else{
wrapper_f$1=(){
if((maybe_f$1 is dc.Function)){
return (maybe_f$1 as dc.Function)();
}
if((maybe_f$1 is lcoc_core.IFn$iface)){
return ((maybe_f$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(maybe_f$1, ).$_invoke$0(maybe_f$1, ));
};
}
return (dc.Function.apply(wrapper_f$1, lcoc_core.to_array(args$2, ), ));
}

dc.dynamic $_invoke$2(dc.dynamic f$2, dc.dynamic args$3, ){
if(((lcoc_core.IFn.satisfies(f$2, )) as dc.bool)){
final dc.dynamic this7498$2=f$2;
final dc.dynamic o7668$8=args$3;
late final dc.dynamic more7499$2;
if((o7668$8 is lcoc_core.ISeqable$iface)){
more7499$2=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more7499$2=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
if((this7498$2 is lcoc_core.IFn$iface)){
return ((this7498$2 as lcoc_core.IFn$iface).$_apply$1(more7499$2, ));
}
return ((lcoc_core.IFn.extensions(this7498$2, ) as lcoc_core.IFn$ext).$_apply$1(this7498$2, more7499$2, ));
}
final dc.dynamic maybe_f$2=f$2;
late final dc.Function wrapper_f$2;
if((maybe_f$2 is dc.Function)){
wrapper_f$2=maybe_f$2;
}else{
wrapper_f$2=(){
if((maybe_f$2 is dc.Function)){
return (maybe_f$2 as dc.Function)();
}
if((maybe_f$2 is lcoc_core.IFn$iface)){
return ((maybe_f$2 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(maybe_f$2, ).$_invoke$0(maybe_f$2, ));
};
}
return (dc.Function.apply(wrapper_f$2, lcoc_core.to_array(args$3, ), ));
}

dc.dynamic $_invoke$3(dc.dynamic f$3, dc.dynamic x$1, dc.dynamic args$4, ){
final dc.dynamic args$5=(lcoc_core.list$STAR_.$_invoke$2(x$1, args$4, ));
if(((lcoc_core.IFn.satisfies(f$3, )) as dc.bool)){
final dc.dynamic this7498$3=f$3;
final dc.dynamic more7499$3=args$5;
if((this7498$3 is lcoc_core.IFn$iface)){
return ((this7498$3 as lcoc_core.IFn$iface).$_apply$1(more7499$3, ));
}
return ((lcoc_core.IFn.extensions(this7498$3, ) as lcoc_core.IFn$ext).$_apply$1(this7498$3, more7499$3, ));
}
final dc.dynamic maybe_f$3=f$3;
late final dc.Function wrapper_f$3;
if((maybe_f$3 is dc.Function)){
wrapper_f$3=maybe_f$3;
}else{
wrapper_f$3=(){
if((maybe_f$3 is dc.Function)){
return (maybe_f$3 as dc.Function)();
}
if((maybe_f$3 is lcoc_core.IFn$iface)){
return ((maybe_f$3 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(maybe_f$3, ).$_invoke$0(maybe_f$3, ));
};
}
return (dc.Function.apply(wrapper_f$3, lcoc_core.to_array(args$5, ), ));
}

dc.dynamic $_invoke$4(dc.dynamic f$4, dc.dynamic x$2, dc.dynamic y$1, dc.dynamic args$6, ){
final dc.dynamic args$7=(lcoc_core.list$STAR_.$_invoke$3(x$2, y$1, args$6, ));
if(((lcoc_core.IFn.satisfies(f$4, )) as dc.bool)){
final dc.dynamic this7498$4=f$4;
final dc.dynamic more7499$4=args$7;
if((this7498$4 is lcoc_core.IFn$iface)){
return ((this7498$4 as lcoc_core.IFn$iface).$_apply$1(more7499$4, ));
}
return ((lcoc_core.IFn.extensions(this7498$4, ) as lcoc_core.IFn$ext).$_apply$1(this7498$4, more7499$4, ));
}
final dc.dynamic maybe_f$4=f$4;
late final dc.Function wrapper_f$4;
if((maybe_f$4 is dc.Function)){
wrapper_f$4=maybe_f$4;
}else{
wrapper_f$4=(){
if((maybe_f$4 is dc.Function)){
return (maybe_f$4 as dc.Function)();
}
if((maybe_f$4 is lcoc_core.IFn$iface)){
return ((maybe_f$4 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(maybe_f$4, ).$_invoke$0(maybe_f$4, ));
};
}
return (dc.Function.apply(wrapper_f$4, lcoc_core.to_array(args$7, ), ));
}

dc.dynamic $_invoke$5(dc.dynamic f$5, dc.dynamic x$3, dc.dynamic y$2, dc.dynamic z$1, dc.dynamic args$8, ){
final dc.dynamic args$9=(lcoc_core.list$STAR_.$_invoke$4(x$3, y$2, z$1, args$8, ));
if(((lcoc_core.IFn.satisfies(f$5, )) as dc.bool)){
final dc.dynamic this7498$5=f$5;
final dc.dynamic more7499$5=args$9;
if((this7498$5 is lcoc_core.IFn$iface)){
return ((this7498$5 as lcoc_core.IFn$iface).$_apply$1(more7499$5, ));
}
return ((lcoc_core.IFn.extensions(this7498$5, ) as lcoc_core.IFn$ext).$_apply$1(this7498$5, more7499$5, ));
}
final dc.dynamic maybe_f$5=f$5;
late final dc.Function wrapper_f$5;
if((maybe_f$5 is dc.Function)){
wrapper_f$5=maybe_f$5;
}else{
wrapper_f$5=(){
if((maybe_f$5 is dc.Function)){
return (maybe_f$5 as dc.Function)();
}
if((maybe_f$5 is lcoc_core.IFn$iface)){
return ((maybe_f$5 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(maybe_f$5, ).$_invoke$0(maybe_f$5, ));
};
}
return (dc.Function.apply(wrapper_f$5, lcoc_core.to_array(args$9, ), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END applyifn18695hm$1

// BEGIN areduce
dc.dynamic areduce(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic a$1, dc.dynamic idx$1, dc.dynamic ret$1, dc.dynamic init$1, dc.dynamic expr$1, ){
final dc.dynamic arg$7=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$1=(lcoc_core.symbol.$_invoke$2(null, "a__8933__auto__", ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "tag", 2780644040, ), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("\$lib:dc", "List", )), )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$1, ));
final dc.dynamic $2=lcoc_core.with_meta(arg$1, $1, );
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$2($3, (lcoc_core.list.$_invoke$1(a$1, )), ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $4=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $13=(lcoc_core.list.$_invoke$1($4, ));
final dc.dynamic arg$6=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "loop", )), ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.vary_meta.$_invoke$4(idx$1, lcoc_core.assoc, const lcoc_core.Keyword(null, "tag", 2780644040, ), (lcoc_core.symbol.$_invoke$2("dart:core", "int", )), )), )), (lcoc_core.list.$_invoke$1(0, )), (lcoc_core.list.$_invoke$1(ret$1, )), (lcoc_core.list.$_invoke$1(init$1, )), ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $5=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $11=(lcoc_core.list.$_invoke$1($5, ));
final dc.dynamic arg$5=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "<", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1(idx$1, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "alength", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "a__8933__auto__", )), )), ));
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$3(arg$3, arg$2, $6, ));
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $9=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "inc", )), )), (lcoc_core.list.$_invoke$1(idx$1, )), ));
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic o7668$7=(lcoc_core.concat.$_invoke$3(arg$4, $7, (lcoc_core.list.$_invoke$1(expr$1, )), ));
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
final dc.dynamic $8=(lcoc_core.list.$_invoke$1($if_$7, ));
final dc.dynamic o7668$8=(lcoc_core.concat.$_invoke$4(arg$5, $9, $8, (lcoc_core.list.$_invoke$1(ret$1, )), ));
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
final dc.dynamic $10=(lcoc_core.list.$_invoke$1($if_$8, ));
final dc.dynamic o7668$9=(lcoc_core.concat.$_invoke$3(arg$6, $11, $10, ));
late final dc.dynamic $if_$9;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
final dc.dynamic $12=(lcoc_core.list.$_invoke$1($if_$9, ));
final dc.dynamic o7668$10=(lcoc_core.concat.$_invoke$3(arg$7, $13, $12, ));
if((o7668$10 is lcoc_core.ISeqable$iface)){
return ((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}

// END areduce

// BEGIN aresize
dc.List aresize(dc.dynamic a$1, dc.dynamic from$1, dc.dynamic to$1, dc.dynamic pad$1, ){
final dc.List<dc.dynamic> a$PRIME_$1=(dc.List.filled((to$1 as dc.int), pad$1, ));
final dc.int n$8310_$AUTO_$1=(from$1 as dc.int);
dc.int i$1=0;
do {
if((i$1<n$8310_$AUTO_$1)){
final dc.dynamic v$8151_$AUTO_$1=((a$1 as dc.List)[i$1]);
a$PRIME_$1[i$1]=v$8151_$AUTO_$1;
i$1=(1+i$1);
continue;
}else{
}
break;
} while(true);
return a$PRIME_$1;
}

// END aresize

// BEGIN argument-error
dc.dynamic argument_error(dc.dynamic msg$1, ){
return dc.ArgumentError(msg$1, );
}

// END argument-error

// BEGIN as->
lcoc_core.IFn$iface as_$GT_=lcoc_core.as_$GT_ifn18695hm$1(null, );

// END as->

// BEGIN as_$GT_ifn18695hm$1
class as_$GT_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

as_$GT_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.as_$GT_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic expr$1, dc.dynamic name$1, dc.dynamic forms$1, ){
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(name$1, )), (lcoc_core.list.$_invoke$1(expr$1, )), (lcoc_core.interleave.$_invoke$2((lcoc_core.repeat.$_invoke$1(name$1, )), lcoc_core.butlast(forms$1, ), )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic o7668$2=forms$1;
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
late final dc.bool $if_$3;
if((($if_$2!=false)&&($if_$2!=null))){
$if_$3=false;
}else{
$if_$3=true;
}
late final dc.dynamic $if_$4;
if($if_$3){
$if_$4=name$1;
}else{
$if_$4=lcoc_core.last(forms$1, );
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$3(arg$1, $3, $2, ));
if((o7668$3 is lcoc_core.ISeqable$iface)){
return ((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END as_$GT_ifn18695hm$1

// BEGIN aset
lcoc_core.IFn$iface aset=lcoc_core.asetifn18695hm$1(null, );

// END aset

// BEGIN asetifn18695hm$1
class asetifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

asetifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.asetifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic array$1, dc.dynamic idx$1, dc.dynamic idx2$1, dc.dynamic idxv$1, ){
final dc.List array$2=(array$1 as dc.List);
final dc.int idx$2=(idx$1 as dc.int);
final dc.int idx2$2=(idx2$1 as dc.int);
return (lcoc_core.apply.$_invoke$4(lcoc_core.aset, (array$2[idx$2]), idx2$2, idxv$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic array$3, dc.dynamic idx$3, dc.dynamic val$1, ){
final dc.List array$4=(array$3 as dc.List);
final dc.int idx$4=(idx$3 as dc.int);
array$4[idx$4]=val$1;
return val$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END asetifn18695hm$1

// BEGIN ashrink
dc.List ashrink(dc.dynamic a$1, dc.dynamic to$1, ){
final dc.List<dc.dynamic> a$PRIME_$1=(dc.List<dc.dynamic>.filled((to$1 as dc.int), null, ));
final dc.int n$8310_$AUTO_$1=(to$1 as dc.int);
dc.int i$1=0;
do {
if((i$1<n$8310_$AUTO_$1)){
final dc.dynamic v$8151_$AUTO_$1=((a$1 as dc.List)[i$1]);
a$PRIME_$1[i$1]=v$8151_$AUTO_$1;
i$1=(1+i$1);
continue;
}else{
}
break;
} while(true);
return a$PRIME_$1;
}

// END ashrink

// BEGIN assert
lcoc_core.IFn$iface $assert_=lcoc_core.$assert_ifn18695hm$1(null, );

// END assert

// BEGIN assoc
lcoc_core.IFn$iface assoc=lcoc_core.associfn18695hm$1(null, );

// END assoc

// BEGIN assoc!
lcoc_core.IFn$iface assoc$BANG_=lcoc_core.assoc$BANG_ifn18695hm$1(null, );

// END assoc!

// BEGIN assoc$BANG_ifn18695hm$1
class assoc$BANG_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

assoc$BANG_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.assoc$BANG_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic coll$2, dc.dynamic key$2, dc.dynamic val$2, dc.dynamic kvs$2, ){
dc.dynamic coll$1=coll$2;
dc.dynamic key$1=key$2;
dc.dynamic val$1=val$2;
dc.dynamic kvs$1=kvs$2;
do {
final dc.dynamic tcoll7800$1=coll$1;
final dc.dynamic key7801$1=key$1;
final dc.dynamic val7802$1=val$1;
late final dc.dynamic ret$1;
if((tcoll7800$1 is lcoc_core.ITransientAssociative$iface)){
ret$1=((tcoll7800$1 as lcoc_core.ITransientAssociative$iface).$_assoc$BANG_$2(key7801$1, val7802$1, ));
}else{
ret$1=((lcoc_core.ITransientAssociative.extensions(tcoll7800$1, ) as lcoc_core.ITransientAssociative$ext).$_assoc$BANG_$2(tcoll7800$1, key7801$1, val7802$1, ));
}
if(((kvs$1!=false)&&(kvs$1!=null))){
coll$1=ret$1;
key$1=lcoc_core.first(kvs$1, );
val$1=lcoc_core.second(kvs$1, );
kvs$1=lcoc_core.nnext(kvs$1, );
continue;
}
return ret$1;
} while(true);
}

dc.dynamic $_invoke$3(dc.dynamic coll$3, dc.dynamic key$3, dc.dynamic val$3, ){
final dc.dynamic tcoll7800$2=coll$3;
final dc.dynamic key7801$2=key$3;
final dc.dynamic val7802$2=val$3;
if((tcoll7800$2 is lcoc_core.ITransientAssociative$iface)){
return ((tcoll7800$2 as lcoc_core.ITransientAssociative$iface).$_assoc$BANG_$2(key7801$2, val7802$2, ));
}
return ((lcoc_core.ITransientAssociative.extensions(tcoll7800$2, ) as lcoc_core.ITransientAssociative$ext).$_assoc$BANG_$2(tcoll7800$2, key7801$2, val7802$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END assoc$BANG_ifn18695hm$1

// BEGIN assoc-in
dc.dynamic assoc_in(dc.dynamic m$1, dc.dynamic p$8787_$1, dc.dynamic v$1, ){
final dc.dynamic vec$8788_$1=p$8787_$1;
final dc.dynamic o7668$1=vec$8788_$1;
late final dc.dynamic seq$8789_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
seq$8789_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8789_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic first$8790_$1=lcoc_core.first(seq$8789_$1, );
final dc.dynamic seq$8789_$2=lcoc_core.next(seq$8789_$1, );
final dc.dynamic k$1=first$8790_$1;
final dc.dynamic ks$1=seq$8789_$2;
if(((ks$1!=false)&&(ks$1!=null))){
final dc.dynamic coll7790$1=m$1;
final dc.dynamic k7791$1=k$1;
final dc.dynamic v7792$1=lcoc_core.assoc_in((lcoc_core.$get_.$_invoke$2(m$1, k$1, )), ks$1, v$1, );
if((coll7790$1 is lcoc_core.IAssociative$iface)){
return ((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, ));
}
final dc.dynamic coll7790$2=m$1;
final dc.dynamic k7791$2=k$1;
final dc.dynamic v7792$2=v$1;
if((coll7790$2 is lcoc_core.IAssociative$iface)){
return ((coll7790$2 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$2, v7792$2, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$2, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$2, k7791$2, v7792$2, ));
}

// END assoc-in

// BEGIN associative?
dc.bool associative$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.IAssociative.satisfies(x$1, )) as dc.bool);
}

// END associative?

// BEGIN associfn18695hm$1
class associfn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

associfn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.associfn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic map$2, dc.dynamic key$2, dc.dynamic val$2, dc.dynamic kvs$2, ){
dc.dynamic map$1=map$2;
dc.dynamic key$1=key$2;
dc.dynamic val$1=val$2;
dc.dynamic kvs$1=kvs$2;
do {
final dc.dynamic coll7790$1=map$1;
final dc.dynamic k7791$1=key$1;
final dc.dynamic v7792$1=val$1;
late final dc.dynamic ret$1;
if((coll7790$1 is lcoc_core.IAssociative$iface)){
ret$1=((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, ));
}else{
ret$1=((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, ));
}
if(((kvs$1!=false)&&(kvs$1!=null))){
final dc.dynamic test$1=lcoc_core.next(kvs$1, );
if(((test$1!=false)&&(test$1!=null))){
map$1=ret$1;
key$1=lcoc_core.first(kvs$1, );
val$1=lcoc_core.second(kvs$1, );
kvs$1=lcoc_core.nnext(kvs$1, );
continue;
}
throw dc.ArgumentError("assoc expects even number of arguments after map/vector, found odd number", );
}
return ret$1;
} while(true);
}

dc.dynamic $_invoke$3(dc.dynamic map$3, dc.dynamic key$3, dc.dynamic val$3, ){
final dc.dynamic coll7790$2=map$3;
final dc.dynamic k7791$2=key$3;
final dc.dynamic v7792$2=val$3;
if((coll7790$2 is lcoc_core.IAssociative$iface)){
return ((coll7790$2 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$2, v7792$2, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$2, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$2, k7791$2, v7792$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END associfn18695hm$1

// BEGIN atom
lcoc_core.IFn$iface atom=lcoc_core.atomifn18695hm$1(null, );

// END atom

// BEGIN atomifn18695hm$1
class atomifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

atomifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.atomifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic p$8887_$1, ){
final dc.dynamic o$1=p$8887_$1;
late final dc.dynamic o$2;
if(((lcoc_core.ISeq.satisfies(o$1, )) as dc.bool)){
final dc.dynamic o7668$12=o$1;
late final dc.dynamic $if_$11;
if((o7668$12 is lcoc_core.ISeqable$iface)){
$if_$11=((o7668$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7668$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$12, ));
}
o$2=lcoc_core.$_map_lit($if_$11, );
}else{
o$2=o$1;
}
final dc.dynamic meta$1=(lcoc_core.$get_.$_invoke$2(o$2, const lcoc_core.Keyword(null, "meta", 569132720, ), ));
final dc.dynamic validator$1=(lcoc_core.$get_.$_invoke$2(o$2, const lcoc_core.Keyword(null, "validator", 3753690768, ), ));
final dc.bool or$7573_$AUTO_$1=(null==meta$1);
late final dc.bool $if_$12;
if(or$7573_$AUTO_$1){
$if_$12=or$7573_$AUTO_$1;
}else{
$if_$12=lcoc_core.map$QMARK_(meta$1, );
}
if($if_$12){
}else{
throw dc.Exception("meta must satisfies IMap.", );
}
if(((validator$1!=false)&&(validator$1!=null))){
lcoc_core.validate_atom_state(validator$1, x$1, );
}else{
}
return lcoc_core.Atom(x$1, meta$1, validator$1, lcoc_core.$_EMPTY_MAP, );
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
return lcoc_core.Atom(x$2, null, null, lcoc_core.$_EMPTY_MAP, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END atomifn18695hm$1

// BEGIN await
dc.dynamic $await_(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic expr$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "bindings__9185__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-DYNAMIC-BINDINGS", )), )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "try", )), ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("dart", "await", )), )), (lcoc_core.list.$_invoke$1(expr$1, )), ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "finally", )), ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "set!", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-DYNAMIC-BINDINGS", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "bindings__9185__auto__", )), )), ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$2(arg$1, $2, ));
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$3(arg$2, $4, $3, ));
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$3(arg$3, $6, $5, ));
if((o7668$6 is lcoc_core.ISeqable$iface)){
return ((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}

// END await

// BEGIN binding
lcoc_core.IFn$iface binding=lcoc_core.bindingifn18695hm$1(null, );

// END binding

// BEGIN bindingifn18695hm$1
class bindingifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

bindingifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.bindingifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic body$1, ){
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "prev-bindings__9179__auto__", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "push-dynamic-bindings", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.into.$_invoke$3(lcoc_core.$_EMPTY_MAP, (lcoc_core.map.$_invoke$1((dc.dynamic p$9181_$1, ){
final dc.dynamic vec$9182_$1=p$9181_$1;
final dc.dynamic sym$1=(lcoc_core.nth.$_invoke$3(vec$9182_$1, 0, null, ));
final dc.dynamic v$1=(lcoc_core.nth.$_invoke$3(vec$9182_$1, 1, null, ));
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, (lcoc_core.list.$_invoke$2((lcoc_core.symbol.$_invoke$2(null, "var", )), sym$1, )), ));
fl$1[1]=v$1;
return lcoc_core.$_vec_owning(fl$1, );
}, )), (lcoc_core.partition.$_invoke$2(2, bindings$1, )), )), )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$2(arg$1, $1, ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "try", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "finally", )), ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "restore-dynamic-bindings", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "prev-bindings__9179__auto__", )), )), ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$2(arg$2, $3, ));
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$3(arg$3, body$1, $4, ));
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$3(arg$4, $6, $5, ));
if((o7668$6 is lcoc_core.ISeqable$iface)){
return ((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END bindingifn18695hm$1

// BEGIN bit-and
lcoc_core.IFn$iface bit_and=lcoc_core.bit_andifn18695hm$1(null, );

// END bit-and

// BEGIN bit-and-not
lcoc_core.IFn$iface bit_and_not=lcoc_core.bit_and_notifn18695hm$1(null, );

// END bit-and-not

// BEGIN bit-clear
dc.int bit_clear(dc.dynamic x$1, dc.dynamic n$1, ){
return ((x$1 as dc.int)&(~(1<<((n$1 as dc.int)&63))));
}

// END bit-clear

// BEGIN bit-flip
dc.int bit_flip(dc.dynamic x$1, dc.dynamic n$1, ){
return ((x$1 as dc.int)^(1<<((n$1 as dc.int)&63)));
}

// END bit-flip

// BEGIN bit-not
dc.int bit_not(dc.dynamic x$1, ){
return (~(x$1 as dc.int));
}

// END bit-not

// BEGIN bit-or
lcoc_core.IFn$iface bit_or=lcoc_core.bit_orifn18695hm$1(null, );

// END bit-or

// BEGIN bit-set
dc.int bit_set(dc.dynamic x$1, dc.dynamic n$1, ){
return ((x$1 as dc.int)|(1<<((n$1 as dc.int)&63)));
}

// END bit-set

// BEGIN bit-shift-left
dc.int bit_shift_left(dc.dynamic x$1, dc.dynamic n$1, ){
return ((x$1 as dc.int)<<((n$1 as dc.int)&63));
}

// END bit-shift-left

// BEGIN bit-shift-right
dc.int bit_shift_right(dc.dynamic x$1, dc.dynamic n$1, ){
return ((x$1 as dc.int)>>((n$1 as dc.int)&63));
}

// END bit-shift-right

// BEGIN bit-test
dc.bool bit_test(dc.dynamic x$1, dc.dynamic n$1, ){
return ((x$1 as dc.int)>>((n$1 as dc.int)&63)).isOdd;
}

// END bit-test

// BEGIN bit-xor
lcoc_core.IFn$iface bit_xor=lcoc_core.bit_xorifn18695hm$1(null, );

// END bit-xor

// BEGIN bit_and_notifn18695hm$1
class bit_and_notifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

bit_and_notifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.bit_and_notifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic coll7722$1=more$1;
final lcoc_core.IFn$iface f7723$1=lcoc_core.bit_and_not;
final dc.int start7724$1=((x$1 as dc.int)&(~(y$1 as dc.int)));
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$2, dc.dynamic y$2, ){
return ((x$2 as dc.int)&(~(y$2 as dc.int)));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END bit_and_notifn18695hm$1

// BEGIN bit_andifn18695hm$1
class bit_andifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

bit_andifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.bit_andifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic coll7722$1=more$1;
final lcoc_core.IFn$iface f7723$1=lcoc_core.bit_and;
final dc.int start7724$1=((x$1 as dc.int)&(y$1 as dc.int));
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$2, dc.dynamic y$2, ){
return ((x$2 as dc.int)&(y$2 as dc.int));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END bit_andifn18695hm$1

// BEGIN bit_orifn18695hm$1
class bit_orifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

bit_orifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.bit_orifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic coll7722$1=more$1;
final lcoc_core.IFn$iface f7723$1=lcoc_core.bit_or;
final dc.int start7724$1=((x$1 as dc.int)|(y$1 as dc.int));
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$2, dc.dynamic y$2, ){
return ((x$2 as dc.int)|(y$2 as dc.int));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END bit_orifn18695hm$1

// BEGIN bit_xorifn18695hm$1
class bit_xorifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

bit_xorifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.bit_xorifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic coll7722$1=more$1;
final lcoc_core.IFn$iface f7723$1=lcoc_core.bit_xor;
final dc.int start7724$1=((x$1 as dc.int)^(y$1 as dc.int));
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$2, dc.dynamic y$2, ){
return ((x$2 as dc.int)^(y$2 as dc.int));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END bit_xorifn18695hm$1

// BEGIN boolean
dc.bool boolean(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=(null==x$1);
late final dc.bool $if_$1;
if(or$7573_$AUTO_$1){
$if_$1=or$7573_$AUTO_$1;
}else{
$if_$1=dc.identical(x$1, false, );
}
if($if_$1){
return false;
}
return true;
}

// END boolean

// BEGIN boolean-array
lcoc_core.IFn$iface boolean_array=lcoc_core.boolean_arrayifn18695hm$1(null, );

// END boolean-array

// BEGIN boolean?
dc.bool boolean$QMARK_(dc.dynamic x$1, ){
return (x$1 is dc.bool);
}

// END boolean?

// BEGIN boolean_arrayifn18695hm$1
class boolean_arrayifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

boolean_arrayifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.boolean_arrayifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic size_or_seq$1, ){
if((size_or_seq$1 is dc.int)){
return (dc.List<dc.bool>.filled((size_or_seq$1 as dc.int), false, ));
}
return (dc.List<dc.bool>.from((size_or_seq$1 as dc.Iterable<dc.dynamic>), growable: false, ));
}

dc.dynamic $_invoke$2(dc.dynamic size$1, dc.dynamic init_val_or_seq$1, ){
if(((lcoc_core.ISeq.satisfies(init_val_or_seq$1, )) as dc.bool)){
final dc.List<dc.bool> a$8174_$AUTO_$1=(dc.List<dc.bool>.filled((size$1 as dc.int), false, ));
dc.dynamic i$8175_$AUTO_$1=0;
final dc.dynamic o7668$1=init_val_or_seq$1;
dc.dynamic s$8176_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
s$8176_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$8176_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
do {
final dc.dynamic and$7533_$AUTO_$1=s$8176_$AUTO_$1;
late final dc.dynamic $if_$1;
if(((and$7533_$AUTO_$1!=false)&&(and$7533_$AUTO_$1!=null))){
$if_$1=((i$8175_$AUTO_$1 as dc.num)<(size$1 as dc.num));
}else{
$if_$1=and$7533_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
final dc.dynamic v$8151_$AUTO_$1=lcoc_core.first(s$8176_$AUTO_$1, );
a$8174_$AUTO_$1[(i$8175_$AUTO_$1 as dc.int)]=(v$8151_$AUTO_$1 as dc.bool);
i$8175_$AUTO_$1=(1+(i$8175_$AUTO_$1 as dc.num));
s$8176_$AUTO_$1=lcoc_core.next(s$8176_$AUTO_$1, );
continue;
}
return a$8174_$AUTO_$1;
} while(true);
}
return (dc.List<dc.bool>.filled((size$1 as dc.int), (init_val_or_seq$1 as dc.bool), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END boolean_arrayifn18695hm$1

// BEGIN booleans
dc.List<dc.bool> booleans(dc.dynamic xs$1, ){
return ((xs$1 as dc.List).cast<dc.bool>());
}

// END booleans

// BEGIN bounded-count
dc.int bounded_count(dc.dynamic n$1, dc.dynamic coll$1, ){
if(lcoc_core.counted$QMARK_(coll$1, )){
final dc.dynamic coll7742$1=coll$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
return (((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}
return (((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
dc.int i$1=0;
final dc.dynamic o7668$1=coll$1;
dc.dynamic s$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
s$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
do {
final dc.dynamic and$7533_$AUTO_$1=s$1;
late final dc.dynamic $if_$1;
if(((and$7533_$AUTO_$1!=false)&&(and$7533_$AUTO_$1!=null))){
$if_$1=(i$1<(n$1 as dc.num));
}else{
$if_$1=and$7533_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
i$1=(1+i$1);
s$1=lcoc_core.next(s$1, );
continue;
}
return i$1;
} while(true);
}

// END bounded-count

// BEGIN butlast
dc.dynamic butlast(dc.dynamic s$1, ){
dc.dynamic ret$1=lcoc_core.$_EMPTY_VECTOR;
dc.dynamic s$2=s$1;
do {
final dc.dynamic test$1=lcoc_core.next(s$2, );
if(((test$1!=false)&&(test$1!=null))){
final dc.dynamic coll7707$1=ret$1;
final dc.dynamic o7708$1=lcoc_core.first(s$2, );
if((coll7707$1 is lcoc_core.ICollection$iface)){
ret$1=((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}else{
ret$1=((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
}
s$2=lcoc_core.next(s$2, );
continue;
}
final dc.dynamic o7668$1=ret$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
} while(true);
}

// END butlast

// BEGIN call-to
dc.dynamic call_to(dc.dynamic f$1, ){
final lcoc_core.call_toReify18695hm$1 f$2=lcoc_core.call_toReify18695hm$1(null, f$1, );
return f$2;
}

// END call-to

// BEGIN call_toReify18695hm$1
class call_toReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final f$1;

call_toReify18695hm$1(this.meta$1, this.f$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.call_toReify18695hm$1(m$2395_$AUTO_$1, f$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic args$1, ){
return lcoc_core.cons(f$1, args$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END call_toReify18695hm$1

// BEGIN case
lcoc_core.IFn$iface $case_=lcoc_core.$case_ifn18695hm$1(null, );

// END case

// BEGIN cat
dc.dynamic cat(dc.dynamic rf$1, ){
final dc.dynamic rrf$1=lcoc_core.preserving_reduced(rf$1, );
final lcoc_core.catReify18695hm$1 f$1=lcoc_core.catReify18695hm$1(null, rf$1, rrf$1, );
return f$1;
}

// END cat

// BEGIN catReify18695hm$1
class catReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final dc.dynamic rrf$1;

catReify18695hm$1(this.meta$1, this.rf$1, this.rrf$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.catReify18695hm$1(m$2395_$AUTO_$1, rf$1, rrf$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final dc.dynamic coll7722$1=input$1;
final dc.dynamic f7723$1=rrf$1;
final dc.dynamic start7724$1=result$2;
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END catReify18695hm$1

// BEGIN char
dc.String char(dc.dynamic x$1, ){
if((x$1 is dc.String)){
return ((x$1 as dc.String)[0]);
}
return (dc.String.fromCharCode((x$1 as dc.int), ));
}

// END char

// BEGIN chunk
dc.dynamic chunk(dc.dynamic b$1, ){
return ((b$1 as lcoc_core.ChunkBuffer).chunk());
}

// END chunk

// BEGIN chunk-append
dc.dynamic chunk_append(dc.dynamic b$1, dc.dynamic x$1, ){
return ((b$1 as lcoc_core.ChunkBuffer).add(x$1, ));
}

// END chunk-append

// BEGIN chunk-buffer
lcoc_core.ChunkBuffer chunk_buffer(dc.dynamic capacity$1, ){
return lcoc_core.ChunkBuffer((dc.List<dc.dynamic>.filled((capacity$1 as dc.int), null, )), 0, );
}

// END chunk-buffer

// BEGIN chunk-cons
dc.dynamic chunk_cons(dc.dynamic chunk$1, dc.dynamic rest$1, ){
final dc.dynamic coll7742$1=chunk$1;
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final dc.bool $1=(0<cast$1);
if($1){
return lcoc_core.ChunkedCons(chunk$1, rest$1, null, -1, );
}
return rest$1;
}

// END chunk-cons

// BEGIN chunk-first
dc.dynamic chunk_first(dc.dynamic s$1, ){
final dc.dynamic coll7761$1=s$1;
if((coll7761$1 is lcoc_core.IChunkedSeq$iface)){
return ((coll7761$1 as lcoc_core.IChunkedSeq$iface).$_chunked_first$0());
}
return ((lcoc_core.IChunkedSeq.extensions(coll7761$1, ) as lcoc_core.IChunkedSeq$ext).$_chunked_first$0(coll7761$1, ));
}

// END chunk-first

// BEGIN chunk-next
dc.dynamic chunk_next(dc.dynamic s$1, ){
final dc.dynamic coll7771$1=s$1;
if((coll7771$1 is lcoc_core.IChunkedSeq$iface)){
return ((coll7771$1 as lcoc_core.IChunkedSeq$iface).$_chunked_next$0());
}
return ((lcoc_core.IChunkedSeq.extensions(coll7771$1, ) as lcoc_core.IChunkedSeq$ext).$_chunked_next$0(coll7771$1, ));
}

// END chunk-next

// BEGIN chunk-reduce
dc.dynamic chunk_reduce(dc.dynamic f$1, dc.dynamic val$1, dc.dynamic coll$1, ){
final dc.dynamic coll7754$1=coll$1;
final dc.dynamic f7755$1=f$1;
final dc.dynamic init7756$1=val$1;
if((coll7754$1 is lcoc_core.IChunk$iface)){
return ((coll7754$1 as lcoc_core.IChunk$iface).$_chunk_reduce$2(f7755$1, init7756$1, ));
}
return ((lcoc_core.IChunk.extensions(coll7754$1, ) as lcoc_core.IChunk$ext).$_chunk_reduce$2(coll7754$1, f7755$1, init7756$1, ));
}

// END chunk-reduce

// BEGIN chunk-rest
dc.dynamic chunk_rest(dc.dynamic s$1, ){
final dc.dynamic coll7766$1=s$1;
if((coll7766$1 is lcoc_core.IChunkedSeq$iface)){
return ((coll7766$1 as lcoc_core.IChunkedSeq$iface).$_chunked_rest$0());
}
return ((lcoc_core.IChunkedSeq.extensions(coll7766$1, ) as lcoc_core.IChunkedSeq$ext).$_chunked_rest$0(coll7766$1, ));
}

// END chunk-rest

// BEGIN chunked-iterator-seq
lcoc_core.IFn$iface chunked_iterator_seq=lcoc_core.chunked_iterator_seqifn18695hm$1(null, );

// END chunked-iterator-seq

// BEGIN chunked-seq?
dc.bool chunked_seq$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.IChunkedSeq.satisfies(x$1, )) as dc.bool);
}

// END chunked-seq?

// BEGIN chunked_iterator_seqifn18695hm$1
class chunked_iterator_seqifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

chunked_iterator_seqifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.chunked_iterator_seqifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic iter$1, ){
final dc.Iterator iter$2=(iter$1 as dc.Iterator);
return (lcoc_core.chunked_iterator_seq.$_invoke$2(iter$2, 32, ));
}

dc.dynamic $_invoke$2(dc.dynamic iter$3, dc.dynamic chunk_size$1, ){
final dc.Iterator iter$4=(iter$3 as dc.Iterator);
final dc.int chunk_size$2=(chunk_size$1 as dc.int);
if((iter$4.moveNext())){
return lcoc_core.LazySeq(null, ((){
final lcoc_core.ChunkBuffer buf$1=lcoc_core.chunk_buffer(chunk_size$2, );
lcoc_core.chunk_append(buf$1, iter$4.current, );
dc.int rem$1=(chunk_size$2-1);
do {
final dc.bool and$7533_$AUTO_$1=(0<rem$1);
late final dc.bool $if_$1;
if(and$7533_$AUTO_$1){
$if_$1=(iter$4.moveNext());
}else{
$if_$1=and$7533_$AUTO_$1;
}
if($if_$1){
lcoc_core.chunk_append(buf$1, iter$4.current, );
rem$1=(rem$1-1);
continue;
}else{
}
break;
} while(true);
return lcoc_core.chunk_cons(lcoc_core.chunk(buf$1, ), (lcoc_core.chunked_iterator_seq.$_invoke$2(iter$4, chunk_size$2, )), );
} as dc.dynamic?), null, -1, );
}
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END chunked_iterator_seqifn18695hm$1

// BEGIN coll?
dc.bool coll$QMARK_(dc.dynamic x$1, ){
if((null==x$1)){
return false;
}
return ((lcoc_core.ICollection.satisfies(x$1, )) as dc.bool);
}

// END coll?

// BEGIN comment
lcoc_core.IFn$iface comment=lcoc_core.commentifn18695hm$1(null, );

// END comment

// BEGIN commentifn18695hm$1
class commentifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

commentifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.commentifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic body$1, ){
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END commentifn18695hm$1

// BEGIN comp
lcoc_core.IFn$iface comp=lcoc_core.compifn18695hm$1(null, );

// END comp

// BEGIN compReify18695hm$1
class compReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final f$3;
final g$2;

compReify18695hm$1(this.meta$1, this.f$3, this.g$2, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.compReify18695hm$1(m$2395_$AUTO_$1, f$3, g$2, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic z$1, dc.dynamic args$1, ){
final dc.dynamic arg$1=(lcoc_core.apply.$_invoke$5(g$2, x$1, y$1, z$1, args$1, ));
if((f$3 is dc.Function)){
return (f$3 as dc.Function)(arg$1, );
}
if((f$3 is lcoc_core.IFn$iface)){
return ((f$3 as lcoc_core.IFn$iface).$_invoke$1(arg$1, ));
}
return (lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, arg$1, ));
}

dc.dynamic $_invoke$0(){
late final dc.dynamic $if_$9;
if((g$2 is dc.Function)){
$if_$9=(g$2 as dc.Function)();
}else if((g$2 is lcoc_core.IFn$iface)){
$if_$9=((g$2 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$9=(lcoc_core.IFn.extensions(g$2, ).$_invoke$0(g$2, ));
}
if((f$3 is dc.Function)){
return (f$3 as dc.Function)($if_$9, );
}
if((f$3 is lcoc_core.IFn$iface)){
return ((f$3 as lcoc_core.IFn$iface).$_invoke$1($if_$9, ));
}
return (lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, $if_$9, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
late final dc.dynamic $if_$10;
if((g$2 is dc.Function)){
$if_$10=(g$2 as dc.Function)(x$2, );
}else if((g$2 is lcoc_core.IFn$iface)){
$if_$10=((g$2 as lcoc_core.IFn$iface).$_invoke$1(x$2, ));
}else{
$if_$10=(lcoc_core.IFn.extensions(g$2, ).$_invoke$1(g$2, x$2, ));
}
if((f$3 is dc.Function)){
return (f$3 as dc.Function)($if_$10, );
}
if((f$3 is lcoc_core.IFn$iface)){
return ((f$3 as lcoc_core.IFn$iface).$_invoke$1($if_$10, ));
}
return (lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, $if_$10, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
late final dc.dynamic $if_$11;
if((g$2 is dc.Function)){
$if_$11=(g$2 as dc.Function)(x$3, y$2, );
}else if((g$2 is lcoc_core.IFn$iface)){
$if_$11=((g$2 as lcoc_core.IFn$iface).$_invoke$2(x$3, y$2, ));
}else{
$if_$11=(lcoc_core.IFn.extensions(g$2, ).$_invoke$2(g$2, x$3, y$2, ));
}
if((f$3 is dc.Function)){
return (f$3 as dc.Function)($if_$11, );
}
if((f$3 is lcoc_core.IFn$iface)){
return ((f$3 as lcoc_core.IFn$iface).$_invoke$1($if_$11, ));
}
return (lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, $if_$11, ));
}

dc.dynamic $_invoke$3(dc.dynamic x$4, dc.dynamic y$3, dc.dynamic z$2, ){
late final dc.dynamic $if_$12;
if((g$2 is dc.Function)){
$if_$12=(g$2 as dc.Function)(x$4, y$3, z$2, );
}else if((g$2 is lcoc_core.IFn$iface)){
$if_$12=((g$2 as lcoc_core.IFn$iface).$_invoke$3(x$4, y$3, z$2, ));
}else{
$if_$12=(lcoc_core.IFn.extensions(g$2, ).$_invoke$3(g$2, x$4, y$3, z$2, ));
}
if((f$3 is dc.Function)){
return (f$3 as dc.Function)($if_$12, );
}
if((f$3 is lcoc_core.IFn$iface)){
return ((f$3 as lcoc_core.IFn$iface).$_invoke$1($if_$12, ));
}
return (lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, $if_$12, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END compReify18695hm$1

// BEGIN compare
dc.int compare(dc.dynamic x$1, dc.dynamic y$1, ){
if(dc.identical(x$1, y$1, )){
return 0;
}
if((null==x$1)){
return -1;
}
if((null==y$1)){
return 1;
}
if((x$1 is dc.Comparable)){
return ((x$1 as dc.Comparable).compareTo(y$1, ));
}
final dc.dynamic o8288$1=x$1;
final dc.dynamic other8289$1=y$1;
if((o8288$1 is lcoc_core.IComparable$iface)){
return ((o8288$1 as lcoc_core.IComparable$iface).$_compare$1(other8289$1, ));
}
return ((lcoc_core.IComparable.extensions(o8288$1, ) as lcoc_core.IComparable$ext).$_compare$1(o8288$1, other8289$1, ));
}

// END compare

// BEGIN compare-and-set!
dc.bool compare_and_set$BANG_(dc.dynamic a$1, dc.dynamic oldval$1, dc.dynamic newval$1, ){
final dc.dynamic o7717$1=a$1;
late final dc.dynamic $if_$1;
if((o7717$1 is lcoc_core.IDeref$iface)){
$if_$1=((o7717$1 as lcoc_core.IDeref$iface).$_deref$0());
}else{
$if_$1=((lcoc_core.IDeref.extensions(o7717$1, ) as lcoc_core.IDeref$ext).$_deref$0(o7717$1, ));
}
final dc.bool $1=(lcoc_core.$EQ_.$_invoke$2($if_$1, oldval$1, ));
if($1){
lcoc_core.reset$BANG_(a$1, newval$1, );
return true;
}
return false;
}

// END compare-and-set!

// BEGIN compare-indexed
dc.int compare_indexed(dc.dynamic x$1, dc.dynamic y$1, ){
final dc.dynamic coll7742$1=x$1;
late final dc.dynamic cntx$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cntx$1=((coll7742$1 as lcoc_core.ICounted$iface).$_count$0());
}else{
cntx$1=((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, ));
}
final dc.dynamic coll7742$2=y$1;
late final dc.dynamic cnty$1;
if((coll7742$2 is lcoc_core.ICounted$iface)){
cnty$1=((coll7742$2 as lcoc_core.ICounted$iface).$_count$0());
}else{
cnty$1=((lcoc_core.ICounted.extensions(coll7742$2, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$2, ));
}
if(((cntx$1 as dc.num)<(cnty$1 as dc.num))){
return -1;
}
if(((cnty$1 as dc.num)<(cntx$1 as dc.num))){
return 1;
}
dc.int idx$1=0;
do {
if((idx$1<(cntx$1 as dc.num))){
final dc.dynamic coll7829$1=x$1;
final dc.int n7830$1=idx$1;
late final dc.dynamic $if_$2;
if((coll7829$1 is lcoc_core.IIndexed$iface)){
$if_$2=((coll7829$1 as lcoc_core.IIndexed$iface).$_nth$1(n7830$1, ));
}else{
$if_$2=((lcoc_core.IIndexed.extensions(coll7829$1, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$1, n7830$1, ));
}
final dc.dynamic coll7829$2=y$1;
final dc.int n7830$2=idx$1;
late final dc.dynamic $if_$1;
if((coll7829$2 is lcoc_core.IIndexed$iface)){
$if_$1=((coll7829$2 as lcoc_core.IIndexed$iface).$_nth$1(n7830$2, ));
}else{
$if_$1=((lcoc_core.IIndexed.extensions(coll7829$2, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$2, n7830$2, ));
}
final dc.int c$1=lcoc_core.compare($if_$2, $if_$1, );
if((0==c$1)){
idx$1=(1+idx$1);
continue;
}
return c$1;
}
return 0;
} while(true);
}

// END compare-indexed

// BEGIN compifn18695hm$1
class compifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

compifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.compifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic g$1, dc.dynamic fs$1, ){
final dc.dynamic coll7722$1=lcoc_core.cons(g$1, fs$1, );
final lcoc_core.IFn$iface f7723$1=lcoc_core.comp;
final dc.dynamic start7724$1=f$1;
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_invoke$0(){
return lcoc_core.identity;
}

dc.dynamic $_invoke$1(dc.dynamic f$2, ){
return f$2;
}

dc.dynamic $_invoke$2(dc.dynamic f$3, dc.dynamic g$2, ){
final lcoc_core.compReify18695hm$1 f$4=lcoc_core.compReify18695hm$1(null, f$3, g$2, );
return f$4;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END compifn18695hm$1

// BEGIN complement
dc.dynamic complement(dc.dynamic f$1, ){
final lcoc_core.complementReify18695hm$1 f$2=lcoc_core.complementReify18695hm$1(null, f$1, );
return f$2;
}

// END complement

// BEGIN complementReify18695hm$1
class complementReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final f$1;

complementReify18695hm$1(this.meta$1, this.f$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.complementReify18695hm$1(m$2395_$AUTO_$1, f$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic zs$1, ){
final dc.dynamic test$1=(lcoc_core.apply.$_invoke$4(f$1, x$1, y$1, zs$1, ));
if(((test$1!=false)&&(test$1!=null))){
return false;
}
return true;
}

dc.dynamic $_invoke$0(){
late final dc.dynamic $if_$1;
if((f$1 is dc.Function)){
$if_$1=(f$1 as dc.Function)();
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$1=((f$1 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$0(f$1, ));
}
if((($if_$1!=false)&&($if_$1!=null))){
return false;
}
return true;
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
late final dc.dynamic $if_$2;
if((f$1 is dc.Function)){
$if_$2=(f$1 as dc.Function)(x$2, );
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$2=((f$1 as lcoc_core.IFn$iface).$_invoke$1(x$2, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(f$1, ).$_invoke$1(f$1, x$2, ));
}
if((($if_$2!=false)&&($if_$2!=null))){
return false;
}
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
late final dc.dynamic $if_$3;
if((f$1 is dc.Function)){
$if_$3=(f$1 as dc.Function)(x$3, y$2, );
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$3=((f$1 as lcoc_core.IFn$iface).$_invoke$2(x$3, y$2, ));
}else{
$if_$3=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, x$3, y$2, ));
}
if((($if_$3!=false)&&($if_$3!=null))){
return false;
}
return true;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END complementReify18695hm$1

// BEGIN completing
lcoc_core.IFn$iface completing=lcoc_core.completingifn18695hm$1(null, );

// END completing

// BEGIN completingReify18695hm$1
class completingReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final f$2;
final cf$1;

completingReify18695hm$1(this.meta$1, this.f$2, this.cf$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.completingReify18695hm$1(m$2395_$AUTO_$1, f$2, cf$1, );
}

dc.dynamic $_invoke$0(){
if((f$2 is dc.Function)){
return (f$2 as dc.Function)();
}
if((f$2 is lcoc_core.IFn$iface)){
return ((f$2 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(f$2, ).$_invoke$0(f$2, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$1, ){
if((cf$1 is dc.Function)){
return (cf$1 as dc.Function)(x$1, );
}
if((cf$1 is lcoc_core.IFn$iface)){
return ((cf$1 as lcoc_core.IFn$iface).$_invoke$1(x$1, ));
}
return (lcoc_core.IFn.extensions(cf$1, ).$_invoke$1(cf$1, x$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$2, dc.dynamic y$1, ){
if((f$2 is dc.Function)){
return (f$2 as dc.Function)(x$2, y$1, );
}
if((f$2 is lcoc_core.IFn$iface)){
return ((f$2 as lcoc_core.IFn$iface).$_invoke$2(x$2, y$1, ));
}
return (lcoc_core.IFn.extensions(f$2, ).$_invoke$2(f$2, x$2, y$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END completingReify18695hm$1

// BEGIN completingifn18695hm$1
class completingifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

completingifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.completingifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$1(dc.dynamic f$1, ){
return (lcoc_core.completing.$_invoke$2(f$1, lcoc_core.identity, ));
}

dc.dynamic $_invoke$2(dc.dynamic f$2, dc.dynamic cf$1, ){
final lcoc_core.completingReify18695hm$1 f$3=lcoc_core.completingReify18695hm$1(null, f$2, cf$1, );
return f$3;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END completingifn18695hm$1

// BEGIN concat
lcoc_core.IFn$iface concat=lcoc_core.concatifn18695hm$1(null, );

// END concat

// BEGIN concatifn18695hm$1
class concatifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

concatifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.concatifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic zs$1, ){
lcoc_core.LazySeq cat$1(dc.dynamic xys$1, dc.dynamic zs$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$1=xys$1;
late final dc.dynamic xys$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
xys$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
xys$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if(((xys$2!=false)&&(xys$2!=null))){
if(lcoc_core.chunked_seq$QMARK_(xys$2, )){
return lcoc_core.chunk_cons(lcoc_core.chunk_first(xys$2, ), cat$1(lcoc_core.chunk_rest(xys$2, ), zs$2, ), );
}
return lcoc_core.cons(lcoc_core.first(xys$2, ), cat$1(lcoc_core.rest(xys$2, ), zs$2, ), );
}
if(((zs$2!=false)&&(zs$2!=null))){
return cat$1(lcoc_core.first(zs$2, ), lcoc_core.next(zs$2, ), );
}
return null;
} as dc.dynamic?), null, -1, );
}
final lcoc_core.LazySeq Function(dc.dynamic, dc.dynamic, ) cat$2=cat$1;
return cat$2((lcoc_core.concat.$_invoke$2(x$1, y$1, )), zs$1, );
}

dc.dynamic $_invoke$0(){
return lcoc_core.LazySeq(null, ((){
return null;
} as dc.dynamic?), null, -1, );
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
return lcoc_core.LazySeq(null, ((){
return x$2;
} as dc.dynamic?), null, -1, );
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$2=x$3;
late final dc.dynamic s$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
s$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
if(((s$1!=false)&&(s$1!=null))){
if(lcoc_core.chunked_seq$QMARK_(s$1, )){
return lcoc_core.chunk_cons(lcoc_core.chunk_first(s$1, ), (lcoc_core.concat.$_invoke$2(lcoc_core.chunk_rest(s$1, ), y$2, )), );
}
return lcoc_core.cons(lcoc_core.first(s$1, ), (lcoc_core.concat.$_invoke$2(lcoc_core.rest(s$1, ), y$2, )), );
}
return y$2;
} as dc.dynamic?), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END concatifn18695hm$1

// BEGIN cond
lcoc_core.IFn$iface cond=lcoc_core.condifn18695hm$1(null, );

// END cond

// BEGIN cond->
lcoc_core.IFn$iface cond_$GT_=lcoc_core.cond_$GT_ifn18695hm$1(null, );

// END cond->

// BEGIN cond->>
lcoc_core.IFn$iface cond_$GT_$GT_=lcoc_core.cond_$GT_$GT_ifn18695hm$1(null, );

// END cond->>

// BEGIN cond_$GT_$GT_ifn18695hm$1
class cond_$GT_$GT_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

cond_$GT_$GT_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.cond_$GT_$GT_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic expr$1, dc.dynamic clauses$1, ){
late final dc.dynamic g$1;
if((lcoc_core.gensym is dc.Function)){
g$1=(lcoc_core.gensym as dc.Function)();
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
g$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$0());
}else{
g$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$0(lcoc_core.gensym, ));
}
final dc.dynamic steps$1=(lcoc_core.map.$_invoke$2((dc.dynamic p$8714_$1, ){
final dc.dynamic vec$8715_$1=p$8714_$1;
final dc.dynamic test$1=(lcoc_core.nth.$_invoke$3(vec$8715_$1, 0, null, ));
final dc.dynamic step$1=(lcoc_core.nth.$_invoke$3(vec$8715_$1, 1, null, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(test$1, ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "->>", )), )), (lcoc_core.list.$_invoke$1(g$1, )), (lcoc_core.list.$_invoke$1(step$1, )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$4(arg$2, arg$1, $1, (lcoc_core.list.$_invoke$1(g$1, )), ));
if((o7668$2 is lcoc_core.ISeqable$iface)){
return ((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}, (lcoc_core.partition.$_invoke$2(2, clauses$1, )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(g$1, )), (lcoc_core.list.$_invoke$1(expr$1, )), (lcoc_core.interleave.$_invoke$2((lcoc_core.repeat.$_invoke$1(g$1, )), lcoc_core.butlast(steps$1, ), )), ));
late final dc.dynamic $if_$2;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7668$4=steps$1;
late final dc.dynamic $if_$3;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
late final dc.bool $if_$4;
if((($if_$3!=false)&&($if_$3!=null))){
$if_$4=false;
}else{
$if_$4=true;
}
late final dc.dynamic $if_$5;
if($if_$4){
$if_$5=g$1;
}else{
$if_$5=lcoc_core.last(steps$1, );
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$3(arg$3, $4, $3, ));
if((o7668$5 is lcoc_core.ISeqable$iface)){
return ((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END cond_$GT_$GT_ifn18695hm$1

// BEGIN cond_$GT_ifn18695hm$1
class cond_$GT_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

cond_$GT_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.cond_$GT_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic expr$1, dc.dynamic clauses$1, ){
late final dc.dynamic g$1;
if((lcoc_core.gensym is dc.Function)){
g$1=(lcoc_core.gensym as dc.Function)();
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
g$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$0());
}else{
g$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$0(lcoc_core.gensym, ));
}
final dc.dynamic steps$1=(lcoc_core.map.$_invoke$2((dc.dynamic p$8709_$1, ){
final dc.dynamic vec$8710_$1=p$8709_$1;
final dc.dynamic test$1=(lcoc_core.nth.$_invoke$3(vec$8710_$1, 0, null, ));
final dc.dynamic step$1=(lcoc_core.nth.$_invoke$3(vec$8710_$1, 1, null, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(test$1, ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "->", )), )), (lcoc_core.list.$_invoke$1(g$1, )), (lcoc_core.list.$_invoke$1(step$1, )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$4(arg$2, arg$1, $1, (lcoc_core.list.$_invoke$1(g$1, )), ));
if((o7668$2 is lcoc_core.ISeqable$iface)){
return ((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}, (lcoc_core.partition.$_invoke$2(2, clauses$1, )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(g$1, )), (lcoc_core.list.$_invoke$1(expr$1, )), (lcoc_core.interleave.$_invoke$2((lcoc_core.repeat.$_invoke$1(g$1, )), lcoc_core.butlast(steps$1, ), )), ));
late final dc.dynamic $if_$2;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7668$4=steps$1;
late final dc.dynamic $if_$3;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
late final dc.bool $if_$4;
if((($if_$3!=false)&&($if_$3!=null))){
$if_$4=false;
}else{
$if_$4=true;
}
late final dc.dynamic $if_$5;
if($if_$4){
$if_$5=g$1;
}else{
$if_$5=lcoc_core.last(steps$1, );
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$3(arg$3, $4, $3, ));
if((o7668$5 is lcoc_core.ISeqable$iface)){
return ((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END cond_$GT_ifn18695hm$1

// BEGIN condifn18695hm$1
class condifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

condifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.condifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic clauses$1, ){
if(((clauses$1!=false)&&(clauses$1!=null))){
final dc.dynamic arg$2=(lcoc_core.symbol.$_invoke$2(null, "if", ));
final dc.dynamic arg$1=lcoc_core.first(clauses$1, );
final dc.dynamic test$1=lcoc_core.next(clauses$1, );
late final dc.dynamic $if_$1;
if(((test$1!=false)&&(test$1!=null))){
$if_$1=lcoc_core.second(clauses$1, );
}else{
throw lcoc_core.argument_error("cond requires an even number of forms", );
}
return (lcoc_core.list.$_invoke$4(arg$2, arg$1, $if_$1, lcoc_core.cons((lcoc_core.symbol.$_invoke$2("cljd.core", "cond", )), lcoc_core.next(lcoc_core.next(clauses$1, ), ), ), ));
}
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END condifn18695hm$1

// BEGIN condp
lcoc_core.IFn$iface condp=lcoc_core.condpifn18695hm$1(null, );

// END condp

// BEGIN condpifn18695hm$1
class condpifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

condpifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.condpifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic pred$1, dc.dynamic expr$1, dc.dynamic clauses$1, ){
late final dc.dynamic gpred$1;
if((lcoc_core.gensym is dc.Function)){
gpred$1=(lcoc_core.gensym as dc.Function)("pred__", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
gpred$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("pred__", ));
}else{
gpred$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "pred__", ));
}
late final dc.dynamic gexpr$1;
if((lcoc_core.gensym is dc.Function)){
gexpr$1=(lcoc_core.gensym as dc.Function)("expr__", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
gexpr$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("expr__", ));
}else{
gexpr$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "expr__", ));
}
dc.dynamic emit$1(dc.dynamic pred$2, dc.dynamic expr$2, dc.dynamic args$1, ){
late final dc.int $if_$9;
if((lcoc_core.$EQ_.$_invoke$2(lcoc_core.Keyword(null, ">>", 1535291001, ), lcoc_core.second(args$1, ), ))){
$if_$9=3;
}else{
$if_$9=2;
}
final dc.dynamic vec$8721_$1=lcoc_core.split_at($if_$9, args$1, );
final dc.dynamic vec$8724_$1=(lcoc_core.nth.$_invoke$3(vec$8721_$1, 0, null, ));
final dc.dynamic a$1=(lcoc_core.nth.$_invoke$3(vec$8724_$1, 0, null, ));
final dc.dynamic b$1=(lcoc_core.nth.$_invoke$3(vec$8724_$1, 1, null, ));
final dc.dynamic c$1=(lcoc_core.nth.$_invoke$3(vec$8724_$1, 2, null, ));
final dc.dynamic clause$1=vec$8724_$1;
final dc.dynamic more$1=(lcoc_core.nth.$_invoke$3(vec$8721_$1, 1, null, ));
final dc.dynamic coll7742$1=clause$1;
late final dc.int n$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
n$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
n$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
if((lcoc_core.$EQ_.$_invoke$2(0, n$1, ))){
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "throw", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "ArgumentError.", )), ));
final dc.dynamic o7668$10=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "str", )), )), (lcoc_core.list.$_invoke$1("No matching clause: ", )), (lcoc_core.list.$_invoke$1(expr$2, )), ));
late final dc.dynamic $if_$10;
if((o7668$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$10, ));
final dc.dynamic o7668$11=(lcoc_core.concat.$_invoke$2(arg$1, $1, ));
late final dc.dynamic $if_$11;
if((o7668$11 is lcoc_core.ISeqable$iface)){
$if_$11=((o7668$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7668$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$11, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$11, ));
final dc.dynamic o7668$12=(lcoc_core.concat.$_invoke$2(arg$2, $2, ));
if((o7668$12 is lcoc_core.ISeqable$iface)){
return ((o7668$12 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$12, ));
}
if((lcoc_core.$EQ_.$_invoke$2(1, n$1, ))){
return a$1;
}
if((lcoc_core.$EQ_.$_invoke$2(2, n$1, ))){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7668$13=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(pred$2, )), (lcoc_core.list.$_invoke$1(a$1, )), (lcoc_core.list.$_invoke$1(expr$2, )), ));
late final dc.dynamic $if_$12;
if((o7668$13 is lcoc_core.ISeqable$iface)){
$if_$12=((o7668$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$12=((lcoc_core.ISeqable.extensions(o7668$13, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$13, ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$12, ));
final dc.dynamic o7668$14=(lcoc_core.concat.$_invoke$4(arg$3, $3, (lcoc_core.list.$_invoke$1(b$1, )), (lcoc_core.list.$_invoke$1(emit$1(pred$2, expr$2, more$1, ), )), ));
if((o7668$14 is lcoc_core.ISeqable$iface)){
return ((o7668$14 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$14, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$14, ));
}
final dc.dynamic arg$5=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "if-let", )), ));
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "p__8718__auto__", )), ));
final dc.dynamic o7668$15=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(pred$2, )), (lcoc_core.list.$_invoke$1(a$1, )), (lcoc_core.list.$_invoke$1(expr$2, )), ));
late final dc.dynamic $if_$13;
if((o7668$15 is lcoc_core.ISeqable$iface)){
$if_$13=((o7668$15 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$13=((lcoc_core.ISeqable.extensions(o7668$15, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$15, ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$13, ));
final dc.dynamic o7668$16=(lcoc_core.concat.$_invoke$2(arg$4, $4, ));
late final dc.dynamic $if_$14;
if((o7668$16 is lcoc_core.ISeqable$iface)){
$if_$14=((o7668$16 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$14=((lcoc_core.ISeqable.extensions(o7668$16, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$16, ));
}
final dc.dynamic $5=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$14, ));
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($5, ));
final dc.dynamic o7668$17=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(c$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "p__8718__auto__", )), )), ));
late final dc.dynamic $if_$15;
if((o7668$17 is lcoc_core.ISeqable$iface)){
$if_$15=((o7668$17 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$15=((lcoc_core.ISeqable.extensions(o7668$17, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$17, ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$15, ));
final dc.dynamic o7668$18=(lcoc_core.concat.$_invoke$4(arg$5, $7, $6, (lcoc_core.list.$_invoke$1(emit$1(pred$2, expr$2, more$1, ), )), ));
if((o7668$18 is lcoc_core.ISeqable$iface)){
return ((o7668$18 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$18, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$18, ));
}
final dc.dynamic Function(dc.dynamic, dc.dynamic, dc.dynamic, ) emit$2=emit$1;
final dc.dynamic arg$6=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$19=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1(gpred$1, )), (lcoc_core.list.$_invoke$1(pred$1, )), (lcoc_core.list.$_invoke$1(gexpr$1, )), (lcoc_core.list.$_invoke$1(expr$1, )), ));
late final dc.dynamic $if_$16;
if((o7668$19 is lcoc_core.ISeqable$iface)){
$if_$16=((o7668$19 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$16=((lcoc_core.ISeqable.extensions(o7668$19, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$19, ));
}
final dc.dynamic $8=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$16, ));
final dc.dynamic $9=(lcoc_core.list.$_invoke$1($8, ));
final dc.dynamic o7668$20=(lcoc_core.concat.$_invoke$3(arg$6, $9, (lcoc_core.list.$_invoke$1(emit$2(gpred$1, gexpr$1, clauses$1, ), )), ));
if((o7668$20 is lcoc_core.ISeqable$iface)){
return ((o7668$20 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$20, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$20, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END condpifn18695hm$1

// BEGIN conj
lcoc_core.IFn$iface conj=lcoc_core.conjifn18695hm$1(null, );

// END conj

// BEGIN conj!
lcoc_core.IFn$iface conj$BANG_=lcoc_core.conj$BANG_ifn18695hm$1(null, );

// END conj!

// BEGIN conj$BANG_ifn18695hm$1
class conj$BANG_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

conj$BANG_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.conj$BANG_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$0(){
return lcoc_core.transient(lcoc_core.$_EMPTY_VECTOR, );
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
return coll$1;
}

dc.dynamic $_invoke$2(dc.dynamic coll$2, dc.dynamic x$1, ){
final dc.dynamic tcoll7933$1=coll$2;
final dc.dynamic val7934$1=x$1;
if((tcoll7933$1 is lcoc_core.ITransientCollection$iface)){
return ((tcoll7933$1 as lcoc_core.ITransientCollection$iface).$_conj$BANG_$1(val7934$1, ));
}
return ((lcoc_core.ITransientCollection.extensions(tcoll7933$1, ) as lcoc_core.ITransientCollection$ext).$_conj$BANG_$1(tcoll7933$1, val7934$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END conj$BANG_ifn18695hm$1

// BEGIN conjifn18695hm$1
class conjifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

conjifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.conjifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic coll$2, dc.dynamic x$2, dc.dynamic xs$2, ){
dc.dynamic coll$1=coll$2;
dc.dynamic x$1=x$2;
dc.dynamic xs$1=xs$2;
do {
if(((xs$1!=false)&&(xs$1!=null))){
final dc.dynamic coll7707$2=coll$1;
final dc.dynamic o7708$2=x$1;
if((coll7707$2 is lcoc_core.ICollection$iface)){
coll$1=((coll7707$2 as lcoc_core.ICollection$iface).$_conj$1(o7708$2, ));
}else{
coll$1=((lcoc_core.ICollection.extensions(coll7707$2, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$2, o7708$2, ));
}
x$1=lcoc_core.first(xs$1, );
xs$1=lcoc_core.next(xs$1, );
continue;
}
final dc.dynamic coll7707$1=coll$1;
final dc.dynamic o7708$1=x$1;
if((coll7707$1 is lcoc_core.ICollection$iface)){
return ((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}
return ((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
} while(true);
}

dc.dynamic $_invoke$0(){
return lcoc_core.$_EMPTY_VECTOR;
}

dc.dynamic $_invoke$1(dc.dynamic coll$3, ){
return coll$3;
}

dc.dynamic $_invoke$2(dc.dynamic coll$4, dc.dynamic x$3, ){
final dc.dynamic coll7707$3=coll$4;
final dc.dynamic o7708$3=x$3;
if((coll7707$3 is lcoc_core.ICollection$iface)){
return ((coll7707$3 as lcoc_core.ICollection$iface).$_conj$1(o7708$3, ));
}
return ((lcoc_core.ICollection.extensions(coll7707$3, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$3, o7708$3, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END conjifn18695hm$1

// BEGIN cons
dc.dynamic cons(dc.dynamic x$1, dc.dynamic coll$1, ){
if((null==coll$1)){
return lcoc_core.PersistentList(null, x$1, null, 1, -1, );
}
if(((lcoc_core.ISeq.satisfies(coll$1, )) as dc.bool)){
return lcoc_core.Cons(null, x$1, coll$1, -1, );
}
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return lcoc_core.Cons(null, x$1, $if_$1, -1, );
}

// END cons

// BEGIN constantly
dc.dynamic constantly(dc.dynamic x$1, ){
final lcoc_core.constantlyReify18695hm$1 f$1=lcoc_core.constantlyReify18695hm$1(null, x$1, );
return f$1;
}

// END constantly

// BEGIN constantlyReify18695hm$1
class constantlyReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final x$1;

constantlyReify18695hm$1(this.meta$1, this.x$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.constantlyReify18695hm$1(m$2395_$AUTO_$1, x$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic args$1, ){
return x$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END constantlyReify18695hm$1

// BEGIN contains?
dc.bool contains$QMARK_(dc.dynamic coll$1, dc.dynamic key$1, ){
final dc.dynamic o7843$1=coll$1;
final dc.dynamic k7844$1=key$1;
if((o7843$1 is lcoc_core.ILookup$iface)){
return ((o7843$1 as lcoc_core.ILookup$iface).$_contains_key$QMARK_$1(k7844$1, ));
}
return ((lcoc_core.ILookup.extensions(o7843$1, ) as lcoc_core.ILookup$ext).$_contains_key$QMARK_$1(o7843$1, k7844$1, ));
}

// END contains?

// BEGIN count
dc.int count(dc.dynamic coll$1, ){
final dc.dynamic coll7742$1=coll$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
return ((coll7742$1 as lcoc_core.ICounted$iface).$_count$0());
}
return ((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, ));
}

// END count

// BEGIN counted?
dc.bool counted$QMARK_(dc.dynamic coll$1, ){
return ((lcoc_core.ICounted.satisfies(coll$1, )) as dc.bool);
}

// END counted?

// BEGIN cycle
dc.dynamic cycle(dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic some$7546_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
some$7546_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
some$7546_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==some$7546_$AUTO_$1)){
return lcoc_core.$_EMPTY_LIST;
}
final dc.dynamic s$1=some$7546_$AUTO_$1;
return (lcoc_core.concat.$_invoke$2(s$1, lcoc_core.cycle(s$1, ), ));
} as dc.dynamic?), null, -1, );
}

// END cycle

// BEGIN dart-comparator
dc.int Function(dc.dynamic, dc.dynamic, ) dart_comparator(dc.dynamic f$1, ){
if((f$1 is dc.int Function(dc.dynamic, dc.dynamic, ))){
return f$1;
}
return (dc.dynamic x$1, dc.dynamic y$1, ){
late final dc.dynamic r$1;
if((f$1 is dc.Function)){
r$1=(f$1 as dc.Function)(x$1, y$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
r$1=((f$1 as lcoc_core.IFn$iface).$_invoke$2(x$1, y$1, ));
}else{
r$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, x$1, y$1, ));
}
if((r$1 is dc.num)){
return ((r$1 as dc.num).toInt());
}
if(((r$1!=false)&&(r$1!=null))){
return -1;
}
late final dc.dynamic $if_$1;
if((f$1 is dc.Function)){
$if_$1=(f$1 as dc.Function)(y$1, x$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$1=((f$1 as lcoc_core.IFn$iface).$_invoke$2(y$1, x$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, y$1, x$1, ));
}
if((($if_$1!=false)&&($if_$1!=null))){
return 1;
}
return 0;
};
}

// END dart-comparator

// BEGIN dec
dc.num dec(dc.dynamic x$1, ){
return ((x$1 as dc.num)-1);
}

// END dec

// BEGIN declare
lcoc_core.IFn$iface declare=lcoc_core.declareifn18695hm$1(null, );

// END declare

// BEGIN declareifn18695hm$1
class declareifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

declareifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.declareifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic names$1, ){
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END declareifn18695hm$1

// BEGIN dedupe
lcoc_core.IFn$iface dedupe=lcoc_core.dedupeifn18695hm$1(null, );

// END dedupe

// BEGIN dedupeReify18695hm$1
class dedupeReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final lcoc_core.Volatile pv$1;

dedupeReify18695hm$1(this.meta$1, this.rf$1, this.pv$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.dedupeReify18695hm$1(m$2395_$AUTO_$1, rf$1, pv$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final dc.dynamic prior$1=lcoc_core.deref(pv$1, );
lcoc_core.vreset$BANG_(pv$1, input$1, );
if((lcoc_core.$EQ_.$_invoke$2(prior$1, input$1, ))){
return result$2;
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END dedupeReify18695hm$1

// BEGIN dedupeifn18695hm$1
class dedupeifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

dedupeifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.dedupeifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$0(){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile pv$1=lcoc_core.volatile$BANG_(const lcoc_core.Keyword("cljd.core", "none", 2242281999, ), );
final lcoc_core.dedupeReify18695hm$1 f$1=lcoc_core.dedupeReify18695hm$1(null, rf$1, pv$1, );
return f$1;
};
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
return (lcoc_core.sequence.$_invoke$2((lcoc_core.dedupe.$_invoke$0()), coll$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END dedupeifn18695hm$1

// BEGIN def-list-for-type
dc.dynamic def_list_for_type(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic fn_name$1, dc.dynamic doc_str$1, dc.dynamic class_name$1, dc.dynamic default_value$1, ){
final dc.dynamic arg$31=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "defn", )), ));
final dc.dynamic arg$30=(lcoc_core.list.$_invoke$1(fn_name$1, ));
final dc.dynamic arg$29=(lcoc_core.list.$_invoke$1(doc_str$1, ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size-or-seq", )), )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $14=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$7=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "int?", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size-or-seq", )), )), ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $12=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".filled", )), ));
final dc.dynamic arg$2=(lcoc_core.symbol.$_invoke$2("dart:core", "List", ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(class_name$1, )), ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$2(arg$1, $2, ));
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $3=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$4, ));
final dc.dynamic $4=lcoc_core.with_meta(arg$2, $3, );
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($4, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$4(arg$3, $5, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size-or-seq", )), )), (lcoc_core.list.$_invoke$1(default_value$1, )), ));
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $11=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic arg$6=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".from", )), ));
final dc.dynamic arg$5=(lcoc_core.symbol.$_invoke$2("dart:core", "List", ));
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(class_name$1, )), ));
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic o7668$7=(lcoc_core.concat.$_invoke$2(arg$4, $6, ));
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
final dc.dynamic $7=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$7, ));
final dc.dynamic $8=lcoc_core.with_meta(arg$5, $7, );
final dc.dynamic $9=(lcoc_core.list.$_invoke$1($8, ));
final dc.dynamic o7668$8=(lcoc_core.concat.$_invoke$5(arg$6, $9, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size-or-seq", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".growable", )), )), (lcoc_core.list.$_invoke$1(false, )), ));
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
final dc.dynamic $10=(lcoc_core.list.$_invoke$1($if_$8, ));
final dc.dynamic o7668$9=(lcoc_core.concat.$_invoke$4(arg$7, $12, $11, $10, ));
late final dc.dynamic $if_$9;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
final dc.dynamic $13=(lcoc_core.list.$_invoke$1($if_$9, ));
final dc.dynamic o7668$10=(lcoc_core.concat.$_invoke$2($14, $13, ));
late final dc.dynamic $if_$10;
if((o7668$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
final dc.dynamic $46=(lcoc_core.list.$_invoke$1($if_$10, ));
final dc.dynamic o7668$11=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "init-val-or-seq", )), )), ));
late final dc.dynamic $if_$11;
if((o7668$11 is lcoc_core.ISeqable$iface)){
$if_$11=((o7668$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7668$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$11, ));
}
final dc.dynamic $15=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$11, ));
final dc.dynamic $44=(lcoc_core.list.$_invoke$1($15, ));
final dc.dynamic arg$28=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7668$12=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "seq?", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "init-val-or-seq", )), )), ));
late final dc.dynamic $if_$12;
if((o7668$12 is lcoc_core.ISeqable$iface)){
$if_$12=((o7668$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$12=((lcoc_core.ISeqable.extensions(o7668$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$12, ));
}
final dc.dynamic $42=(lcoc_core.list.$_invoke$1($if_$12, ));
final dc.dynamic arg$24=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$11=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "a__8934__auto__", )), ));
final dc.dynamic arg$10=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".filled", )), ));
final dc.dynamic arg$9=(lcoc_core.symbol.$_invoke$2("dart:core", "List", ));
final dc.dynamic arg$8=(lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.dynamic o7668$13=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(class_name$1, )), ));
late final dc.dynamic $if_$13;
if((o7668$13 is lcoc_core.ISeqable$iface)){
$if_$13=((o7668$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$13=((lcoc_core.ISeqable.extensions(o7668$13, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$13, ));
}
final dc.dynamic $16=(lcoc_core.list.$_invoke$1($if_$13, ));
final dc.dynamic o7668$14=(lcoc_core.concat.$_invoke$2(arg$8, $16, ));
late final dc.dynamic $if_$14;
if((o7668$14 is lcoc_core.ISeqable$iface)){
$if_$14=((o7668$14 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$14=((lcoc_core.ISeqable.extensions(o7668$14, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$14, ));
}
final dc.dynamic $17=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$14, ));
final dc.dynamic $18=lcoc_core.with_meta(arg$9, $17, );
final dc.dynamic $19=(lcoc_core.list.$_invoke$1($18, ));
final dc.dynamic o7668$15=(lcoc_core.concat.$_invoke$4(arg$10, $19, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size", )), )), (lcoc_core.list.$_invoke$1(default_value$1, )), ));
late final dc.dynamic $if_$15;
if((o7668$15 is lcoc_core.ISeqable$iface)){
$if_$15=((o7668$15 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$15=((lcoc_core.ISeqable.extensions(o7668$15, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$15, ));
}
final dc.dynamic $20=(lcoc_core.list.$_invoke$1($if_$15, ));
final dc.dynamic o7668$16=(lcoc_core.concat.$_invoke$2(arg$11, $20, ));
late final dc.dynamic $if_$16;
if((o7668$16 is lcoc_core.ISeqable$iface)){
$if_$16=((o7668$16 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$16=((lcoc_core.ISeqable.extensions(o7668$16, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$16, ));
}
final dc.dynamic $21=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$16, ));
final dc.dynamic $35=(lcoc_core.list.$_invoke$1($21, ));
final dc.dynamic arg$23=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "loop", )), ));
final dc.dynamic arg$14=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__8935__auto__", )), ));
final dc.dynamic arg$13=(lcoc_core.list.$_invoke$1(0, ));
final dc.dynamic arg$12=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "s__8936__auto__", )), ));
final dc.dynamic o7668$17=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "seq", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "init-val-or-seq", )), )), ));
late final dc.dynamic $if_$17;
if((o7668$17 is lcoc_core.ISeqable$iface)){
$if_$17=((o7668$17 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$17=((lcoc_core.ISeqable.extensions(o7668$17, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$17, ));
}
final dc.dynamic $22=(lcoc_core.list.$_invoke$1($if_$17, ));
final dc.dynamic o7668$18=(lcoc_core.concat.$_invoke$4(arg$14, arg$13, arg$12, $22, ));
late final dc.dynamic $if_$18;
if((o7668$18 is lcoc_core.ISeqable$iface)){
$if_$18=((o7668$18 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$18=((lcoc_core.ISeqable.extensions(o7668$18, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$18, ));
}
final dc.dynamic $23=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$18, ));
final dc.dynamic $33=(lcoc_core.list.$_invoke$1($23, ));
final dc.dynamic arg$22=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$16=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "and", )), ));
final dc.dynamic arg$15=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "s__8936__auto__", )), ));
final dc.dynamic o7668$19=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "<", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__8935__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size", )), )), ));
late final dc.dynamic $if_$19;
if((o7668$19 is lcoc_core.ISeqable$iface)){
$if_$19=((o7668$19 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$19=((lcoc_core.ISeqable.extensions(o7668$19, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$19, ));
}
final dc.dynamic $24=(lcoc_core.list.$_invoke$1($if_$19, ));
final dc.dynamic o7668$20=(lcoc_core.concat.$_invoke$3(arg$16, arg$15, $24, ));
late final dc.dynamic $if_$20;
if((o7668$20 is lcoc_core.ISeqable$iface)){
$if_$20=((o7668$20 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$20=((lcoc_core.ISeqable.extensions(o7668$20, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$20, ));
}
final dc.dynamic $31=(lcoc_core.list.$_invoke$1($if_$20, ));
final dc.dynamic arg$21=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), ));
final dc.dynamic arg$19=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "aset", )), ));
final dc.dynamic arg$18=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "a__8934__auto__", )), ));
final dc.dynamic arg$17=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__8935__auto__", )), ));
final dc.dynamic o7668$21=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "first", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "s__8936__auto__", )), )), ));
late final dc.dynamic $if_$21;
if((o7668$21 is lcoc_core.ISeqable$iface)){
$if_$21=((o7668$21 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$21=((lcoc_core.ISeqable.extensions(o7668$21, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$21, ));
}
final dc.dynamic $25=(lcoc_core.list.$_invoke$1($if_$21, ));
final dc.dynamic o7668$22=(lcoc_core.concat.$_invoke$4(arg$19, arg$18, arg$17, $25, ));
late final dc.dynamic $if_$22;
if((o7668$22 is lcoc_core.ISeqable$iface)){
$if_$22=((o7668$22 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$22=((lcoc_core.ISeqable.extensions(o7668$22, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$22, ));
}
final dc.dynamic $29=(lcoc_core.list.$_invoke$1($if_$22, ));
final dc.dynamic arg$20=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7668$23=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "inc", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__8935__auto__", )), )), ));
late final dc.dynamic $if_$23;
if((o7668$23 is lcoc_core.ISeqable$iface)){
$if_$23=((o7668$23 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$23=((lcoc_core.ISeqable.extensions(o7668$23, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$23, ));
}
final dc.dynamic $27=(lcoc_core.list.$_invoke$1($if_$23, ));
final dc.dynamic o7668$24=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "next", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "s__8936__auto__", )), )), ));
late final dc.dynamic $if_$24;
if((o7668$24 is lcoc_core.ISeqable$iface)){
$if_$24=((o7668$24 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$24=((lcoc_core.ISeqable.extensions(o7668$24, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$24, ));
}
final dc.dynamic $26=(lcoc_core.list.$_invoke$1($if_$24, ));
final dc.dynamic o7668$25=(lcoc_core.concat.$_invoke$3(arg$20, $27, $26, ));
late final dc.dynamic $if_$25;
if((o7668$25 is lcoc_core.ISeqable$iface)){
$if_$25=((o7668$25 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$25=((lcoc_core.ISeqable.extensions(o7668$25, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$25, ));
}
final dc.dynamic $28=(lcoc_core.list.$_invoke$1($if_$25, ));
final dc.dynamic o7668$26=(lcoc_core.concat.$_invoke$3(arg$21, $29, $28, ));
late final dc.dynamic $if_$26;
if((o7668$26 is lcoc_core.ISeqable$iface)){
$if_$26=((o7668$26 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$26=((lcoc_core.ISeqable.extensions(o7668$26, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$26, ));
}
final dc.dynamic $30=(lcoc_core.list.$_invoke$1($if_$26, ));
final dc.dynamic o7668$27=(lcoc_core.concat.$_invoke$4(arg$22, $31, $30, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "a__8934__auto__", )), )), ));
late final dc.dynamic $if_$27;
if((o7668$27 is lcoc_core.ISeqable$iface)){
$if_$27=((o7668$27 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$27=((lcoc_core.ISeqable.extensions(o7668$27, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$27, ));
}
final dc.dynamic $32=(lcoc_core.list.$_invoke$1($if_$27, ));
final dc.dynamic o7668$28=(lcoc_core.concat.$_invoke$3(arg$23, $33, $32, ));
late final dc.dynamic $if_$28;
if((o7668$28 is lcoc_core.ISeqable$iface)){
$if_$28=((o7668$28 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$28=((lcoc_core.ISeqable.extensions(o7668$28, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$28, ));
}
final dc.dynamic $34=(lcoc_core.list.$_invoke$1($if_$28, ));
final dc.dynamic o7668$29=(lcoc_core.concat.$_invoke$3(arg$24, $35, $34, ));
late final dc.dynamic $if_$29;
if((o7668$29 is lcoc_core.ISeqable$iface)){
$if_$29=((o7668$29 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$29=((lcoc_core.ISeqable.extensions(o7668$29, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$29, ));
}
final dc.dynamic $41=(lcoc_core.list.$_invoke$1($if_$29, ));
final dc.dynamic arg$27=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".filled", )), ));
final dc.dynamic arg$26=(lcoc_core.symbol.$_invoke$2("dart:core", "List", ));
final dc.dynamic arg$25=(lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.dynamic o7668$30=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(class_name$1, )), ));
late final dc.dynamic $if_$30;
if((o7668$30 is lcoc_core.ISeqable$iface)){
$if_$30=((o7668$30 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$30=((lcoc_core.ISeqable.extensions(o7668$30, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$30, ));
}
final dc.dynamic $36=(lcoc_core.list.$_invoke$1($if_$30, ));
final dc.dynamic o7668$31=(lcoc_core.concat.$_invoke$2(arg$25, $36, ));
late final dc.dynamic $if_$31;
if((o7668$31 is lcoc_core.ISeqable$iface)){
$if_$31=((o7668$31 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$31=((lcoc_core.ISeqable.extensions(o7668$31, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$31, ));
}
final dc.dynamic $37=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$31, ));
final dc.dynamic $38=lcoc_core.with_meta(arg$26, $37, );
final dc.dynamic $39=(lcoc_core.list.$_invoke$1($38, ));
final dc.dynamic o7668$32=(lcoc_core.concat.$_invoke$4(arg$27, $39, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "init-val-or-seq", )), )), ));
late final dc.dynamic $if_$32;
if((o7668$32 is lcoc_core.ISeqable$iface)){
$if_$32=((o7668$32 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$32=((lcoc_core.ISeqable.extensions(o7668$32, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$32, ));
}
final dc.dynamic $40=(lcoc_core.list.$_invoke$1($if_$32, ));
final dc.dynamic o7668$33=(lcoc_core.concat.$_invoke$4(arg$28, $42, $41, $40, ));
late final dc.dynamic $if_$33;
if((o7668$33 is lcoc_core.ISeqable$iface)){
$if_$33=((o7668$33 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$33=((lcoc_core.ISeqable.extensions(o7668$33, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$33, ));
}
final dc.dynamic $43=(lcoc_core.list.$_invoke$1($if_$33, ));
final dc.dynamic o7668$34=(lcoc_core.concat.$_invoke$2($44, $43, ));
late final dc.dynamic $if_$34;
if((o7668$34 is lcoc_core.ISeqable$iface)){
$if_$34=((o7668$34 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$34=((lcoc_core.ISeqable.extensions(o7668$34, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$34, ));
}
final dc.dynamic $45=(lcoc_core.list.$_invoke$1($if_$34, ));
final dc.dynamic o7668$35=(lcoc_core.concat.$_invoke$5(arg$31, arg$30, arg$29, $46, $45, ));
if((o7668$35 is lcoc_core.ISeqable$iface)){
return ((o7668$35 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$35, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$35, ));
}

// END def-list-for-type

// BEGIN default-data-readers
dc.dynamic default_data_readers=(){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(4, (lcoc_core.symbol.$_invoke$2(null, "inst", )), ));
fl$1[1]=(dc.dynamic form$1, ){
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "form", 3383402018, ), ));
fl$2[1]=form$1;
final lcoc_core.PersistentHashMap $2=lcoc_core.$_map_lit(fl$2, );
throw (lcoc_core.ex_info.$_invoke$2("Not implemented yet", $2, ));
};
fl$1[2]=(lcoc_core.symbol.$_invoke$2(null, "dart", ));
fl$1[3]=(dc.dynamic form$2, ){
final dc.List<dc.dynamic> fl$3=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "form", 3383402018, ), ));
fl$3[1]=form$2;
final lcoc_core.PersistentHashMap $3=lcoc_core.$_map_lit(fl$3, );
throw (lcoc_core.ex_info.$_invoke$2("Not implemented yet", $3, ));
};
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$1, );
return $1;
}();

// END default-data-readers

// BEGIN definterface
lcoc_core.IFn$iface definterface=lcoc_core.definterfaceifn18695hm$1(null, );

// END definterface

// BEGIN definterfaceifn18695hm$1
class definterfaceifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

definterfaceifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.definterfaceifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic iface$1, dc.dynamic meths$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "deftype", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.vary_meta.$_invoke$4(iface$1, lcoc_core.assoc, lcoc_core.Keyword(null, "abstract", 928480153, ), true, )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$7(arg$3, arg$2, $4, (lcoc_core.list.$_invoke$1(lcoc_core.Keyword(null, "type-only", 3917315094, ), )), (lcoc_core.list.$_invoke$1(true, )), (lcoc_core.list.$_invoke$1(iface$1, )), (lcoc_core.map.$_invoke$2((dc.dynamic p$8656_$1, ){
final dc.dynamic vec$8657_$1=p$8656_$1;
final dc.dynamic meth$1=(lcoc_core.nth.$_invoke$3(vec$8657_$1, 0, null, ));
final dc.dynamic args$1=(lcoc_core.nth.$_invoke$3(vec$8657_$1, 1, null, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(meth$1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "_", )), )), args$1, ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$2(arg$1, $3, ));
if((o7668$3 is lcoc_core.ISeqable$iface)){
return ((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}, meths$1, )), ));
if((o7668$4 is lcoc_core.ISeqable$iface)){
return ((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END definterfaceifn18695hm$1

// BEGIN defmacro
lcoc_core.IFn$iface defmacro=lcoc_core.defmacroifn18695hm$1(null, );

// END defmacro

// BEGIN defmacroifn18695hm$1
class defmacroifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

defmacroifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.defmacroifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic name$1, dc.dynamic args$1, ){
final dc.dynamic name$2=(lcoc_core.vary_meta.$_invoke$4(name$1, lcoc_core.assoc, lcoc_core.Keyword(null, "macro", 2712250679, ), true, ));
late final dc.dynamic prefix$1;
dc.dynamic p$1=(lcoc_core.list.$_invoke$1(name$2, ));
dc.dynamic args$2=args$1;
do {
final dc.dynamic f$1=lcoc_core.first(args$2, );
if((f$1 is dc.String)){
p$1=lcoc_core.cons(f$1, p$1, );
args$2=lcoc_core.next(args$2, );
continue;
}else if(lcoc_core.map$QMARK_(f$1, )){
p$1=lcoc_core.cons(f$1, p$1, );
args$2=lcoc_core.next(args$2, );
continue;
}else{
prefix$1=p$1;
}
break;
} while(true);
late final dc.dynamic fdecl$1;
dc.dynamic fd$1=args$1;
do {
if((lcoc_core.first(fd$1, ) is dc.String)){
fd$1=lcoc_core.next(fd$1, );
continue;
}else if(lcoc_core.map$QMARK_(lcoc_core.first(fd$1, ), )){
fd$1=lcoc_core.next(fd$1, );
continue;
}else{
fdecl$1=fd$1;
}
break;
} while(true);
late final dc.dynamic fdecl$2;
if(lcoc_core.vector$QMARK_(lcoc_core.first(fdecl$1, ), )){
fdecl$2=(lcoc_core.list.$_invoke$1(fdecl$1, ));
}else{
fdecl$2=fdecl$1;
}
dc.dynamic add_implicit_args$1(dc.dynamic fd$2, ){
final dc.dynamic args$3=lcoc_core.first(fd$2, );
return lcoc_core.cons(lcoc_core.vec(lcoc_core.cons((lcoc_core.symbol.$_invoke$2(null, "&form", )), lcoc_core.cons((lcoc_core.symbol.$_invoke$2(null, "&env", )), args$3, ), ), ), lcoc_core.next(fd$2, ), );
}
dc.dynamic add_args$1(dc.dynamic acc$2, dc.dynamic ds$2, ){
dc.dynamic acc$1=acc$2;
dc.dynamic ds$1=ds$2;
do {
if((null==ds$1)){
return acc$1;
}
final dc.dynamic d$1=lcoc_core.first(ds$1, );
if(lcoc_core.map$QMARK_(d$1, )){
final dc.dynamic coll7707$1=acc$1;
final dc.dynamic o7708$1=d$1;
if((coll7707$1 is lcoc_core.ICollection$iface)){
return ((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}
return ((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
}
final dc.dynamic coll7707$2=acc$1;
final dc.dynamic o7708$2=add_implicit_args$1(d$1, );
if((coll7707$2 is lcoc_core.ICollection$iface)){
acc$1=((coll7707$2 as lcoc_core.ICollection$iface).$_conj$1(o7708$2, ));
}else{
acc$1=((lcoc_core.ICollection.extensions(coll7707$2, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$2, o7708$2, ));
}
ds$1=lcoc_core.next(ds$1, );
continue;
} while(true);
}
final dc.dynamic o7668$1=add_args$1(lcoc_core.$_EMPTY_VECTOR, fdecl$2, );
late final dc.dynamic fdecl$3;
if((o7668$1 is lcoc_core.ISeqable$iface)){
fdecl$3=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
fdecl$3=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
late final dc.dynamic decl$1;
dc.dynamic p$2=prefix$1;
dc.dynamic d$2=fdecl$3;
do {
if(((p$2!=false)&&(p$2!=null))){
final dc.dynamic p$2tmp=lcoc_core.next(p$2, );
d$2=lcoc_core.cons(lcoc_core.first(p$2, ), d$2, );
p$2=p$2tmp;
continue;
}else{
decl$1=d$2;
}
break;
} while(true);
return lcoc_core.cons((lcoc_core.symbol.$_invoke$2("cljd.core", "defn", )), decl$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END defmacroifn18695hm$1

// BEGIN defn
dc.dynamic defn=(){
final dc.dynamic defn$1=lcoc_core.defnifn18695hm$1(null, );
return defn$1;
}();

// END defn

// BEGIN defn-
lcoc_core.IFn$iface defn_=lcoc_core.defn_ifn18695hm$1(null, );

// END defn-

// BEGIN defn_ifn18695hm$1
class defn_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

defn_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.defn_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic name$1, dc.dynamic decls$1, ){
final dc.dynamic arg$1=(lcoc_core.symbol.$_invoke$2("clojure.core", "defn", ));
final dc.dynamic o7872$1=name$1;
late final dc.dynamic coll7790$1;
if((o7872$1 is lcoc_core.IMeta$iface)){
coll7790$1=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
coll7790$1=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
final lcoc_core.Keyword k7791$1=lcoc_core.Keyword(null, "private", 3017064578, );
late final dc.dynamic $if_$1;
if((coll7790$1 is lcoc_core.IAssociative$iface)){
$if_$1=((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, true, ));
}else{
$if_$1=((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, true, ));
}
final dc.dynamic $1=lcoc_core.with_meta(name$1, $if_$1, );
return (lcoc_core.list$STAR_.$_invoke$3(arg$1, $1, decls$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END defn_ifn18695hm$1

// BEGIN defnifn18695hm$1
class defnifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

defnifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.defnifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic fname$1, dc.dynamic fdecl$1, ){
if(lcoc_core.symbol$QMARK_(fname$1, )){
}else{
throw lcoc_core.argument_error("First argument to defn must be a symbol", );
}
late final lcoc_core.PersistentHashMap m$1;
if((lcoc_core.first(fdecl$1, ) is dc.String)){
final dc.List<dc.dynamic> fl$10=(dc.List<dc.dynamic>.filled(2, lcoc_core.Keyword(null, "doc", 32388919, ), ));
fl$10[1]=lcoc_core.first(fdecl$1, );
m$1=lcoc_core.$_map_lit(fl$10, );
}else{
m$1=lcoc_core.$_EMPTY_MAP;
}
late final dc.dynamic fdecl$2;
if((lcoc_core.first(fdecl$1, ) is dc.String)){
fdecl$2=lcoc_core.next(fdecl$1, );
}else{
fdecl$2=fdecl$1;
}
late final dc.dynamic m$2;
if(lcoc_core.map$QMARK_(lcoc_core.first(fdecl$2, ), )){
final lcoc_core.PersistentHashMap coll7707$1=m$1;
final dc.dynamic o7708$1=lcoc_core.first(fdecl$2, );
if((coll7707$1 is lcoc_core.ICollection$iface)){
m$2=((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}else{
m$2=((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
}
}else{
m$2=m$1;
}
late final dc.dynamic fdecl$3;
if(lcoc_core.map$QMARK_(lcoc_core.first(fdecl$2, ), )){
fdecl$3=lcoc_core.next(fdecl$2, );
}else{
fdecl$3=fdecl$2;
}
late final dc.dynamic fdecl$4;
if(lcoc_core.vector$QMARK_(lcoc_core.first(fdecl$3, ), )){
fdecl$4=(lcoc_core.list.$_invoke$1(fdecl$3, ));
}else{
fdecl$4=fdecl$3;
}
late final dc.dynamic m$3;
if(lcoc_core.map$QMARK_(lcoc_core.last(fdecl$4, ), )){
final dc.dynamic coll7707$2=m$2;
final dc.dynamic o7708$2=lcoc_core.last(fdecl$4, );
if((coll7707$2 is lcoc_core.ICollection$iface)){
m$3=((coll7707$2 as lcoc_core.ICollection$iface).$_conj$1(o7708$2, ));
}else{
m$3=((lcoc_core.ICollection.extensions(coll7707$2, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$2, o7708$2, ));
}
}else{
m$3=m$2;
}
late final dc.dynamic fdecl$5;
if(lcoc_core.map$QMARK_(lcoc_core.last(fdecl$4, ), )){
fdecl$5=lcoc_core.butlast(fdecl$4, );
}else{
fdecl$5=fdecl$4;
}
final dc.List<dc.dynamic> fl$11=(dc.List<dc.dynamic>.filled(2, lcoc_core.Keyword(null, "arglists", 265572513, ), ));
fl$11[1]=(lcoc_core.list.$_invoke$2((lcoc_core.symbol.$_invoke$2(null, "quote", )), lcoc_core.sigs(fdecl$5, ), ));
final lcoc_core.PersistentHashMap coll7707$3=lcoc_core.$_map_lit(fl$11, );
final dc.dynamic o7708$3=m$3;
late final dc.dynamic m$4;
if((coll7707$3 is lcoc_core.ICollection$iface)){
m$4=((coll7707$3 as lcoc_core.ICollection$iface).$_conj$1(o7708$3, ));
}else{
m$4=((lcoc_core.ICollection.extensions(coll7707$3, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$3, o7708$3, ));
}
final dc.dynamic inline$1=(lcoc_core.Keyword(null, "inline", 51465281, ).$_invoke$1(m$4, ));
final dc.dynamic ifn$1=lcoc_core.first(inline$1, );
final dc.dynamic iname$1=lcoc_core.second(inline$1, );
late final dc.bool? $if_$10;
if((lcoc_core.$EQ_.$_invoke$2((lcoc_core.symbol.$_invoke$2(null, "fn", )), ifn$1, ))){
if(lcoc_core.symbol$QMARK_(iname$1, )){
$if_$10=false;
}else{
$if_$10=true;
}
}else{
$if_$10=null;
}
late final dc.dynamic m$5;
if((($if_$10!=false)&&($if_$10!=null))){
final dc.dynamic coll7790$1=m$4;
final lcoc_core.Keyword k7791$1=lcoc_core.Keyword(null, "inline", 51465281, );
final dc.dynamic v7792$1=lcoc_core.cons(ifn$1, lcoc_core.cons((lcoc_core.symbol.$_invoke$1((lcoc_core.str.$_invoke$2(lcoc_core.name(fname$1, ), "__inliner", )), )), lcoc_core.next(inline$1, ), ), );
if((coll7790$1 is lcoc_core.IAssociative$iface)){
m$5=((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, ));
}else{
m$5=((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, ));
}
}else{
m$5=m$4;
}
final dc.dynamic o7872$1=fname$1;
late final dc.dynamic $if_$11;
if((o7872$1 is lcoc_core.IMeta$iface)){
$if_$11=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$11=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
late final dc.dynamic coll7707$4;
if((($if_$11!=false)&&($if_$11!=null))){
final dc.dynamic o7872$2=fname$1;
if((o7872$2 is lcoc_core.IMeta$iface)){
coll7707$4=((o7872$2 as lcoc_core.IMeta$iface).$_meta$0());
}else{
coll7707$4=((lcoc_core.IMeta.extensions(o7872$2, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$2, ));
}
}else{
coll7707$4=lcoc_core.$_EMPTY_MAP;
}
final dc.dynamic o7708$4=m$5;
late final dc.dynamic m$6;
if((coll7707$4 is lcoc_core.ICollection$iface)){
m$6=((coll7707$4 as lcoc_core.ICollection$iface).$_conj$1(o7708$4, ));
}else{
m$6=((lcoc_core.ICollection.extensions(coll7707$4, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$4, o7708$4, ));
}
final dc.dynamic arg$3=(lcoc_core.symbol.$_invoke$2(null, "def", ));
final dc.dynamic arg$2=lcoc_core.with_meta(fname$1, m$6, );
final dc.dynamic arg$1=lcoc_core.cons((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), fdecl$5, );
final dc.List<dc.dynamic> fl$12=(dc.List<dc.dynamic>.filled(4, lcoc_core.Keyword(null, "rettag", 211607520, ), ));
fl$12[1]=(lcoc_core.Keyword(null, "tag", 2780644040, ).$_invoke$1(m$6, ));
fl$12[2]=lcoc_core.Keyword(null, "async", 3061312102, );
fl$12[3]=(lcoc_core.Keyword(null, "async", 3061312102, ).$_invoke$1(m$6, ));
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$12, );
final dc.dynamic $2=lcoc_core.with_meta(arg$1, $1, );
return (lcoc_core.list.$_invoke$3(arg$3, arg$2, $2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END defnifn18695hm$1

// BEGIN defonce
dc.dynamic defonce(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic name$1, dc.dynamic expr$1, ){
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "def", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.vary_meta.$_invoke$4(name$1, lcoc_core.assoc, lcoc_core.Keyword(null, "no-reload", 1490436885, ), true, )), )), (lcoc_core.list.$_invoke$1(expr$1, )), ));
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}

// END defonce

// BEGIN defrecord
lcoc_core.IFn$iface defrecord=lcoc_core.defrecordifn18695hm$1(null, );

// END defrecord

// BEGIN defrecordifn18695hm$1
class defrecordifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

defrecordifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.defrecordifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic name$1, dc.dynamic p$9255_$1, dc.dynamic opts$PLUS_specs$1, ){
final dc.dynamic vec$9257_$1=p$9255_$1;
final dc.dynamic o7668$1=vec$9257_$1;
late final dc.dynamic seq$9258_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
seq$9258_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9258_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic fields$1=seq$9258_$1;
late final dc.dynamic key$1;
if((lcoc_core.gensym is dc.Function)){
key$1=(lcoc_core.gensym as dc.Function)("key", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
key$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("key", ));
}else{
key$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "key", ));
}
final dc.dynamic arg$2=(lcoc_core.symbol.$_invoke$2(null, "extmap", ));
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
final dc.dynamic arg$1=(lcoc_core.symbol.$_invoke$2("dart:core", "Map", ));
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.List<dc.dynamic> fl$3=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "K", )), ));
fl$3[1]=(lcoc_core.symbol.$_invoke$2(null, "V", ));
final lcoc_core.PersistentList $3=lcoc_core.$_list_lit(fl$3, );
final dc.List<dc.dynamic> fl$4=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$4[1]=7157;
fl$4[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$4[3]=58;
final lcoc_core.PersistentHashMap $4=lcoc_core.$_map_lit(fl$4, );
final dc.dynamic $5=lcoc_core.with_meta($3, $4, );
fl$2[1]=$5;
final lcoc_core.PersistentHashMap $2=lcoc_core.$_map_lit(fl$2, );
final dc.dynamic $6=lcoc_core.with_meta(arg$1, $2, );
fl$1[1]=$6;
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$1, );
final dc.dynamic extmap$1=lcoc_core.with_meta(arg$2, $1, );
final dc.List<dc.dynamic> fl$5=(dc.List<dc.dynamic>.filled(38, (lcoc_core.symbol.$_invoke$2("cljd.core", "EqualsEquivMixin", )), ));
fl$5[1]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IRecord", ));
fl$5[2]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IEquiv", ));
late final dc.dynamic $if_$11;
if((lcoc_core.gensym is dc.Function)){
$if_$11=(lcoc_core.gensym as dc.Function)("this", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
$if_$11=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("this", ));
}else{
$if_$11=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "this", ));
}
final dc.List<dc.dynamic> fl$12=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
fl$12[1]=name$1;
final lcoc_core.PersistentHashMap $36=lcoc_core.$_map_lit(fl$12, );
final dc.dynamic $this_$1=lcoc_core.with_meta($if_$11, $36, );
late final dc.dynamic other$1;
if((lcoc_core.gensym is dc.Function)){
other$1=(lcoc_core.gensym as dc.Function)("other", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
other$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("other", ));
}else{
other$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "other", ));
}
final dc.dynamic arg$31=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-equiv", )), ));
final dc.dynamic o7668$13=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1($this_$1, )), (lcoc_core.list.$_invoke$1(other$1, )), ));
late final dc.dynamic $if_$12;
if((o7668$13 is lcoc_core.ISeqable$iface)){
$if_$12=((o7668$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$12=((lcoc_core.ISeqable.extensions(o7668$13, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$13, ));
}
final dc.dynamic $37=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$12, ));
final dc.dynamic $48=(lcoc_core.list.$_invoke$1($37, ));
final dc.dynamic arg$30=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), ));
final dc.dynamic o7668$14=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "identical?", )), )), (lcoc_core.list.$_invoke$1($this_$1, )), (lcoc_core.list.$_invoke$1(other$1, )), ));
late final dc.dynamic $if_$13;
if((o7668$14 is lcoc_core.ISeqable$iface)){
$if_$13=((o7668$14 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$13=((lcoc_core.ISeqable.extensions(o7668$14, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$14, ));
}
final dc.dynamic $46=(lcoc_core.list.$_invoke$1($if_$13, ));
final dc.dynamic arg$29=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "and", )), ));
final dc.dynamic o7668$15=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("dart", "is?", )), )), (lcoc_core.list.$_invoke$1(other$1, )), (lcoc_core.list.$_invoke$1(name$1, )), ));
late final dc.dynamic $if_$14;
if((o7668$15 is lcoc_core.ISeqable$iface)){
$if_$14=((o7668$15 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$14=((lcoc_core.ISeqable.extensions(o7668$15, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$15, ));
}
final dc.dynamic $44=(lcoc_core.list.$_invoke$1($if_$14, ));
final dc.dynamic arg$28=(lcoc_core.map.$_invoke$2((dc.dynamic field$1, ){
final dc.dynamic arg$24=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "=", )), ));
final dc.dynamic arg$23=(lcoc_core.list.$_invoke$1(field$1, ));
final dc.dynamic o7668$16=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.keyword.$_invoke$1(field$1, )), )), (lcoc_core.list.$_invoke$1(other$1, )), ));
late final dc.dynamic $if_$15;
if((o7668$16 is lcoc_core.ISeqable$iface)){
$if_$15=((o7668$16 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$15=((lcoc_core.ISeqable.extensions(o7668$16, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$16, ));
}
final dc.dynamic $38=(lcoc_core.list.$_invoke$1($if_$15, ));
final dc.dynamic o7668$17=(lcoc_core.concat.$_invoke$3(arg$24, arg$23, $38, ));
if((o7668$17 is lcoc_core.ISeqable$iface)){
return ((o7668$17 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$17, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$17, ));
}, fields$1, ));
final dc.dynamic arg$27=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "=", )), ));
final dc.dynamic arg$26=(lcoc_core.list.$_invoke$1(extmap$1, ));
final dc.dynamic arg$25=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".-extmap", )), ));
final dc.List<dc.dynamic> fl$13=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
fl$13[1]=name$1;
final lcoc_core.PersistentHashMap $39=lcoc_core.$_map_lit(fl$13, );
final dc.dynamic $40=lcoc_core.with_meta(other$1, $39, );
final dc.dynamic $41=(lcoc_core.list.$_invoke$1($40, ));
final dc.dynamic o7668$18=(lcoc_core.concat.$_invoke$2(arg$25, $41, ));
late final dc.dynamic $if_$16;
if((o7668$18 is lcoc_core.ISeqable$iface)){
$if_$16=((o7668$18 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$16=((lcoc_core.ISeqable.extensions(o7668$18, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$18, ));
}
final dc.dynamic $42=(lcoc_core.list.$_invoke$1($if_$16, ));
final dc.dynamic o7668$19=(lcoc_core.concat.$_invoke$3(arg$27, arg$26, $42, ));
late final dc.dynamic $if_$17;
if((o7668$19 is lcoc_core.ISeqable$iface)){
$if_$17=((o7668$19 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$17=((lcoc_core.ISeqable.extensions(o7668$19, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$19, ));
}
final dc.dynamic $43=(lcoc_core.list.$_invoke$1($if_$17, ));
final dc.dynamic o7668$20=(lcoc_core.concat.$_invoke$4(arg$29, $44, arg$28, $43, ));
late final dc.dynamic $if_$18;
if((o7668$20 is lcoc_core.ISeqable$iface)){
$if_$18=((o7668$20 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$18=((lcoc_core.ISeqable.extensions(o7668$20, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$20, ));
}
final dc.dynamic $45=(lcoc_core.list.$_invoke$1($if_$18, ));
final dc.dynamic o7668$21=(lcoc_core.concat.$_invoke$3(arg$30, $46, $45, ));
late final dc.dynamic $if_$19;
if((o7668$21 is lcoc_core.ISeqable$iface)){
$if_$19=((o7668$21 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$19=((lcoc_core.ISeqable.extensions(o7668$21, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$21, ));
}
final dc.dynamic $47=(lcoc_core.list.$_invoke$1($if_$19, ));
final dc.dynamic o7668$22=(lcoc_core.concat.$_invoke$3(arg$31, $48, $47, ));
late final dc.dynamic $if_$20;
if((o7668$22 is lcoc_core.ISeqable$iface)){
$if_$20=((o7668$22 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$20=((lcoc_core.ISeqable.extensions(o7668$22, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$22, ));
}
fl$5[3]=$if_$20;
fl$5[4]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IMap", ));
final dc.dynamic arg$40=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-dissoc", )), ));
final dc.dynamic o7668$23=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9221__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__9222__auto__", )), )), ));
late final dc.dynamic $if_$21;
if((o7668$23 is lcoc_core.ISeqable$iface)){
$if_$21=((o7668$23 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$21=((lcoc_core.ISeqable.extensions(o7668$23, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$23, ));
}
final dc.dynamic $49=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$21, ));
final dc.dynamic $64=(lcoc_core.list.$_invoke$1($49, ));
final dc.dynamic arg$39=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$32=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "contains?", )), ));
final dc.dynamic o7668$24=(lcoc_core.concat.$_invoke$1((lcoc_core.map.$_invoke$2(lcoc_core.keyword, fields$1, )), ));
late final dc.dynamic $if_$22;
if((o7668$24 is lcoc_core.ISeqable$iface)){
$if_$22=((o7668$24 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$22=((lcoc_core.ISeqable.extensions(o7668$24, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$24, ));
}
final dc.dynamic $50=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_set, $if_$22, ));
final dc.dynamic $51=(lcoc_core.list.$_invoke$1($50, ));
final dc.dynamic o7668$25=(lcoc_core.concat.$_invoke$3(arg$32, $51, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__9222__auto__", )), )), ));
late final dc.dynamic $if_$23;
if((o7668$25 is lcoc_core.ISeqable$iface)){
$if_$23=((o7668$25 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$23=((lcoc_core.ISeqable.extensions(o7668$25, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$25, ));
}
final dc.dynamic $62=(lcoc_core.list.$_invoke$1($if_$23, ));
final dc.dynamic arg$35=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "dissoc", )), ));
final dc.dynamic arg$34=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "with-meta", )), ));
final dc.dynamic arg$33=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "into", )), ));
final dc.dynamic o7668$26=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$24;
if((o7668$26 is lcoc_core.ISeqable$iface)){
$if_$24=((o7668$26 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$24=((lcoc_core.ISeqable.extensions(o7668$26, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$26, ));
}
final dc.dynamic $52=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$24, ));
final dc.dynamic $53=(lcoc_core.list.$_invoke$1($52, ));
final dc.dynamic o7668$27=(lcoc_core.concat.$_invoke$3(arg$33, $53, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9221__auto__", )), )), ));
late final dc.dynamic $if_$25;
if((o7668$27 is lcoc_core.ISeqable$iface)){
$if_$25=((o7668$27 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$25=((lcoc_core.ISeqable.extensions(o7668$27, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$27, ));
}
final dc.dynamic $54=(lcoc_core.list.$_invoke$1($if_$25, ));
final dc.dynamic o7668$28=(lcoc_core.concat.$_invoke$3(arg$34, $54, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "meta", )), )), ));
late final dc.dynamic $if_$26;
if((o7668$28 is lcoc_core.ISeqable$iface)){
$if_$26=((o7668$28 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$26=((lcoc_core.ISeqable.extensions(o7668$28, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$28, ));
}
final dc.dynamic $55=(lcoc_core.list.$_invoke$1($if_$26, ));
final dc.dynamic o7668$29=(lcoc_core.concat.$_invoke$3(arg$35, $55, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__9222__auto__", )), )), ));
late final dc.dynamic $if_$27;
if((o7668$29 is lcoc_core.ISeqable$iface)){
$if_$27=((o7668$29 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$27=((lcoc_core.ISeqable.extensions(o7668$29, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$29, ));
}
final dc.dynamic $61=(lcoc_core.list.$_invoke$1($if_$27, ));
final dc.dynamic arg$38=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), ));
final dc.dynamic arg$37=(lcoc_core.list.$_invoke$1(name$1, ));
final lcoc_core.PersistentVector coll7707$1=lcoc_core.vec(fields$1, );
final dc.dynamic o7708$1=(lcoc_core.symbol.$_invoke$2(null, "meta", ));
late final dc.dynamic $if_$31;
if((coll7707$1 is lcoc_core.ICollection$iface)){
$if_$31=((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}else{
$if_$31=((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
}
final dc.dynamic arg$36=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), ));
final dc.dynamic o7668$30=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "dissoc", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__9222__auto__", )), )), ));
late final dc.dynamic $if_$28;
if((o7668$30 is lcoc_core.ISeqable$iface)){
$if_$28=((o7668$30 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$28=((lcoc_core.ISeqable.extensions(o7668$30, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$30, ));
}
final dc.dynamic $58=(lcoc_core.list.$_invoke$1($if_$28, ));
final dc.dynamic o7668$31=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$29;
if((o7668$31 is lcoc_core.ISeqable$iface)){
$if_$29=((o7668$31 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$29=((lcoc_core.ISeqable.extensions(o7668$31, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$31, ));
}
final dc.dynamic $56=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$29, ));
final dc.dynamic $57=(lcoc_core.list.$_invoke$1($56, ));
final dc.dynamic o7668$32=(lcoc_core.concat.$_invoke$3(arg$36, $58, $57, ));
late final dc.dynamic $if_$30;
if((o7668$32 is lcoc_core.ISeqable$iface)){
$if_$30=((o7668$32 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$30=((lcoc_core.ISeqable.extensions(o7668$32, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$32, ));
}
final dc.dynamic $59=(lcoc_core.list.$_invoke$1($if_$30, ));
final dc.dynamic o7668$33=(lcoc_core.concat.$_invoke$5(arg$38, arg$37, $if_$31, $59, (lcoc_core.list.$_invoke$1(-1, )), ));
late final dc.dynamic $if_$32;
if((o7668$33 is lcoc_core.ISeqable$iface)){
$if_$32=((o7668$33 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$32=((lcoc_core.ISeqable.extensions(o7668$33, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$33, ));
}
final dc.dynamic $60=(lcoc_core.list.$_invoke$1($if_$32, ));
final dc.dynamic o7668$34=(lcoc_core.concat.$_invoke$4(arg$39, $62, $61, $60, ));
late final dc.dynamic $if_$33;
if((o7668$34 is lcoc_core.ISeqable$iface)){
$if_$33=((o7668$34 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$33=((lcoc_core.ISeqable.extensions(o7668$34, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$34, ));
}
final dc.dynamic $63=(lcoc_core.list.$_invoke$1($if_$33, ));
final dc.dynamic o7668$35=(lcoc_core.concat.$_invoke$3(arg$40, $64, $63, ));
late final dc.dynamic $if_$34;
if((o7668$35 is lcoc_core.ISeqable$iface)){
$if_$34=((o7668$35 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$34=((lcoc_core.ISeqable.extensions(o7668$35, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$35, ));
}
fl$5[5]=$if_$34;
fl$5[6]=(lcoc_core.symbol.$_invoke$2("cljd.core", "ISeqable", ));
final dc.dynamic arg$43=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-seq", )), ));
final dc.dynamic o7668$36=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9224__auto__", )), )), ));
late final dc.dynamic $if_$35;
if((o7668$36 is lcoc_core.ISeqable$iface)){
$if_$35=((o7668$36 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$35=((lcoc_core.ISeqable.extensions(o7668$36, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$36, ));
}
final dc.dynamic $65=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$35, ));
final dc.dynamic $70=(lcoc_core.list.$_invoke$1($65, ));
final dc.dynamic arg$42=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "seq", )), ));
final dc.dynamic arg$41=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "concat", )), ));
final dc.dynamic o7668$37=(lcoc_core.concat.$_invoke$1((lcoc_core.map.$_invoke$2((dc.dynamic p1$9223_$SHARP_$1, ){
return (lcoc_core.list.$_invoke$4((lcoc_core.symbol.$_invoke$2(null, "new", )), (lcoc_core.symbol.$_invoke$2("dart:core", "MapEntry", )), (lcoc_core.keyword.$_invoke$1(p1$9223_$SHARP_$1, )), p1$9223_$SHARP_$1, ));
}, fields$1, )), ));
late final dc.dynamic $if_$36;
if((o7668$37 is lcoc_core.ISeqable$iface)){
$if_$36=((o7668$37 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$36=((lcoc_core.ISeqable.extensions(o7668$37, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$37, ));
}
final dc.dynamic $66=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$36, ));
final dc.dynamic $67=(lcoc_core.list.$_invoke$1($66, ));
final dc.dynamic o7668$38=(lcoc_core.concat.$_invoke$3(arg$41, $67, (lcoc_core.list.$_invoke$1(extmap$1, )), ));
late final dc.dynamic $if_$37;
if((o7668$38 is lcoc_core.ISeqable$iface)){
$if_$37=((o7668$38 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$37=((lcoc_core.ISeqable.extensions(o7668$38, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$38, ));
}
final dc.dynamic $68=(lcoc_core.list.$_invoke$1($if_$37, ));
final dc.dynamic o7668$39=(lcoc_core.concat.$_invoke$2(arg$42, $68, ));
late final dc.dynamic $if_$38;
if((o7668$39 is lcoc_core.ISeqable$iface)){
$if_$38=((o7668$39 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$38=((lcoc_core.ISeqable.extensions(o7668$39, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$39, ));
}
final dc.dynamic $69=(lcoc_core.list.$_invoke$1($if_$38, ));
final dc.dynamic o7668$40=(lcoc_core.concat.$_invoke$3(arg$43, $70, $69, ));
late final dc.dynamic $if_$39;
if((o7668$40 is lcoc_core.ISeqable$iface)){
$if_$39=((o7668$40 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$39=((lcoc_core.ISeqable.extensions(o7668$40, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$40, ));
}
fl$5[7]=$if_$39;
fl$5[8]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IAssociative", ));
late final dc.dynamic v$1;
if((lcoc_core.gensym is dc.Function)){
v$1=(lcoc_core.gensym as dc.Function)("val", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
v$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("val", ));
}else{
v$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "val", ));
}
final dc.dynamic arg$51=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-assoc", )), ));
final dc.dynamic o7668$41=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9225__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__9226__auto__", )), )), (lcoc_core.list.$_invoke$1(v$1, )), ));
late final dc.dynamic $if_$40;
if((o7668$41 is lcoc_core.ISeqable$iface)){
$if_$40=((o7668$41 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$40=((lcoc_core.ISeqable.extensions(o7668$41, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$41, ));
}
final dc.dynamic $71=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$40, ));
final dc.dynamic $78=(lcoc_core.list.$_invoke$1($71, ));
final dc.dynamic arg$50=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "case", )), ));
final dc.dynamic arg$49=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__9226__auto__", )), ));
final dc.dynamic arg$48=(lcoc_core.mapcat.$_invoke$2((dc.dynamic fld$1, ){
final dc.List<dc.dynamic> fl$14=(dc.List<dc.dynamic>.filled(2, (lcoc_core.keyword.$_invoke$1(fld$1, )), ));
final dc.dynamic arg$44=(lcoc_core.symbol.$_invoke$2(null, "new", ));
final dc.List<dc.dynamic> fl$15=(dc.List<dc.dynamic>.filled(2, fld$1, ));
fl$15[1]=v$1;
final lcoc_core.PersistentHashMap $72=lcoc_core.$_map_lit(fl$15, );
final dc.dynamic $73=(lcoc_core.replace.$_invoke$2($72, (lcoc_core.conj.$_invoke$4(lcoc_core.vec(fields$1, ), (lcoc_core.symbol.$_invoke$2(null, "meta", )), extmap$1, -1, )), ));
final dc.dynamic $74=(lcoc_core.list$STAR_.$_invoke$3(arg$44, name$1, $73, ));
fl$14[1]=$74;
return lcoc_core.$_vec_owning(fl$14, );
}, fields$1, ));
final dc.dynamic arg$47=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), ));
final dc.dynamic arg$46=(lcoc_core.list.$_invoke$1(name$1, ));
final dc.dynamic arg$45=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "meta", )), ));
final dc.dynamic o7668$42=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "assoc", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__9226__auto__", )), )), (lcoc_core.list.$_invoke$1(v$1, )), ));
late final dc.dynamic $if_$41;
if((o7668$42 is lcoc_core.ISeqable$iface)){
$if_$41=((o7668$42 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$41=((lcoc_core.ISeqable.extensions(o7668$42, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$42, ));
}
final dc.dynamic $75=(lcoc_core.list.$_invoke$1($if_$41, ));
final dc.dynamic o7668$43=(lcoc_core.concat.$_invoke$6(arg$47, arg$46, fields$1, arg$45, $75, (lcoc_core.list.$_invoke$1(-1, )), ));
late final dc.dynamic $if_$42;
if((o7668$43 is lcoc_core.ISeqable$iface)){
$if_$42=((o7668$43 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$42=((lcoc_core.ISeqable.extensions(o7668$43, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$43, ));
}
final dc.dynamic $76=(lcoc_core.list.$_invoke$1($if_$42, ));
final dc.dynamic o7668$44=(lcoc_core.concat.$_invoke$4(arg$50, arg$49, arg$48, $76, ));
late final dc.dynamic $if_$43;
if((o7668$44 is lcoc_core.ISeqable$iface)){
$if_$43=((o7668$44 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$43=((lcoc_core.ISeqable.extensions(o7668$44, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$44, ));
}
final dc.dynamic $77=(lcoc_core.list.$_invoke$1($if_$43, ));
final dc.dynamic o7668$45=(lcoc_core.concat.$_invoke$3(arg$51, $78, $77, ));
late final dc.dynamic $if_$44;
if((o7668$45 is lcoc_core.ISeqable$iface)){
$if_$44=((o7668$45 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$44=((lcoc_core.ISeqable.extensions(o7668$45, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$45, ));
}
fl$5[9]=$if_$44;
fl$5[10]=(lcoc_core.symbol.$_invoke$2("cljd.core", "ILookup", ));
final dc.dynamic arg$56=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-contains-key?", )), ));
final dc.dynamic o7668$46=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__9227__auto__", )), )), (lcoc_core.list.$_invoke$1(key$1, )), ));
late final dc.dynamic $if_$45;
if((o7668$46 is lcoc_core.ISeqable$iface)){
$if_$45=((o7668$46 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$45=((lcoc_core.ISeqable.extensions(o7668$46, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$46, ));
}
final dc.dynamic $79=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$45, ));
final dc.dynamic $82=(lcoc_core.list.$_invoke$1($79, ));
final dc.dynamic o7668$47=fields$1;
late final dc.dynamic $if_$46;
if((o7668$47 is lcoc_core.ISeqable$iface)){
$if_$46=((o7668$47 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$46=((lcoc_core.ISeqable.extensions(o7668$47, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$47, ));
}
late final dc.dynamic $if_$48;
if((($if_$46!=false)&&($if_$46!=null))){
final dc.dynamic arg$55=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "case", )), ));
final dc.dynamic arg$54=(lcoc_core.list.$_invoke$1(key$1, ));
final dc.dynamic arg$53=(lcoc_core.list.$_invoke$1((lcoc_core.map.$_invoke$2(lcoc_core.keyword, fields$1, )), ));
final dc.dynamic arg$52=(lcoc_core.list.$_invoke$1(true, ));
final dc.dynamic o7668$48=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "contains?", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), (lcoc_core.list.$_invoke$1(key$1, )), ));
late final dc.dynamic $if_$47;
if((o7668$48 is lcoc_core.ISeqable$iface)){
$if_$47=((o7668$48 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$47=((lcoc_core.ISeqable.extensions(o7668$48, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$48, ));
}
final dc.dynamic $80=(lcoc_core.list.$_invoke$1($if_$47, ));
final dc.dynamic o7668$49=(lcoc_core.concat.$_invoke$5(arg$55, arg$54, arg$53, arg$52, $80, ));
if((o7668$49 is lcoc_core.ISeqable$iface)){
$if_$48=((o7668$49 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$48=((lcoc_core.ISeqable.extensions(o7668$49, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$49, ));
}
}else{
final dc.dynamic o7668$50=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "contains?", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), (lcoc_core.list.$_invoke$1(key$1, )), ));
if((o7668$50 is lcoc_core.ISeqable$iface)){
$if_$48=((o7668$50 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$48=((lcoc_core.ISeqable.extensions(o7668$50, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$50, ));
}
}
final dc.dynamic $81=(lcoc_core.list.$_invoke$1($if_$48, ));
final dc.dynamic o7668$51=(lcoc_core.concat.$_invoke$3(arg$56, $82, $81, ));
late final dc.dynamic $if_$49;
if((o7668$51 is lcoc_core.ISeqable$iface)){
$if_$49=((o7668$51 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$49=((lcoc_core.ISeqable.extensions(o7668$51, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$51, ));
}
fl$5[11]=$if_$49;
final dc.dynamic arg$57=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-lookup", )), ));
final dc.dynamic o7668$52=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__9228__auto__", )), )), (lcoc_core.list.$_invoke$1(key$1, )), ));
late final dc.dynamic $if_$50;
if((o7668$52 is lcoc_core.ISeqable$iface)){
$if_$50=((o7668$52 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$50=((lcoc_core.ISeqable.extensions(o7668$52, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$52, ));
}
final dc.dynamic $83=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$50, ));
final dc.dynamic $85=(lcoc_core.list.$_invoke$1($83, ));
final dc.dynamic o7668$53=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-lookup", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__9228__auto__", )), )), (lcoc_core.list.$_invoke$1(key$1, )), (lcoc_core.list.$_invoke$1(null, )), ));
late final dc.dynamic $if_$51;
if((o7668$53 is lcoc_core.ISeqable$iface)){
$if_$51=((o7668$53 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$51=((lcoc_core.ISeqable.extensions(o7668$53, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$53, ));
}
final dc.dynamic $84=(lcoc_core.list.$_invoke$1($if_$51, ));
final dc.dynamic o7668$54=(lcoc_core.concat.$_invoke$3(arg$57, $85, $84, ));
late final dc.dynamic $if_$52;
if((o7668$54 is lcoc_core.ISeqable$iface)){
$if_$52=((o7668$54 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$52=((lcoc_core.ISeqable.extensions(o7668$54, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$54, ));
}
fl$5[12]=$if_$52;
final dc.dynamic arg$61=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-lookup", )), ));
final dc.dynamic o7668$55=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__9229__auto__", )), )), (lcoc_core.list.$_invoke$1(key$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "not-found__9230__auto__", )), )), ));
late final dc.dynamic $if_$53;
if((o7668$55 is lcoc_core.ISeqable$iface)){
$if_$53=((o7668$55 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$53=((lcoc_core.ISeqable.extensions(o7668$55, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$55, ));
}
final dc.dynamic $86=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$53, ));
final dc.dynamic $89=(lcoc_core.list.$_invoke$1($86, ));
final dc.dynamic arg$60=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "case", )), ));
final dc.dynamic arg$59=(lcoc_core.list.$_invoke$1(key$1, ));
final dc.dynamic arg$58=(lcoc_core.mapcat.$_invoke$2((dc.dynamic f$1, ){
final dc.List<dc.dynamic> fl$16=(dc.List<dc.dynamic>.filled(2, (lcoc_core.keyword.$_invoke$1(f$1, )), ));
fl$16[1]=f$1;
return lcoc_core.$_vec_owning(fl$16, );
}, fields$1, ));
final dc.dynamic o7668$56=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "get", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), (lcoc_core.list.$_invoke$1(key$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "not-found__9230__auto__", )), )), ));
late final dc.dynamic $if_$54;
if((o7668$56 is lcoc_core.ISeqable$iface)){
$if_$54=((o7668$56 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$54=((lcoc_core.ISeqable.extensions(o7668$56, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$56, ));
}
final dc.dynamic $87=(lcoc_core.list.$_invoke$1($if_$54, ));
final dc.dynamic o7668$57=(lcoc_core.concat.$_invoke$4(arg$60, arg$59, arg$58, $87, ));
late final dc.dynamic $if_$55;
if((o7668$57 is lcoc_core.ISeqable$iface)){
$if_$55=((o7668$57 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$55=((lcoc_core.ISeqable.extensions(o7668$57, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$57, ));
}
final dc.dynamic $88=(lcoc_core.list.$_invoke$1($if_$55, ));
final dc.dynamic o7668$58=(lcoc_core.concat.$_invoke$3(arg$61, $89, $88, ));
late final dc.dynamic $if_$56;
if((o7668$58 is lcoc_core.ISeqable$iface)){
$if_$56=((o7668$58 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$56=((lcoc_core.ISeqable.extensions(o7668$58, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$58, ));
}
fl$5[13]=$if_$56;
fl$5[14]=(lcoc_core.symbol.$_invoke$2("cljd.core", "ICounted", ));
final dc.dynamic arg$63=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-count", )), ));
final dc.dynamic o7668$59=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9231__auto__", )), )), ));
late final dc.dynamic $if_$57;
if((o7668$59 is lcoc_core.ISeqable$iface)){
$if_$57=((o7668$59 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$57=((lcoc_core.ISeqable.extensions(o7668$59, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$59, ));
}
final dc.dynamic $90=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$57, ));
final dc.dynamic $94=(lcoc_core.list.$_invoke$1($90, ));
final dc.dynamic arg$62=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "+", )), ));
final dc.dynamic coll7742$1=fields$1;
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final dc.dynamic $92=(lcoc_core.list.$_invoke$1(cast$1, ));
final dc.dynamic o7668$60=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".-length", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), ));
late final dc.dynamic $if_$58;
if((o7668$60 is lcoc_core.ISeqable$iface)){
$if_$58=((o7668$60 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$58=((lcoc_core.ISeqable.extensions(o7668$60, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$60, ));
}
final dc.dynamic $91=(lcoc_core.list.$_invoke$1($if_$58, ));
final dc.dynamic o7668$61=(lcoc_core.concat.$_invoke$3(arg$62, $92, $91, ));
late final dc.dynamic $if_$59;
if((o7668$61 is lcoc_core.ISeqable$iface)){
$if_$59=((o7668$61 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$59=((lcoc_core.ISeqable.extensions(o7668$61, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$61, ));
}
final dc.dynamic $93=(lcoc_core.list.$_invoke$1($if_$59, ));
final dc.dynamic o7668$62=(lcoc_core.concat.$_invoke$3(arg$63, $94, $93, ));
late final dc.dynamic $if_$60;
if((o7668$62 is lcoc_core.ISeqable$iface)){
$if_$60=((o7668$62 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$60=((lcoc_core.ISeqable.extensions(o7668$62, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$62, ));
}
fl$5[15]=$if_$60;
fl$5[16]=(lcoc_core.symbol.$_invoke$2("cljd.core", "ICollection", ));
final dc.dynamic arg$69=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-conj", )), ));
final dc.dynamic o7668$63=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9232__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__9233__auto__", )), )), ));
late final dc.dynamic $if_$61;
if((o7668$63 is lcoc_core.ISeqable$iface)){
$if_$61=((o7668$63 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$61=((lcoc_core.ISeqable.extensions(o7668$63, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$63, ));
}
final dc.dynamic $95=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$61, ));
final dc.dynamic $105=(lcoc_core.list.$_invoke$1($95, ));
final dc.dynamic arg$68=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$65=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "and", )), ));
final dc.dynamic o7668$64=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "vector?", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__9233__auto__", )), )), ));
late final dc.dynamic $if_$62;
if((o7668$64 is lcoc_core.ISeqable$iface)){
$if_$62=((o7668$64 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$62=((lcoc_core.ISeqable.extensions(o7668$64, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$64, ));
}
final dc.dynamic $98=(lcoc_core.list.$_invoke$1($if_$62, ));
final dc.dynamic arg$64=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "==", )), ));
final dc.dynamic o7668$65=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-count", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__9233__auto__", )), )), ));
late final dc.dynamic $if_$63;
if((o7668$65 is lcoc_core.ISeqable$iface)){
$if_$63=((o7668$65 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$63=((lcoc_core.ISeqable.extensions(o7668$65, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$65, ));
}
final dc.dynamic $96=(lcoc_core.list.$_invoke$1($if_$63, ));
final dc.dynamic o7668$66=(lcoc_core.concat.$_invoke$3(arg$64, $96, (lcoc_core.list.$_invoke$1(2, )), ));
late final dc.dynamic $if_$64;
if((o7668$66 is lcoc_core.ISeqable$iface)){
$if_$64=((o7668$66 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$64=((lcoc_core.ISeqable.extensions(o7668$66, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$66, ));
}
final dc.dynamic $97=(lcoc_core.list.$_invoke$1($if_$64, ));
final dc.dynamic o7668$67=(lcoc_core.concat.$_invoke$3(arg$65, $98, $97, ));
late final dc.dynamic $if_$65;
if((o7668$67 is lcoc_core.ISeqable$iface)){
$if_$65=((o7668$67 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$65=((lcoc_core.ISeqable.extensions(o7668$67, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$67, ));
}
final dc.dynamic $103=(lcoc_core.list.$_invoke$1($if_$65, ));
final dc.dynamic arg$67=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-assoc", )), ));
final dc.dynamic arg$66=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9232__auto__", )), ));
final dc.dynamic o7668$68=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-nth", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__9233__auto__", )), )), (lcoc_core.list.$_invoke$1(0, )), ));
late final dc.dynamic $if_$66;
if((o7668$68 is lcoc_core.ISeqable$iface)){
$if_$66=((o7668$68 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$66=((lcoc_core.ISeqable.extensions(o7668$68, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$68, ));
}
final dc.dynamic $100=(lcoc_core.list.$_invoke$1($if_$66, ));
final dc.dynamic o7668$69=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-nth", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__9233__auto__", )), )), (lcoc_core.list.$_invoke$1(1, )), ));
late final dc.dynamic $if_$67;
if((o7668$69 is lcoc_core.ISeqable$iface)){
$if_$67=((o7668$69 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$67=((lcoc_core.ISeqable.extensions(o7668$69, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$69, ));
}
final dc.dynamic $99=(lcoc_core.list.$_invoke$1($if_$67, ));
final dc.dynamic o7668$70=(lcoc_core.concat.$_invoke$4(arg$67, arg$66, $100, $99, ));
late final dc.dynamic $if_$68;
if((o7668$70 is lcoc_core.ISeqable$iface)){
$if_$68=((o7668$70 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$68=((lcoc_core.ISeqable.extensions(o7668$70, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$70, ));
}
final dc.dynamic $102=(lcoc_core.list.$_invoke$1($if_$68, ));
final dc.dynamic o7668$71=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "reduce", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-conj", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9232__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__9233__auto__", )), )), ));
late final dc.dynamic $if_$69;
if((o7668$71 is lcoc_core.ISeqable$iface)){
$if_$69=((o7668$71 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$69=((lcoc_core.ISeqable.extensions(o7668$71, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$71, ));
}
final dc.dynamic $101=(lcoc_core.list.$_invoke$1($if_$69, ));
final dc.dynamic o7668$72=(lcoc_core.concat.$_invoke$4(arg$68, $103, $102, $101, ));
late final dc.dynamic $if_$70;
if((o7668$72 is lcoc_core.ISeqable$iface)){
$if_$70=((o7668$72 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$70=((lcoc_core.ISeqable.extensions(o7668$72, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$72, ));
}
final dc.dynamic $104=(lcoc_core.list.$_invoke$1($if_$70, ));
final dc.dynamic o7668$73=(lcoc_core.concat.$_invoke$3(arg$69, $105, $104, ));
late final dc.dynamic $if_$71;
if((o7668$73 is lcoc_core.ISeqable$iface)){
$if_$71=((o7668$73 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$71=((lcoc_core.ISeqable.extensions(o7668$73, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$73, ));
}
fl$5[17]=$if_$71;
fl$5[18]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IWithMeta", ));
late final dc.dynamic meta$1;
if((lcoc_core.gensym is dc.Function)){
meta$1=(lcoc_core.gensym as dc.Function)("meta", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
meta$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("meta", ));
}else{
meta$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "meta", ));
}
final dc.dynamic arg$70=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-with-meta", )), ));
final dc.dynamic o7668$74=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__9234__auto__", )), )), (lcoc_core.list.$_invoke$1(meta$1, )), ));
late final dc.dynamic $if_$72;
if((o7668$74 is lcoc_core.ISeqable$iface)){
$if_$72=((o7668$74 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$72=((lcoc_core.ISeqable.extensions(o7668$74, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$74, ));
}
final dc.dynamic $106=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$72, ));
final dc.dynamic $108=(lcoc_core.list.$_invoke$1($106, ));
final dc.dynamic o7668$75=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), )), (lcoc_core.list.$_invoke$1(name$1, )), (lcoc_core.conj.$_invoke$4(lcoc_core.vec(fields$1, ), meta$1, extmap$1, -1, )), ));
late final dc.dynamic $if_$73;
if((o7668$75 is lcoc_core.ISeqable$iface)){
$if_$73=((o7668$75 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$73=((lcoc_core.ISeqable.extensions(o7668$75, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$75, ));
}
final dc.dynamic $107=(lcoc_core.list.$_invoke$1($if_$73, ));
final dc.dynamic o7668$76=(lcoc_core.concat.$_invoke$3(arg$70, $108, $107, ));
late final dc.dynamic $if_$74;
if((o7668$76 is lcoc_core.ISeqable$iface)){
$if_$74=((o7668$76 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$74=((lcoc_core.ISeqable.extensions(o7668$76, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$76, ));
}
fl$5[19]=$if_$74;
fl$5[20]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IMeta", ));
final dc.dynamic arg$71=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-meta", )), ));
final dc.dynamic o7668$77=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__9235__auto__", )), )), ));
late final dc.dynamic $if_$75;
if((o7668$77 is lcoc_core.ISeqable$iface)){
$if_$75=((o7668$77 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$75=((lcoc_core.ISeqable.extensions(o7668$77, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$77, ));
}
final dc.dynamic $109=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$75, ));
final dc.dynamic $110=(lcoc_core.list.$_invoke$1($109, ));
final dc.dynamic o7668$78=(lcoc_core.concat.$_invoke$3(arg$71, $110, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "meta", )), )), ));
late final dc.dynamic $if_$76;
if((o7668$78 is lcoc_core.ISeqable$iface)){
$if_$76=((o7668$78 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$76=((lcoc_core.ISeqable.extensions(o7668$78, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$78, ));
}
fl$5[21]=$if_$76;
fl$5[22]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IKVReduce", ));
final dc.dynamic arg$75=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-kv-reduce", )), ));
final dc.dynamic o7668$79=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9236__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "f__9237__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "init__9238__auto__", )), )), ));
late final dc.dynamic $if_$77;
if((o7668$79 is lcoc_core.ISeqable$iface)){
$if_$77=((o7668$79 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$77=((lcoc_core.ISeqable.extensions(o7668$79, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$79, ));
}
final dc.dynamic $111=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$77, ));
final dc.dynamic $119=(lcoc_core.list.$_invoke$1($111, ));
final dc.dynamic arg$74=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "reduce", )), ));
final dc.dynamic arg$73=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), ));
final dc.dynamic arg$72=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "ret__9239__auto__", )), ));
final dc.dynamic o7668$80=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__9240__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "v__9241__auto__", )), )), ));
late final dc.dynamic $if_$78;
if((o7668$80 is lcoc_core.ISeqable$iface)){
$if_$78=((o7668$80 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$78=((lcoc_core.ISeqable.extensions(o7668$80, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$80, ));
}
final dc.dynamic $112=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$78, ));
final dc.dynamic $113=(lcoc_core.list.$_invoke$1($112, ));
final dc.dynamic o7668$81=(lcoc_core.concat.$_invoke$2(arg$72, $113, ));
late final dc.dynamic $if_$79;
if((o7668$81 is lcoc_core.ISeqable$iface)){
$if_$79=((o7668$81 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$79=((lcoc_core.ISeqable.extensions(o7668$81, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$81, ));
}
final dc.dynamic $114=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$79, ));
final dc.dynamic $116=(lcoc_core.list.$_invoke$1($114, ));
final dc.dynamic o7668$82=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "f__9237__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "ret__9239__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__9240__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "v__9241__auto__", )), )), ));
late final dc.dynamic $if_$80;
if((o7668$82 is lcoc_core.ISeqable$iface)){
$if_$80=((o7668$82 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$80=((lcoc_core.ISeqable.extensions(o7668$82, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$82, ));
}
final dc.dynamic $115=(lcoc_core.list.$_invoke$1($if_$80, ));
final dc.dynamic o7668$83=(lcoc_core.concat.$_invoke$3(arg$73, $116, $115, ));
late final dc.dynamic $if_$81;
if((o7668$83 is lcoc_core.ISeqable$iface)){
$if_$81=((o7668$83 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$81=((lcoc_core.ISeqable.extensions(o7668$83, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$83, ));
}
final dc.dynamic $117=(lcoc_core.list.$_invoke$1($if_$81, ));
final dc.dynamic o7668$84=(lcoc_core.concat.$_invoke$4(arg$74, $117, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "init__9238__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9236__auto__", )), )), ));
late final dc.dynamic $if_$82;
if((o7668$84 is lcoc_core.ISeqable$iface)){
$if_$82=((o7668$84 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$82=((lcoc_core.ISeqable.extensions(o7668$84, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$84, ));
}
final dc.dynamic $118=(lcoc_core.list.$_invoke$1($if_$82, ));
final dc.dynamic o7668$85=(lcoc_core.concat.$_invoke$3(arg$75, $119, $118, ));
late final dc.dynamic $if_$83;
if((o7668$85 is lcoc_core.ISeqable$iface)){
$if_$83=((o7668$85 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$83=((lcoc_core.ISeqable.extensions(o7668$85, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$85, ));
}
fl$5[23]=$if_$83;
final dc.dynamic arg$76=(lcoc_core.symbol.$_invoke$2("\$lib:d_collection", "MapMixin", ));
final dc.List<dc.dynamic> fl$17=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "mixin", 2105145522, ), ));
fl$17[1]=true;
fl$17[2]=const lcoc_core.Keyword(null, "type-params", 3003227952, );
final dc.List<dc.dynamic> fl$18=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "K", )), ));
fl$18[1]=(lcoc_core.symbol.$_invoke$2(null, "V", ));
final lcoc_core.PersistentList $121=lcoc_core.$_list_lit(fl$18, );
final dc.List<dc.dynamic> fl$19=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$19[1]=7217;
fl$19[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$19[3]=68;
final lcoc_core.PersistentHashMap $122=lcoc_core.$_map_lit(fl$19, );
final dc.dynamic $123=lcoc_core.with_meta($121, $122, );
fl$17[3]=$123;
final lcoc_core.PersistentHashMap $120=lcoc_core.$_map_lit(fl$17, );
final dc.dynamic $124=lcoc_core.with_meta(arg$76, $120, );
fl$5[24]=$124;
late final dc.dynamic coll$1;
if((lcoc_core.gensym is dc.Function)){
coll$1=(lcoc_core.gensym as dc.Function)("coll", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
coll$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("coll", ));
}else{
coll$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "coll", ));
}
final dc.dynamic arg$83=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "entries", )), ));
final dc.dynamic o7668$86=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(coll$1, )), ));
late final dc.dynamic $if_$84;
if((o7668$86 is lcoc_core.ISeqable$iface)){
$if_$84=((o7668$86 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$84=((lcoc_core.ISeqable.extensions(o7668$86, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$86, ));
}
final dc.dynamic $125=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$84, ));
final dc.dynamic $141=(lcoc_core.list.$_invoke$1($125, ));
final dc.dynamic arg$82=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "->", )), ));
final dc.dynamic arg$78=(lcoc_core.symbol.$_invoke$2(null, "dart", ));
final dc.dynamic arg$77=(lcoc_core.into.$_invoke$2(lcoc_core.$_EMPTY_VECTOR, (lcoc_core.map.$_invoke$2((dc.dynamic p1$9242_$SHARP_$1, ){
return (lcoc_core.list.$_invoke$4((lcoc_core.symbol.$_invoke$2(null, "new", )), (lcoc_core.symbol.$_invoke$2("dart:core", "MapEntry", )), (lcoc_core.keyword.$_invoke$1(p1$9242_$SHARP_$1, )), p1$9242_$SHARP_$1, ));
}, fields$1, )), ));
final dc.List<dc.dynamic> fl$20=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "fixed", 3683927621, ), ));
fl$20[1]=true;
final lcoc_core.PersistentHashMap $126=lcoc_core.$_map_lit(fl$20, );
final dc.dynamic $127=lcoc_core.with_meta(arg$77, $126, );
late final dc.dynamic $if_$85;
if((lcoc_core.tagged_literal is dc.Function)){
$if_$85=(lcoc_core.tagged_literal as dc.Function)(arg$78, $127, );
}else if((lcoc_core.tagged_literal is lcoc_core.IFn$iface)){
$if_$85=((lcoc_core.tagged_literal as lcoc_core.IFn$iface).$_invoke$2(arg$78, $127, ));
}else{
$if_$85=(lcoc_core.IFn.extensions(lcoc_core.tagged_literal, ).$_invoke$2(lcoc_core.tagged_literal, arg$78, $127, ));
}
final dc.dynamic $139=(lcoc_core.list.$_invoke$1($if_$85, ));
final dc.dynamic arg$79=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".followedBy", )), ));
final dc.dynamic o7668$87=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".-entries", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), ));
late final dc.dynamic $if_$86;
if((o7668$87 is lcoc_core.ISeqable$iface)){
$if_$86=((o7668$87 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$86=((lcoc_core.ISeqable.extensions(o7668$87, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$87, ));
}
final dc.dynamic $128=(lcoc_core.list.$_invoke$1($if_$86, ));
final dc.dynamic o7668$88=(lcoc_core.concat.$_invoke$2(arg$79, $128, ));
late final dc.dynamic $if_$87;
if((o7668$88 is lcoc_core.ISeqable$iface)){
$if_$87=((o7668$88 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$87=((lcoc_core.ISeqable.extensions(o7668$88, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$88, ));
}
final dc.dynamic $138=(lcoc_core.list.$_invoke$1($if_$87, ));
final dc.dynamic arg$81=(lcoc_core.symbol.$_invoke$2(null, ".cast", ));
final dc.List<dc.dynamic> fl$21=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.dynamic arg$80=(lcoc_core.symbol.$_invoke$2("dart:core", "MapEntry", ));
final dc.List<dc.dynamic> fl$23=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.List<dc.dynamic> fl$24=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "K", )), ));
fl$24[1]=(lcoc_core.symbol.$_invoke$2(null, "V", ));
final lcoc_core.PersistentList $131=lcoc_core.$_list_lit(fl$24, );
final dc.List<dc.dynamic> fl$25=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$25[1]=7227;
fl$25[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$25[3]=57;
final lcoc_core.PersistentHashMap $132=lcoc_core.$_map_lit(fl$25, );
final dc.dynamic $133=lcoc_core.with_meta($131, $132, );
fl$23[1]=$133;
final lcoc_core.PersistentHashMap $130=lcoc_core.$_map_lit(fl$23, );
final dc.dynamic $134=lcoc_core.with_meta(arg$80, $130, );
final dc.List<dc.dynamic> fl$22=(dc.List<dc.dynamic>.filled(1, $134, ));
final lcoc_core.PersistentVector $135=lcoc_core.$_vec_owning(fl$22, );
fl$21[1]=$135;
final lcoc_core.PersistentHashMap $129=lcoc_core.$_map_lit(fl$21, );
final dc.dynamic $136=lcoc_core.with_meta(arg$81, $129, );
final dc.dynamic $137=(lcoc_core.list.$_invoke$1($136, ));
final dc.dynamic o7668$89=(lcoc_core.concat.$_invoke$4(arg$82, $139, $138, $137, ));
late final dc.dynamic $if_$88;
if((o7668$89 is lcoc_core.ISeqable$iface)){
$if_$88=((o7668$89 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$88=((lcoc_core.ISeqable.extensions(o7668$89, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$89, ));
}
final dc.dynamic $140=(lcoc_core.list.$_invoke$1($if_$88, ));
final dc.dynamic o7668$90=(lcoc_core.concat.$_invoke$3(arg$83, $141, $140, ));
late final dc.dynamic $if_$89;
if((o7668$90 is lcoc_core.ISeqable$iface)){
$if_$89=((o7668$90 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$89=((lcoc_core.ISeqable.extensions(o7668$90, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$90, ));
}
fl$5[25]=$if_$89;
late final dc.dynamic coll$2;
if((lcoc_core.gensym is dc.Function)){
coll$2=(lcoc_core.gensym as dc.Function)("coll", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
coll$2=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("coll", ));
}else{
coll$2=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "coll", ));
}
final dc.dynamic arg$85=(lcoc_core.symbol.$_invoke$2(null, "keys", ));
final dc.List<dc.dynamic> fl$26=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
final dc.dynamic arg$84=(lcoc_core.symbol.$_invoke$2(null, "Iterable", ));
final dc.List<dc.dynamic> fl$27=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.List<dc.dynamic> fl$28=(dc.List<dc.dynamic>.filled(1, (lcoc_core.symbol.$_invoke$2(null, "K", )), ));
final lcoc_core.PersistentList $144=lcoc_core.$_list_lit(fl$28, );
final dc.List<dc.dynamic> fl$29=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$29[1]=7229;
fl$29[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$29[3]=74;
final lcoc_core.PersistentHashMap $145=lcoc_core.$_map_lit(fl$29, );
final dc.dynamic $146=lcoc_core.with_meta($144, $145, );
fl$27[1]=$146;
final lcoc_core.PersistentHashMap $143=lcoc_core.$_map_lit(fl$27, );
final dc.dynamic $147=lcoc_core.with_meta(arg$84, $143, );
fl$26[1]=$147;
final lcoc_core.PersistentHashMap $142=lcoc_core.$_map_lit(fl$26, );
final dc.dynamic $148=lcoc_core.with_meta(arg$85, $142, );
final dc.dynamic $162=(lcoc_core.list.$_invoke$1($148, ));
final dc.dynamic o7668$91=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(coll$2, )), ));
late final dc.dynamic $if_$90;
if((o7668$91 is lcoc_core.ISeqable$iface)){
$if_$90=((o7668$91 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$90=((lcoc_core.ISeqable.extensions(o7668$91, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$91, ));
}
final dc.dynamic $149=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$90, ));
final dc.dynamic $161=(lcoc_core.list.$_invoke$1($149, ));
final dc.dynamic arg$90=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "->", )), ));
final dc.dynamic arg$88=(lcoc_core.symbol.$_invoke$2(null, "dart", ));
final dc.dynamic arg$87=(lcoc_core.into.$_invoke$2(lcoc_core.$_EMPTY_VECTOR, (lcoc_core.map.$_invoke$2((dc.dynamic field$2, ){
late final dc.dynamic k$2;
if((lcoc_core.gensym is dc.Function)){
k$2=(lcoc_core.gensym as dc.Function)("k", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
k$2=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("k", ));
}else{
k$2=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "k", ));
}
final dc.dynamic arg$86=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.List<dc.dynamic> fl$30=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
fl$30[1]=(lcoc_core.symbol.$_invoke$2(null, "K", ));
final lcoc_core.PersistentHashMap $150=lcoc_core.$_map_lit(fl$30, );
final dc.dynamic $151=lcoc_core.with_meta(k$2, $150, );
final dc.dynamic $152=(lcoc_core.list.$_invoke$1($151, ));
final dc.dynamic o7668$92=(lcoc_core.concat.$_invoke$2($152, (lcoc_core.list.$_invoke$1((lcoc_core.keyword.$_invoke$1(field$2, )), )), ));
late final dc.dynamic $if_$91;
if((o7668$92 is lcoc_core.ISeqable$iface)){
$if_$91=((o7668$92 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$91=((lcoc_core.ISeqable.extensions(o7668$92, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$92, ));
}
final dc.dynamic $153=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$91, ));
final dc.dynamic $154=(lcoc_core.list.$_invoke$1($153, ));
final dc.dynamic o7668$93=(lcoc_core.concat.$_invoke$3(arg$86, $154, (lcoc_core.list.$_invoke$1(k$2, )), ));
if((o7668$93 is lcoc_core.ISeqable$iface)){
return ((o7668$93 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$93, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$93, ));
}, fields$1, )), ));
final dc.List<dc.dynamic> fl$31=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "fixed", 3683927621, ), ));
fl$31[1]=true;
fl$31[2]=const lcoc_core.Keyword(null, "tag", 2780644040, );
fl$31[3]=(lcoc_core.symbol.$_invoke$2(null, "K", ));
final lcoc_core.PersistentHashMap $155=lcoc_core.$_map_lit(fl$31, );
final dc.dynamic $156=lcoc_core.with_meta(arg$87, $155, );
late final dc.dynamic $if_$92;
if((lcoc_core.tagged_literal is dc.Function)){
$if_$92=(lcoc_core.tagged_literal as dc.Function)(arg$88, $156, );
}else if((lcoc_core.tagged_literal is lcoc_core.IFn$iface)){
$if_$92=((lcoc_core.tagged_literal as lcoc_core.IFn$iface).$_invoke$2(arg$88, $156, ));
}else{
$if_$92=(lcoc_core.IFn.extensions(lcoc_core.tagged_literal, ).$_invoke$2(lcoc_core.tagged_literal, arg$88, $156, ));
}
final dc.dynamic $159=(lcoc_core.list.$_invoke$1($if_$92, ));
final dc.dynamic arg$89=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".followedBy", )), ));
final dc.dynamic o7668$94=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".-keys", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), ));
late final dc.dynamic $if_$93;
if((o7668$94 is lcoc_core.ISeqable$iface)){
$if_$93=((o7668$94 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$93=((lcoc_core.ISeqable.extensions(o7668$94, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$94, ));
}
final dc.dynamic $157=(lcoc_core.list.$_invoke$1($if_$93, ));
final dc.dynamic o7668$95=(lcoc_core.concat.$_invoke$2(arg$89, $157, ));
late final dc.dynamic $if_$94;
if((o7668$95 is lcoc_core.ISeqable$iface)){
$if_$94=((o7668$95 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$94=((lcoc_core.ISeqable.extensions(o7668$95, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$95, ));
}
final dc.dynamic $158=(lcoc_core.list.$_invoke$1($if_$94, ));
final dc.dynamic o7668$96=(lcoc_core.concat.$_invoke$3(arg$90, $159, $158, ));
late final dc.dynamic $if_$95;
if((o7668$96 is lcoc_core.ISeqable$iface)){
$if_$95=((o7668$96 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$95=((lcoc_core.ISeqable.extensions(o7668$96, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$96, ));
}
final dc.dynamic $160=(lcoc_core.list.$_invoke$1($if_$95, ));
final dc.dynamic o7668$97=(lcoc_core.concat.$_invoke$3($162, $161, $160, ));
late final dc.dynamic $if_$96;
if((o7668$97 is lcoc_core.ISeqable$iface)){
$if_$96=((o7668$97 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$96=((lcoc_core.ISeqable.extensions(o7668$97, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$97, ));
}
fl$5[26]=$if_$96;
late final dc.dynamic coll$3;
if((lcoc_core.gensym is dc.Function)){
coll$3=(lcoc_core.gensym as dc.Function)("coll", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
coll$3=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("coll", ));
}else{
coll$3=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "coll", ));
}
final dc.dynamic arg$95=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "values", )), ));
final dc.dynamic o7668$98=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(coll$3, )), ));
late final dc.dynamic $if_$97;
if((o7668$98 is lcoc_core.ISeqable$iface)){
$if_$97=((o7668$98 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$97=((lcoc_core.ISeqable.extensions(o7668$98, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$98, ));
}
final dc.dynamic $163=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$97, ));
final dc.dynamic $170=(lcoc_core.list.$_invoke$1($163, ));
final dc.dynamic arg$94=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "->", )), ));
final dc.dynamic arg$92=(lcoc_core.symbol.$_invoke$2(null, "dart", ));
final lcoc_core.PersistentVector arg$91=lcoc_core.vec(fields$1, );
final dc.List<dc.dynamic> fl$32=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "fixed", 3683927621, ), ));
fl$32[1]=true;
fl$32[2]=const lcoc_core.Keyword(null, "tag", 2780644040, );
fl$32[3]=(lcoc_core.symbol.$_invoke$2(null, "V", ));
final lcoc_core.PersistentHashMap $164=lcoc_core.$_map_lit(fl$32, );
final dc.dynamic $165=lcoc_core.with_meta(arg$91, $164, );
late final dc.dynamic $if_$98;
if((lcoc_core.tagged_literal is dc.Function)){
$if_$98=(lcoc_core.tagged_literal as dc.Function)(arg$92, $165, );
}else if((lcoc_core.tagged_literal is lcoc_core.IFn$iface)){
$if_$98=((lcoc_core.tagged_literal as lcoc_core.IFn$iface).$_invoke$2(arg$92, $165, ));
}else{
$if_$98=(lcoc_core.IFn.extensions(lcoc_core.tagged_literal, ).$_invoke$2(lcoc_core.tagged_literal, arg$92, $165, ));
}
final dc.dynamic $168=(lcoc_core.list.$_invoke$1($if_$98, ));
final dc.dynamic arg$93=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".followedBy", )), ));
final dc.dynamic o7668$99=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".-values", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), ));
late final dc.dynamic $if_$99;
if((o7668$99 is lcoc_core.ISeqable$iface)){
$if_$99=((o7668$99 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$99=((lcoc_core.ISeqable.extensions(o7668$99, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$99, ));
}
final dc.dynamic $166=(lcoc_core.list.$_invoke$1($if_$99, ));
final dc.dynamic o7668$100=(lcoc_core.concat.$_invoke$2(arg$93, $166, ));
late final dc.dynamic $if_$100;
if((o7668$100 is lcoc_core.ISeqable$iface)){
$if_$100=((o7668$100 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$100=((lcoc_core.ISeqable.extensions(o7668$100, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$100, ));
}
final dc.dynamic $167=(lcoc_core.list.$_invoke$1($if_$100, ));
final dc.dynamic o7668$101=(lcoc_core.concat.$_invoke$3(arg$94, $168, $167, ));
late final dc.dynamic $if_$101;
if((o7668$101 is lcoc_core.ISeqable$iface)){
$if_$101=((o7668$101 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$101=((lcoc_core.ISeqable.extensions(o7668$101, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$101, ));
}
final dc.dynamic $169=(lcoc_core.list.$_invoke$1($if_$101, ));
final dc.dynamic o7668$102=(lcoc_core.concat.$_invoke$3(arg$95, $170, $169, ));
late final dc.dynamic $if_$102;
if((o7668$102 is lcoc_core.ISeqable$iface)){
$if_$102=((o7668$102 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$102=((lcoc_core.ISeqable.extensions(o7668$102, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$102, ));
}
fl$5[27]=$if_$102;
final dc.dynamic arg$96=(lcoc_core.list.$_invoke$1("[]", ));
final dc.dynamic o7668$103=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9243__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__9244__auto__", )), )), ));
late final dc.dynamic $if_$103;
if((o7668$103 is lcoc_core.ISeqable$iface)){
$if_$103=((o7668$103 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$103=((lcoc_core.ISeqable.extensions(o7668$103, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$103, ));
}
final dc.dynamic $171=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$103, ));
final dc.dynamic $173=(lcoc_core.list.$_invoke$1($171, ));
final dc.dynamic o7668$104=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-lookup", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9243__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__9244__auto__", )), )), (lcoc_core.list.$_invoke$1(null, )), ));
late final dc.dynamic $if_$104;
if((o7668$104 is lcoc_core.ISeqable$iface)){
$if_$104=((o7668$104 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$104=((lcoc_core.ISeqable.extensions(o7668$104, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$104, ));
}
final dc.dynamic $172=(lcoc_core.list.$_invoke$1($if_$104, ));
final dc.dynamic o7668$105=(lcoc_core.concat.$_invoke$3(arg$96, $173, $172, ));
late final dc.dynamic $if_$105;
if((o7668$105 is lcoc_core.ISeqable$iface)){
$if_$105=((o7668$105 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$105=((lcoc_core.ISeqable.extensions(o7668$105, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$105, ));
}
fl$5[28]=$if_$105;
final dc.dynamic arg$98=(lcoc_core.list.$_invoke$1("[]=", ));
final dc.dynamic o7668$106=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9245__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "key__9246__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "val__9247__auto__", )), )), ));
late final dc.dynamic $if_$106;
if((o7668$106 is lcoc_core.ISeqable$iface)){
$if_$106=((o7668$106 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$106=((lcoc_core.ISeqable.extensions(o7668$106, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$106, ));
}
final dc.dynamic $174=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$106, ));
final dc.dynamic $177=(lcoc_core.list.$_invoke$1($174, ));
final dc.dynamic arg$97=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "throw", )), ));
final dc.dynamic o7668$107=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "UnsupportedError.", )), )), (lcoc_core.list.$_invoke$1("[]= not supported on defrecord", )), ));
late final dc.dynamic $if_$107;
if((o7668$107 is lcoc_core.ISeqable$iface)){
$if_$107=((o7668$107 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$107=((lcoc_core.ISeqable.extensions(o7668$107, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$107, ));
}
final dc.dynamic $175=(lcoc_core.list.$_invoke$1($if_$107, ));
final dc.dynamic o7668$108=(lcoc_core.concat.$_invoke$2(arg$97, $175, ));
late final dc.dynamic $if_$108;
if((o7668$108 is lcoc_core.ISeqable$iface)){
$if_$108=((o7668$108 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$108=((lcoc_core.ISeqable.extensions(o7668$108, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$108, ));
}
final dc.dynamic $176=(lcoc_core.list.$_invoke$1($if_$108, ));
final dc.dynamic o7668$109=(lcoc_core.concat.$_invoke$3(arg$98, $177, $176, ));
late final dc.dynamic $if_$109;
if((o7668$109 is lcoc_core.ISeqable$iface)){
$if_$109=((o7668$109 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$109=((lcoc_core.ISeqable.extensions(o7668$109, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$109, ));
}
fl$5[29]=$if_$109;
final dc.dynamic arg$100=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "remove", )), ));
final dc.dynamic o7668$110=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9248__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "val__9249__auto__", )), )), ));
late final dc.dynamic $if_$110;
if((o7668$110 is lcoc_core.ISeqable$iface)){
$if_$110=((o7668$110 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$110=((lcoc_core.ISeqable.extensions(o7668$110, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$110, ));
}
final dc.dynamic $178=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$110, ));
final dc.dynamic $181=(lcoc_core.list.$_invoke$1($178, ));
final dc.dynamic arg$99=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "throw", )), ));
final dc.dynamic o7668$111=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "UnsupportedError.", )), )), (lcoc_core.list.$_invoke$1("remove not supported on defrecord", )), ));
late final dc.dynamic $if_$111;
if((o7668$111 is lcoc_core.ISeqable$iface)){
$if_$111=((o7668$111 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$111=((lcoc_core.ISeqable.extensions(o7668$111, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$111, ));
}
final dc.dynamic $179=(lcoc_core.list.$_invoke$1($if_$111, ));
final dc.dynamic o7668$112=(lcoc_core.concat.$_invoke$2(arg$99, $179, ));
late final dc.dynamic $if_$112;
if((o7668$112 is lcoc_core.ISeqable$iface)){
$if_$112=((o7668$112 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$112=((lcoc_core.ISeqable.extensions(o7668$112, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$112, ));
}
final dc.dynamic $180=(lcoc_core.list.$_invoke$1($if_$112, ));
final dc.dynamic o7668$113=(lcoc_core.concat.$_invoke$3(arg$100, $181, $180, ));
late final dc.dynamic $if_$113;
if((o7668$113 is lcoc_core.ISeqable$iface)){
$if_$113=((o7668$113 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$113=((lcoc_core.ISeqable.extensions(o7668$113, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$113, ));
}
fl$5[30]=$if_$113;
final dc.dynamic arg$102=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "clear", )), ));
final dc.dynamic o7668$114=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9250__auto__", )), )), ));
late final dc.dynamic $if_$114;
if((o7668$114 is lcoc_core.ISeqable$iface)){
$if_$114=((o7668$114 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$114=((lcoc_core.ISeqable.extensions(o7668$114, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$114, ));
}
final dc.dynamic $182=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$114, ));
final dc.dynamic $185=(lcoc_core.list.$_invoke$1($182, ));
final dc.dynamic arg$101=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "throw", )), ));
final dc.dynamic o7668$115=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "UnsupportedError.", )), )), (lcoc_core.list.$_invoke$1("clear not supported on defrecord", )), ));
late final dc.dynamic $if_$115;
if((o7668$115 is lcoc_core.ISeqable$iface)){
$if_$115=((o7668$115 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$115=((lcoc_core.ISeqable.extensions(o7668$115, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$115, ));
}
final dc.dynamic $183=(lcoc_core.list.$_invoke$1($if_$115, ));
final dc.dynamic o7668$116=(lcoc_core.concat.$_invoke$2(arg$101, $183, ));
late final dc.dynamic $if_$116;
if((o7668$116 is lcoc_core.ISeqable$iface)){
$if_$116=((o7668$116 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$116=((lcoc_core.ISeqable.extensions(o7668$116, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$116, ));
}
final dc.dynamic $184=(lcoc_core.list.$_invoke$1($if_$116, ));
final dc.dynamic o7668$117=(lcoc_core.concat.$_invoke$3(arg$102, $185, $184, ));
late final dc.dynamic $if_$117;
if((o7668$117 is lcoc_core.ISeqable$iface)){
$if_$117=((o7668$117 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$117=((lcoc_core.ISeqable.extensions(o7668$117, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$117, ));
}
fl$5[31]=$if_$117;
final dc.dynamic arg$103=(lcoc_core.symbol.$_invoke$2(null, "cast", ));
final dc.List<dc.dynamic> fl$33=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
final dc.List<dc.dynamic> fl$34=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.List<dc.dynamic> fl$35=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "RK", )), ));
fl$35[1]=(lcoc_core.symbol.$_invoke$2(null, "RV", ));
final lcoc_core.PersistentList $188=lcoc_core.$_list_lit(fl$35, );
final dc.List<dc.dynamic> fl$36=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$36[1]=7252;
fl$36[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$36[3]=67;
final lcoc_core.PersistentHashMap $189=lcoc_core.$_map_lit(fl$36, );
final dc.dynamic $190=lcoc_core.with_meta($188, $189, );
fl$34[1]=$190;
final lcoc_core.PersistentHashMap $187=lcoc_core.$_map_lit(fl$34, );
final dc.dynamic $191=lcoc_core.with_meta(name$1, $187, );
fl$33[1]=$191;
fl$33[2]=const lcoc_core.Keyword(null, "type-params", 3003227952, );
final dc.List<dc.dynamic> fl$37=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "RK", )), ));
fl$37[1]=(lcoc_core.symbol.$_invoke$2(null, "RV", ));
final lcoc_core.PersistentList $192=lcoc_core.$_list_lit(fl$37, );
final dc.List<dc.dynamic> fl$38=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$38[1]=7253;
fl$38[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$38[3]=45;
final lcoc_core.PersistentHashMap $193=lcoc_core.$_map_lit(fl$38, );
final dc.dynamic $194=lcoc_core.with_meta($192, $193, );
fl$33[3]=$194;
final lcoc_core.PersistentHashMap $186=lcoc_core.$_map_lit(fl$33, );
final dc.dynamic $195=lcoc_core.with_meta(arg$103, $186, );
final dc.dynamic $212=(lcoc_core.list.$_invoke$1($195, ));
final dc.dynamic o7668$118=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9251__auto__", )), )), ));
late final dc.dynamic $if_$118;
if((o7668$118 is lcoc_core.ISeqable$iface)){
$if_$118=((o7668$118 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$118=((lcoc_core.ISeqable.extensions(o7668$118, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$118, ));
}
final dc.dynamic $196=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$118, ));
final dc.dynamic $211=(lcoc_core.list.$_invoke$1($196, ));
final dc.dynamic arg$108=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), ));
final dc.List<dc.dynamic> fl$39=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.List<dc.dynamic> fl$40=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "RK", )), ));
fl$40[1]=(lcoc_core.symbol.$_invoke$2(null, "RV", ));
final lcoc_core.PersistentList $198=lcoc_core.$_list_lit(fl$40, );
final dc.List<dc.dynamic> fl$41=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$41[1]=7254;
fl$41[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$41[3]=50;
final lcoc_core.PersistentHashMap $199=lcoc_core.$_map_lit(fl$41, );
final dc.dynamic $200=lcoc_core.with_meta($198, $199, );
fl$39[1]=$200;
final lcoc_core.PersistentHashMap $197=lcoc_core.$_map_lit(fl$39, );
final dc.dynamic $201=lcoc_core.with_meta(name$1, $197, );
final dc.dynamic $209=(lcoc_core.list.$_invoke$1($201, ));
final lcoc_core.PersistentVector arg$107=lcoc_core.vec(fields$1, );
final dc.dynamic arg$106=(lcoc_core.symbol.$_invoke$2(null, "meta", ));
final dc.dynamic arg$105=(lcoc_core.symbol.$_invoke$2(null, ".", ));
final dc.dynamic arg$104=(lcoc_core.symbol.$_invoke$2(null, "cast", ));
final dc.List<dc.dynamic> fl$42=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.List<dc.dynamic> fl$43=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "RK", )), ));
fl$43[1]=(lcoc_core.symbol.$_invoke$2(null, "RV", ));
final lcoc_core.PersistentList $203=lcoc_core.$_list_lit(fl$43, );
final dc.List<dc.dynamic> fl$44=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$44[1]=7256;
fl$44[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$44[3]=66;
final lcoc_core.PersistentHashMap $204=lcoc_core.$_map_lit(fl$44, );
final dc.dynamic $205=lcoc_core.with_meta($203, $204, );
fl$42[1]=$205;
final lcoc_core.PersistentHashMap $202=lcoc_core.$_map_lit(fl$42, );
final dc.dynamic $206=lcoc_core.with_meta(arg$104, $202, );
final dc.dynamic $207=(lcoc_core.list.$_invoke$3(arg$105, extmap$1, $206, ));
final dc.dynamic $208=(lcoc_core.conj.$_invoke$4(arg$107, arg$106, $207, (lcoc_core.symbol.$_invoke$2(null, "__hash", )), ));
final dc.dynamic o7668$119=(lcoc_core.concat.$_invoke$3(arg$108, $209, $208, ));
late final dc.dynamic $if_$119;
if((o7668$119 is lcoc_core.ISeqable$iface)){
$if_$119=((o7668$119 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$119=((lcoc_core.ISeqable.extensions(o7668$119, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$119, ));
}
final dc.dynamic $210=(lcoc_core.list.$_invoke$1($if_$119, ));
final dc.dynamic o7668$120=(lcoc_core.concat.$_invoke$3($212, $211, $210, ));
late final dc.dynamic $if_$120;
if((o7668$120 is lcoc_core.ISeqable$iface)){
$if_$120=((o7668$120 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$120=((lcoc_core.ISeqable.extensions(o7668$120, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$120, ));
}
fl$5[32]=$if_$120;
fl$5[33]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IHash", ));
final dc.dynamic arg$112=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-hash", )), ));
final dc.dynamic o7668$121=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9252__auto__", )), )), ));
late final dc.dynamic $if_$121;
if((o7668$121 is lcoc_core.ISeqable$iface)){
$if_$121=((o7668$121 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$121=((lcoc_core.ISeqable.extensions(o7668$121, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$121, ));
}
final dc.dynamic $213=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$121, ));
final dc.dynamic $220=(lcoc_core.list.$_invoke$1($213, ));
final dc.dynamic arg$111=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "ensure-hash", )), ));
final dc.dynamic arg$110=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "__hash", )), ));
final dc.dynamic arg$109=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "bit-xor", )), ));
final dc.List<dc.dynamic> fl$45=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "nses", 3771051699, ), ));
fl$45[1]=const lcoc_core.Keyword(null, "current-ns", 1862637831, );
final lcoc_core.PersistentVector $214=lcoc_core.$_vec_owning(fl$45, );
final dc.dynamic o7900$1=(lcoc_core.get_in.$_invoke$2($AMPERSAND_env$1, $214, ));
late final dc.int cast$2;
if((o7900$1 is lcoc_core.IHash$iface)){
cast$2=(((o7900$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$2=(((lcoc_core.IHash.extensions(o7900$1, ) as lcoc_core.IHash$ext).$_hash$0(o7900$1, )) as dc.int);
}
final dc.dynamic o7900$2=name$1;
late final dc.int cast$3;
if((o7900$2 is lcoc_core.IHash$iface)){
cast$3=(((o7900$2 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$3=(((lcoc_core.IHash.extensions(o7900$2, ) as lcoc_core.IHash$ext).$_hash$0(o7900$2, )) as dc.int);
}
final dc.int $215=(cast$2^cast$3);
final dc.dynamic $217=(lcoc_core.list.$_invoke$1($215, ));
final dc.dynamic o7668$122=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "hash-unordered-coll", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__9252__auto__", )), )), ));
late final dc.dynamic $if_$122;
if((o7668$122 is lcoc_core.ISeqable$iface)){
$if_$122=((o7668$122 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$122=((lcoc_core.ISeqable.extensions(o7668$122, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$122, ));
}
final dc.dynamic $216=(lcoc_core.list.$_invoke$1($if_$122, ));
final dc.dynamic o7668$123=(lcoc_core.concat.$_invoke$3(arg$109, $217, $216, ));
late final dc.dynamic $if_$123;
if((o7668$123 is lcoc_core.ISeqable$iface)){
$if_$123=((o7668$123 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$123=((lcoc_core.ISeqable.extensions(o7668$123, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$123, ));
}
final dc.dynamic $218=(lcoc_core.list.$_invoke$1($if_$123, ));
final dc.dynamic o7668$124=(lcoc_core.concat.$_invoke$3(arg$111, arg$110, $218, ));
late final dc.dynamic $if_$124;
if((o7668$124 is lcoc_core.ISeqable$iface)){
$if_$124=((o7668$124 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$124=((lcoc_core.ISeqable.extensions(o7668$124, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$124, ));
}
final dc.dynamic $219=(lcoc_core.list.$_invoke$1($if_$124, ));
final dc.dynamic o7668$125=(lcoc_core.concat.$_invoke$3(arg$112, $220, $219, ));
late final dc.dynamic $if_$125;
if((o7668$125 is lcoc_core.ISeqable$iface)){
$if_$125=((o7668$125 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$125=((lcoc_core.ISeqable.extensions(o7668$125, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$125, ));
}
fl$5[34]=$if_$125;
final dc.dynamic arg$113=(lcoc_core.symbol.$_invoke$2("cljd.core", "ToStringMixin", ));
final dc.List<dc.dynamic> fl$46=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "mixin", 2105145522, ), ));
fl$46[1]=true;
final lcoc_core.PersistentHashMap $221=lcoc_core.$_map_lit(fl$46, );
final dc.dynamic $222=lcoc_core.with_meta(arg$113, $221, );
fl$5[35]=$222;
fl$5[36]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IPrint", ));
final dc.dynamic arg$114=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-print", )), ));
final dc.dynamic o7668$126=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__9253__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "sink__9254__auto__", )), )), ));
late final dc.dynamic $if_$126;
if((o7668$126 is lcoc_core.ISeqable$iface)){
$if_$126=((o7668$126 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$126=((lcoc_core.ISeqable.extensions(o7668$126, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$126, ));
}
final dc.dynamic $223=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$126, ));
final dc.dynamic $225=(lcoc_core.list.$_invoke$1($223, ));
final dc.dynamic o7668$127=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "print-map", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__9253__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "sink__9254__auto__", )), )), ));
late final dc.dynamic $if_$127;
if((o7668$127 is lcoc_core.ISeqable$iface)){
$if_$127=((o7668$127 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$127=((lcoc_core.ISeqable.extensions(o7668$127, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$127, ));
}
final dc.dynamic $224=(lcoc_core.list.$_invoke$1($if_$127, ));
final dc.dynamic o7668$128=(lcoc_core.concat.$_invoke$3(arg$114, $225, $224, ));
late final dc.dynamic $if_$128;
if((o7668$128 is lcoc_core.ISeqable$iface)){
$if_$128=((o7668$128 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$128=((lcoc_core.ISeqable.extensions(o7668$128, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$128, ));
}
fl$5[37]=$if_$128;
final lcoc_core.PersistentVector record_body$1=lcoc_core.vec(fl$5, );
late final dc.dynamic m$1;
if((lcoc_core.gensym is dc.Function)){
m$1=(lcoc_core.gensym as dc.Function)("m", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
m$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("m", ));
}else{
m$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "m", ));
}
final dc.dynamic arg$22=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), ));
final dc.dynamic arg$6=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "deftype", )), ));
final dc.List<dc.dynamic> fl$6=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.List<dc.dynamic> fl$7=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "K", )), ));
fl$7[1]=(lcoc_core.symbol.$_invoke$2(null, "V", ));
final lcoc_core.PersistentList $8=lcoc_core.$_list_lit(fl$7, );
final dc.List<dc.dynamic> fl$8=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "line", 878494669, ), ));
fl$8[1]=7271;
fl$8[2]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$8[3]=51;
final lcoc_core.PersistentHashMap $9=lcoc_core.$_map_lit(fl$8, );
final dc.dynamic $10=lcoc_core.with_meta($8, $9, );
fl$6[1]=$10;
final lcoc_core.PersistentHashMap $7=lcoc_core.$_map_lit(fl$6, );
final dc.dynamic $11=lcoc_core.with_meta(name$1, $7, );
final dc.dynamic $16=(lcoc_core.list.$_invoke$1($11, ));
final lcoc_core.PersistentVector arg$5=lcoc_core.vec(fields$1, );
final dc.dynamic arg$4=(lcoc_core.symbol.$_invoke$2(null, "meta", ));
final dc.dynamic arg$3=(lcoc_core.symbol.$_invoke$2(null, "__hash", ));
final dc.List<dc.dynamic> fl$9=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "mutable", 314630028, ), ));
fl$9[1]=true;
fl$9[2]=const lcoc_core.Keyword(null, "tag", 2780644040, );
fl$9[3]=(lcoc_core.symbol.$_invoke$2("dart:core", "int", ));
final lcoc_core.PersistentHashMap $12=lcoc_core.$_map_lit(fl$9, );
final dc.dynamic $13=lcoc_core.with_meta(arg$3, $12, );
final dc.dynamic $14=(lcoc_core.conj.$_invoke$4(arg$5, arg$4, extmap$1, $13, ));
final dc.dynamic $15=(lcoc_core.list.$_invoke$1($14, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$6(arg$6, $16, $15, (lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "type-only", 3917315094, ), )), (lcoc_core.list.$_invoke$1(true, )), (lcoc_core.concat.$_invoke$2(opts$PLUS_specs$1, record_body$1, )), ));
late final dc.dynamic $if_$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $35=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic arg$12=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "defn", )), ));
final dc.dynamic arg$7=(lcoc_core.symbol.$_invoke$1((lcoc_core.str.$_invoke$2("->", name$1, )), ));
final dc.List<dc.dynamic> fl$10=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
fl$10[1]=name$1;
final lcoc_core.PersistentHashMap $17=lcoc_core.$_map_lit(fl$10, );
final dc.dynamic $18=lcoc_core.with_meta(arg$7, $17, );
final dc.dynamic $22=(lcoc_core.list.$_invoke$1($18, ));
final dc.dynamic arg$11=(lcoc_core.list.$_invoke$1(lcoc_core.vec(fields$1, ), ));
final dc.dynamic arg$10=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), ));
final dc.dynamic arg$9=(lcoc_core.list.$_invoke$1(name$1, ));
final dc.dynamic arg$8=(lcoc_core.list.$_invoke$1(null, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$2;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $19=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$2, ));
final dc.dynamic $20=(lcoc_core.list.$_invoke$1($19, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$6(arg$10, arg$9, fields$1, arg$8, $20, (lcoc_core.list.$_invoke$1(-1, )), ));
late final dc.dynamic $if_$3;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $21=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$4(arg$12, $22, arg$11, $21, ));
late final dc.dynamic $if_$4;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $34=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic arg$21=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "defn", )), ));
final dc.dynamic arg$13=(lcoc_core.symbol.$_invoke$1((lcoc_core.str.$_invoke$2("map->", name$1, )), ));
final dc.List<dc.dynamic> fl$11=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
fl$11[1]=name$1;
final lcoc_core.PersistentHashMap $23=lcoc_core.$_map_lit(fl$11, );
final dc.dynamic $24=lcoc_core.with_meta(arg$13, $23, );
final dc.dynamic $32=(lcoc_core.list.$_invoke$1($24, ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(m$1, )), ));
late final dc.dynamic $if_$5;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
final dc.dynamic $25=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$5, ));
final dc.dynamic $31=(lcoc_core.list.$_invoke$1($25, ));
final dc.dynamic arg$20=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), ));
final dc.dynamic arg$19=(lcoc_core.list.$_invoke$1(name$1, ));
final dc.dynamic arg$18=(lcoc_core.map.$_invoke$2((dc.dynamic k$1, ){
return (lcoc_core.list.$_invoke$2((lcoc_core.keyword.$_invoke$1(k$1, )), m$1, ));
}, fields$1, ));
final dc.dynamic arg$17=(lcoc_core.list.$_invoke$1(null, ));
final dc.dynamic arg$16=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "reduce", )), ));
final dc.dynamic arg$15=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "dissoc", )), ));
final dc.dynamic arg$14=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "into", )), ));
final dc.dynamic o7668$7=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$6;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
final dc.dynamic $26=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$6, ));
final dc.dynamic $27=(lcoc_core.list.$_invoke$1($26, ));
final dc.dynamic o7668$8=(lcoc_core.concat.$_invoke$3(arg$14, $27, (lcoc_core.list.$_invoke$1(m$1, )), ));
late final dc.dynamic $if_$7;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
final dc.dynamic $28=(lcoc_core.list.$_invoke$1($if_$7, ));
final dc.dynamic o7668$9=(lcoc_core.concat.$_invoke$4(arg$16, arg$15, $28, (lcoc_core.list.$_invoke$1((lcoc_core.into.$_invoke$3(lcoc_core.$_EMPTY_VECTOR, (lcoc_core.map.$_invoke$1(lcoc_core.keyword, )), fields$1, )), )), ));
late final dc.dynamic $if_$8;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
final dc.dynamic $29=(lcoc_core.list.$_invoke$1($if_$8, ));
final dc.dynamic o7668$10=(lcoc_core.concat.$_invoke$6(arg$20, arg$19, arg$18, arg$17, $29, (lcoc_core.list.$_invoke$1(-1, )), ));
late final dc.dynamic $if_$9;
if((o7668$10 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
final dc.dynamic $30=(lcoc_core.list.$_invoke$1($if_$9, ));
final dc.dynamic o7668$11=(lcoc_core.concat.$_invoke$4(arg$21, $32, $31, $30, ));
late final dc.dynamic $if_$10;
if((o7668$11 is lcoc_core.ISeqable$iface)){
$if_$10=((o7668$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7668$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$11, ));
}
final dc.dynamic $33=(lcoc_core.list.$_invoke$1($if_$10, ));
final dc.dynamic o7668$12=(lcoc_core.concat.$_invoke$4(arg$22, $35, $34, $33, ));
if((o7668$12 is lcoc_core.ISeqable$iface)){
return ((o7668$12 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$12, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END defrecordifn18695hm$1

// BEGIN deftype
lcoc_core.IFn$iface deftype=lcoc_core.deftypeifn18695hm$1(null, );

// END deftype

// BEGIN deftypeifn18695hm$1
class deftypeifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

deftypeifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.deftypeifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic args$1, ){
final dc.dynamic vec$8646_$1=args$1;
final dc.dynamic o7668$1=vec$8646_$1;
late final dc.dynamic seq$8647_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
seq$8647_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8647_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic first$8648_$1=lcoc_core.first(seq$8647_$1, );
final dc.dynamic seq$8647_$2=lcoc_core.next(seq$8647_$1, );
final dc.dynamic class_name$1=first$8648_$1;
final dc.dynamic first$8648_$2=lcoc_core.first(seq$8647_$2, );
final dc.dynamic seq$8647_$3=lcoc_core.next(seq$8647_$2, );
final dc.dynamic fields$1=first$8648_$2;
final dc.dynamic args$2=seq$8647_$3;
final dc.dynamic vec$8649_$1=lcoc_core.roll_leading_opts(args$2, );
final dc.dynamic opts$1=(lcoc_core.nth.$_invoke$3(vec$8649_$1, 0, null, ));
final dc.dynamic specs$1=(lcoc_core.nth.$_invoke$3(vec$8649_$1, 1, null, ));
final dc.dynamic specs$2=(lcoc_core.map.$_invoke$2((dc.dynamic form$1, ){
if(lcoc_core.symbol$QMARK_(form$1, )){
return form$1;
}
final dc.dynamic vec$8652_$1=form$1;
final dc.dynamic o7668$2=vec$8652_$1;
late final dc.dynamic seq$8653_$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
seq$8653_$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8653_$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic first$8654_$1=lcoc_core.first(seq$8653_$1, );
final dc.dynamic seq$8653_$2=lcoc_core.next(seq$8653_$1, );
final dc.dynamic n$1=first$8654_$1;
final dc.dynamic first$8654_$2=lcoc_core.first(seq$8653_$2, );
final dc.dynamic seq$8653_$3=lcoc_core.next(seq$8653_$2, );
final dc.dynamic p$1=first$8654_$2;
final dc.dynamic body$1=seq$8653_$3;
return lcoc_core.cons(n$1, lcoc_core.maybe_destructured(p$1, body$1, ), );
}, specs$1, ));
final dc.dynamic deftype_form$1=(lcoc_core.list$STAR_.$_invoke$5((lcoc_core.symbol.$_invoke$2(null, "deftype*", )), class_name$1, fields$1, opts$1, specs$2, ));
final dc.dynamic or$7573_$AUTO_$1=(lcoc_core.Keyword(null, "type-only", 3917315094, ).$_invoke$1(opts$1, ));
late final dc.dynamic $if_$3;
if(((or$7573_$AUTO_$1!=false)&&(or$7573_$AUTO_$1!=null))){
$if_$3=or$7573_$AUTO_$1;
}else{
final dc.dynamic o7872$1=class_name$1;
late final dc.dynamic $if_$1;
if((o7872$1 is lcoc_core.IMeta$iface)){
$if_$1=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$1=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
final dc.dynamic or$7573_$AUTO_$2=(lcoc_core.Keyword(null, "abstract", 928480153, ).$_invoke$1($if_$1, ));
if(((or$7573_$AUTO_$2!=false)&&(or$7573_$AUTO_$2!=null))){
$if_$3=or$7573_$AUTO_$2;
}else{
final dc.dynamic o7872$2=class_name$1;
late final dc.dynamic $if_$2;
if((o7872$2 is lcoc_core.IMeta$iface)){
$if_$2=((o7872$2 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$2=((lcoc_core.IMeta.extensions(o7872$2, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$2, ));
}
$if_$3=(lcoc_core.Keyword(null, "mixin", 2105145522, ).$_invoke$1($if_$2, ));
}
}
if((($if_$3!=false)&&($if_$3!=null))){
return deftype_form$1;
}
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1(deftype_form$1, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "defn", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$1((lcoc_core.str.$_invoke$2("->", class_name$1, )), )), ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$1(fields$1, ));
late final dc.dynamic $if_$4;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$4, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.vary_meta.$_invoke$3(class_name$1, lcoc_core.dissoc, lcoc_core.Keyword(null, "type-params", 3003227952, ), )), )), fields$1, ));
late final dc.dynamic $if_$5;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$4(arg$2, arg$1, $3, $2, ));
late final dc.dynamic $if_$6;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$3(arg$4, arg$3, $4, ));
if((o7668$6 is lcoc_core.ISeqable$iface)){
return ((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END deftypeifn18695hm$1

// BEGIN delay
lcoc_core.IFn$iface delay=lcoc_core.delayifn18695hm$1(null, );

// END delay

// BEGIN delay?
dc.dynamic delay$QMARK_(dc.dynamic x$1, ){
return (x$1 is lcoc_core.Delay);
}

// END delay?

// BEGIN delayifn18695hm$1
class delayifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

delayifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.delayifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic body$1, ){
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "Delay", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1(null, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$3(arg$1, $2, body$1, ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$4(arg$4, arg$3, arg$2, $3, ));
if((o7668$3 is lcoc_core.ISeqable$iface)){
return ((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END delayifn18695hm$1

// BEGIN deref
dc.dynamic deref(dc.dynamic ref$1, ){
final dc.dynamic o7717$1=ref$1;
if((o7717$1 is lcoc_core.IDeref$iface)){
return ((o7717$1 as lcoc_core.IDeref$iface).$_deref$0());
}
return ((lcoc_core.IDeref.extensions(o7717$1, ) as lcoc_core.IDeref$ext).$_deref$0(o7717$1, ));
}

// END deref

// BEGIN destructure
dc.dynamic destructure(dc.dynamic bindings$1, ){
final dc.dynamic bents$1=(lcoc_core.partition.$_invoke$2(2, bindings$1, ));
dc.dynamic pb$1(dc.dynamic bvec$1, dc.dynamic b$1, dc.dynamic v$1, ){
dc.dynamic pvec$1(dc.dynamic bvec$2, dc.dynamic b$2, dc.dynamic val$1, ){
late final dc.dynamic gvec$1;
if((lcoc_core.gensym is dc.Function)){
gvec$1=(lcoc_core.gensym as dc.Function)("vec__", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
gvec$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("vec__", ));
}else{
gvec$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "vec__", ));
}
late final dc.dynamic gseq$1;
if((lcoc_core.gensym is dc.Function)){
gseq$1=(lcoc_core.gensym as dc.Function)("seq__", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
gseq$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("seq__", ));
}else{
gseq$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "seq__", ));
}
late final dc.dynamic gfirst$1;
if((lcoc_core.gensym is dc.Function)){
gfirst$1=(lcoc_core.gensym as dc.Function)("first__", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
gfirst$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("first__", ));
}else{
gfirst$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "first__", ));
}
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(1, (lcoc_core.symbol.$_invoke$2(null, "&", )), ));
final lcoc_core.PersistentHashSet $1=lcoc_core.$set_(fl$1, );
final dc.dynamic has_rest$1=lcoc_core.some($1, b$2, );
final dc.dynamic ret$1=(lcoc_core.conj.$_invoke$3(bvec$2, gvec$1, val$1, ));
dc.dynamic ret$2;
if(((has_rest$1!=false)&&(has_rest$1!=null))){
ret$2=(lcoc_core.conj.$_invoke$3(ret$1, gseq$1, (lcoc_core.list.$_invoke$2((lcoc_core.symbol.$_invoke$2("cljd.core", "seq", )), gvec$1, )), ));
}else{
ret$2=ret$1;
}
dc.dynamic n$1=0;
dc.dynamic bs$1=b$2;
dc.dynamic seen_rest$QMARK_$1=false;
do {
final dc.dynamic o7668$1=bs$1;
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((($if_$1!=false)&&($if_$1!=null))){
final dc.dynamic firstb$1=lcoc_core.first(bs$1, );
if((lcoc_core.$EQ_.$_invoke$2(firstb$1, (lcoc_core.symbol.$_invoke$2(null, "&", )), ))){
ret$2=pb$1(ret$2, lcoc_core.second(bs$1, ), gseq$1, );
bs$1=lcoc_core.nnext(bs$1, );
seen_rest$QMARK_$1=true;
continue;
}
if((lcoc_core.$EQ_.$_invoke$2(firstb$1, lcoc_core.Keyword(null, "as", 55427094, ), ))){
return pb$1(ret$2, lcoc_core.second(bs$1, ), gvec$1, );
}
if(((seen_rest$QMARK_$1!=false)&&(seen_rest$QMARK_$1!=null))){
throw dc.Exception("Unsupported binding form, only :as can follow & parameter", );
}
late final dc.dynamic $if_$5;
if(((has_rest$1!=false)&&(has_rest$1!=null))){
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "first", )), )), (lcoc_core.list.$_invoke$1(gseq$1, )), ));
late final dc.dynamic $if_$3;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "next", )), )), (lcoc_core.list.$_invoke$1(gseq$1, )), ));
late final dc.dynamic $if_$2;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
$if_$5=(lcoc_core.conj.$_invoke$5(ret$2, gfirst$1, $if_$3, gseq$1, $if_$2, ));
}else{
$if_$5=ret$2;
}
late final dc.dynamic $if_$4;
if(((has_rest$1!=false)&&(has_rest$1!=null))){
$if_$4=gfirst$1;
}else{
$if_$4=(lcoc_core.list.$_invoke$4((lcoc_core.symbol.$_invoke$2("cljd.core", "nth", )), gvec$1, n$1, null, ));
}
ret$2=pb$1($if_$5, firstb$1, $if_$4, );
n$1=(1+(n$1 as dc.num));
bs$1=lcoc_core.next(bs$1, );
continue;
}
return ret$2;
} while(true);
}
dc.dynamic pmap$1(dc.dynamic bvec$3, dc.dynamic b$3, dc.dynamic v$2, ){
final dc.dynamic or$7573_$AUTO_$1=(lcoc_core.Keyword(null, "as", 55427094, ).$_invoke$1(b$3, ));
late final dc.dynamic $if_$7;
if(((or$7573_$AUTO_$1!=false)&&(or$7573_$AUTO_$1!=null))){
$if_$7=or$7573_$AUTO_$1;
}else if((lcoc_core.gensym is dc.Function)){
$if_$7=(lcoc_core.gensym as dc.Function)("map__", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
$if_$7=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("map__", ));
}else{
$if_$7=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "map__", ));
}
final dc.dynamic o7872$1=b$3;
late final dc.dynamic $if_$6;
if((o7872$1 is lcoc_core.IMeta$iface)){
$if_$6=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$6=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
final dc.dynamic gmap$1=(lcoc_core.vary_meta.$_invoke$3($if_$7, lcoc_core.merge, $if_$6, ));
final dc.dynamic defaults$1=(lcoc_core.Keyword(null, "or", 3079089802, ).$_invoke$1(b$3, ));
final dc.dynamic obj_mode$1=lcoc_core.some((dc.dynamic p$8612_$1, ){
final dc.dynamic vec$8613_$1=p$8612_$1;
final dc.dynamic k$1=(lcoc_core.nth.$_invoke$3(vec$8613_$1, 0, null, ));
final dc.dynamic v$3=(lcoc_core.nth.$_invoke$3(vec$8613_$1, 1, null, ));
final dc.bool and$7533_$AUTO_$1=lcoc_core.keyword$QMARK_(k$1, );
late final dc.bool or$7573_$AUTO_$2;
if(and$7533_$AUTO_$1){
or$7573_$AUTO_$2=(lcoc_core.$EQ_.$_invoke$2("flds", lcoc_core.name(k$1, ), ));
}else{
or$7573_$AUTO_$2=and$7533_$AUTO_$1;
}
if(or$7573_$AUTO_$2){
return or$7573_$AUTO_$2;
}
final dc.bool and$7533_$AUTO_$2=lcoc_core.simple_symbol$QMARK_(v$3, );
if(and$7533_$AUTO_$2){
return (lcoc_core.name(v$3, ).startsWith(".-", ));
}
return and$7533_$AUTO_$2;
}, b$3, );
final dc.dynamic coll7707$1=bvec$3;
final dc.dynamic o7708$1=gmap$1;
late final dc.dynamic coll7707$2;
if((coll7707$1 is lcoc_core.ICollection$iface)){
coll7707$2=((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}else{
coll7707$2=((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
}
final dc.dynamic o7708$2=v$2;
late final dc.dynamic G$8616_$1;
if((coll7707$2 is lcoc_core.ICollection$iface)){
G$8616_$1=((coll7707$2 as lcoc_core.ICollection$iface).$_conj$1(o7708$2, ));
}else{
G$8616_$1=((lcoc_core.ICollection.extensions(coll7707$2, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$2, o7708$2, ));
}
late final dc.bool $if_$8;
if(((obj_mode$1!=false)&&(obj_mode$1!=null))){
$if_$8=false;
}else{
$if_$8=true;
}
dc.dynamic ret$3;
if($if_$8){
final dc.dynamic coll7707$3=G$8616_$1;
final dc.dynamic o7708$3=gmap$1;
late final dc.dynamic coll7707$4;
if((coll7707$3 is lcoc_core.ICollection$iface)){
coll7707$4=((coll7707$3 as lcoc_core.ICollection$iface).$_conj$1(o7708$3, ));
}else{
coll7707$4=((lcoc_core.ICollection.extensions(coll7707$3, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$3, o7708$3, ));
}
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "seq?", )), )), (lcoc_core.list.$_invoke$1(gmap$1, )), ));
late final dc.dynamic $if_$9;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$9, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-map-lit", )), ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "seq", )), )), (lcoc_core.list.$_invoke$1(gmap$1, )), ));
late final dc.dynamic $if_$10;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$10=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$10, ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$2(arg$1, $2, ));
late final dc.dynamic $if_$11;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$11=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$11, ));
final dc.dynamic o7668$7=(lcoc_core.concat.$_invoke$4(arg$2, $4, $3, (lcoc_core.list.$_invoke$1(gmap$1, )), ));
late final dc.dynamic o7708$4;
if((o7668$7 is lcoc_core.ISeqable$iface)){
o7708$4=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
o7708$4=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
if((coll7707$4 is lcoc_core.ICollection$iface)){
ret$3=((coll7707$4 as lcoc_core.ICollection$iface).$_conj$1(o7708$4, ));
}else{
ret$3=((lcoc_core.ICollection.extensions(coll7707$4, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$4, o7708$4, ));
}
}else{
ret$3=G$8616_$1;
}
final dc.dynamic coll7722$1=lcoc_core.keys(b$3, );
dc.dynamic f7723$1(dc.dynamic transforms$1, dc.dynamic mk$1, ){
if(lcoc_core.keyword$QMARK_(mk$1, )){
final dc.dynamic x7661$1=mk$1;
late final dc.String? mkns$1;
if((x7661$1 is lcoc_core.INamed$iface)){
mkns$1=(((x7661$1 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
mkns$1=(((lcoc_core.INamed.extensions(x7661$1, ) as lcoc_core.INamed$ext).$_namespace$0(x7661$1, )) as dc.String?);
}
final dc.String mkn$1=lcoc_core.name(mk$1, );
if((lcoc_core.$EQ_.$_invoke$2(mkn$1, "keys", ))){
final dc.dynamic coll7790$1=transforms$1;
final dc.dynamic k7791$1=mk$1;
dc.dynamic v7792$1(dc.dynamic p1$8607_$SHARP_$1, ){
final dc.String? or$7573_$AUTO_$3=mkns$1;
late final dc.String? $if_$12;
if((or$7573_$AUTO_$3!=null)){
$if_$12=or$7573_$AUTO_$3;
}else{
final dc.dynamic x7661$2=p1$8607_$SHARP_$1;
if((x7661$2 is lcoc_core.INamed$iface)){
$if_$12=(((x7661$2 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
$if_$12=(((lcoc_core.INamed.extensions(x7661$2, ) as lcoc_core.INamed$ext).$_namespace$0(x7661$2, )) as dc.String?);
}
}
return (lcoc_core.keyword.$_invoke$2($if_$12, lcoc_core.name(p1$8607_$SHARP_$1, ), ));
}
if((coll7790$1 is lcoc_core.IAssociative$iface)){
return ((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, ));
}
if((lcoc_core.$EQ_.$_invoke$2(mkn$1, "syms", ))){
final dc.dynamic coll7790$2=transforms$1;
final dc.dynamic k7791$2=mk$1;
dc.dynamic v7792$2(dc.dynamic p1$8608_$SHARP_$1, ){
final dc.dynamic arg$3=(lcoc_core.symbol.$_invoke$2(null, "quote", ));
final dc.String? or$7573_$AUTO_$4=mkns$1;
late final dc.String? $if_$13;
if((or$7573_$AUTO_$4!=null)){
$if_$13=or$7573_$AUTO_$4;
}else{
final dc.dynamic x7661$3=p1$8608_$SHARP_$1;
if((x7661$3 is lcoc_core.INamed$iface)){
$if_$13=(((x7661$3 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
$if_$13=(((lcoc_core.INamed.extensions(x7661$3, ) as lcoc_core.INamed$ext).$_namespace$0(x7661$3, )) as dc.String?);
}
}
final dc.dynamic $5=(lcoc_core.symbol.$_invoke$2($if_$13, lcoc_core.name(p1$8608_$SHARP_$1, ), ));
return (lcoc_core.list.$_invoke$2(arg$3, $5, ));
}
if((coll7790$2 is lcoc_core.IAssociative$iface)){
return ((coll7790$2 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$2, v7792$2, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$2, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$2, k7791$2, v7792$2, ));
}
if((lcoc_core.$EQ_.$_invoke$2(mkn$1, "strs", ))){
final dc.dynamic coll7790$3=transforms$1;
final dc.dynamic k7791$3=mk$1;
final lcoc_core.IFn$iface v7792$3=lcoc_core.str;
if((coll7790$3 is lcoc_core.IAssociative$iface)){
return ((coll7790$3 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$3, v7792$3, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$3, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$3, k7791$3, v7792$3, ));
}
if((lcoc_core.$EQ_.$_invoke$2(mkn$1, "flds", ))){
final dc.dynamic coll7790$4=transforms$1;
final dc.dynamic k7791$4=mk$1;
dc.dynamic v7792$4(dc.dynamic p1$8609_$SHARP_$1, ){
return (lcoc_core.symbol.$_invoke$1((lcoc_core.str.$_invoke$2(".-", lcoc_core.name(p1$8609_$SHARP_$1, ), )), ));
}
if((coll7790$4 is lcoc_core.IAssociative$iface)){
return ((coll7790$4 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$4, v7792$4, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$4, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$4, k7791$4, v7792$4, ));
}
return transforms$1;
}
return transforms$1;
}
final lcoc_core.PersistentHashMap start7724$1=lcoc_core.$_EMPTY_MAP;
late final dc.dynamic transforms$2;
if((coll7722$1 is lcoc_core.IReduce$iface)){
transforms$2=((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}else{
transforms$2=((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}
final dc.dynamic coll7722$2=transforms$2;
dc.dynamic f7723$3(dc.dynamic bes$1, dc.dynamic entry$1, ){
final dc.dynamic f$1=lcoc_core.key(entry$1, );
late final dc.dynamic coll7722$3;
if((f$1 is dc.Function)){
coll7722$3=(f$1 as dc.Function)(bes$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
coll7722$3=((f$1 as lcoc_core.IFn$iface).$_invoke$1(bes$1, ));
}else{
coll7722$3=(lcoc_core.IFn.extensions(f$1, ).$_invoke$1(f$1, bes$1, ));
}
dc.dynamic f7723$2(dc.dynamic p1$8610_$SHARP_$1, dc.dynamic p2$8611_$SHARP_$1, ){
final dc.dynamic coll7790$5=p1$8610_$SHARP_$1;
final dc.dynamic k7791$5=p2$8611_$SHARP_$1;
final dc.dynamic f$2=lcoc_core.val(entry$1, );
late final dc.dynamic v7792$5;
if((f$2 is dc.Function)){
v7792$5=(f$2 as dc.Function)(p2$8611_$SHARP_$1, );
}else if((f$2 is lcoc_core.IFn$iface)){
v7792$5=((f$2 as lcoc_core.IFn$iface).$_invoke$1(p2$8611_$SHARP_$1, ));
}else{
v7792$5=(lcoc_core.IFn.extensions(f$2, ).$_invoke$1(f$2, p2$8611_$SHARP_$1, ));
}
if((coll7790$5 is lcoc_core.IAssociative$iface)){
return ((coll7790$5 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$5, v7792$5, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$5, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$5, k7791$5, v7792$5, ));
}
final dc.dynamic start7724$2=(lcoc_core.dissoc.$_invoke$2(bes$1, lcoc_core.key(entry$1, ), ));
if((coll7722$3 is lcoc_core.IReduce$iface)){
return ((coll7722$3 as lcoc_core.IReduce$iface).$_reduce$2(f7723$2, start7724$2, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$3, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$3, f7723$2, start7724$2, ));
}
final dc.dynamic start7724$3=(lcoc_core.dissoc.$_invoke$3(b$3, lcoc_core.Keyword(null, "as", 55427094, ), lcoc_core.Keyword(null, "or", 3079089802, ), ));
dc.dynamic bes$2;
if((coll7722$2 is lcoc_core.IReduce$iface)){
bes$2=((coll7722$2 as lcoc_core.IReduce$iface).$_reduce$2(f7723$3, start7724$3, ));
}else{
bes$2=((lcoc_core.IReduce.extensions(coll7722$2, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$2, f7723$3, start7724$3, ));
}
do {
final dc.dynamic o7668$8=bes$2;
late final dc.dynamic $if_$14;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$14=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$14=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
if((($if_$14!=false)&&($if_$14!=null))){
final dc.dynamic bb$1=lcoc_core.key(lcoc_core.first(bes$2, ), );
final dc.dynamic bk$1=lcoc_core.val(lcoc_core.first(bes$2, ), );
late final dc.dynamic local$1;
if(lcoc_core.ident$QMARK_(bb$1, )){
final dc.dynamic arg$4=(lcoc_core.symbol.$_invoke$2(null, lcoc_core.name(bb$1, ), ));
final dc.dynamic o7872$2=bb$1;
late final dc.dynamic $if_$15;
if((o7872$2 is lcoc_core.IMeta$iface)){
$if_$15=((o7872$2 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$15=((lcoc_core.IMeta.extensions(o7872$2, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$2, ));
}
local$1=lcoc_core.with_meta(arg$4, $if_$15, );
}else{
local$1=bb$1;
}
final dc.bool and$7533_$AUTO_$3=lcoc_core.simple_symbol$QMARK_(bk$1, );
late final dc.bool $if_$16;
if(and$7533_$AUTO_$3){
$if_$16=(lcoc_core.name(bk$1, ).startsWith(".-", ));
}else{
$if_$16=and$7533_$AUTO_$3;
}
late final dc.dynamic bv$1;
if($if_$16){
bv$1=(lcoc_core.list.$_invoke$4((lcoc_core.symbol.$_invoke$2(null, "if", )), (lcoc_core.list.$_invoke$2((lcoc_core.symbol.$_invoke$2("cljd.core", "nil?", )), gmap$1, )), (lcoc_core.$get_.$_invoke$2(defaults$1, local$1, )), (lcoc_core.list.$_invoke$2(bk$1, gmap$1, )), ));
}else if(lcoc_core.contains$QMARK_(defaults$1, local$1, )){
final dc.dynamic arg$5=(lcoc_core.symbol.$_invoke$2("cljd.core", "get", ));
late final dc.dynamic $if_$17;
if((defaults$1 is dc.Function)){
$if_$17=(defaults$1 as dc.Function)(local$1, );
}else if((defaults$1 is lcoc_core.IFn$iface)){
$if_$17=((defaults$1 as lcoc_core.IFn$iface).$_invoke$1(local$1, ));
}else{
$if_$17=(lcoc_core.IFn.extensions(defaults$1, ).$_invoke$1(defaults$1, local$1, ));
}
bv$1=(lcoc_core.list.$_invoke$4(arg$5, gmap$1, bk$1, $if_$17, ));
}else{
bv$1=(lcoc_core.list.$_invoke$3((lcoc_core.symbol.$_invoke$2("cljd.core", "get", )), gmap$1, bk$1, ));
}
if(lcoc_core.ident$QMARK_(bb$1, )){
ret$3=(lcoc_core.conj.$_invoke$3(ret$3, local$1, bv$1, ));
}else{
ret$3=pb$1(ret$3, bb$1, bv$1, );
}
bes$2=lcoc_core.next(bes$2, );
continue;
}
return ret$3;
} while(true);
}
if(lcoc_core.symbol$QMARK_(b$1, )){
final dc.dynamic coll7707$5=bvec$1;
final dc.dynamic o7708$5=b$1;
late final dc.dynamic coll7707$6;
if((coll7707$5 is lcoc_core.ICollection$iface)){
coll7707$6=((coll7707$5 as lcoc_core.ICollection$iface).$_conj$1(o7708$5, ));
}else{
coll7707$6=((lcoc_core.ICollection.extensions(coll7707$5, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$5, o7708$5, ));
}
final dc.dynamic o7708$6=v$1;
if((coll7707$6 is lcoc_core.ICollection$iface)){
return ((coll7707$6 as lcoc_core.ICollection$iface).$_conj$1(o7708$6, ));
}
return ((lcoc_core.ICollection.extensions(coll7707$6, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$6, o7708$6, ));
}
if(lcoc_core.vector$QMARK_(b$1, )){
return pvec$1(bvec$1, b$1, v$1, );
}
if(lcoc_core.map$QMARK_(b$1, )){
return pmap$1(bvec$1, b$1, v$1, );
}
throw dc.Exception((lcoc_core.str.$_invoke$2("Unsupported binding form: ", b$1, )), );
}
final dc.dynamic Function(dc.dynamic, dc.dynamic, dc.dynamic, ) pb$2=pb$1;
dc.dynamic process_entry$1(dc.dynamic bvec$4, dc.dynamic b$4, ){
return pb$2(bvec$4, lcoc_core.first(b$4, ), lcoc_core.second(b$4, ), );
}
if(lcoc_core.every$QMARK_(lcoc_core.symbol$QMARK_, (lcoc_core.map.$_invoke$2(lcoc_core.first, bents$1, )), )){
return bindings$1;
}
final dc.dynamic coll7722$4=bents$1;
final dc.dynamic Function(dc.dynamic, dc.dynamic, ) f7723$4=process_entry$1;
final lcoc_core.PersistentVector start7724$4=lcoc_core.$_EMPTY_VECTOR;
if((coll7722$4 is lcoc_core.IReduce$iface)){
return ((coll7722$4 as lcoc_core.IReduce$iface).$_reduce$2(f7723$4, start7724$4, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$4, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$4, f7723$4, start7724$4, ));
}

// END destructure

// BEGIN disj
lcoc_core.IFn$iface disj=lcoc_core.disjifn18695hm$1(null, );

// END disj

// BEGIN disj!
lcoc_core.IFn$iface disj$BANG_=lcoc_core.disj$BANG_ifn18695hm$1(null, );

// END disj!

// BEGIN disj$BANG_ifn18695hm$1
class disj$BANG_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

disj$BANG_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.disj$BANG_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $set_$2, dc.dynamic key$2, dc.dynamic ks$2, ){
dc.dynamic $set_$1=$set_$2;
dc.dynamic key$1=key$2;
dc.dynamic ks$1=ks$2;
do {
final dc.dynamic tcoll7956$1=$set_$1;
final dc.dynamic v7957$1=key$1;
late final dc.dynamic ret$1;
if((tcoll7956$1 is lcoc_core.ITransientSet$iface)){
ret$1=((tcoll7956$1 as lcoc_core.ITransientSet$iface).$_disjoin$BANG_$1(v7957$1, ));
}else{
ret$1=((lcoc_core.ITransientSet.extensions(tcoll7956$1, ) as lcoc_core.ITransientSet$ext).$_disjoin$BANG_$1(tcoll7956$1, v7957$1, ));
}
if(((ks$1 as dc.dynamic?)!=null)){
$set_$1=ret$1;
key$1=lcoc_core.first(ks$1, );
ks$1=lcoc_core.next(ks$1, );
continue;
}
return ret$1;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic $set_$3, ){
return $set_$3;
}

dc.dynamic $_invoke$2(dc.dynamic $set_$4, dc.dynamic key$3, ){
final dc.dynamic tcoll7956$2=$set_$4;
final dc.dynamic v7957$2=key$3;
if((tcoll7956$2 is lcoc_core.ITransientSet$iface)){
return ((tcoll7956$2 as lcoc_core.ITransientSet$iface).$_disjoin$BANG_$1(v7957$2, ));
}
return ((lcoc_core.ITransientSet.extensions(tcoll7956$2, ) as lcoc_core.ITransientSet$ext).$_disjoin$BANG_$1(tcoll7956$2, v7957$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END disj$BANG_ifn18695hm$1

// BEGIN disjifn18695hm$1
class disjifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

disjifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.disjifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $set_$2, dc.dynamic key$2, dc.dynamic ks$2, ){
dc.dynamic $set_$1=$set_$2;
dc.dynamic key$1=key$2;
dc.dynamic ks$1=ks$2;
do {
final dc.dynamic coll7950$1=$set_$1;
final dc.dynamic v7951$1=key$1;
late final dc.dynamic ret$1;
if((coll7950$1 is lcoc_core.ISet$iface)){
ret$1=((coll7950$1 as lcoc_core.ISet$iface).$_disjoin$1(v7951$1, ));
}else{
ret$1=((lcoc_core.ISet.extensions(coll7950$1, ) as lcoc_core.ISet$ext).$_disjoin$1(coll7950$1, v7951$1, ));
}
if(((ks$1 as dc.dynamic?)!=null)){
$set_$1=ret$1;
key$1=lcoc_core.first(ks$1, );
ks$1=lcoc_core.next(ks$1, );
continue;
}
return ret$1;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic $set_$3, ){
return $set_$3;
}

dc.dynamic $_invoke$2(dc.dynamic $set_$4, dc.dynamic key$3, ){
final dc.dynamic coll7950$2=$set_$4;
final dc.dynamic v7951$2=key$3;
if((coll7950$2 is lcoc_core.ISet$iface)){
return ((coll7950$2 as lcoc_core.ISet$iface).$_disjoin$1(v7951$2, ));
}
return ((lcoc_core.ISet.extensions(coll7950$2, ) as lcoc_core.ISet$ext).$_disjoin$1(coll7950$2, v7951$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END disjifn18695hm$1

// BEGIN dissoc
lcoc_core.IFn$iface dissoc=lcoc_core.dissocifn18695hm$1(null, );

// END dissoc

// BEGIN dissoc!
lcoc_core.IFn$iface dissoc$BANG_=lcoc_core.dissoc$BANG_ifn18695hm$1(null, );

// END dissoc!

// BEGIN dissoc$BANG_ifn18695hm$1
class dissoc$BANG_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

dissoc$BANG_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.dissoc$BANG_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic tcoll$2, dc.dynamic key$2, dc.dynamic ks$2, ){
dc.dynamic tcoll$1=tcoll$2;
dc.dynamic key$1=key$2;
dc.dynamic ks$1=ks$2;
do {
final dc.dynamic tcoll7944$1=tcoll$1;
final dc.dynamic key7945$1=key$1;
late final dc.dynamic ntcoll$1;
if((tcoll7944$1 is lcoc_core.ITransientMap$iface)){
ntcoll$1=((tcoll7944$1 as lcoc_core.ITransientMap$iface).$_dissoc$BANG_$1(key7945$1, ));
}else{
ntcoll$1=((lcoc_core.ITransientMap.extensions(tcoll7944$1, ) as lcoc_core.ITransientMap$ext).$_dissoc$BANG_$1(tcoll7944$1, key7945$1, ));
}
if(((ks$1!=false)&&(ks$1!=null))){
tcoll$1=ntcoll$1;
key$1=lcoc_core.first(ks$1, );
ks$1=lcoc_core.next(ks$1, );
continue;
}
return ntcoll$1;
} while(true);
}

dc.dynamic $_invoke$2(dc.dynamic tcoll$3, dc.dynamic key$3, ){
final dc.dynamic tcoll7944$2=tcoll$3;
final dc.dynamic key7945$2=key$3;
if((tcoll7944$2 is lcoc_core.ITransientMap$iface)){
return ((tcoll7944$2 as lcoc_core.ITransientMap$iface).$_dissoc$BANG_$1(key7945$2, ));
}
return ((lcoc_core.ITransientMap.extensions(tcoll7944$2, ) as lcoc_core.ITransientMap$ext).$_dissoc$BANG_$1(tcoll7944$2, key7945$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END dissoc$BANG_ifn18695hm$1

// BEGIN dissocifn18695hm$1
class dissocifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

dissocifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.dissocifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic map$2, dc.dynamic key$2, dc.dynamic ks$2, ){
dc.dynamic map$1=map$2;
dc.dynamic key$1=key$2;
dc.dynamic ks$1=ks$2;
do {
final dc.dynamic coll7859$1=map$1;
final dc.dynamic k7860$1=key$1;
late final dc.dynamic some$7546_$AUTO_$1;
if((coll7859$1 is lcoc_core.IMap$iface)){
some$7546_$AUTO_$1=((coll7859$1 as lcoc_core.IMap$iface).$_dissoc$1(k7860$1, ));
}else{
some$7546_$AUTO_$1=((lcoc_core.IMap.extensions(coll7859$1, ) as lcoc_core.IMap$ext).$_dissoc$1(coll7859$1, k7860$1, ));
}
if((null==some$7546_$AUTO_$1)){
return null;
}
final dc.dynamic ret$1=some$7546_$AUTO_$1;
if(((ks$1!=false)&&(ks$1!=null))){
map$1=ret$1;
key$1=lcoc_core.first(ks$1, );
ks$1=lcoc_core.next(ks$1, );
continue;
}
return ret$1;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic map$3, ){
return map$3;
}

dc.dynamic $_invoke$2(dc.dynamic map$4, dc.dynamic key$3, ){
final dc.dynamic coll7859$2=map$4;
final dc.dynamic k7860$2=key$3;
if((coll7859$2 is lcoc_core.IMap$iface)){
return ((coll7859$2 as lcoc_core.IMap$iface).$_dissoc$1(k7860$2, ));
}
return ((lcoc_core.IMap.extensions(coll7859$2, ) as lcoc_core.IMap$ext).$_dissoc$1(coll7859$2, k7860$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END dissocifn18695hm$1

// BEGIN distinct
lcoc_core.IFn$iface distinct=lcoc_core.distinctifn18695hm$1(null, );

// END distinct

// BEGIN distinct$QMARK_ifn18695hm$1
class distinct$QMARK_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

distinct$QMARK_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.distinct$QMARK_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
if((lcoc_core.not$EQ_.$_invoke$2(x$1, y$1, ))){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, x$1, ));
fl$1[1]=y$1;
final lcoc_core.PersistentHashSet s$1=lcoc_core.$set_(fl$1, );
final dc.dynamic G$9131_$1=more$1;
final dc.dynamic vec$9132_$1=G$9131_$1;
final dc.dynamic o7668$1=vec$9132_$1;
late final dc.dynamic seq$9133_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
seq$9133_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9133_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic first$9134_$1=lcoc_core.first(seq$9133_$1, );
final dc.dynamic seq$9133_$2=lcoc_core.next(seq$9133_$1, );
final dc.dynamic x$2=first$9134_$1;
final dc.dynamic etc$1=seq$9133_$2;
final dc.dynamic xs$1=vec$9132_$1;
dc.dynamic s$2=s$1;
dc.dynamic G$9131_$2=G$9131_$1;
do {
final dc.dynamic s$3=s$2;
final dc.dynamic vec$9135_$1=G$9131_$2;
final dc.dynamic o7668$2=vec$9135_$1;
late final dc.dynamic seq$9136_$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
seq$9136_$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9136_$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic first$9137_$1=lcoc_core.first(seq$9136_$1, );
final dc.dynamic seq$9136_$2=lcoc_core.next(seq$9136_$1, );
final dc.dynamic x$3=first$9137_$1;
final dc.dynamic etc$2=seq$9136_$2;
final dc.dynamic xs$2=vec$9135_$1;
if(((xs$2!=false)&&(xs$2!=null))){
if(lcoc_core.contains$QMARK_(s$3, x$3, )){
return false;
}
final dc.dynamic coll7707$1=s$3;
final dc.dynamic o7708$1=x$3;
if((coll7707$1 is lcoc_core.ICollection$iface)){
s$2=((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}else{
s$2=((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
}
G$9131_$2=etc$2;
continue;
}
return true;
} while(true);
}
return false;
}

dc.dynamic $_invoke$1(dc.dynamic x$4, ){
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$2, ){
if((lcoc_core.$EQ_.$_invoke$2(x$5, y$2, ))){
return false;
}
return true;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END distinct$QMARK_ifn18695hm$1

// BEGIN distinct?
lcoc_core.IFn$iface distinct$QMARK_=lcoc_core.distinct$QMARK_ifn18695hm$1(null, );

// END distinct?

// BEGIN distinctReify18695hm$1
class distinctReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final lcoc_core.Volatile seen$1;

distinctReify18695hm$1(this.meta$1, this.rf$1, this.seen$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.distinctReify18695hm$1(m$2395_$AUTO_$1, rf$1, seen$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
if(lcoc_core.contains$QMARK_(lcoc_core.deref(seen$1, ), input$1, )){
return result$2;
}
final lcoc_core.Volatile o8024$1=seen$1;
final lcoc_core.Volatile o7717$1=seen$1;
late final dc.dynamic coll7707$1;
if((o7717$1 is lcoc_core.IDeref$iface)){
coll7707$1=((o7717$1 as lcoc_core.IDeref$iface).$_deref$0());
}else{
coll7707$1=((lcoc_core.IDeref.extensions(o7717$1, ) as lcoc_core.IDeref$ext).$_deref$0(o7717$1, ));
}
final dc.dynamic o7708$1=input$1;
late final dc.dynamic new_value8025$1;
if((coll7707$1 is lcoc_core.ICollection$iface)){
new_value8025$1=((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}else{
new_value8025$1=((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
}
if((o8024$1 is lcoc_core.IVolatile$iface)){
(o8024$1 as lcoc_core.IVolatile$iface).$_vreset$BANG_$1(new_value8025$1, );
}else{
(lcoc_core.IVolatile.extensions(o8024$1, ) as lcoc_core.IVolatile$ext).$_vreset$BANG_$1(o8024$1, new_value8025$1, );
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END distinctReify18695hm$1

// BEGIN distinctifn18695hm$1
class distinctifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

distinctifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.distinctifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$0(){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile seen$1=lcoc_core.volatile$BANG_(lcoc_core.$_EMPTY_SET, );
final lcoc_core.distinctReify18695hm$1 f$1=lcoc_core.distinctReify18695hm$1(null, rf$1, seen$1, );
return f$1;
};
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
lcoc_core.LazySeq step$1(dc.dynamic xs$1, dc.dynamic seen$2, ){
return lcoc_core.LazySeq(null, ((){
return (dc.dynamic p$9123_$2, dc.dynamic seen$4, ){
dc.dynamic p$9123_$1=p$9123_$2;
dc.dynamic seen$3=seen$4;
do {
final dc.dynamic vec$9124_$1=p$9123_$1;
final dc.dynamic f$2=(lcoc_core.nth.$_invoke$3(vec$9124_$1, 0, null, ));
final dc.dynamic xs$2=vec$9124_$1;
final dc.dynamic o7668$1=xs$2;
late final dc.dynamic temp$7560_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
temp$7560_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7560_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if(((temp$7560_$AUTO_$1!=false)&&(temp$7560_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7560_$AUTO_$1;
if(lcoc_core.contains$QMARK_(seen$3, f$2, )){
p$9123_$1=lcoc_core.rest(s$1, );
continue;
}
final dc.dynamic arg$1=lcoc_core.rest(s$1, );
final dc.dynamic coll7707$2=seen$3;
final dc.dynamic o7708$2=f$2;
late final dc.dynamic $if_$1;
if((coll7707$2 is lcoc_core.ICollection$iface)){
$if_$1=((coll7707$2 as lcoc_core.ICollection$iface).$_conj$1(o7708$2, ));
}else{
$if_$1=((lcoc_core.ICollection.extensions(coll7707$2, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$2, o7708$2, ));
}
final dc.dynamic $1=step$1(arg$1, $if_$1, );
return lcoc_core.cons(f$2, $1, );
}
return null;
} while(true);
}(xs$1, seen$2, );
} as dc.dynamic?), null, -1, );
}
final lcoc_core.LazySeq Function(dc.dynamic, dc.dynamic, ) step$2=step$1;
return step$2(coll$1, lcoc_core.$_EMPTY_SET, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END distinctifn18695hm$1

// BEGIN do-assoc
lcoc_core.VectorNode do_assoc(dc.dynamic level$1, dc.dynamic node$1, dc.dynamic n$1, dc.dynamic val$1, ){
final dc.List<dc.dynamic> cloned_node$1=(dc.List.from((node$1 as lcoc_core.VectorNode).arr, growable: false, ));
if((0==(level$1 as dc.int))){
final dc.dynamic v$8151_$AUTO_$1=val$1;
cloned_node$1[((n$1 as dc.int)&31)]=v$8151_$AUTO_$1;
return lcoc_core.VectorNode(null, cloned_node$1, );
}
final dc.int subidx$1=(((n$1 as dc.int)>>(31&(level$1 as dc.int)))&31);
final lcoc_core.VectorNode new_child$1=lcoc_core.do_assoc(((level$1 as dc.int)-5), ((node$1 as lcoc_core.VectorNode).arr[subidx$1]), (n$1 as dc.int), val$1, );
final lcoc_core.VectorNode v$8151_$AUTO_$2=new_child$1;
cloned_node$1[subidx$1]=v$8151_$AUTO_$2;
return lcoc_core.VectorNode(null, cloned_node$1, );
}

// END do-assoc

// BEGIN doall
lcoc_core.IFn$iface doall=lcoc_core.doallifn18695hm$1(null, );

// END doall

// BEGIN doallifn18695hm$1
class doallifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

doallifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.doallifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
lcoc_core.dorun.$_invoke$1(coll$1, );
return coll$1;
}

dc.dynamic $_invoke$2(dc.dynamic n$1, dc.dynamic coll$2, ){
lcoc_core.dorun.$_invoke$2(n$1, coll$2, );
return coll$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END doallifn18695hm$1

// BEGIN dorun
lcoc_core.IFn$iface dorun=lcoc_core.dorunifn18695hm$1(null, );

// END dorun

// BEGIN dorunifn18695hm$1
class dorunifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

dorunifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.dorunifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic coll$2, ){
dc.dynamic coll$1=coll$2;
do {
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic temp$7560_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
temp$7560_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7560_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if(((temp$7560_$AUTO_$1!=false)&&(temp$7560_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7560_$AUTO_$1;
coll$1=lcoc_core.next(s$1, );
continue;
}
return null;
} while(true);
}

dc.dynamic $_invoke$2(dc.dynamic n$2, dc.dynamic coll$4, ){
dc.dynamic n$1=n$2;
dc.dynamic coll$3=coll$4;
do {
final dc.dynamic o7668$2=coll$3;
late final dc.dynamic and$7533_$AUTO_$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
and$7533_$AUTO_$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
and$7533_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
late final dc.dynamic $if_$1;
if(((and$7533_$AUTO_$1!=false)&&(and$7533_$AUTO_$1!=null))){
$if_$1=(0<(n$1 as dc.num));
}else{
$if_$1=and$7533_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
n$1=((n$1 as dc.num)-1);
coll$3=lcoc_core.next(coll$3, );
continue;
}
return null;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END dorunifn18695hm$1

// BEGIN doseq
lcoc_core.IFn$iface doseq=lcoc_core.doseqifn18695hm$1(null, );

// END doseq

// BEGIN doseqifn18695hm$1
class doseqifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

doseqifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.doseqifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic seq_exprs$1, dc.dynamic body_expr$1, ){
late final dc.dynamic Function(dc.dynamic, ) emit$1;
emit$1=(dc.dynamic seq_exprs$2, ){
final dc.dynamic vec$9161_$1=seq_exprs$2;
final dc.dynamic o7668$1=vec$9161_$1;
late final dc.dynamic seq$9162_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
seq$9162_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9162_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic first$9163_$1=lcoc_core.first(seq$9162_$1, );
final dc.dynamic seq$9162_$2=lcoc_core.next(seq$9162_$1, );
final dc.dynamic binding$1=first$9163_$1;
final dc.dynamic first$9163_$2=lcoc_core.first(seq$9162_$2, );
final dc.dynamic seq$9162_$3=lcoc_core.next(seq$9162_$2, );
final dc.dynamic expr$1=first$9163_$2;
final dc.dynamic seq_exprs$3=seq$9162_$3;
final dc.dynamic arg$1=(lcoc_core.symbol.$_invoke$2(null, "acc__", ));
late final dc.dynamic acc$1;
if((lcoc_core.gensym is dc.Function)){
acc$1=(lcoc_core.gensym as dc.Function)(arg$1, );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
acc$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1(arg$1, ));
}else{
acc$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, arg$1, ));
}
dc.dynamic wrap$1(dc.dynamic mods$1, dc.dynamic body$1, ){
final dc.dynamic o7668$2=mods$1;
late final dc.dynamic some$7546_$AUTO_$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
some$7546_$AUTO_$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
some$7546_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
if((null==some$7546_$AUTO_$1)){
return body$1;
}
final dc.dynamic vec$9164_$1=some$7546_$AUTO_$1;
final dc.dynamic o7668$3=vec$9164_$1;
late final dc.dynamic seq$9165_$1;
if((o7668$3 is lcoc_core.ISeqable$iface)){
seq$9165_$1=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9165_$1=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic first$9166_$1=lcoc_core.first(seq$9165_$1, );
final dc.dynamic seq$9165_$2=lcoc_core.next(seq$9165_$1, );
final dc.dynamic mod$1=first$9166_$1;
final dc.dynamic first$9166_$2=lcoc_core.first(seq$9165_$2, );
final dc.dynamic seq$9165_$3=lcoc_core.next(seq$9165_$2, );
final dc.dynamic expr$2=first$9166_$2;
final dc.dynamic more_mods$1=seq$9165_$3;
final dc.dynamic body$2=wrap$1(more_mods$1, body$1, );
final dc.dynamic o7900$1=mod$1;
late final dc.int hash$1;
if((o7900$1 is lcoc_core.IHash$iface)){
hash$1=(((o7900$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
hash$1=(((lcoc_core.IHash.extensions(o7900$1, ) as lcoc_core.IHash$ext).$_hash$0(o7900$1, )) as dc.int);
}
switch(hash$1){
case 928173128:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "let", 928173128, ), mod$1, ))){
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), )), (lcoc_core.list.$_invoke$1(expr$2, )), (lcoc_core.list.$_invoke$1(body$2, )), ));
if((o7668$4 is lcoc_core.ISeqable$iface)){
return ((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
continue _default;
case 938507857:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "while", 938507857, ), mod$1, ))){
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1(expr$2, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1(body$2, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "reduced", )), )), (lcoc_core.list.$_invoke$1(acc$1, )), ));
late final dc.dynamic $if_$1;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$4(arg$4, arg$3, arg$2, $1, ));
if((o7668$6 is lcoc_core.ISeqable$iface)){
return ((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
continue _default;
case 2890158092:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "when", 2890158092, ), mod$1, ))){
final dc.dynamic o7668$7=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when", )), )), (lcoc_core.list.$_invoke$1(expr$2, )), (lcoc_core.list.$_invoke$1(body$2, )), ));
if((o7668$7 is lcoc_core.ISeqable$iface)){
return ((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
continue _default;
_default: default:
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("No matching clause: ", (lcoc_core.pr_str.$_invoke$1(mod$1, )), )), );
}
}
final dc.dynamic Function(dc.dynamic, dc.dynamic, ) wrap$2=wrap$1;
final dc.dynamic coll7742$1=(lcoc_core.take_while.$_invoke$2(lcoc_core.keyword$QMARK_, (lcoc_core.take_nth.$_invoke$2(2, seq_exprs$3, )), ));
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final dc.int nmods$1=(2*cast$1);
final dc.dynamic mods$2=(lcoc_core.take.$_invoke$2(nmods$1, seq_exprs$3, ));
final dc.dynamic o7668$8=(lcoc_core.drop.$_invoke$2(nmods$1, seq_exprs$3, ));
late final dc.dynamic seq_exprs$4;
if((o7668$8 is lcoc_core.ISeqable$iface)){
seq_exprs$4=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq_exprs$4=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
final dc.dynamic arg$6=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "reduce", )), ));
final dc.dynamic arg$5=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), ));
final dc.dynamic o7668$9=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(acc$1, )), (lcoc_core.list.$_invoke$1(binding$1, )), ));
late final dc.dynamic $if_$2;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($2, ));
late final dc.dynamic $if_$3;
if(((seq_exprs$4!=false)&&(seq_exprs$4!=null))){
$if_$3=emit$1(seq_exprs$4, );
}else{
final dc.dynamic o7668$10=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), )), body_expr$1, (lcoc_core.list.$_invoke$1(null, )), ));
if((o7668$10 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
}
final dc.dynamic $3=wrap$2(mods$2, $if_$3, );
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($3, ));
final dc.dynamic o7668$11=(lcoc_core.concat.$_invoke$3(arg$5, $5, $4, ));
late final dc.dynamic $if_$4;
if((o7668$11 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$11, ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7668$12=(lcoc_core.concat.$_invoke$4(arg$6, $6, (lcoc_core.list.$_invoke$1(null, )), (lcoc_core.list.$_invoke$1(expr$1, )), ));
late final dc.dynamic body$3;
if((o7668$12 is lcoc_core.ISeqable$iface)){
body$3=((o7668$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
body$3=((lcoc_core.ISeqable.extensions(o7668$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$12, ));
}
return body$3;
};
final dc.dynamic G$9167_$1=seq_exprs$1;
late final dc.dynamic G$9167_$2;
if((null==G$9167_$1)){
G$9167_$2=null;
}else{
final dc.dynamic o7668$13=G$9167_$1;
if((o7668$13 is lcoc_core.ISeqable$iface)){
G$9167_$2=((o7668$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
G$9167_$2=((lcoc_core.ISeqable.extensions(o7668$13, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$13, ));
}
}
if((null==G$9167_$2)){
return null;
}
return emit$1(G$9167_$2, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END doseqifn18695hm$1

// BEGIN dotimes
lcoc_core.IFn$iface dotimes=lcoc_core.dotimesifn18695hm$1(null, );

// END dotimes

// BEGIN dotimesifn18695hm$1
class dotimesifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

dotimesifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.dotimesifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic body$1, ){
final dc.dynamic i$1=lcoc_core.first(bindings$1, );
final dc.dynamic n$1=lcoc_core.second(bindings$1, );
final dc.dynamic arg$5=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$1=(lcoc_core.symbol.$_invoke$2(null, "n__9020__auto__", ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "tag", 2780644040, ), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("dart:core", "int", )), )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$1, ));
final dc.dynamic $2=lcoc_core.with_meta(arg$1, $1, );
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$2($3, (lcoc_core.list.$_invoke$1(n$1, )), ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $4=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $12=(lcoc_core.list.$_invoke$1($4, ));
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "loop", )), ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.vary_meta.$_invoke$4(i$1, lcoc_core.assoc, const lcoc_core.Keyword(null, "tag", 2780644040, ), (lcoc_core.symbol.$_invoke$2("dart:core", "int", )), )), )), (lcoc_core.list.$_invoke$1(0, )), ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $5=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $10=(lcoc_core.list.$_invoke$1($5, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when", )), ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "<", )), )), (lcoc_core.list.$_invoke$1(i$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "n__9020__auto__", )), )), ));
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $8=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "inc", )), )), (lcoc_core.list.$_invoke$1(i$1, )), ));
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$2(arg$2, $6, ));
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic o7668$7=(lcoc_core.concat.$_invoke$4(arg$3, $8, body$1, $7, ));
late final dc.dynamic $if_$7;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
final dc.dynamic $9=(lcoc_core.list.$_invoke$1($if_$7, ));
final dc.dynamic o7668$8=(lcoc_core.concat.$_invoke$3(arg$4, $10, $9, ));
late final dc.dynamic $if_$8;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
final dc.dynamic $11=(lcoc_core.list.$_invoke$1($if_$8, ));
final dc.dynamic o7668$9=(lcoc_core.concat.$_invoke$3(arg$5, $12, $11, ));
if((o7668$9 is lcoc_core.ISeqable$iface)){
return ((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END dotimesifn18695hm$1

// BEGIN doto
lcoc_core.IFn$iface doto=lcoc_core.dotoifn18695hm$1(null, );

// END doto

// BEGIN dotoifn18695hm$1
class dotoifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

dotoifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.dotoifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic x$1, dc.dynamic forms$1, ){
late final dc.dynamic gx$1;
if((lcoc_core.gensym is dc.Function)){
gx$1=(lcoc_core.gensym as dc.Function)();
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
gx$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$0());
}else{
gx$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$0(lcoc_core.gensym, ));
}
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(gx$1, )), (lcoc_core.list.$_invoke$1(x$1, )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$4(arg$1, $2, (lcoc_core.map.$_invoke$2((dc.dynamic f$1, ){
late final dc.dynamic $if_$3;
if(((lcoc_core.ISeq.satisfies(f$1, )) as dc.bool)){
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(lcoc_core.first(f$1, ), )), (lcoc_core.list.$_invoke$1(gx$1, )), lcoc_core.next(f$1, ), ));
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
}else{
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(f$1, )), (lcoc_core.list.$_invoke$1(gx$1, )), ));
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
}
final dc.dynamic o7872$1=f$1;
late final dc.dynamic $if_$2;
if((o7872$1 is lcoc_core.IMeta$iface)){
$if_$2=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$2=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
return lcoc_core.with_meta($if_$3, $if_$2, );
}, forms$1, )), (lcoc_core.list.$_invoke$1(gx$1, )), ));
if((o7668$4 is lcoc_core.ISeqable$iface)){
return ((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END dotoifn18695hm$1

// BEGIN double
dc.double double(dc.dynamic x$1, ){
return ((x$1 as dc.num).toDouble());
}

// END double

// BEGIN double-array
lcoc_core.IFn$iface double_array=lcoc_core.double_arrayifn18695hm$1(null, );

// END double-array

// BEGIN double?
dc.bool double$QMARK_(dc.dynamic x$1, ){
return (x$1 is dc.double);
}

// END double?

// BEGIN double_arrayifn18695hm$1
class double_arrayifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

double_arrayifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.double_arrayifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic size_or_seq$1, ){
if((size_or_seq$1 is dc.int)){
return (dc.List<dc.double>.filled((size_or_seq$1 as dc.int), 0.0, ));
}
return (dc.List<dc.double>.from((size_or_seq$1 as dc.Iterable<dc.dynamic>), growable: false, ));
}

dc.dynamic $_invoke$2(dc.dynamic size$1, dc.dynamic init_val_or_seq$1, ){
if(((lcoc_core.ISeq.satisfies(init_val_or_seq$1, )) as dc.bool)){
final dc.List<dc.double> a$8174_$AUTO_$1=(dc.List<dc.double>.filled((size$1 as dc.int), 0.0, ));
dc.dynamic i$8175_$AUTO_$1=0;
final dc.dynamic o7668$1=init_val_or_seq$1;
dc.dynamic s$8176_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
s$8176_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$8176_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
do {
final dc.dynamic and$7533_$AUTO_$1=s$8176_$AUTO_$1;
late final dc.dynamic $if_$1;
if(((and$7533_$AUTO_$1!=false)&&(and$7533_$AUTO_$1!=null))){
$if_$1=((i$8175_$AUTO_$1 as dc.num)<(size$1 as dc.num));
}else{
$if_$1=and$7533_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
final dc.dynamic v$8151_$AUTO_$1=lcoc_core.first(s$8176_$AUTO_$1, );
a$8174_$AUTO_$1[(i$8175_$AUTO_$1 as dc.int)]=(v$8151_$AUTO_$1 as dc.num).toDouble();
i$8175_$AUTO_$1=(1+(i$8175_$AUTO_$1 as dc.num));
s$8176_$AUTO_$1=lcoc_core.next(s$8176_$AUTO_$1, );
continue;
}
return a$8174_$AUTO_$1;
} while(true);
}
return (dc.List<dc.double>.filled((size$1 as dc.int), (init_val_or_seq$1 as dc.num).toDouble(), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END double_arrayifn18695hm$1

// BEGIN doubles
dc.List<dc.double> doubles(dc.dynamic xs$1, ){
return ((xs$1 as dc.List).cast<dc.double>());
}

// END doubles

// BEGIN drop
lcoc_core.IFn$iface drop=lcoc_core.dropifn18695hm$1(null, );

// END drop

// BEGIN drop-last
lcoc_core.IFn$iface drop_last=lcoc_core.drop_lastifn18695hm$1(null, );

// END drop-last

// BEGIN drop-while
lcoc_core.IFn$iface drop_while=lcoc_core.drop_whileifn18695hm$1(null, );

// END drop-while

// BEGIN dropReify18695hm$1
class dropReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final lcoc_core.Volatile nv$1;

dropReify18695hm$1(this.meta$1, this.rf$1, this.nv$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.dropReify18695hm$1(m$2395_$AUTO_$1, rf$1, nv$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final dc.dynamic n$2=lcoc_core.deref(nv$1, );
final lcoc_core.Volatile o8024$1=nv$1;
final lcoc_core.Volatile o7717$1=nv$1;
late final dc.dynamic $if_$1;
if((o7717$1 is lcoc_core.IDeref$iface)){
$if_$1=((o7717$1 as lcoc_core.IDeref$iface).$_deref$0());
}else{
$if_$1=((lcoc_core.IDeref.extensions(o7717$1, ) as lcoc_core.IDeref$ext).$_deref$0(o7717$1, ));
}
final dc.num new_value8025$1=(($if_$1 as dc.num)-1);
if((o8024$1 is lcoc_core.IVolatile$iface)){
(o8024$1 as lcoc_core.IVolatile$iface).$_vreset$BANG_$1(new_value8025$1, );
}else{
(lcoc_core.IVolatile.extensions(o8024$1, ) as lcoc_core.IVolatile$ext).$_vreset$BANG_$1(o8024$1, new_value8025$1, );
}
if((0<(n$2 as dc.num))){
return result$2;
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END dropReify18695hm$1

// BEGIN drop_lastifn18695hm$1
class drop_lastifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

drop_lastifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.drop_lastifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
return (lcoc_core.drop_last.$_invoke$2(1, coll$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic n$1, dc.dynamic coll$2, ){
return (lcoc_core.map.$_invoke$3((dc.dynamic x$1, dc.dynamic $UNDERSCORE_$1, ){
return x$1;
}, coll$2, (lcoc_core.drop.$_invoke$2(n$1, coll$2, )), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END drop_lastifn18695hm$1

// BEGIN drop_whileReify18695hm$1
class drop_whileReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final lcoc_core.Volatile dv$1;
final pred$1;

drop_whileReify18695hm$1(this.meta$1, this.rf$1, this.dv$1, this.pred$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.drop_whileReify18695hm$1(m$2395_$AUTO_$1, rf$1, dv$1, pred$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final dc.dynamic drop$QMARK_$1=lcoc_core.deref(dv$1, );
final dc.dynamic and$7533_$AUTO_$1=drop$QMARK_$1;
late final dc.dynamic $if_$1;
if(((and$7533_$AUTO_$1!=false)&&(and$7533_$AUTO_$1!=null))){
if((pred$1 is dc.Function)){
$if_$1=(pred$1 as dc.Function)(input$1, );
}else if((pred$1 is lcoc_core.IFn$iface)){
$if_$1=((pred$1 as lcoc_core.IFn$iface).$_invoke$1(input$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(pred$1, ).$_invoke$1(pred$1, input$1, ));
}
}else{
$if_$1=and$7533_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
return result$2;
}
lcoc_core.vreset$BANG_(dv$1, null, );
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END drop_whileReify18695hm$1

// BEGIN drop_whileifn18695hm$1
class drop_whileifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

drop_whileifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.drop_whileifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$1(dc.dynamic pred$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile dv$1=lcoc_core.volatile$BANG_(true, );
final lcoc_core.drop_whileReify18695hm$1 f$1=lcoc_core.drop_whileReify18695hm$1(null, rf$1, dv$1, pred$1, );
return f$1;
};
}

dc.dynamic $_invoke$2(dc.dynamic pred$2, dc.dynamic coll$1, ){
dc.dynamic step$1(dc.dynamic pred$4, dc.dynamic coll$3, ){
dc.dynamic pred$3=pred$4;
dc.dynamic coll$2=coll$3;
do {
final dc.dynamic o7668$1=coll$2;
late final dc.dynamic s$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
s$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic and$7533_$AUTO_$2=s$1;
late final dc.dynamic $if_$2;
if(((and$7533_$AUTO_$2!=false)&&(and$7533_$AUTO_$2!=null))){
final dc.dynamic arg$1=lcoc_core.first(s$1, );
if((pred$3 is dc.Function)){
$if_$2=(pred$3 as dc.Function)(arg$1, );
}else if((pred$3 is lcoc_core.IFn$iface)){
$if_$2=((pred$3 as lcoc_core.IFn$iface).$_invoke$1(arg$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(pred$3, ).$_invoke$1(pred$3, arg$1, ));
}
}else{
$if_$2=and$7533_$AUTO_$2;
}
if((($if_$2!=false)&&($if_$2!=null))){
coll$2=lcoc_core.rest(s$1, );
continue;
}
return s$1;
} while(true);
}
return lcoc_core.LazySeq(null, ((){
return step$1(pred$2, coll$1, );
} as dc.dynamic?), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END drop_whileifn18695hm$1

// BEGIN dropifn18695hm$1
class dropifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

dropifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.dropifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$1(dc.dynamic n$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile nv$1=lcoc_core.volatile$BANG_(n$1, );
final lcoc_core.dropReify18695hm$1 f$1=lcoc_core.dropReify18695hm$1(null, rf$1, nv$1, );
return f$1;
};
}

dc.dynamic $_invoke$2(dc.dynamic n$3, dc.dynamic coll$1, ){
dc.dynamic step$1(dc.dynamic n$5, dc.dynamic coll$3, ){
dc.dynamic n$4=n$5;
dc.dynamic coll$2=coll$3;
do {
final dc.dynamic o7668$1=coll$2;
late final dc.dynamic s$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
s$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.bool and$7533_$AUTO_$1=(0<(n$4 as dc.num));
late final dc.dynamic $if_$2;
if(and$7533_$AUTO_$1){
$if_$2=s$1;
}else{
$if_$2=and$7533_$AUTO_$1;
}
if((($if_$2!=false)&&($if_$2!=null))){
n$4=((n$4 as dc.num)-1);
coll$2=lcoc_core.rest(s$1, );
continue;
}
return s$1;
} while(true);
}
return lcoc_core.LazySeq(null, ((){
return step$1(n$3, coll$1, );
} as dc.dynamic?), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END dropifn18695hm$1

// BEGIN eduction
lcoc_core.IFn$iface eduction=lcoc_core.eductionifn18695hm$1(null, );

// END eduction

// BEGIN eductionifn18695hm$1
class eductionifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

eductionifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.eductionifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic xforms$1, ){
return lcoc_core.Eduction((lcoc_core.apply.$_invoke$2(lcoc_core.comp, lcoc_core.butlast(xforms$1, ), )), lcoc_core.last(xforms$1, ), -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END eductionifn18695hm$1

// BEGIN empty
dc.dynamic empty(dc.dynamic coll$1, ){
final dc.dynamic coll8019$1=coll$1;
if((coll8019$1 is lcoc_core.IEmptyableCollection$iface)){
return ((coll8019$1 as lcoc_core.IEmptyableCollection$iface).$_empty$0());
}
return ((lcoc_core.IEmptyableCollection.extensions(coll8019$1, ) as lcoc_core.IEmptyableCollection$ext).$_empty$0(coll8019$1, ));
}

// END empty

// BEGIN empty?
dc.bool empty$QMARK_(dc.dynamic coll$1, ){
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((($if_$1!=false)&&($if_$1!=null))){
return false;
}
return true;
}

// END empty?

// BEGIN ensure-hash
dc.dynamic ensure_hash(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic hash_key$1, dc.dynamic hash_expr$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "h__8949__auto__", )), )), (lcoc_core.list.$_invoke$1(hash_key$1, )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $8=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "<", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "h__8949__auto__", )), )), (lcoc_core.list.$_invoke$1(0, )), ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "h__8949__auto__", )), )), (lcoc_core.list.$_invoke$1(hash_expr$1, )), ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "set!", )), )), (lcoc_core.list.$_invoke$1(hash_key$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "h__8949__auto__", )), )), ));
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$4(arg$1, $4, $3, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "h__8949__auto__", )), )), ));
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$4(arg$2, $6, $5, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "h__8949__auto__", )), )), ));
late final dc.dynamic $if_$6;
if((o7668$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic o7668$7=(lcoc_core.concat.$_invoke$3(arg$3, $8, $7, ));
if((o7668$7 is lcoc_core.ISeqable$iface)){
return ((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}

// END ensure-hash

// BEGIN ensure-reduced
dc.dynamic ensure_reduced(dc.dynamic x$1, ){
if(lcoc_core.reduced$QMARK_(x$1, )){
return x$1;
}
return lcoc_core.reduced(x$1, );
}

// END ensure-reduced

// BEGIN even?
dc.bool even$QMARK_(dc.dynamic num$1, ){
return (num$1 as dc.int).isEven;
}

// END even?

// BEGIN every-pred
lcoc_core.IFn$iface every_pred=lcoc_core.every_predifn18695hm$1(null, );

// END every-pred

// BEGIN every?
dc.bool every$QMARK_(dc.dynamic pred$1, dc.dynamic coll$1, ){
final dc.dynamic coll7722$1=coll$1;
dc.dynamic f7723$1(dc.dynamic t$1, dc.dynamic x$1, ){
late final dc.dynamic $if_$1;
if((pred$1 is dc.Function)){
$if_$1=(pred$1 as dc.Function)(x$1, );
}else if((pred$1 is lcoc_core.IFn$iface)){
$if_$1=((pred$1 as lcoc_core.IFn$iface).$_invoke$1(x$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(pred$1, ).$_invoke$1(pred$1, x$1, ));
}
if((($if_$1!=false)&&($if_$1!=null))){
return t$1;
}
return lcoc_core.reduced(false, );
}
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, true, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, true, ));
}

// END every?

// BEGIN every_predep118695hm$1
class every_predep118695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;
final p$1;

every_predep118695hm$1(this.meta$2, this.p$1, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.every_predep118695hm$1(m$2395_$AUTO_$2, p$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$5, dc.dynamic y$4, dc.dynamic z$3, dc.dynamic args$2, ){
final dc.dynamic and$7533_$AUTO_$5=(this.$_invoke$3(x$5, y$4, z$3, ));
late final dc.dynamic $if_$2;
if(((and$7533_$AUTO_$5!=false)&&(and$7533_$AUTO_$5!=null))){
$if_$2=lcoc_core.every$QMARK_(p$1, args$2, );
}else{
$if_$2=and$7533_$AUTO_$5;
}
return lcoc_core.boolean($if_$2, );
}

dc.dynamic $_invoke$0(){
return true;
}

dc.dynamic $_invoke$1(dc.dynamic x$6, ){
late final dc.dynamic $if_$3;
if((p$1 is dc.Function)){
$if_$3=(p$1 as dc.Function)(x$6, );
}else if((p$1 is lcoc_core.IFn$iface)){
$if_$3=((p$1 as lcoc_core.IFn$iface).$_invoke$1(x$6, ));
}else{
$if_$3=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, x$6, ));
}
return lcoc_core.boolean($if_$3, );
}

dc.dynamic $_invoke$2(dc.dynamic x$7, dc.dynamic y$5, ){
late final dc.dynamic and$7533_$AUTO_$6;
if((p$1 is dc.Function)){
and$7533_$AUTO_$6=(p$1 as dc.Function)(x$7, );
}else if((p$1 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$6=((p$1 as lcoc_core.IFn$iface).$_invoke$1(x$7, ));
}else{
and$7533_$AUTO_$6=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, x$7, ));
}
late final dc.dynamic $if_$4;
if(((and$7533_$AUTO_$6!=false)&&(and$7533_$AUTO_$6!=null))){
if((p$1 is dc.Function)){
$if_$4=(p$1 as dc.Function)(y$5, );
}else if((p$1 is lcoc_core.IFn$iface)){
$if_$4=((p$1 as lcoc_core.IFn$iface).$_invoke$1(y$5, ));
}else{
$if_$4=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, y$5, ));
}
}else{
$if_$4=and$7533_$AUTO_$6;
}
return lcoc_core.boolean($if_$4, );
}

dc.dynamic $_invoke$3(dc.dynamic x$8, dc.dynamic y$6, dc.dynamic z$4, ){
late final dc.dynamic and$7533_$AUTO_$7;
if((p$1 is dc.Function)){
and$7533_$AUTO_$7=(p$1 as dc.Function)(x$8, );
}else if((p$1 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$7=((p$1 as lcoc_core.IFn$iface).$_invoke$1(x$8, ));
}else{
and$7533_$AUTO_$7=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, x$8, ));
}
late final dc.dynamic $if_$5;
if(((and$7533_$AUTO_$7!=false)&&(and$7533_$AUTO_$7!=null))){
late final dc.dynamic and$7533_$AUTO_$8;
if((p$1 is dc.Function)){
and$7533_$AUTO_$8=(p$1 as dc.Function)(y$6, );
}else if((p$1 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$8=((p$1 as lcoc_core.IFn$iface).$_invoke$1(y$6, ));
}else{
and$7533_$AUTO_$8=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, y$6, ));
}
if(((and$7533_$AUTO_$8!=false)&&(and$7533_$AUTO_$8!=null))){
if((p$1 is dc.Function)){
$if_$5=(p$1 as dc.Function)(z$4, );
}else if((p$1 is lcoc_core.IFn$iface)){
$if_$5=((p$1 as lcoc_core.IFn$iface).$_invoke$1(z$4, ));
}else{
$if_$5=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, z$4, ));
}
}else{
$if_$5=and$7533_$AUTO_$8;
}
}else{
$if_$5=and$7533_$AUTO_$7;
}
return lcoc_core.boolean($if_$5, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END every_predep118695hm$1

// BEGIN every_predep218695hm$1
class every_predep218695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$3;
final p2$2;
final p1$2;

every_predep218695hm$1(this.meta$3, this.p2$2, this.p1$2, ):super();

dc.dynamic $_meta$0(){
return meta$3;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$3, ){
return lcoc_core.every_predep218695hm$1(m$2395_$AUTO_$3, p2$2, p1$2, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$9, dc.dynamic y$7, dc.dynamic z$5, dc.dynamic args$3, ){
final dc.dynamic and$7533_$AUTO_$9=(this.$_invoke$3(x$9, y$7, z$5, ));
late final dc.dynamic $if_$6;
if(((and$7533_$AUTO_$9!=false)&&(and$7533_$AUTO_$9!=null))){
$if_$6=lcoc_core.every$QMARK_((dc.dynamic p1$9022_$SHARP_$1, ){
late final dc.dynamic and$7533_$AUTO_$10;
if((p1$2 is dc.Function)){
and$7533_$AUTO_$10=(p1$2 as dc.Function)(p1$9022_$SHARP_$1, );
}else if((p1$2 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$10=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(p1$9022_$SHARP_$1, ));
}else{
and$7533_$AUTO_$10=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, p1$9022_$SHARP_$1, ));
}
if(((and$7533_$AUTO_$10!=false)&&(and$7533_$AUTO_$10!=null))){
if((p2$2 is dc.Function)){
return (p2$2 as dc.Function)(p1$9022_$SHARP_$1, );
}
if((p2$2 is lcoc_core.IFn$iface)){
return ((p2$2 as lcoc_core.IFn$iface).$_invoke$1(p1$9022_$SHARP_$1, ));
}
return (lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, p1$9022_$SHARP_$1, ));
}
return and$7533_$AUTO_$10;
}, args$3, );
}else{
$if_$6=and$7533_$AUTO_$9;
}
return lcoc_core.boolean($if_$6, );
}

dc.dynamic $_invoke$0(){
return true;
}

dc.dynamic $_invoke$1(dc.dynamic x$10, ){
late final dc.dynamic and$7533_$AUTO_$11;
if((p1$2 is dc.Function)){
and$7533_$AUTO_$11=(p1$2 as dc.Function)(x$10, );
}else if((p1$2 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$11=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(x$10, ));
}else{
and$7533_$AUTO_$11=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, x$10, ));
}
late final dc.dynamic $if_$7;
if(((and$7533_$AUTO_$11!=false)&&(and$7533_$AUTO_$11!=null))){
if((p2$2 is dc.Function)){
$if_$7=(p2$2 as dc.Function)(x$10, );
}else if((p2$2 is lcoc_core.IFn$iface)){
$if_$7=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(x$10, ));
}else{
$if_$7=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, x$10, ));
}
}else{
$if_$7=and$7533_$AUTO_$11;
}
return lcoc_core.boolean($if_$7, );
}

dc.dynamic $_invoke$2(dc.dynamic x$11, dc.dynamic y$8, ){
late final dc.dynamic and$7533_$AUTO_$12;
if((p1$2 is dc.Function)){
and$7533_$AUTO_$12=(p1$2 as dc.Function)(x$11, );
}else if((p1$2 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$12=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(x$11, ));
}else{
and$7533_$AUTO_$12=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, x$11, ));
}
late final dc.dynamic $if_$8;
if(((and$7533_$AUTO_$12!=false)&&(and$7533_$AUTO_$12!=null))){
late final dc.dynamic and$7533_$AUTO_$13;
if((p1$2 is dc.Function)){
and$7533_$AUTO_$13=(p1$2 as dc.Function)(y$8, );
}else if((p1$2 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$13=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(y$8, ));
}else{
and$7533_$AUTO_$13=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, y$8, ));
}
if(((and$7533_$AUTO_$13!=false)&&(and$7533_$AUTO_$13!=null))){
late final dc.dynamic and$7533_$AUTO_$14;
if((p2$2 is dc.Function)){
and$7533_$AUTO_$14=(p2$2 as dc.Function)(x$11, );
}else if((p2$2 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$14=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(x$11, ));
}else{
and$7533_$AUTO_$14=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, x$11, ));
}
if(((and$7533_$AUTO_$14!=false)&&(and$7533_$AUTO_$14!=null))){
if((p2$2 is dc.Function)){
$if_$8=(p2$2 as dc.Function)(y$8, );
}else if((p2$2 is lcoc_core.IFn$iface)){
$if_$8=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(y$8, ));
}else{
$if_$8=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, y$8, ));
}
}else{
$if_$8=and$7533_$AUTO_$14;
}
}else{
$if_$8=and$7533_$AUTO_$13;
}
}else{
$if_$8=and$7533_$AUTO_$12;
}
return lcoc_core.boolean($if_$8, );
}

dc.dynamic $_invoke$3(dc.dynamic x$12, dc.dynamic y$9, dc.dynamic z$6, ){
late final dc.dynamic and$7533_$AUTO_$15;
if((p1$2 is dc.Function)){
and$7533_$AUTO_$15=(p1$2 as dc.Function)(x$12, );
}else if((p1$2 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$15=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(x$12, ));
}else{
and$7533_$AUTO_$15=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, x$12, ));
}
late final dc.dynamic $if_$9;
if(((and$7533_$AUTO_$15!=false)&&(and$7533_$AUTO_$15!=null))){
late final dc.dynamic and$7533_$AUTO_$16;
if((p1$2 is dc.Function)){
and$7533_$AUTO_$16=(p1$2 as dc.Function)(y$9, );
}else if((p1$2 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$16=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(y$9, ));
}else{
and$7533_$AUTO_$16=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, y$9, ));
}
if(((and$7533_$AUTO_$16!=false)&&(and$7533_$AUTO_$16!=null))){
late final dc.dynamic and$7533_$AUTO_$17;
if((p1$2 is dc.Function)){
and$7533_$AUTO_$17=(p1$2 as dc.Function)(z$6, );
}else if((p1$2 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$17=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(z$6, ));
}else{
and$7533_$AUTO_$17=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, z$6, ));
}
if(((and$7533_$AUTO_$17!=false)&&(and$7533_$AUTO_$17!=null))){
late final dc.dynamic and$7533_$AUTO_$18;
if((p2$2 is dc.Function)){
and$7533_$AUTO_$18=(p2$2 as dc.Function)(x$12, );
}else if((p2$2 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$18=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(x$12, ));
}else{
and$7533_$AUTO_$18=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, x$12, ));
}
if(((and$7533_$AUTO_$18!=false)&&(and$7533_$AUTO_$18!=null))){
late final dc.dynamic and$7533_$AUTO_$19;
if((p2$2 is dc.Function)){
and$7533_$AUTO_$19=(p2$2 as dc.Function)(y$9, );
}else if((p2$2 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$19=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(y$9, ));
}else{
and$7533_$AUTO_$19=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, y$9, ));
}
if(((and$7533_$AUTO_$19!=false)&&(and$7533_$AUTO_$19!=null))){
if((p2$2 is dc.Function)){
$if_$9=(p2$2 as dc.Function)(z$6, );
}else if((p2$2 is lcoc_core.IFn$iface)){
$if_$9=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(z$6, ));
}else{
$if_$9=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, z$6, ));
}
}else{
$if_$9=and$7533_$AUTO_$19;
}
}else{
$if_$9=and$7533_$AUTO_$18;
}
}else{
$if_$9=and$7533_$AUTO_$17;
}
}else{
$if_$9=and$7533_$AUTO_$16;
}
}else{
$if_$9=and$7533_$AUTO_$15;
}
return lcoc_core.boolean($if_$9, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END every_predep218695hm$1

// BEGIN every_predep318695hm$1
class every_predep318695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$4;
final p3$2;
final p1$3;
final p2$3;

every_predep318695hm$1(this.meta$4, this.p3$2, this.p1$3, this.p2$3, ):super();

dc.dynamic $_meta$0(){
return meta$4;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$4, ){
return lcoc_core.every_predep318695hm$1(m$2395_$AUTO_$4, p3$2, p1$3, p2$3, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$13, dc.dynamic y$10, dc.dynamic z$7, dc.dynamic args$4, ){
final dc.dynamic and$7533_$AUTO_$20=(this.$_invoke$3(x$13, y$10, z$7, ));
late final dc.dynamic $if_$10;
if(((and$7533_$AUTO_$20!=false)&&(and$7533_$AUTO_$20!=null))){
$if_$10=lcoc_core.every$QMARK_((dc.dynamic p1$9023_$SHARP_$1, ){
late final dc.dynamic and$7533_$AUTO_$21;
if((p1$3 is dc.Function)){
and$7533_$AUTO_$21=(p1$3 as dc.Function)(p1$9023_$SHARP_$1, );
}else if((p1$3 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$21=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(p1$9023_$SHARP_$1, ));
}else{
and$7533_$AUTO_$21=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, p1$9023_$SHARP_$1, ));
}
if(((and$7533_$AUTO_$21!=false)&&(and$7533_$AUTO_$21!=null))){
late final dc.dynamic and$7533_$AUTO_$22;
if((p2$3 is dc.Function)){
and$7533_$AUTO_$22=(p2$3 as dc.Function)(p1$9023_$SHARP_$1, );
}else if((p2$3 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$22=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(p1$9023_$SHARP_$1, ));
}else{
and$7533_$AUTO_$22=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, p1$9023_$SHARP_$1, ));
}
if(((and$7533_$AUTO_$22!=false)&&(and$7533_$AUTO_$22!=null))){
if((p3$2 is dc.Function)){
return (p3$2 as dc.Function)(p1$9023_$SHARP_$1, );
}
if((p3$2 is lcoc_core.IFn$iface)){
return ((p3$2 as lcoc_core.IFn$iface).$_invoke$1(p1$9023_$SHARP_$1, ));
}
return (lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, p1$9023_$SHARP_$1, ));
}
return and$7533_$AUTO_$22;
}
return and$7533_$AUTO_$21;
}, args$4, );
}else{
$if_$10=and$7533_$AUTO_$20;
}
return lcoc_core.boolean($if_$10, );
}

dc.dynamic $_invoke$0(){
return true;
}

dc.dynamic $_invoke$1(dc.dynamic x$14, ){
late final dc.dynamic and$7533_$AUTO_$23;
if((p1$3 is dc.Function)){
and$7533_$AUTO_$23=(p1$3 as dc.Function)(x$14, );
}else if((p1$3 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$23=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}else{
and$7533_$AUTO_$23=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, x$14, ));
}
late final dc.dynamic $if_$11;
if(((and$7533_$AUTO_$23!=false)&&(and$7533_$AUTO_$23!=null))){
late final dc.dynamic and$7533_$AUTO_$24;
if((p2$3 is dc.Function)){
and$7533_$AUTO_$24=(p2$3 as dc.Function)(x$14, );
}else if((p2$3 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$24=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}else{
and$7533_$AUTO_$24=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, x$14, ));
}
if(((and$7533_$AUTO_$24!=false)&&(and$7533_$AUTO_$24!=null))){
if((p3$2 is dc.Function)){
$if_$11=(p3$2 as dc.Function)(x$14, );
}else if((p3$2 is lcoc_core.IFn$iface)){
$if_$11=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}else{
$if_$11=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, x$14, ));
}
}else{
$if_$11=and$7533_$AUTO_$24;
}
}else{
$if_$11=and$7533_$AUTO_$23;
}
return lcoc_core.boolean($if_$11, );
}

dc.dynamic $_invoke$2(dc.dynamic x$15, dc.dynamic y$11, ){
late final dc.dynamic and$7533_$AUTO_$25;
if((p1$3 is dc.Function)){
and$7533_$AUTO_$25=(p1$3 as dc.Function)(x$15, );
}else if((p1$3 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$25=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(x$15, ));
}else{
and$7533_$AUTO_$25=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, x$15, ));
}
late final dc.dynamic $if_$12;
if(((and$7533_$AUTO_$25!=false)&&(and$7533_$AUTO_$25!=null))){
late final dc.dynamic and$7533_$AUTO_$26;
if((p2$3 is dc.Function)){
and$7533_$AUTO_$26=(p2$3 as dc.Function)(x$15, );
}else if((p2$3 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$26=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(x$15, ));
}else{
and$7533_$AUTO_$26=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, x$15, ));
}
if(((and$7533_$AUTO_$26!=false)&&(and$7533_$AUTO_$26!=null))){
late final dc.dynamic and$7533_$AUTO_$27;
if((p3$2 is dc.Function)){
and$7533_$AUTO_$27=(p3$2 as dc.Function)(x$15, );
}else if((p3$2 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$27=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(x$15, ));
}else{
and$7533_$AUTO_$27=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, x$15, ));
}
if(((and$7533_$AUTO_$27!=false)&&(and$7533_$AUTO_$27!=null))){
late final dc.dynamic and$7533_$AUTO_$28;
if((p1$3 is dc.Function)){
and$7533_$AUTO_$28=(p1$3 as dc.Function)(y$11, );
}else if((p1$3 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$28=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(y$11, ));
}else{
and$7533_$AUTO_$28=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, y$11, ));
}
if(((and$7533_$AUTO_$28!=false)&&(and$7533_$AUTO_$28!=null))){
late final dc.dynamic and$7533_$AUTO_$29;
if((p2$3 is dc.Function)){
and$7533_$AUTO_$29=(p2$3 as dc.Function)(y$11, );
}else if((p2$3 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$29=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(y$11, ));
}else{
and$7533_$AUTO_$29=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, y$11, ));
}
if(((and$7533_$AUTO_$29!=false)&&(and$7533_$AUTO_$29!=null))){
if((p3$2 is dc.Function)){
$if_$12=(p3$2 as dc.Function)(y$11, );
}else if((p3$2 is lcoc_core.IFn$iface)){
$if_$12=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(y$11, ));
}else{
$if_$12=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, y$11, ));
}
}else{
$if_$12=and$7533_$AUTO_$29;
}
}else{
$if_$12=and$7533_$AUTO_$28;
}
}else{
$if_$12=and$7533_$AUTO_$27;
}
}else{
$if_$12=and$7533_$AUTO_$26;
}
}else{
$if_$12=and$7533_$AUTO_$25;
}
return lcoc_core.boolean($if_$12, );
}

dc.dynamic $_invoke$3(dc.dynamic x$16, dc.dynamic y$12, dc.dynamic z$8, ){
late final dc.dynamic and$7533_$AUTO_$30;
if((p1$3 is dc.Function)){
and$7533_$AUTO_$30=(p1$3 as dc.Function)(x$16, );
}else if((p1$3 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$30=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(x$16, ));
}else{
and$7533_$AUTO_$30=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, x$16, ));
}
late final dc.dynamic $if_$13;
if(((and$7533_$AUTO_$30!=false)&&(and$7533_$AUTO_$30!=null))){
late final dc.dynamic and$7533_$AUTO_$31;
if((p2$3 is dc.Function)){
and$7533_$AUTO_$31=(p2$3 as dc.Function)(x$16, );
}else if((p2$3 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$31=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(x$16, ));
}else{
and$7533_$AUTO_$31=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, x$16, ));
}
if(((and$7533_$AUTO_$31!=false)&&(and$7533_$AUTO_$31!=null))){
late final dc.dynamic and$7533_$AUTO_$32;
if((p3$2 is dc.Function)){
and$7533_$AUTO_$32=(p3$2 as dc.Function)(x$16, );
}else if((p3$2 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$32=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(x$16, ));
}else{
and$7533_$AUTO_$32=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, x$16, ));
}
if(((and$7533_$AUTO_$32!=false)&&(and$7533_$AUTO_$32!=null))){
late final dc.dynamic and$7533_$AUTO_$33;
if((p1$3 is dc.Function)){
and$7533_$AUTO_$33=(p1$3 as dc.Function)(y$12, );
}else if((p1$3 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$33=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(y$12, ));
}else{
and$7533_$AUTO_$33=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, y$12, ));
}
if(((and$7533_$AUTO_$33!=false)&&(and$7533_$AUTO_$33!=null))){
late final dc.dynamic and$7533_$AUTO_$34;
if((p2$3 is dc.Function)){
and$7533_$AUTO_$34=(p2$3 as dc.Function)(y$12, );
}else if((p2$3 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$34=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(y$12, ));
}else{
and$7533_$AUTO_$34=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, y$12, ));
}
if(((and$7533_$AUTO_$34!=false)&&(and$7533_$AUTO_$34!=null))){
late final dc.dynamic and$7533_$AUTO_$35;
if((p3$2 is dc.Function)){
and$7533_$AUTO_$35=(p3$2 as dc.Function)(y$12, );
}else if((p3$2 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$35=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(y$12, ));
}else{
and$7533_$AUTO_$35=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, y$12, ));
}
if(((and$7533_$AUTO_$35!=false)&&(and$7533_$AUTO_$35!=null))){
late final dc.dynamic and$7533_$AUTO_$36;
if((p1$3 is dc.Function)){
and$7533_$AUTO_$36=(p1$3 as dc.Function)(z$8, );
}else if((p1$3 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$36=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(z$8, ));
}else{
and$7533_$AUTO_$36=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, z$8, ));
}
if(((and$7533_$AUTO_$36!=false)&&(and$7533_$AUTO_$36!=null))){
late final dc.dynamic and$7533_$AUTO_$37;
if((p2$3 is dc.Function)){
and$7533_$AUTO_$37=(p2$3 as dc.Function)(z$8, );
}else if((p2$3 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$37=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(z$8, ));
}else{
and$7533_$AUTO_$37=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, z$8, ));
}
if(((and$7533_$AUTO_$37!=false)&&(and$7533_$AUTO_$37!=null))){
if((p3$2 is dc.Function)){
$if_$13=(p3$2 as dc.Function)(z$8, );
}else if((p3$2 is lcoc_core.IFn$iface)){
$if_$13=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(z$8, ));
}else{
$if_$13=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, z$8, ));
}
}else{
$if_$13=and$7533_$AUTO_$37;
}
}else{
$if_$13=and$7533_$AUTO_$36;
}
}else{
$if_$13=and$7533_$AUTO_$35;
}
}else{
$if_$13=and$7533_$AUTO_$34;
}
}else{
$if_$13=and$7533_$AUTO_$33;
}
}else{
$if_$13=and$7533_$AUTO_$32;
}
}else{
$if_$13=and$7533_$AUTO_$31;
}
}else{
$if_$13=and$7533_$AUTO_$30;
}
return lcoc_core.boolean($if_$13, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END every_predep318695hm$1

// BEGIN every_predepn18695hm$1
class every_predepn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final dc.dynamic ps$2;

every_predepn18695hm$1(this.meta$1, this.ps$2, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.every_predepn18695hm$1(m$2395_$AUTO_$1, ps$2, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic z$1, dc.dynamic args$1, ){
final dc.dynamic and$7533_$AUTO_$1=(this.$_invoke$3(x$1, y$1, z$1, ));
late final dc.dynamic $if_$1;
if(((and$7533_$AUTO_$1!=false)&&(and$7533_$AUTO_$1!=null))){
$if_$1=lcoc_core.every$QMARK_((dc.dynamic p1$9027_$SHARP_$1, ){
return lcoc_core.every$QMARK_(p1$9027_$SHARP_$1, args$1, );
}, ps$2, );
}else{
$if_$1=and$7533_$AUTO_$1;
}
return lcoc_core.boolean($if_$1, );
}

dc.dynamic $_invoke$0(){
return true;
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
return lcoc_core.every$QMARK_((dc.dynamic p1$9024_$SHARP_$1, ){
if((p1$9024_$SHARP_$1 is dc.Function)){
return (p1$9024_$SHARP_$1 as dc.Function)(x$2, );
}
if((p1$9024_$SHARP_$1 is lcoc_core.IFn$iface)){
return ((p1$9024_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(x$2, ));
}
return (lcoc_core.IFn.extensions(p1$9024_$SHARP_$1, ).$_invoke$1(p1$9024_$SHARP_$1, x$2, ));
}, ps$2, );
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
return lcoc_core.every$QMARK_((dc.dynamic p1$9025_$SHARP_$1, ){
late final dc.dynamic and$7533_$AUTO_$2;
if((p1$9025_$SHARP_$1 is dc.Function)){
and$7533_$AUTO_$2=(p1$9025_$SHARP_$1 as dc.Function)(x$3, );
}else if((p1$9025_$SHARP_$1 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$2=((p1$9025_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(x$3, ));
}else{
and$7533_$AUTO_$2=(lcoc_core.IFn.extensions(p1$9025_$SHARP_$1, ).$_invoke$1(p1$9025_$SHARP_$1, x$3, ));
}
if(((and$7533_$AUTO_$2!=false)&&(and$7533_$AUTO_$2!=null))){
if((p1$9025_$SHARP_$1 is dc.Function)){
return (p1$9025_$SHARP_$1 as dc.Function)(y$2, );
}
if((p1$9025_$SHARP_$1 is lcoc_core.IFn$iface)){
return ((p1$9025_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(y$2, ));
}
return (lcoc_core.IFn.extensions(p1$9025_$SHARP_$1, ).$_invoke$1(p1$9025_$SHARP_$1, y$2, ));
}
return and$7533_$AUTO_$2;
}, ps$2, );
}

dc.dynamic $_invoke$3(dc.dynamic x$4, dc.dynamic y$3, dc.dynamic z$2, ){
return lcoc_core.every$QMARK_((dc.dynamic p1$9026_$SHARP_$1, ){
late final dc.dynamic and$7533_$AUTO_$3;
if((p1$9026_$SHARP_$1 is dc.Function)){
and$7533_$AUTO_$3=(p1$9026_$SHARP_$1 as dc.Function)(x$4, );
}else if((p1$9026_$SHARP_$1 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$3=((p1$9026_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(x$4, ));
}else{
and$7533_$AUTO_$3=(lcoc_core.IFn.extensions(p1$9026_$SHARP_$1, ).$_invoke$1(p1$9026_$SHARP_$1, x$4, ));
}
if(((and$7533_$AUTO_$3!=false)&&(and$7533_$AUTO_$3!=null))){
late final dc.dynamic and$7533_$AUTO_$4;
if((p1$9026_$SHARP_$1 is dc.Function)){
and$7533_$AUTO_$4=(p1$9026_$SHARP_$1 as dc.Function)(y$3, );
}else if((p1$9026_$SHARP_$1 is lcoc_core.IFn$iface)){
and$7533_$AUTO_$4=((p1$9026_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(y$3, ));
}else{
and$7533_$AUTO_$4=(lcoc_core.IFn.extensions(p1$9026_$SHARP_$1, ).$_invoke$1(p1$9026_$SHARP_$1, y$3, ));
}
if(((and$7533_$AUTO_$4!=false)&&(and$7533_$AUTO_$4!=null))){
if((p1$9026_$SHARP_$1 is dc.Function)){
return (p1$9026_$SHARP_$1 as dc.Function)(z$2, );
}
if((p1$9026_$SHARP_$1 is lcoc_core.IFn$iface)){
return ((p1$9026_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(z$2, ));
}
return (lcoc_core.IFn.extensions(p1$9026_$SHARP_$1, ).$_invoke$1(p1$9026_$SHARP_$1, z$2, ));
}
return and$7533_$AUTO_$4;
}
return and$7533_$AUTO_$3;
}, ps$2, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END every_predepn18695hm$1

// BEGIN every_predifn18695hm$1
class every_predifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$5;

every_predifn18695hm$1(this.meta$5, ):super();

dc.dynamic $_meta$0(){
return meta$5;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$5, ){
return lcoc_core.every_predifn18695hm$1(m$2395_$AUTO_$5, );
}

dc.dynamic $_invoke$vararg(dc.dynamic p1$1, dc.dynamic p2$1, dc.dynamic p3$1, dc.dynamic ps$1, ){
final dc.dynamic ps$2=(lcoc_core.list$STAR_.$_invoke$4(p1$1, p2$1, p3$1, ps$1, ));
final dc.dynamic epn$1=lcoc_core.every_predepn18695hm$1(null, ps$2, );
return epn$1;
}

dc.dynamic $_invoke$1(dc.dynamic p$1, ){
final dc.dynamic ep1$1=lcoc_core.every_predep118695hm$1(null, p$1, );
return ep1$1;
}

dc.dynamic $_invoke$2(dc.dynamic p1$2, dc.dynamic p2$2, ){
final dc.dynamic ep2$1=lcoc_core.every_predep218695hm$1(null, p2$2, p1$2, );
return ep2$1;
}

dc.dynamic $_invoke$3(dc.dynamic p1$3, dc.dynamic p2$3, dc.dynamic p3$2, ){
final dc.dynamic ep3$1=lcoc_core.every_predep318695hm$1(null, p3$2, p1$3, p2$3, );
return ep3$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END every_predifn18695hm$1

// BEGIN ex-data
dc.dynamic ex_data(dc.dynamic ex$1, ){
final dc.dynamic e8034$1=ex$1;
if((e8034$1 is lcoc_core.IExceptionInfo$iface)){
return ((e8034$1 as lcoc_core.IExceptionInfo$iface).$_ex_data$0());
}
return ((lcoc_core.IExceptionInfo.extensions(e8034$1, ) as lcoc_core.IExceptionInfo$ext).$_ex_data$0(e8034$1, ));
}

// END ex-data

// BEGIN ex-info
lcoc_core.IFn$iface ex_info=lcoc_core.ex_infoifn18695hm$1(null, );

// END ex-info

// BEGIN ex_infoifn18695hm$1
class ex_infoifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

ex_infoifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.ex_infoifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$2(dc.dynamic msg$1, dc.dynamic map$1, ){
return lcoc_core.ExceptionInfo(msg$1, map$1, null, );
}

dc.dynamic $_invoke$3(dc.dynamic msg$2, dc.dynamic map$2, dc.dynamic cause$1, ){
return lcoc_core.ExceptionInfo(msg$2, map$2, cause$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ex_infoifn18695hm$1

// BEGIN extend-protocol
lcoc_core.IFn$iface extend_protocol=lcoc_core.extend_protocolifn18695hm$1(null, );

// END extend-protocol

// BEGIN extend_protocolifn18695hm$1
class extend_protocolifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

extend_protocolifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.extend_protocolifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic protocol$1, dc.dynamic types$PLUS_impls$1, ){
final dc.dynamic o7668$1=types$PLUS_impls$1;
late final dc.dynamic some$7546_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
some$7546_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
some$7546_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((null==some$7546_$AUTO_$1)){
return null;
}
final dc.dynamic vec$9261_$1=some$7546_$AUTO_$1;
final dc.dynamic o7668$2=vec$9261_$1;
late final dc.dynamic seq$9262_$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
seq$9262_$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9262_$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic first$9263_$1=lcoc_core.first(seq$9262_$1, );
final dc.dynamic seq$9262_$2=lcoc_core.next(seq$9262_$1, );
final dc.dynamic type$1=first$9263_$1;
final dc.dynamic more$1=seq$9262_$2;
final dc.dynamic vec$9264_$1=lcoc_core.split_with(lcoc_core.seq$QMARK_, more$1, );
final dc.dynamic impls$1=(lcoc_core.nth.$_invoke$3(vec$9264_$1, 0, null, ));
final dc.dynamic types$PLUS_impls$2=(lcoc_core.nth.$_invoke$3(vec$9264_$1, 1, null, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "extend-type", )), )), (lcoc_core.list.$_invoke$1(type$1, )), (lcoc_core.list.$_invoke$1(protocol$1, )), impls$1, ));
late final dc.dynamic $if_$1;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "extend-protocol", )), )), (lcoc_core.list.$_invoke$1(protocol$1, )), types$PLUS_impls$2, ));
late final dc.dynamic $if_$2;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$3(arg$1, $2, $1, ));
if((o7668$5 is lcoc_core.ISeqable$iface)){
return ((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END extend_protocolifn18695hm$1

// BEGIN false?
dc.bool false$QMARK_(dc.dynamic x$1, ){
return dc.identical(x$1, false, );
}

// END false?

// BEGIN ffirst
dc.dynamic ffirst(dc.dynamic coll$1, ){
return lcoc_core.first(lcoc_core.first(coll$1, ), );
}

// END ffirst

// BEGIN filter
lcoc_core.IFn$iface filter=lcoc_core.filterifn18695hm$1(null, );

// END filter

// BEGIN filterReify18695hm$1
class filterReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final pred$1;

filterReify18695hm$1(this.meta$1, this.rf$1, this.pred$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.filterReify18695hm$1(m$2395_$AUTO_$1, rf$1, pred$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
late final dc.dynamic $if_$1;
if((pred$1 is dc.Function)){
$if_$1=(pred$1 as dc.Function)(input$1, );
}else if((pred$1 is lcoc_core.IFn$iface)){
$if_$1=((pred$1 as lcoc_core.IFn$iface).$_invoke$1(input$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(pred$1, ).$_invoke$1(pred$1, input$1, ));
}
if((($if_$1!=false)&&($if_$1!=null))){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}
return result$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END filterReify18695hm$1

// BEGIN filterifn18695hm$1
class filterifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

filterifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.filterifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$1(dc.dynamic pred$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.filterReify18695hm$1 f$1=lcoc_core.filterReify18695hm$1(null, rf$1, pred$1, );
return f$1;
};
}

dc.dynamic $_invoke$2(dc.dynamic pred$2, dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic temp$7560_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
temp$7560_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7560_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if(((temp$7560_$AUTO_$1!=false)&&(temp$7560_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7560_$AUTO_$1;
if(lcoc_core.chunked_seq$QMARK_(s$1, )){
final dc.dynamic c$1=lcoc_core.chunk_first(s$1, );
final dc.dynamic coll7742$1=c$1;
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final lcoc_core.ChunkBuffer $1=lcoc_core.chunk_buffer(cast$1, );
final dc.dynamic $2=lcoc_core.chunk_reduce((dc.dynamic p1$9100_$SHARP_$1, dc.dynamic p2$9099_$SHARP_$1, ){
late final dc.dynamic temp$7555_$AUTO_$1;
if((pred$2 is dc.Function)){
temp$7555_$AUTO_$1=(pred$2 as dc.Function)(p2$9099_$SHARP_$1, );
}else if((pred$2 is lcoc_core.IFn$iface)){
temp$7555_$AUTO_$1=((pred$2 as lcoc_core.IFn$iface).$_invoke$1(p2$9099_$SHARP_$1, ));
}else{
temp$7555_$AUTO_$1=(lcoc_core.IFn.extensions(pred$2, ).$_invoke$1(pred$2, p2$9099_$SHARP_$1, ));
}
if(((temp$7555_$AUTO_$1!=false)&&(temp$7555_$AUTO_$1!=null))){
final dc.dynamic x$1=temp$7555_$AUTO_$1;
final dc.dynamic G$9103_$1=p1$9100_$SHARP_$1;
lcoc_core.chunk_append(G$9103_$1, p2$9099_$SHARP_$1, );
return G$9103_$1;
}
return p1$9100_$SHARP_$1;
}, $1, c$1, );
final dc.dynamic $3=lcoc_core.chunk($2, );
return lcoc_core.chunk_cons($3, (lcoc_core.filter.$_invoke$2(pred$2, lcoc_core.chunk_rest(s$1, ), )), );
}
final dc.dynamic f$2=lcoc_core.first(s$1, );
final dc.dynamic r$1=lcoc_core.rest(s$1, );
late final dc.dynamic $if_$2;
if((pred$2 is dc.Function)){
$if_$2=(pred$2 as dc.Function)(f$2, );
}else if((pred$2 is lcoc_core.IFn$iface)){
$if_$2=((pred$2 as lcoc_core.IFn$iface).$_invoke$1(f$2, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(pred$2, ).$_invoke$1(pred$2, f$2, ));
}
if((($if_$2!=false)&&($if_$2!=null))){
return lcoc_core.cons(f$2, (lcoc_core.filter.$_invoke$2(pred$2, r$1, )), );
}
return (lcoc_core.filter.$_invoke$2(pred$2, r$1, ));
}
return null;
} as dc.dynamic?), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END filterifn18695hm$1

// BEGIN filterv
dc.dynamic filterv(dc.dynamic pred$1, dc.dynamic coll$1, ){
final dc.dynamic coll7722$1=coll$1;
dc.dynamic f7723$1(dc.dynamic v$1, dc.dynamic o$1, ){
late final dc.dynamic $if_$1;
if((pred$1 is dc.Function)){
$if_$1=(pred$1 as dc.Function)(o$1, );
}else if((pred$1 is lcoc_core.IFn$iface)){
$if_$1=((pred$1 as lcoc_core.IFn$iface).$_invoke$1(o$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(pred$1, ).$_invoke$1(pred$1, o$1, ));
}
if((($if_$1!=false)&&($if_$1!=null))){
return (lcoc_core.conj$BANG_.$_invoke$2(v$1, o$1, ));
}
return v$1;
}
final dc.dynamic start7724$1=lcoc_core.transient(lcoc_core.$_EMPTY_VECTOR, );
late final dc.dynamic $if_$2;
if((coll7722$1 is lcoc_core.IReduce$iface)){
$if_$2=((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}else{
$if_$2=((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}
return lcoc_core.persistent$BANG_($if_$2, );
}

// END filterv

// BEGIN find
dc.dynamic? find(dc.dynamic map$1, dc.dynamic key$1, ){
final dc.dynamic coll7914$1=map$1;
final dc.dynamic k7915$1=key$1;
if((coll7914$1 is lcoc_core.IFind$iface)){
return ((coll7914$1 as lcoc_core.IFind$iface).$_find$1(k7915$1, ));
}
return ((lcoc_core.IFind.extensions(coll7914$1, ) as lcoc_core.IFind$ext).$_find$1(coll7914$1, k7915$1, ));
}

// END find

// BEGIN first
dc.dynamic first(dc.dynamic coll$1, ){
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic coll7675$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
coll7675$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
coll7675$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((coll7675$1 is lcoc_core.ISeq$iface)){
return ((coll7675$1 as lcoc_core.ISeq$iface).$_first$0());
}
return ((lcoc_core.ISeq.extensions(coll7675$1, ) as lcoc_core.ISeq$ext).$_first$0(coll7675$1, ));
}

// END first

// BEGIN flatten
dc.dynamic flatten(dc.dynamic x$1, ){
return (lcoc_core.filter.$_invoke$2(lcoc_core.complement(lcoc_core.sequential$QMARK_, ), lcoc_core.rest(lcoc_core.tree_seq(lcoc_core.sequential$QMARK_, lcoc_core.seq, x$1, ), ), ));
}

// END flatten

// BEGIN fn
lcoc_core.IFn$iface fn=lcoc_core.fnifn18695hm$1(null, );

// END fn

// BEGIN fn?
dc.bool fn$QMARK_(dc.dynamic f$1, ){
final dc.bool or$7573_$AUTO_$1=(f$1 is dc.Function);
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return ((lcoc_core.Fn.satisfies(f$1, )) as dc.bool);
}

// END fn?

// BEGIN fnext
dc.dynamic fnext(dc.dynamic coll$1, ){
return lcoc_core.first(lcoc_core.next(coll$1, ), );
}

// END fnext

// BEGIN fnifn18695hm$1
class fnifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

fnifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.fnifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic sigs$1, ){
late final dc.dynamic name$1;
if(lcoc_core.symbol$QMARK_(lcoc_core.first(sigs$1, ), )){
name$1=lcoc_core.first(sigs$1, );
}else{
name$1=null;
}
late final dc.dynamic sigs$2;
if(((name$1!=false)&&(name$1!=null))){
sigs$2=lcoc_core.next(sigs$1, );
}else{
sigs$2=sigs$1;
}
late final dc.dynamic sigs$3;
if(lcoc_core.vector$QMARK_(lcoc_core.first(sigs$2, ), )){
sigs$3=(lcoc_core.list.$_invoke$1(sigs$2, ));
}else if(((lcoc_core.ISeq.satisfies(lcoc_core.first(sigs$2, ), )) as dc.bool)){
sigs$3=sigs$2;
}else{
final dc.dynamic o7668$12=sigs$2;
late final dc.dynamic $if_$11;
if((o7668$12 is lcoc_core.ISeqable$iface)){
$if_$11=((o7668$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7668$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$12, ));
}
late final dc.String $if_$12;
if((($if_$11!=false)&&($if_$11!=null))){
$if_$12=(lcoc_core.str.$_invoke$3("Parameter declaration ", lcoc_core.first(sigs$2, ), " should be a vector", ));
}else{
$if_$12=(lcoc_core.str.$_invoke$1("Parameter declaration missing", ));
}
throw lcoc_core.argument_error($if_$12, );
}
dc.dynamic psig$1(dc.dynamic sig$1, ){
late final dc.bool $if_$13;
if(((lcoc_core.ISeq.satisfies(sig$1, )) as dc.bool)){
$if_$13=false;
}else{
$if_$13=true;
}
if($if_$13){
throw lcoc_core.argument_error((lcoc_core.str.$_invoke$3("Invalid signature ", sig$1, " should be a list", )), );
}else{
}
final dc.dynamic vec$8601_$1=sig$1;
final dc.dynamic o7668$13=vec$8601_$1;
late final dc.dynamic seq$8602_$1;
if((o7668$13 is lcoc_core.ISeqable$iface)){
seq$8602_$1=((o7668$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8602_$1=((lcoc_core.ISeqable.extensions(o7668$13, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$13, ));
}
final dc.dynamic first$8603_$1=lcoc_core.first(seq$8602_$1, );
final dc.dynamic seq$8602_$2=lcoc_core.next(seq$8602_$1, );
final dc.dynamic params$1=first$8603_$1;
final dc.dynamic body$1=seq$8602_$2;
late final dc.bool $if_$14;
if(lcoc_core.vector$QMARK_(params$1, )){
$if_$14=false;
}else{
$if_$14=true;
}
late final dc.Null $UNDERSCORE_$1;
if($if_$14){
late final dc.String $if_$15;
if(((lcoc_core.ISeq.satisfies(lcoc_core.first(sigs$3, ), )) as dc.bool)){
$if_$15=(lcoc_core.str.$_invoke$3("Parameter declaration ", params$1, " should be a vector", ));
}else{
$if_$15=(lcoc_core.str.$_invoke$3("Invalid signature ", sig$1, " should be a list", ));
}
throw lcoc_core.argument_error($if_$15, );
}else{
$UNDERSCORE_$1=null;
}
final dc.dynamic and$7533_$AUTO_$1=lcoc_core.next(body$1, );
late final dc.dynamic $if_$16;
if(((and$7533_$AUTO_$1!=false)&&(and$7533_$AUTO_$1!=null))){
$if_$16=lcoc_core.map$QMARK_(lcoc_core.first(body$1, ), );
}else{
$if_$16=and$7533_$AUTO_$1;
}
late final dc.dynamic conds$1;
if((($if_$16!=false)&&($if_$16!=null))){
conds$1=lcoc_core.first(body$1, );
}else{
conds$1=null;
}
late final dc.dynamic body$2;
if(((conds$1!=false)&&(conds$1!=null))){
body$2=lcoc_core.next(body$1, );
}else{
body$2=body$1;
}
final dc.dynamic or$7573_$AUTO_$1=conds$1;
late final dc.dynamic conds$2;
if(((or$7573_$AUTO_$1!=false)&&(or$7573_$AUTO_$1!=null))){
conds$2=or$7573_$AUTO_$1;
}else{
final dc.dynamic o7872$1=params$1;
if((o7872$1 is lcoc_core.IMeta$iface)){
conds$2=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
conds$2=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
}
final dc.dynamic pre$1=(lcoc_core.Keyword(null, "pre", 1019549967, ).$_invoke$1(conds$2, ));
final dc.dynamic post$1=(lcoc_core.Keyword(null, "post", 2768950116, ).$_invoke$1(conds$2, ));
late final dc.dynamic body$3;
if(((post$1!=false)&&(post$1!=null))){
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "%", )), ));
final dc.dynamic coll7742$1=body$2;
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final dc.bool $1=(1<cast$1);
late final dc.dynamic $if_$17;
if($1){
final dc.dynamic o7668$14=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), )), body$2, ));
if((o7668$14 is lcoc_core.ISeqable$iface)){
$if_$17=((o7668$14 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$17=((lcoc_core.ISeqable.extensions(o7668$14, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$14, ));
}
}else{
$if_$17=lcoc_core.first(body$2, );
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$17, ));
final dc.dynamic o7668$15=(lcoc_core.concat.$_invoke$2(arg$1, $2, ));
late final dc.dynamic $if_$18;
if((o7668$15 is lcoc_core.ISeqable$iface)){
$if_$18=((o7668$15 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$18=((lcoc_core.ISeqable.extensions(o7668$15, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$15, ));
}
final dc.dynamic $3=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$18, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($3, ));
final dc.dynamic o7668$17=(lcoc_core.concat.$_invoke$4(arg$2, $4, (lcoc_core.map.$_invoke$2((dc.dynamic c$1, ){
final dc.dynamic o7668$16=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "assert", )), )), (lcoc_core.list.$_invoke$1(c$1, )), ));
if((o7668$16 is lcoc_core.ISeqable$iface)){
return ((o7668$16 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$16, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$16, ));
}, post$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "%", )), )), ));
late final dc.dynamic $if_$19;
if((o7668$17 is lcoc_core.ISeqable$iface)){
$if_$19=((o7668$17 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$19=((lcoc_core.ISeqable.extensions(o7668$17, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$17, ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$19, ));
final dc.dynamic o7668$18=(lcoc_core.concat.$_invoke$1($5, ));
if((o7668$18 is lcoc_core.ISeqable$iface)){
body$3=((o7668$18 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
body$3=((lcoc_core.ISeqable.extensions(o7668$18, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$18, ));
}
}else{
body$3=body$2;
}
late final dc.dynamic body$4;
if(((pre$1!=false)&&(pre$1!=null))){
body$4=(lcoc_core.concat.$_invoke$2((lcoc_core.map.$_invoke$2((dc.dynamic c$2, ){
final dc.dynamic o7668$19=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "assert", )), )), (lcoc_core.list.$_invoke$1(c$2, )), ));
if((o7668$19 is lcoc_core.ISeqable$iface)){
return ((o7668$19 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$19, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$19, ));
}, pre$1, )), body$3, ));
}else{
body$4=body$3;
}
return lcoc_core.maybe_destructured(params$1, body$4, );
}
final dc.dynamic new_sigs$1=(lcoc_core.map.$_invoke$2(psig$1, sigs$3, ));
late final dc.dynamic $if_$21;
if(((name$1!=false)&&(name$1!=null))){
$if_$21=(lcoc_core.list$STAR_.$_invoke$3((lcoc_core.symbol.$_invoke$2(null, "fn*", )), name$1, new_sigs$1, ));
}else{
$if_$21=lcoc_core.cons((lcoc_core.symbol.$_invoke$2(null, "fn*", )), new_sigs$1, );
}
final dc.dynamic o7872$2=$AMPERSAND_form$1;
late final dc.dynamic $if_$20;
if((o7872$2 is lcoc_core.IMeta$iface)){
$if_$20=((o7872$2 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$20=((lcoc_core.IMeta.extensions(o7872$2, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$2, ));
}
return lcoc_core.with_meta($if_$21, $if_$20, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END fnifn18695hm$1

// BEGIN fnil
lcoc_core.IFn$iface fnil=lcoc_core.fnilifn18695hm$1(null, );

// END fnil

// BEGIN fnilReify18695hm$1
class fnilReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final x$1;
final f$1;

fnilReify18695hm$1(this.meta$1, this.x$1, this.f$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.fnilReify18695hm$1(m$2395_$AUTO_$1, x$1, f$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic a$1, dc.dynamic b$1, dc.dynamic c$1, dc.dynamic ds$1, ){
late final dc.dynamic $if_$1;
if((null==a$1)){
$if_$1=x$1;
}else{
$if_$1=a$1;
}
return (lcoc_core.apply.$_invoke$5(f$1, $if_$1, b$1, c$1, ds$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic a$2, ){
late final dc.dynamic $if_$2;
if((null==a$2)){
$if_$2=x$1;
}else{
$if_$2=a$2;
}
if((f$1 is dc.Function)){
return (f$1 as dc.Function)($if_$2, );
}
if((f$1 is lcoc_core.IFn$iface)){
return ((f$1 as lcoc_core.IFn$iface).$_invoke$1($if_$2, ));
}
return (lcoc_core.IFn.extensions(f$1, ).$_invoke$1(f$1, $if_$2, ));
}

dc.dynamic $_invoke$2(dc.dynamic a$3, dc.dynamic b$2, ){
late final dc.dynamic $if_$3;
if((null==a$3)){
$if_$3=x$1;
}else{
$if_$3=a$3;
}
if((f$1 is dc.Function)){
return (f$1 as dc.Function)($if_$3, b$2, );
}
if((f$1 is lcoc_core.IFn$iface)){
return ((f$1 as lcoc_core.IFn$iface).$_invoke$2($if_$3, b$2, ));
}
return (lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, $if_$3, b$2, ));
}

dc.dynamic $_invoke$3(dc.dynamic a$4, dc.dynamic b$3, dc.dynamic c$2, ){
late final dc.dynamic $if_$4;
if((null==a$4)){
$if_$4=x$1;
}else{
$if_$4=a$4;
}
if((f$1 is dc.Function)){
return (f$1 as dc.Function)($if_$4, b$3, c$2, );
}
if((f$1 is lcoc_core.IFn$iface)){
return ((f$1 as lcoc_core.IFn$iface).$_invoke$3($if_$4, b$3, c$2, ));
}
return (lcoc_core.IFn.extensions(f$1, ).$_invoke$3(f$1, $if_$4, b$3, c$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END fnilReify18695hm$1

// BEGIN fnilReify18695hm$2
class fnilReify18695hm$2 extends dc.Object with lcoc_core.IFnMixin_uuXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;
final y$1;
final f$3;
final x$2;

fnilReify18695hm$2(this.meta$2, this.y$1, this.f$3, this.x$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.fnilReify18695hm$2(m$2395_$AUTO_$2, y$1, f$3, x$2, );
}

dc.dynamic $_invoke$vararg(dc.dynamic a$5, dc.dynamic b$4, dc.dynamic c$3, dc.dynamic ds$2, ){
late final dc.dynamic $if_$6;
if((null==a$5)){
$if_$6=x$2;
}else{
$if_$6=a$5;
}
late final dc.dynamic $if_$5;
if((null==b$4)){
$if_$5=y$1;
}else{
$if_$5=b$4;
}
return (lcoc_core.apply.$_invoke$5(f$3, $if_$6, $if_$5, c$3, ds$2, ));
}

dc.dynamic $_invoke$2(dc.dynamic a$6, dc.dynamic b$5, ){
late final dc.dynamic $if_$8;
if((null==a$6)){
$if_$8=x$2;
}else{
$if_$8=a$6;
}
late final dc.dynamic $if_$7;
if((null==b$5)){
$if_$7=y$1;
}else{
$if_$7=b$5;
}
if((f$3 is dc.Function)){
return (f$3 as dc.Function)($if_$8, $if_$7, );
}
if((f$3 is lcoc_core.IFn$iface)){
return ((f$3 as lcoc_core.IFn$iface).$_invoke$2($if_$8, $if_$7, ));
}
return (lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, $if_$8, $if_$7, ));
}

dc.dynamic $_invoke$3(dc.dynamic a$7, dc.dynamic b$6, dc.dynamic c$4, ){
late final dc.dynamic $if_$10;
if((null==a$7)){
$if_$10=x$2;
}else{
$if_$10=a$7;
}
late final dc.dynamic $if_$9;
if((null==b$6)){
$if_$9=y$1;
}else{
$if_$9=b$6;
}
if((f$3 is dc.Function)){
return (f$3 as dc.Function)($if_$10, $if_$9, c$4, );
}
if((f$3 is lcoc_core.IFn$iface)){
return ((f$3 as lcoc_core.IFn$iface).$_invoke$3($if_$10, $if_$9, c$4, ));
}
return (lcoc_core.IFn.extensions(f$3, ).$_invoke$3(f$3, $if_$10, $if_$9, c$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END fnilReify18695hm$2

// BEGIN fnilReify18695hm$3
class fnilReify18695hm$3 extends dc.Object with lcoc_core.IFnMixin_uuXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$3;
final y$2;
final z$1;
final f$5;
final x$3;

fnilReify18695hm$3(this.meta$3, this.y$2, this.z$1, this.f$5, this.x$3, ):super();

dc.dynamic $_meta$0(){
return meta$3;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$3, ){
return lcoc_core.fnilReify18695hm$3(m$2395_$AUTO_$3, y$2, z$1, f$5, x$3, );
}

dc.dynamic $_invoke$vararg(dc.dynamic a$8, dc.dynamic b$7, dc.dynamic c$5, dc.dynamic ds$3, ){
late final dc.dynamic $if_$13;
if((null==a$8)){
$if_$13=x$3;
}else{
$if_$13=a$8;
}
late final dc.dynamic $if_$12;
if((null==b$7)){
$if_$12=y$2;
}else{
$if_$12=b$7;
}
late final dc.dynamic $if_$11;
if((null==c$5)){
$if_$11=z$1;
}else{
$if_$11=c$5;
}
return (lcoc_core.apply.$_invoke$5(f$5, $if_$13, $if_$12, $if_$11, ds$3, ));
}

dc.dynamic $_invoke$2(dc.dynamic a$9, dc.dynamic b$8, ){
late final dc.dynamic $if_$15;
if((null==a$9)){
$if_$15=x$3;
}else{
$if_$15=a$9;
}
late final dc.dynamic $if_$14;
if((null==b$8)){
$if_$14=y$2;
}else{
$if_$14=b$8;
}
if((f$5 is dc.Function)){
return (f$5 as dc.Function)($if_$15, $if_$14, );
}
if((f$5 is lcoc_core.IFn$iface)){
return ((f$5 as lcoc_core.IFn$iface).$_invoke$2($if_$15, $if_$14, ));
}
return (lcoc_core.IFn.extensions(f$5, ).$_invoke$2(f$5, $if_$15, $if_$14, ));
}

dc.dynamic $_invoke$3(dc.dynamic a$10, dc.dynamic b$9, dc.dynamic c$6, ){
late final dc.dynamic $if_$18;
if((null==a$10)){
$if_$18=x$3;
}else{
$if_$18=a$10;
}
late final dc.dynamic $if_$17;
if((null==b$9)){
$if_$17=y$2;
}else{
$if_$17=b$9;
}
late final dc.dynamic $if_$16;
if((null==c$6)){
$if_$16=z$1;
}else{
$if_$16=c$6;
}
if((f$5 is dc.Function)){
return (f$5 as dc.Function)($if_$18, $if_$17, $if_$16, );
}
if((f$5 is lcoc_core.IFn$iface)){
return ((f$5 as lcoc_core.IFn$iface).$_invoke$3($if_$18, $if_$17, $if_$16, ));
}
return (lcoc_core.IFn.extensions(f$5, ).$_invoke$3(f$5, $if_$18, $if_$17, $if_$16, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END fnilReify18695hm$3

// BEGIN fnilifn18695hm$1
class fnilifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$4;

fnilifn18695hm$1(this.meta$4, ):super();

dc.dynamic $_meta$0(){
return meta$4;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$4, ){
return lcoc_core.fnilifn18695hm$1(m$2395_$AUTO_$4, );
}

dc.dynamic $_invoke$2(dc.dynamic f$1, dc.dynamic x$1, ){
final lcoc_core.fnilReify18695hm$1 f$2=lcoc_core.fnilReify18695hm$1(null, x$1, f$1, );
return f$2;
}

dc.dynamic $_invoke$3(dc.dynamic f$3, dc.dynamic x$2, dc.dynamic y$1, ){
final lcoc_core.fnilReify18695hm$2 f$4=lcoc_core.fnilReify18695hm$2(null, y$1, f$3, x$2, );
return f$4;
}

dc.dynamic $_invoke$4(dc.dynamic f$5, dc.dynamic x$3, dc.dynamic y$2, dc.dynamic z$1, ){
final lcoc_core.fnilReify18695hm$3 f$6=lcoc_core.fnilReify18695hm$3(null, y$2, z$1, f$5, x$3, );
return f$6;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END fnilifn18695hm$1

// BEGIN for
dc.dynamic $for_(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic seq_exprs$1, dc.dynamic body_expr$1, ){
late final dc.dynamic Function(dc.dynamic, dc.dynamic, ) emit$1;
late final dc.dynamic Function(dc.dynamic, dc.dynamic, dc.dynamic, dc.dynamic, dc.dynamic, ) emit_innermost_chunked$1;
late final dc.dynamic Function(dc.dynamic, dc.dynamic, ) chunked_wrap$1;
emit$1=(dc.dynamic seq_exprs$2, dc.dynamic ors$1, ){
final dc.dynamic vec$9151_$1=seq_exprs$2;
final dc.dynamic o7668$1=vec$9151_$1;
late final dc.dynamic seq$9152_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
seq$9152_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9152_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic first$9153_$1=lcoc_core.first(seq$9152_$1, );
final dc.dynamic seq$9152_$2=lcoc_core.next(seq$9152_$1, );
final dc.dynamic binding$1=first$9153_$1;
final dc.dynamic first$9153_$2=lcoc_core.first(seq$9152_$2, );
final dc.dynamic seq$9152_$3=lcoc_core.next(seq$9152_$2, );
final dc.dynamic expr$1=first$9153_$2;
final dc.dynamic seq_exprs$3=seq$9152_$3;
final dc.dynamic arg$1=(lcoc_core.symbol.$_invoke$2(null, "iter__", ));
late final dc.dynamic iter$1;
if((lcoc_core.gensym is dc.Function)){
iter$1=(lcoc_core.gensym as dc.Function)(arg$1, );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
iter$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1(arg$1, ));
}else{
iter$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, arg$1, ));
}
final dc.dynamic arg$2=(lcoc_core.symbol.$_invoke$2(null, "coll__", ));
late final dc.dynamic arg$3;
if((lcoc_core.gensym is dc.Function)){
arg$3=(lcoc_core.gensym as dc.Function)(arg$2, );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
arg$3=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1(arg$2, ));
}else{
arg$3=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, arg$2, ));
}
dc.dynamic wrap$1(dc.dynamic mods$1, dc.dynamic body$1, ){
final dc.dynamic o7668$2=mods$1;
late final dc.dynamic some$7546_$AUTO_$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
some$7546_$AUTO_$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
some$7546_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
if((null==some$7546_$AUTO_$1)){
return body$1;
}
final dc.dynamic vec$9154_$1=some$7546_$AUTO_$1;
final dc.dynamic o7668$3=vec$9154_$1;
late final dc.dynamic seq$9155_$1;
if((o7668$3 is lcoc_core.ISeqable$iface)){
seq$9155_$1=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9155_$1=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic first$9156_$1=lcoc_core.first(seq$9155_$1, );
final dc.dynamic seq$9155_$2=lcoc_core.next(seq$9155_$1, );
final dc.dynamic mod$1=first$9156_$1;
final dc.dynamic first$9156_$2=lcoc_core.first(seq$9155_$2, );
final dc.dynamic seq$9155_$3=lcoc_core.next(seq$9155_$2, );
final dc.dynamic expr$2=first$9156_$2;
final dc.dynamic more_mods$1=seq$9155_$3;
final dc.dynamic body$2=wrap$1(more_mods$1, body$1, );
final dc.dynamic o7900$1=mod$1;
late final dc.int hash$1;
if((o7900$1 is lcoc_core.IHash$iface)){
hash$1=(((o7900$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
hash$1=(((lcoc_core.IHash.extensions(o7900$1, ) as lcoc_core.IHash$ext).$_hash$0(o7900$1, )) as dc.int);
}
switch(hash$1){
case 928173128:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "let", 928173128, ), mod$1, ))){
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), )), (lcoc_core.list.$_invoke$1(expr$2, )), (lcoc_core.list.$_invoke$1(body$2, )), ));
if((o7668$4 is lcoc_core.ISeqable$iface)){
return ((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
continue _default;
case 938507857:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "while", 938507857, ), mod$1, ))){
final dc.dynamic arg$6=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$5=(lcoc_core.list.$_invoke$1(expr$2, ));
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1(body$2, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), )), ors$1, ));
late final dc.dynamic $if_$1;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$4(arg$6, arg$5, arg$4, $1, ));
if((o7668$6 is lcoc_core.ISeqable$iface)){
return ((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
continue _default;
case 2890158092:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "when", 2890158092, ), mod$1, ))){
final dc.dynamic arg$10=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$9=(lcoc_core.list.$_invoke$1(expr$2, ));
final dc.dynamic arg$8=(lcoc_core.list.$_invoke$1(body$2, ));
final dc.dynamic arg$7=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7668$7=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "next", )), )), (lcoc_core.list.$_invoke$1(arg$3, )), ));
late final dc.dynamic $if_$2;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7668$8=(lcoc_core.concat.$_invoke$2(arg$7, $2, ));
late final dc.dynamic $if_$3;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$9=(lcoc_core.concat.$_invoke$4(arg$10, arg$9, arg$8, $3, ));
if((o7668$9 is lcoc_core.ISeqable$iface)){
return ((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
continue _default;
_default: default:
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("No matching clause: ", (lcoc_core.pr_str.$_invoke$1(mod$1, )), )), );
}
}
final dc.dynamic Function(dc.dynamic, dc.dynamic, ) wrap$2=wrap$1;
final dc.dynamic arg$11=(lcoc_core.list.$_invoke$1(iter$1, ));
final dc.dynamic o7668$10=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "next", )), )), (lcoc_core.list.$_invoke$1(arg$3, )), ));
late final dc.dynamic $if_$4;
if((o7668$10 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7668$11=(lcoc_core.concat.$_invoke$2(arg$11, $4, ));
late final dc.dynamic $if_$5;
if((o7668$11 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$11, ));
}
final dc.dynamic ors$2=lcoc_core.cons($if_$5, ors$1, );
final dc.dynamic coll7742$1=(lcoc_core.take_while.$_invoke$2(lcoc_core.keyword$QMARK_, (lcoc_core.take_nth.$_invoke$2(2, seq_exprs$3, )), ));
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final dc.int nmods$1=(2*cast$1);
final dc.dynamic mods$2=(lcoc_core.take.$_invoke$2(nmods$1, seq_exprs$3, ));
final dc.dynamic o7668$12=(lcoc_core.drop.$_invoke$2(nmods$1, seq_exprs$3, ));
late final dc.dynamic seq_exprs$4;
if((o7668$12 is lcoc_core.ISeqable$iface)){
seq_exprs$4=((o7668$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq_exprs$4=((lcoc_core.ISeqable.extensions(o7668$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$12, ));
}
final dc.dynamic arg$19=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$12=(lcoc_core.list.$_invoke$1(binding$1, ));
final dc.dynamic o7668$13=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "first", )), )), (lcoc_core.list.$_invoke$1(arg$3, )), ));
late final dc.dynamic $if_$6;
if((o7668$13 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$13, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$13, ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic o7668$14=(lcoc_core.concat.$_invoke$2(arg$12, $5, ));
late final dc.dynamic $if_$7;
if((o7668$14 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$14 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$14, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$14, ));
}
final dc.dynamic $6=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$7, ));
final dc.dynamic $13=(lcoc_core.list.$_invoke$1($6, ));
late final dc.dynamic $if_$12;
if(((seq_exprs$4!=false)&&(seq_exprs$4!=null))){
final dc.dynamic arg$15=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), ));
final dc.dynamic arg$14=(lcoc_core.list.$_invoke$1(emit$1(seq_exprs$4, ors$2, ), ));
final dc.dynamic arg$13=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7668$15=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "next", )), )), (lcoc_core.list.$_invoke$1(arg$3, )), ));
late final dc.dynamic $if_$8;
if((o7668$15 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$15 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$15, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$15, ));
}
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($if_$8, ));
final dc.dynamic o7668$16=(lcoc_core.concat.$_invoke$2(arg$13, $7, ));
late final dc.dynamic $if_$9;
if((o7668$16 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$16 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$16, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$16, ));
}
final dc.dynamic $8=(lcoc_core.list.$_invoke$1($if_$9, ));
final dc.dynamic o7668$17=(lcoc_core.concat.$_invoke$3(arg$15, arg$14, $8, ));
if((o7668$17 is lcoc_core.ISeqable$iface)){
$if_$12=((o7668$17 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$12=((lcoc_core.ISeqable.extensions(o7668$17, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$17, ));
}
}else{
final dc.dynamic arg$18=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "cons", )), ));
final dc.dynamic arg$17=(lcoc_core.list.$_invoke$1(body_expr$1, ));
final dc.dynamic arg$16=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "lazy-seq", )), ));
final dc.dynamic o7668$18=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), )), ors$2, ));
late final dc.dynamic $if_$10;
if((o7668$18 is lcoc_core.ISeqable$iface)){
$if_$10=((o7668$18 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7668$18, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$18, ));
}
final dc.dynamic $9=(lcoc_core.list.$_invoke$1($if_$10, ));
final dc.dynamic o7668$19=(lcoc_core.concat.$_invoke$2(arg$16, $9, ));
late final dc.dynamic $if_$11;
if((o7668$19 is lcoc_core.ISeqable$iface)){
$if_$11=((o7668$19 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7668$19, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$19, ));
}
final dc.dynamic $10=(lcoc_core.list.$_invoke$1($if_$11, ));
final dc.dynamic o7668$20=(lcoc_core.concat.$_invoke$3(arg$18, arg$17, $10, ));
if((o7668$20 is lcoc_core.ISeqable$iface)){
$if_$12=((o7668$20 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$12=((lcoc_core.ISeqable.extensions(o7668$20, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$20, ));
}
}
final dc.dynamic $11=wrap$2(mods$2, $if_$12, );
final dc.dynamic $12=(lcoc_core.list.$_invoke$1($11, ));
final dc.dynamic o7668$21=(lcoc_core.concat.$_invoke$3(arg$19, $13, $12, ));
late final dc.dynamic body$3;
if((o7668$21 is lcoc_core.ISeqable$iface)){
body$3=((o7668$21 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
body$3=((lcoc_core.ISeqable.extensions(o7668$21, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$21, ));
}
late final dc.dynamic body$4;
if(((seq_exprs$4!=false)&&(seq_exprs$4!=null))){
body$4=body$3;
}else{
final dc.dynamic arg$20=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7668$22=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "chunked-seq?", )), )), (lcoc_core.list.$_invoke$1(arg$3, )), ));
late final dc.dynamic $if_$13;
if((o7668$22 is lcoc_core.ISeqable$iface)){
$if_$13=((o7668$22 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$13=((lcoc_core.ISeqable.extensions(o7668$22, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$22, ));
}
final dc.dynamic $14=(lcoc_core.list.$_invoke$1($if_$13, ));
final dc.dynamic o7668$23=(lcoc_core.concat.$_invoke$4(arg$20, $14, (lcoc_core.list.$_invoke$1(emit_innermost_chunked$1(arg$3, ors$2, binding$1, mods$2, body_expr$1, ), )), (lcoc_core.list.$_invoke$1(body$3, )), ));
if((o7668$23 is lcoc_core.ISeqable$iface)){
body$4=((o7668$23 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
body$4=((lcoc_core.ISeqable.extensions(o7668$23, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$23, ));
}
}
final dc.dynamic arg$22=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), ));
final dc.dynamic arg$21=(lcoc_core.list.$_invoke$1(iter$1, ));
final dc.dynamic o7668$24=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(arg$3, )), ));
late final dc.dynamic $if_$14;
if((o7668$24 is lcoc_core.ISeqable$iface)){
$if_$14=((o7668$24 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$14=((lcoc_core.ISeqable.extensions(o7668$24, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$24, ));
}
final dc.dynamic $15=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$14, ));
final dc.dynamic $17=(lcoc_core.list.$_invoke$1($15, ));
final dc.dynamic o7668$25=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when", )), )), (lcoc_core.list.$_invoke$1(arg$3, )), (lcoc_core.list.$_invoke$1(body$4, )), ));
late final dc.dynamic $if_$15;
if((o7668$25 is lcoc_core.ISeqable$iface)){
$if_$15=((o7668$25 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$15=((lcoc_core.ISeqable.extensions(o7668$25, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$25, ));
}
final dc.dynamic $16=(lcoc_core.list.$_invoke$1($if_$15, ));
final dc.dynamic o7668$26=(lcoc_core.concat.$_invoke$4(arg$22, arg$21, $17, $16, ));
late final dc.dynamic $if_$16;
if((o7668$26 is lcoc_core.ISeqable$iface)){
$if_$16=((o7668$26 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$16=((lcoc_core.ISeqable.extensions(o7668$26, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$26, ));
}
final dc.dynamic $19=(lcoc_core.list.$_invoke$1($if_$16, ));
final dc.dynamic o7668$27=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "seq", )), )), (lcoc_core.list.$_invoke$1(expr$1, )), ));
late final dc.dynamic $if_$17;
if((o7668$27 is lcoc_core.ISeqable$iface)){
$if_$17=((o7668$27 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$17=((lcoc_core.ISeqable.extensions(o7668$27, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$27, ));
}
final dc.dynamic $18=(lcoc_core.list.$_invoke$1($if_$17, ));
final dc.dynamic o7668$28=(lcoc_core.concat.$_invoke$2($19, $18, ));
if((o7668$28 is lcoc_core.ISeqable$iface)){
return ((o7668$28 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$28, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$28, ));
};
emit_innermost_chunked$1=(dc.dynamic arg$23, dc.dynamic ors$3, dc.dynamic binding$2, dc.dynamic mods$3, dc.dynamic body_expr$2, ){
final dc.dynamic buf$1=(lcoc_core.symbol.$_invoke$2(null, "buf__9146__auto__", ));
final dc.dynamic arg$46=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$34=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "c__9147__auto__", )), ));
final dc.dynamic o7668$29=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "chunk-first", )), )), (lcoc_core.list.$_invoke$1(arg$23, )), ));
late final dc.dynamic $if_$18;
if((o7668$29 is lcoc_core.ISeqable$iface)){
$if_$18=((o7668$29 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$18=((lcoc_core.ISeqable.extensions(o7668$29, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$29, ));
}
final dc.dynamic $39=(lcoc_core.list.$_invoke$1($if_$18, ));
final dc.dynamic arg$33=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size__9148__auto__", )), ));
final dc.dynamic o7668$30=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "count", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "c__9147__auto__", )), )), ));
late final dc.dynamic $if_$19;
if((o7668$30 is lcoc_core.ISeqable$iface)){
$if_$19=((o7668$30 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$19=((lcoc_core.ISeqable.extensions(o7668$30, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$30, ));
}
final dc.dynamic $38=(lcoc_core.list.$_invoke$1($if_$19, ));
final dc.dynamic arg$32=(lcoc_core.list.$_invoke$1(buf$1, ));
final dc.dynamic o7668$31=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "chunk-buffer", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size__9148__auto__", )), )), ));
late final dc.dynamic $if_$20;
if((o7668$31 is lcoc_core.ISeqable$iface)){
$if_$20=((o7668$31 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$20=((lcoc_core.ISeqable.extensions(o7668$31, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$31, ));
}
final dc.dynamic $37=(lcoc_core.list.$_invoke$1($if_$20, ));
final dc.dynamic arg$31=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "exit__9149__auto__", )), ));
final dc.dynamic arg$30=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "loop", )), ));
final dc.dynamic arg$24=(lcoc_core.symbol.$_invoke$2(null, "i__9150__auto__", ));
final dc.dynamic o7668$32=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "tag", 2780644040, ), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("dart:core", "int", )), )), ));
late final dc.dynamic $if_$21;
if((o7668$32 is lcoc_core.ISeqable$iface)){
$if_$21=((o7668$32 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$21=((lcoc_core.ISeqable.extensions(o7668$32, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$32, ));
}
final dc.dynamic $20=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$21, ));
final dc.dynamic $21=lcoc_core.with_meta(arg$24, $20, );
final dc.dynamic $22=(lcoc_core.list.$_invoke$1($21, ));
final dc.dynamic o7668$33=(lcoc_core.concat.$_invoke$2($22, (lcoc_core.list.$_invoke$1(0, )), ));
late final dc.dynamic $if_$22;
if((o7668$33 is lcoc_core.ISeqable$iface)){
$if_$22=((o7668$33 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$22=((lcoc_core.ISeqable.extensions(o7668$33, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$33, ));
}
final dc.dynamic $23=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$22, ));
final dc.dynamic $35=(lcoc_core.list.$_invoke$1($23, ));
final dc.dynamic arg$29=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when", )), ));
final dc.dynamic o7668$34=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "<", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__9150__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size__9148__auto__", )), )), ));
late final dc.dynamic $if_$23;
if((o7668$34 is lcoc_core.ISeqable$iface)){
$if_$23=((o7668$34 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$23=((lcoc_core.ISeqable.extensions(o7668$34, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$34, ));
}
final dc.dynamic $33=(lcoc_core.list.$_invoke$1($if_$23, ));
final dc.dynamic arg$28=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), ));
final dc.dynamic arg$26=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$25=(lcoc_core.list.$_invoke$1(binding$2, ));
final dc.dynamic o7668$35=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-nth", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "c__9147__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__9150__auto__", )), )), ));
late final dc.dynamic $if_$24;
if((o7668$35 is lcoc_core.ISeqable$iface)){
$if_$24=((o7668$35 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$24=((lcoc_core.ISeqable.extensions(o7668$35, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$35, ));
}
final dc.dynamic $24=(lcoc_core.list.$_invoke$1($if_$24, ));
final dc.dynamic o7668$36=(lcoc_core.concat.$_invoke$2(arg$25, $24, ));
late final dc.dynamic $if_$25;
if((o7668$36 is lcoc_core.ISeqable$iface)){
$if_$25=((o7668$36 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$25=((lcoc_core.ISeqable.extensions(o7668$36, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$36, ));
}
final dc.dynamic $25=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$25, ));
final dc.dynamic $28=(lcoc_core.list.$_invoke$1($25, ));
final dc.dynamic o7668$37=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "chunk-append", )), )), (lcoc_core.list.$_invoke$1(buf$1, )), (lcoc_core.list.$_invoke$1(body_expr$2, )), ));
late final dc.dynamic $if_$26;
if((o7668$37 is lcoc_core.ISeqable$iface)){
$if_$26=((o7668$37 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$26=((lcoc_core.ISeqable.extensions(o7668$37, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$37, ));
}
final dc.dynamic $26=chunked_wrap$1(mods$3, $if_$26, );
final dc.dynamic $27=(lcoc_core.list.$_invoke$1($26, ));
final dc.dynamic o7668$38=(lcoc_core.concat.$_invoke$3(arg$26, $28, $27, ));
late final dc.dynamic $if_$27;
if((o7668$38 is lcoc_core.ISeqable$iface)){
$if_$27=((o7668$38 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$27=((lcoc_core.ISeqable.extensions(o7668$38, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$38, ));
}
final dc.dynamic $31=(lcoc_core.list.$_invoke$1($if_$27, ));
final dc.dynamic arg$27=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7668$39=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "inc", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__9150__auto__", )), )), ));
late final dc.dynamic $if_$28;
if((o7668$39 is lcoc_core.ISeqable$iface)){
$if_$28=((o7668$39 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$28=((lcoc_core.ISeqable.extensions(o7668$39, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$39, ));
}
final dc.dynamic $29=(lcoc_core.list.$_invoke$1($if_$28, ));
final dc.dynamic o7668$40=(lcoc_core.concat.$_invoke$2(arg$27, $29, ));
late final dc.dynamic $if_$29;
if((o7668$40 is lcoc_core.ISeqable$iface)){
$if_$29=((o7668$40 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$29=((lcoc_core.ISeqable.extensions(o7668$40, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$40, ));
}
final dc.dynamic $30=(lcoc_core.list.$_invoke$1($if_$29, ));
final dc.dynamic o7668$41=(lcoc_core.concat.$_invoke$3(arg$28, $31, $30, ));
late final dc.dynamic $if_$30;
if((o7668$41 is lcoc_core.ISeqable$iface)){
$if_$30=((o7668$41 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$30=((lcoc_core.ISeqable.extensions(o7668$41, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$41, ));
}
final dc.dynamic $32=(lcoc_core.list.$_invoke$1($if_$30, ));
final dc.dynamic o7668$42=(lcoc_core.concat.$_invoke$3(arg$29, $33, $32, ));
late final dc.dynamic $if_$31;
if((o7668$42 is lcoc_core.ISeqable$iface)){
$if_$31=((o7668$42 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$31=((lcoc_core.ISeqable.extensions(o7668$42, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$42, ));
}
final dc.dynamic $34=(lcoc_core.list.$_invoke$1($if_$31, ));
final dc.dynamic o7668$43=(lcoc_core.concat.$_invoke$3(arg$30, $35, $34, ));
late final dc.dynamic $if_$32;
if((o7668$43 is lcoc_core.ISeqable$iface)){
$if_$32=((o7668$43 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$32=((lcoc_core.ISeqable.extensions(o7668$43, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$43, ));
}
final dc.dynamic $36=(lcoc_core.list.$_invoke$1($if_$32, ));
final dc.dynamic o7668$44=(lcoc_core.concat.$_invoke$8(arg$34, $39, arg$33, $38, arg$32, $37, arg$31, $36, ));
late final dc.dynamic $if_$33;
if((o7668$44 is lcoc_core.ISeqable$iface)){
$if_$33=((o7668$44 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$33=((lcoc_core.ISeqable.extensions(o7668$44, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$44, ));
}
final dc.dynamic $40=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$33, ));
final dc.dynamic $54=(lcoc_core.list.$_invoke$1($40, ));
final dc.dynamic arg$45=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "cond", )), ));
final dc.dynamic arg$35=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "pos?", )), ));
final dc.dynamic o7668$45=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "count", )), )), (lcoc_core.list.$_invoke$1(buf$1, )), ));
late final dc.dynamic $if_$34;
if((o7668$45 is lcoc_core.ISeqable$iface)){
$if_$34=((o7668$45 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$34=((lcoc_core.ISeqable.extensions(o7668$45, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$45, ));
}
final dc.dynamic $41=(lcoc_core.list.$_invoke$1($if_$34, ));
final dc.dynamic o7668$46=(lcoc_core.concat.$_invoke$2(arg$35, $41, ));
late final dc.dynamic $if_$35;
if((o7668$46 is lcoc_core.ISeqable$iface)){
$if_$35=((o7668$46 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$35=((lcoc_core.ISeqable.extensions(o7668$46, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$46, ));
}
final dc.dynamic $52=(lcoc_core.list.$_invoke$1($if_$35, ));
final dc.dynamic arg$41=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "chunk-cons", )), ));
final dc.dynamic o7668$47=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "chunk", )), )), (lcoc_core.list.$_invoke$1(buf$1, )), ));
late final dc.dynamic $if_$36;
if((o7668$47 is lcoc_core.ISeqable$iface)){
$if_$36=((o7668$47 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$36=((lcoc_core.ISeqable.extensions(o7668$47, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$47, ));
}
final dc.dynamic $47=(lcoc_core.list.$_invoke$1($if_$36, ));
final dc.dynamic arg$40=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "lazy-seq", )), ));
final dc.dynamic arg$39=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), ));
final dc.dynamic arg$38=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when-not", )), ));
final dc.dynamic arg$37=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "exit__9149__auto__", )), ));
final dc.dynamic arg$36=(lcoc_core.list.$_invoke$1(lcoc_core.ffirst(ors$3, ), ));
final dc.dynamic o7668$48=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "chunk-next", )), )), (lcoc_core.list.$_invoke$1(arg$23, )), ));
late final dc.dynamic $if_$37;
if((o7668$48 is lcoc_core.ISeqable$iface)){
$if_$37=((o7668$48 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$37=((lcoc_core.ISeqable.extensions(o7668$48, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$48, ));
}
final dc.dynamic $42=(lcoc_core.list.$_invoke$1($if_$37, ));
final dc.dynamic o7668$49=(lcoc_core.concat.$_invoke$2(arg$36, $42, ));
late final dc.dynamic $if_$38;
if((o7668$49 is lcoc_core.ISeqable$iface)){
$if_$38=((o7668$49 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$38=((lcoc_core.ISeqable.extensions(o7668$49, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$49, ));
}
final dc.dynamic $43=(lcoc_core.list.$_invoke$1($if_$38, ));
final dc.dynamic o7668$50=(lcoc_core.concat.$_invoke$3(arg$38, arg$37, $43, ));
late final dc.dynamic $if_$39;
if((o7668$50 is lcoc_core.ISeqable$iface)){
$if_$39=((o7668$50 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$39=((lcoc_core.ISeqable.extensions(o7668$50, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$50, ));
}
final dc.dynamic $44=(lcoc_core.list.$_invoke$1($if_$39, ));
final dc.dynamic o7668$51=(lcoc_core.concat.$_invoke$3(arg$39, $44, lcoc_core.next(ors$3, ), ));
late final dc.dynamic $if_$40;
if((o7668$51 is lcoc_core.ISeqable$iface)){
$if_$40=((o7668$51 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$40=((lcoc_core.ISeqable.extensions(o7668$51, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$51, ));
}
final dc.dynamic $45=(lcoc_core.list.$_invoke$1($if_$40, ));
final dc.dynamic o7668$52=(lcoc_core.concat.$_invoke$2(arg$40, $45, ));
late final dc.dynamic $if_$41;
if((o7668$52 is lcoc_core.ISeqable$iface)){
$if_$41=((o7668$52 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$41=((lcoc_core.ISeqable.extensions(o7668$52, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$52, ));
}
final dc.dynamic $46=(lcoc_core.list.$_invoke$1($if_$41, ));
final dc.dynamic o7668$53=(lcoc_core.concat.$_invoke$3(arg$41, $47, $46, ));
late final dc.dynamic $if_$42;
if((o7668$53 is lcoc_core.ISeqable$iface)){
$if_$42=((o7668$53 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$42=((lcoc_core.ISeqable.extensions(o7668$53, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$53, ));
}
final dc.dynamic $51=(lcoc_core.list.$_invoke$1($if_$42, ));
final dc.dynamic arg$44=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "exit__9149__auto__", )), ));
final dc.dynamic o7668$54=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), )), lcoc_core.next(ors$3, ), ));
late final dc.dynamic $if_$43;
if((o7668$54 is lcoc_core.ISeqable$iface)){
$if_$43=((o7668$54 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$43=((lcoc_core.ISeqable.extensions(o7668$54, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$54, ));
}
final dc.dynamic $50=(lcoc_core.list.$_invoke$1($if_$43, ));
final dc.dynamic arg$43=(lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "else", 3088930457, ), ));
final dc.dynamic arg$42=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7668$55=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "chunk-next", )), )), (lcoc_core.list.$_invoke$1(arg$23, )), ));
late final dc.dynamic $if_$44;
if((o7668$55 is lcoc_core.ISeqable$iface)){
$if_$44=((o7668$55 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$44=((lcoc_core.ISeqable.extensions(o7668$55, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$55, ));
}
final dc.dynamic $48=(lcoc_core.list.$_invoke$1($if_$44, ));
final dc.dynamic o7668$56=(lcoc_core.concat.$_invoke$2(arg$42, $48, ));
late final dc.dynamic $if_$45;
if((o7668$56 is lcoc_core.ISeqable$iface)){
$if_$45=((o7668$56 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$45=((lcoc_core.ISeqable.extensions(o7668$56, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$56, ));
}
final dc.dynamic $49=(lcoc_core.list.$_invoke$1($if_$45, ));
final dc.dynamic o7668$57=(lcoc_core.concat.$_invoke$7(arg$45, $52, $51, arg$44, $50, arg$43, $49, ));
late final dc.dynamic $if_$46;
if((o7668$57 is lcoc_core.ISeqable$iface)){
$if_$46=((o7668$57 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$46=((lcoc_core.ISeqable.extensions(o7668$57, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$57, ));
}
final dc.dynamic $53=(lcoc_core.list.$_invoke$1($if_$46, ));
final dc.dynamic o7668$58=(lcoc_core.concat.$_invoke$3(arg$46, $54, $53, ));
if((o7668$58 is lcoc_core.ISeqable$iface)){
return ((o7668$58 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$58, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$58, ));
};
chunked_wrap$1=(dc.dynamic mods$4, dc.dynamic body$5, ){
final dc.dynamic o7668$59=mods$4;
late final dc.dynamic some$7546_$AUTO_$2;
if((o7668$59 is lcoc_core.ISeqable$iface)){
some$7546_$AUTO_$2=((o7668$59 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
some$7546_$AUTO_$2=((lcoc_core.ISeqable.extensions(o7668$59, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$59, ));
}
if((null==some$7546_$AUTO_$2)){
return body$5;
}
final dc.dynamic vec$9157_$1=some$7546_$AUTO_$2;
final dc.dynamic o7668$60=vec$9157_$1;
late final dc.dynamic seq$9158_$1;
if((o7668$60 is lcoc_core.ISeqable$iface)){
seq$9158_$1=((o7668$60 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9158_$1=((lcoc_core.ISeqable.extensions(o7668$60, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$60, ));
}
final dc.dynamic first$9159_$1=lcoc_core.first(seq$9158_$1, );
final dc.dynamic seq$9158_$2=lcoc_core.next(seq$9158_$1, );
final dc.dynamic mod$2=first$9159_$1;
final dc.dynamic first$9159_$2=lcoc_core.first(seq$9158_$2, );
final dc.dynamic seq$9158_$3=lcoc_core.next(seq$9158_$2, );
final dc.dynamic expr$3=first$9159_$2;
final dc.dynamic more_mods$2=seq$9158_$3;
final dc.dynamic body$6=chunked_wrap$1(more_mods$2, body$5, );
final dc.dynamic o7900$2=mod$2;
late final dc.int hash$2;
if((o7900$2 is lcoc_core.IHash$iface)){
hash$2=(((o7900$2 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
hash$2=(((lcoc_core.IHash.extensions(o7900$2, ) as lcoc_core.IHash$ext).$_hash$0(o7900$2, )) as dc.int);
}
switch(hash$2){
case 928173128:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "let", 928173128, ), mod$2, ))){
final dc.dynamic o7668$61=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), )), (lcoc_core.list.$_invoke$1(expr$3, )), (lcoc_core.list.$_invoke$1(body$6, )), ));
if((o7668$61 is lcoc_core.ISeqable$iface)){
return ((o7668$61 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$61, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$61, ));
}
continue _default;
case 938507857:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "while", 938507857, ), mod$2, ))){
final dc.dynamic o7668$62=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), )), (lcoc_core.list.$_invoke$1(expr$3, )), (lcoc_core.list.$_invoke$1(body$6, )), (lcoc_core.list.$_invoke$1(true, )), ));
if((o7668$62 is lcoc_core.ISeqable$iface)){
return ((o7668$62 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$62, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$62, ));
}
continue _default;
case 2890158092:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "when", 2890158092, ), mod$2, ))){
final dc.dynamic o7668$63=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when", )), )), (lcoc_core.list.$_invoke$1(expr$3, )), (lcoc_core.list.$_invoke$1(body$6, )), ));
if((o7668$63 is lcoc_core.ISeqable$iface)){
return ((o7668$63 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$63, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$63, ));
}
continue _default;
_default: default:
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("No matching clause: ", (lcoc_core.pr_str.$_invoke$1(mod$2, )), )), );
}
};
final dc.dynamic o7668$64=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "lazy-seq", )), )), (lcoc_core.list.$_invoke$1(emit$1(seq_exprs$1, null, ), )), ));
if((o7668$64 is lcoc_core.ISeqable$iface)){
return ((o7668$64 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$64, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$64, ));
}

// END for

// BEGIN force
dc.dynamic force(dc.dynamic x$1, ){
final dc.dynamic test$1=lcoc_core.delay$QMARK_(x$1, );
if(((test$1!=false)&&(test$1!=null))){
return lcoc_core.deref(x$1, );
}
return x$1;
}

// END force

// BEGIN frequencies
dc.dynamic frequencies(dc.dynamic coll$1, ){
final dc.dynamic coll7722$1=coll$1;
dc.dynamic f7723$1(dc.dynamic counts$1, dc.dynamic x$1, ){
return (lcoc_core.assoc$BANG_.$_invoke$3(counts$1, x$1, (1+((lcoc_core.$get_.$_invoke$3(counts$1, x$1, 0, )) as dc.num)), ));
}
final dc.dynamic start7724$1=lcoc_core.transient(lcoc_core.$_EMPTY_MAP, );
late final dc.dynamic $if_$1;
if((coll7722$1 is lcoc_core.IReduce$iface)){
$if_$1=((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}else{
$if_$1=((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}
return lcoc_core.persistent$BANG_($if_$1, );
}

// END frequencies

// BEGIN future
lcoc_core.IFn$iface future=lcoc_core.futureifn18695hm$1(null, );

// END future

// BEGIN futureifn18695hm$1
class futureifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

futureifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.futureifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic body$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "bindings__9276__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-DYNAMIC-BINDINGS", )), )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("Future", "microtask", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "set!", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-DYNAMIC-BINDINGS", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "bindings__9276__auto__", )), )), ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$4(arg$1, $4, $3, body$1, ));
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$2(arg$2, $5, ));
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$3(arg$3, $7, $6, ));
if((o7668$6 is lcoc_core.ISeqable$iface)){
return ((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END futureifn18695hm$1

// BEGIN gensym
dc.dynamic gensym=(){
final lcoc_core.Atom id$1=(lcoc_core.atom.$_invoke$1(0, ));
final lcoc_core.gensymReify18695hm$1 f$1=lcoc_core.gensymReify18695hm$1(null, id$1, );
return f$1;
}();

// END gensym

// BEGIN gensymReify18695hm$1
class gensymReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final lcoc_core.Atom id$1;

gensymReify18695hm$1(this.meta$1, this.id$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.gensymReify18695hm$1(m$2395_$AUTO_$1, id$1, );
}

dc.dynamic $_invoke$0(){
if((lcoc_core.gensym is dc.Function)){
return (lcoc_core.gensym as dc.Function)("G__", );
}
if((lcoc_core.gensym is lcoc_core.IFn$iface)){
return ((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("G__", ));
}
return (lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "G__", ));
}

dc.dynamic $_invoke$1(dc.dynamic prefix_string$1, ){
return (lcoc_core.symbol.$_invoke$1((lcoc_core.str.$_invoke$2(prefix_string$1, (lcoc_core.swap$BANG_.$_invoke$2(id$1, lcoc_core.inc, )), )), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END gensymReify18695hm$1

// BEGIN get
lcoc_core.IFn$iface $get_=lcoc_core.$get_ifn18695hm$1(null, );

// END get

// BEGIN get-dynamic-binding
dc.dynamic get_dynamic_binding(dc.dynamic k$1, dc.dynamic $else_$1, ){
final dc.dynamic some$7546_$AUTO_$1=(lcoc_core.$get_.$_invoke$2(lcoc_core.$_DYNAMIC_BINDINGS, k$1, ));
if((null==some$7546_$AUTO_$1)){
return $else_$1;
}
final dc.dynamic binding$1=some$7546_$AUTO_$1;
return lcoc_core.deref(binding$1, );
}

// END get-dynamic-binding

// BEGIN get-in
lcoc_core.IFn$iface get_in=lcoc_core.get_inifn18695hm$1(null, );

// END get-in

// BEGIN get-validator
dc.dynamic get_validator(dc.dynamic atom$1, ){
return (atom$1 as lcoc_core.Atom).validator;
}

// END get-validator

// BEGIN get_inifn18695hm$1
class get_inifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

get_inifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.get_inifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$2(dc.dynamic m$1, dc.dynamic ks$1, ){
final dc.dynamic coll7722$1=ks$1;
final lcoc_core.IFn$iface f7723$1=lcoc_core.$get_;
final dc.dynamic start7724$1=m$1;
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic m$2, dc.dynamic ks$2, dc.dynamic not_found$1, ){
dc.dynamic sentinel$1=lcoc_core.sentinel;
dc.dynamic m$3=m$2;
final dc.dynamic o7668$1=ks$2;
dc.dynamic ks$3;
if((o7668$1 is lcoc_core.ISeqable$iface)){
ks$3=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
ks$3=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
do {
if(((ks$3!=false)&&(ks$3!=null))){
final dc.dynamic m$4=(lcoc_core.$get_.$_invoke$3(m$3, lcoc_core.first(ks$3, ), sentinel$1, ));
if(dc.identical(sentinel$1, m$4, )){
return not_found$1;
}
m$3=m$4;
ks$3=lcoc_core.next(ks$3, );
continue;
}
return m$3;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END get_inifn18695hm$1

// BEGIN group-by
dc.dynamic group_by(dc.dynamic f$1, dc.dynamic coll$1, ){
final dc.dynamic coll7722$1=coll$1;
dc.dynamic f7723$1(dc.dynamic ret$1, dc.dynamic x$1, ){
late final dc.dynamic k$1;
if((f$1 is dc.Function)){
k$1=(f$1 as dc.Function)(x$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
k$1=((f$1 as lcoc_core.IFn$iface).$_invoke$1(x$1, ));
}else{
k$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$1(f$1, x$1, ));
}
final dc.dynamic coll7707$1=(lcoc_core.$get_.$_invoke$3(ret$1, k$1, lcoc_core.$_EMPTY_VECTOR, ));
final dc.dynamic o7708$1=x$1;
late final dc.dynamic $if_$1;
if((coll7707$1 is lcoc_core.ICollection$iface)){
$if_$1=((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}else{
$if_$1=((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
}
return (lcoc_core.assoc$BANG_.$_invoke$3(ret$1, k$1, $if_$1, ));
}
final dc.dynamic start7724$1=lcoc_core.transient(lcoc_core.$_EMPTY_MAP, );
late final dc.dynamic $if_$2;
if((coll7722$1 is lcoc_core.IReduce$iface)){
$if_$2=((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}else{
$if_$2=((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}
return lcoc_core.persistent$BANG_($if_$2, );
}

// END group-by

// BEGIN halt-when
lcoc_core.IFn$iface halt_when=lcoc_core.halt_whenifn18695hm$1(null, );

// END halt-when

// BEGIN halt_whenReify18695hm$1
class halt_whenReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final pred$2;
final retf$1;

halt_whenReify18695hm$1(this.meta$1, this.rf$1, this.pred$2, this.retf$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.halt_whenReify18695hm$1(m$2395_$AUTO_$1, rf$1, pred$2, retf$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
final dc.bool and$7533_$AUTO_$1=lcoc_core.map$QMARK_(result$1, );
late final dc.bool $if_$1;
if(and$7533_$AUTO_$1){
$if_$1=lcoc_core.contains$QMARK_(result$1, const lcoc_core.Keyword("cljd.core", "halt", 3568259668, ), );
}else{
$if_$1=and$7533_$AUTO_$1;
}
if($if_$1){
return (const lcoc_core.Keyword("cljd.core", "halt", 3568259668, ).$_invoke$1(result$1, ));
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
late final dc.dynamic $if_$2;
if((pred$2 is dc.Function)){
$if_$2=(pred$2 as dc.Function)(input$1, );
}else if((pred$2 is lcoc_core.IFn$iface)){
$if_$2=((pred$2 as lcoc_core.IFn$iface).$_invoke$1(input$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(pred$2, ).$_invoke$1(pred$2, input$1, ));
}
if((($if_$2!=false)&&($if_$2!=null))){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword("cljd.core", "halt", 3568259668, ), ));
late final dc.dynamic $if_$4;
if(((retf$1!=false)&&(retf$1!=null))){
late final dc.dynamic $if_$3;
if((rf$1 is dc.Function)){
$if_$3=(rf$1 as dc.Function)(result$2, );
}else if((rf$1 is lcoc_core.IFn$iface)){
$if_$3=((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$2, ));
}else{
$if_$3=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$2, ));
}
if((retf$1 is dc.Function)){
$if_$4=(retf$1 as dc.Function)($if_$3, input$1, );
}else if((retf$1 is lcoc_core.IFn$iface)){
$if_$4=((retf$1 as lcoc_core.IFn$iface).$_invoke$2($if_$3, input$1, ));
}else{
$if_$4=(lcoc_core.IFn.extensions(retf$1, ).$_invoke$2(retf$1, $if_$3, input$1, ));
}
}else{
$if_$4=input$1;
}
fl$1[1]=$if_$4;
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$1, );
return lcoc_core.reduced($1, );
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END halt_whenReify18695hm$1

// BEGIN halt_whenifn18695hm$1
class halt_whenifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

halt_whenifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.halt_whenifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$1(dc.dynamic pred$1, ){
return (lcoc_core.halt_when.$_invoke$2(pred$1, null, ));
}

dc.dynamic $_invoke$2(dc.dynamic pred$2, dc.dynamic retf$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.halt_whenReify18695hm$1 f$1=lcoc_core.halt_whenReify18695hm$1(null, rf$1, pred$2, retf$1, );
return f$1;
};
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END halt_whenifn18695hm$1

// BEGIN hash
dc.int hash(dc.dynamic o$1, ){
final dc.dynamic o7900$1=o$1;
if((o7900$1 is lcoc_core.IHash$iface)){
return ((o7900$1 as lcoc_core.IHash$iface).$_hash$0());
}
return ((lcoc_core.IHash.extensions(o7900$1, ) as lcoc_core.IHash$ext).$_hash$0(o7900$1, ));
}

// END hash

// BEGIN hash-combine
dc.int hash_combine(dc.dynamic seed$1, dc.dynamic hash$1, ){
return (4294967295&((seed$1 as dc.int)^((((hash$1 as dc.int)+2654435769)+(4294967295&((seed$1 as dc.int)<<(31&6))))+((seed$1 as dc.int)>>(31&2)))));
}

// END hash-combine

// BEGIN hash-map
lcoc_core.IFn$iface hash_map=lcoc_core.hash_mapifn18695hm$1(null, );

// END hash-map

// BEGIN hash-ordered-coll
dc.int hash_ordered_coll(dc.dynamic coll$1, ){
dc.int n$1=0;
dc.int hash_code$1=1;
final dc.dynamic o7668$1=coll$1;
dc.dynamic coll$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
coll$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
coll$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
do {
if((null==coll$2)){
return lcoc_core.mix_collection_hash(hash_code$1, n$1, );
}
n$1=(1+n$1);
final dc.int y$8248_$AUTO_$1=hash_code$1;
final dc.int $1=(4294967295&((4294967295&((4294901760&31)*y$8248_$AUTO_$1))+((65535&31)*y$8248_$AUTO_$1)));
final dc.dynamic o7900$1=lcoc_core.first(coll$2, );
late final dc.int cast$1;
if((o7900$1 is lcoc_core.IHash$iface)){
cast$1=(((o7900$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$1=(((lcoc_core.IHash.extensions(o7900$1, ) as lcoc_core.IHash$ext).$_hash$0(o7900$1, )) as dc.int);
}
final dc.int $2=($1+cast$1);
hash_code$1=(4294967295&$2);
coll$2=lcoc_core.next(coll$2, );
continue;
} while(true);
}

// END hash-ordered-coll

// BEGIN hash-set
lcoc_core.IFn$iface hash_set=lcoc_core.hash_setifn18695hm$1(null, );

// END hash-set

// BEGIN hash-string
dc.dynamic hash_string(dc.dynamic s$1, ){
final dc.dynamic? or$7573_$AUTO_$1=((lcoc_core.$_hash_string_cache.lookup(s$1, )) as dc.dynamic?);
if((or$7573_$AUTO_$1!=null)){
return or$7573_$AUTO_$1;
}
final dc.int h$1=lcoc_core.hash_string$STAR_(s$1, );
lcoc_core.$_hash_string_cache.insert(s$1, h$1, );
return h$1;
}

// END hash-string

// BEGIN hash-string*
dc.int hash_string$STAR_(dc.dynamic s$1, ){
final dc.int len$1=(s$1 as dc.String).length;
if((0<len$1)){
dc.int i$1=0;
dc.int hash$1=0;
do {
if((i$1<len$1)){
final dc.int i$1tmp=(1+i$1);
final dc.int y$8248_$AUTO_$1=hash$1;
final dc.int $1=(4294967295&((4294967295&((4294901760&31)*y$8248_$AUTO_$1))+((65535&31)*y$8248_$AUTO_$1)));
hash$1=($1+((s$1 as dc.String).codeUnitAt(i$1, )));
i$1=i$1tmp;
continue;
}
return lcoc_core.m3_hash_u32(hash$1, );
} while(true);
}
return 0;
}

// END hash-string*

// BEGIN hash-symbol
dc.int hash_symbol(dc.dynamic sym$1, ){
final dc.int arg$1=lcoc_core.m3_hash_unencoded_chars((sym$1 as lcoc_core.Symbol).name, );
final dc.String? or$7573_$AUTO_$1=(sym$1 as lcoc_core.Symbol).ns;
late final dc.String? $if_$1;
if((or$7573_$AUTO_$1!=null)){
$if_$1=or$7573_$AUTO_$1;
}else{
$if_$1="";
}
final dc.int $1=lcoc_core.hash_string$STAR_($if_$1, );
return lcoc_core.hash_combine(arg$1, $1, );
}

// END hash-symbol

// BEGIN hash-unordered-coll
dc.int hash_unordered_coll(dc.dynamic coll$1, ){
dc.int n$1=0;
dc.int hash_code$1=0;
final dc.dynamic o7668$1=coll$1;
dc.dynamic coll$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
coll$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
coll$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
do {
if((null==coll$2)){
return lcoc_core.mix_collection_hash(hash_code$1, n$1, );
}
n$1=(1+n$1);
final dc.dynamic o7900$1=lcoc_core.first(coll$2, );
late final dc.int cast$1;
if((o7900$1 is lcoc_core.IHash$iface)){
cast$1=(((o7900$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$1=(((lcoc_core.IHash.extensions(o7900$1, ) as lcoc_core.IHash$ext).$_hash$0(o7900$1, )) as dc.int);
}
final dc.int $1=(hash_code$1+cast$1);
hash_code$1=(4294967295&$1);
coll$2=lcoc_core.next(coll$2, );
continue;
} while(true);
}

// END hash-unordered-coll

// BEGIN hash_mapifn18695hm$1
class hash_mapifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

hash_mapifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.hash_mapifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic keyvals$1, ){
final dc.dynamic coll7742$1=keyvals$1;
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final dc.bool $1=cast$1.isOdd;
if($1){
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("No value supplied for key: ", lcoc_core.last(keyvals$1, ), )), );
}else{
}
final dc.dynamic o7668$1=keyvals$1;
dc.dynamic $in_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$in_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$in_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
dc.dynamic out$1=lcoc_core.transient(lcoc_core.$_EMPTY_MAP, );
do {
if((($in_$1!=false)&&($in_$1!=null))){
final dc.dynamic $in_$1tmp=lcoc_core.nnext($in_$1, );
out$1=(lcoc_core.assoc$BANG_.$_invoke$3(out$1, lcoc_core.first($in_$1, ), lcoc_core.second($in_$1, ), ));
$in_$1=$in_$1tmp;
continue;
}
return lcoc_core.persistent$BANG_(out$1, );
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END hash_mapifn18695hm$1

// BEGIN hash_setifn18695hm$1
class hash_setifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Y implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

hash_setifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.hash_setifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic keys$1, ){
return (lcoc_core.into.$_invoke$2(lcoc_core.$_EMPTY_SET, keys$1, ));
}

dc.dynamic $_invoke$0(){
return lcoc_core.$_EMPTY_SET;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END hash_setifn18695hm$1

// BEGIN hashrank
dc.int hashrank(dc.dynamic x$1, ){
final dc.dynamic o7900$1=x$1;
late final dc.int h$1;
if((o7900$1 is lcoc_core.IHash$iface)){
h$1=(((o7900$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
h$1=(((lcoc_core.IHash.extensions(o7900$1, ) as lcoc_core.IHash$ext).$_hash$0(o7900$1, )) as dc.int);
}
if((0==(h$1&15))){
final dc.int v$1=(1+((h$1-1)&(~h$1)));
late final dc.int G$9278_$2;
if((0==(v$1&1048560))){
G$9278_$2=(1+4);
}else{
G$9278_$2=1;
}
late final dc.int G$9278_$3;
if((0==(v$1&267390960))){
G$9278_$3=(G$9278_$2+2);
}else{
G$9278_$3=G$9278_$2;
}
if((0==(v$1&4042322160))){
return (G$9278_$3+1);
}
return G$9278_$3;
}
return 0;
}

// END hashrank

// BEGIN hint-as
dc.dynamic hint_as(dc.dynamic expr$1, dc.dynamic tag$1, ){
final dc.dynamic G$8905_$1=expr$1;
final dc.bool or$7573_$AUTO_$1=((lcoc_core.ISeq.satisfies(expr$1, )) as dc.bool);
late final dc.bool $if_$1;
if(or$7573_$AUTO_$1){
$if_$1=or$7573_$AUTO_$1;
}else{
$if_$1=lcoc_core.symbol$QMARK_(expr$1, );
}
if($if_$1){
return (lcoc_core.vary_meta.$_invoke$4(G$8905_$1, lcoc_core.assoc, const lcoc_core.Keyword(null, "tag", 2780644040, ), tag$1, ));
}
return G$8905_$1;
}

// END hint-as

// BEGIN ident?
dc.bool ident$QMARK_(dc.dynamic x$1, ){
final dc.bool or$7573_$AUTO_$1=lcoc_core.keyword$QMARK_(x$1, );
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return lcoc_core.symbol$QMARK_(x$1, );
}

// END ident?

// BEGIN identical?
dc.bool identical$QMARK_(dc.dynamic x$1, dc.dynamic y$1, ){
return dc.identical(x$1, y$1, );
}

// END identical?

// BEGIN identity
dc.dynamic identity(dc.dynamic x$1, ){
return x$1;
}

// END identity

// BEGIN if-let
lcoc_core.IFn$iface if_let=lcoc_core.if_letifn18695hm$1(null, );

// END if-let

// BEGIN if-not
lcoc_core.IFn$iface if_not=lcoc_core.if_notifn18695hm$1(null, );

// END if-not

// BEGIN if-some
lcoc_core.IFn$iface if_some=lcoc_core.if_someifn18695hm$1(null, );

// END if-some

// BEGIN if_letifn18695hm$1
class if_letifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuuXZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

if_letifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.if_letifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic then$1, dc.dynamic $else_$1, dc.dynamic oldform$1, ){
late final dc.dynamic form$1;
if((bindings$1 is dc.Function)){
form$1=(bindings$1 as dc.Function)(0, );
}else if((bindings$1 is lcoc_core.IFn$iface)){
form$1=((bindings$1 as lcoc_core.IFn$iface).$_invoke$1(0, ));
}else{
form$1=(lcoc_core.IFn.extensions(bindings$1, ).$_invoke$1(bindings$1, 0, ));
}
late final dc.dynamic tst$1;
if((bindings$1 is dc.Function)){
tst$1=(bindings$1 as dc.Function)(1, );
}else if((bindings$1 is lcoc_core.IFn$iface)){
tst$1=((bindings$1 as lcoc_core.IFn$iface).$_invoke$1(1, ));
}else{
tst$1=(lcoc_core.IFn.extensions(bindings$1, ).$_invoke$1(bindings$1, 1, ));
}
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8696__auto__", )), )), (lcoc_core.list.$_invoke$1(tst$1, )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8696__auto__", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(form$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8696__auto__", )), )), ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$3(arg$1, $3, (lcoc_core.list.$_invoke$1(then$1, )), ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$4(arg$3, arg$2, $4, (lcoc_core.list.$_invoke$1($else_$1, )), ));
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$3(arg$4, $6, $5, ));
if((o7668$5 is lcoc_core.ISeqable$iface)){
return ((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}

dc.dynamic $_invoke$4(dc.dynamic $AMPERSAND_form$2, dc.dynamic $AMPERSAND_env$2, dc.dynamic bindings$2, dc.dynamic then$2, ){
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "if-let", )), )), (lcoc_core.list.$_invoke$1(bindings$2, )), (lcoc_core.list.$_invoke$1(then$2, )), (lcoc_core.list.$_invoke$1(null, )), ));
if((o7668$6 is lcoc_core.ISeqable$iface)){
return ((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END if_letifn18695hm$1

// BEGIN if_notifn18695hm$1
class if_notifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

if_notifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.if_notifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$4(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic test$1, dc.dynamic then$1, ){
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "if-not", )), )), (lcoc_core.list.$_invoke$1(test$1, )), (lcoc_core.list.$_invoke$1(then$1, )), (lcoc_core.list.$_invoke$1(null, )), ));
if((o7668$2 is lcoc_core.ISeqable$iface)){
return ((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}

dc.dynamic $_invoke$5(dc.dynamic $AMPERSAND_form$2, dc.dynamic $AMPERSAND_env$2, dc.dynamic test$2, dc.dynamic then$2, dc.dynamic $else_$1, ){
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), )), (lcoc_core.list.$_invoke$1(test$2, )), (lcoc_core.list.$_invoke$1($else_$1, )), (lcoc_core.list.$_invoke$1(then$2, )), ));
if((o7668$3 is lcoc_core.ISeqable$iface)){
return ((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END if_notifn18695hm$1

// BEGIN if_someifn18695hm$1
class if_someifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuuXZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

if_someifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.if_someifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic then$1, dc.dynamic $else_$1, dc.dynamic oldform$1, ){
late final dc.dynamic form$1;
if((bindings$1 is dc.Function)){
form$1=(bindings$1 as dc.Function)(0, );
}else if((bindings$1 is lcoc_core.IFn$iface)){
form$1=((bindings$1 as lcoc_core.IFn$iface).$_invoke$1(0, ));
}else{
form$1=(lcoc_core.IFn.extensions(bindings$1, ).$_invoke$1(bindings$1, 0, ));
}
late final dc.dynamic tst$1;
if((bindings$1 is dc.Function)){
tst$1=(bindings$1 as dc.Function)(1, );
}else if((bindings$1 is lcoc_core.IFn$iface)){
tst$1=((bindings$1 as lcoc_core.IFn$iface).$_invoke$1(1, ));
}else{
tst$1=(lcoc_core.IFn.extensions(bindings$1, ).$_invoke$1(bindings$1, 1, ));
}
final dc.dynamic temp$1=(lcoc_core.symbol.$_invoke$2(null, "some__8692__auto__", ));
final dc.dynamic arg$5=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$9=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(temp$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.vary_meta.$_invoke$3(tst$1, lcoc_core.dissoc, lcoc_core.Keyword(null, "tag", 2780644040, ), )), )), ));
late final dc.dynamic $if_$8;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$8, ));
final dc.dynamic $10=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7668$10=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "nil?", )), )), (lcoc_core.list.$_invoke$1(temp$1, )), ));
late final dc.dynamic $if_$9;
if((o7668$10 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
final dc.dynamic $8=(lcoc_core.list.$_invoke$1($if_$9, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1($else_$1, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(form$1, ));
final dc.dynamic o7872$1=tst$1;
late final dc.dynamic $if_$10;
if((o7872$1 is lcoc_core.IMeta$iface)){
$if_$10=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$10=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
final dc.dynamic $2=(lcoc_core.Keyword(null, "tag", 2780644040, ).$_invoke$1($if_$10, ));
final dc.dynamic $3=(lcoc_core.vary_meta.$_invoke$4(temp$1, lcoc_core.assoc, lcoc_core.Keyword(null, "tag", 2780644040, ), $2, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($3, ));
final dc.dynamic o7668$11=(lcoc_core.concat.$_invoke$2(arg$1, $4, ));
late final dc.dynamic $if_$11;
if((o7668$11 is lcoc_core.ISeqable$iface)){
$if_$11=((o7668$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7668$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$11, ));
}
final dc.dynamic $5=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$11, ));
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($5, ));
final dc.dynamic o7668$12=(lcoc_core.concat.$_invoke$3(arg$2, $6, (lcoc_core.list.$_invoke$1(then$1, )), ));
late final dc.dynamic $if_$12;
if((o7668$12 is lcoc_core.ISeqable$iface)){
$if_$12=((o7668$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$12=((lcoc_core.ISeqable.extensions(o7668$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$12, ));
}
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($if_$12, ));
final dc.dynamic o7668$13=(lcoc_core.concat.$_invoke$4(arg$4, $8, arg$3, $7, ));
late final dc.dynamic $if_$13;
if((o7668$13 is lcoc_core.ISeqable$iface)){
$if_$13=((o7668$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$13=((lcoc_core.ISeqable.extensions(o7668$13, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$13, ));
}
final dc.dynamic $9=(lcoc_core.list.$_invoke$1($if_$13, ));
final dc.dynamic o7668$14=(lcoc_core.concat.$_invoke$3(arg$5, $10, $9, ));
if((o7668$14 is lcoc_core.ISeqable$iface)){
return ((o7668$14 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$14, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$14, ));
}

dc.dynamic $_invoke$4(dc.dynamic $AMPERSAND_form$2, dc.dynamic $AMPERSAND_env$2, dc.dynamic bindings$2, dc.dynamic then$2, ){
final dc.dynamic o7668$15=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "if-some", )), )), (lcoc_core.list.$_invoke$1(bindings$2, )), (lcoc_core.list.$_invoke$1(then$2, )), (lcoc_core.list.$_invoke$1(null, )), ));
if((o7668$15 is lcoc_core.ISeqable$iface)){
return ((o7668$15 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$15, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$15, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END if_someifn18695hm$1

// BEGIN ifn?
dc.bool ifn$QMARK_(dc.dynamic f$1, ){
final dc.bool or$7573_$AUTO_$1=lcoc_core.fn$QMARK_(f$1, );
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
return ((lcoc_core.IFn.satisfies(f$1, )) as dc.bool);
}

// END ifn?

// BEGIN inc
dc.num inc(dc.dynamic x$1, ){
return (1+(x$1 as dc.num));
}

// END inc

// BEGIN indexed?
dc.bool indexed$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.IIndexed.satisfies(x$1, )) as dc.bool);
}

// END indexed?

// BEGIN int
dc.int int(dc.dynamic x$1, ){
if((x$1 is dc.String)){
return ((x$1 as dc.String).codeUnitAt(0, ));
}
return ((x$1 as dc.num).toInt());
}

// END int

// BEGIN int-array
lcoc_core.IFn$iface int_array=lcoc_core.int_arrayifn18695hm$1(null, );

// END int-array

// BEGIN int?
dc.bool int$QMARK_(dc.dynamic x$1, ){
return (x$1 is dc.int);
}

// END int?

// BEGIN int_arrayifn18695hm$1
class int_arrayifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

int_arrayifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.int_arrayifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic size_or_seq$1, ){
if((size_or_seq$1 is dc.int)){
return (dc.List<dc.int>.filled((size_or_seq$1 as dc.int), 0, ));
}
return (dc.List<dc.int>.from((size_or_seq$1 as dc.Iterable<dc.dynamic>), growable: false, ));
}

dc.dynamic $_invoke$2(dc.dynamic size$1, dc.dynamic init_val_or_seq$1, ){
if(((lcoc_core.ISeq.satisfies(init_val_or_seq$1, )) as dc.bool)){
final dc.List<dc.int> a$8174_$AUTO_$1=(dc.List<dc.int>.filled((size$1 as dc.int), 0, ));
dc.dynamic i$8175_$AUTO_$1=0;
final dc.dynamic o7668$1=init_val_or_seq$1;
dc.dynamic s$8176_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
s$8176_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$8176_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
do {
final dc.dynamic and$7533_$AUTO_$1=s$8176_$AUTO_$1;
late final dc.dynamic $if_$1;
if(((and$7533_$AUTO_$1!=false)&&(and$7533_$AUTO_$1!=null))){
$if_$1=((i$8175_$AUTO_$1 as dc.num)<(size$1 as dc.num));
}else{
$if_$1=and$7533_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
final dc.dynamic v$8151_$AUTO_$1=lcoc_core.first(s$8176_$AUTO_$1, );
a$8174_$AUTO_$1[(i$8175_$AUTO_$1 as dc.int)]=(v$8151_$AUTO_$1 as dc.int);
i$8175_$AUTO_$1=(1+(i$8175_$AUTO_$1 as dc.num));
s$8176_$AUTO_$1=lcoc_core.next(s$8176_$AUTO_$1, );
continue;
}
return a$8174_$AUTO_$1;
} while(true);
}
return (dc.List<dc.int>.filled((size$1 as dc.int), (init_val_or_seq$1 as dc.int), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END int_arrayifn18695hm$1

// BEGIN interleave
lcoc_core.IFn$iface interleave=lcoc_core.interleaveifn18695hm$1(null, );

// END interleave

// BEGIN interleaveifn18695hm$1
class interleaveifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

interleaveifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.interleaveifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic c1$1, dc.dynamic c2$1, dc.dynamic colls$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic ss$1=(lcoc_core.map.$_invoke$2(lcoc_core.seq, (lcoc_core.list$STAR_.$_invoke$3(c1$1, c2$1, colls$1, )), ));
if(lcoc_core.every$QMARK_(lcoc_core.identity, ss$1, )){
return (lcoc_core.concat.$_invoke$2((lcoc_core.map.$_invoke$2(lcoc_core.first, ss$1, )), (lcoc_core.apply.$_invoke$2(lcoc_core.interleave, (lcoc_core.map.$_invoke$2(lcoc_core.rest, ss$1, )), )), ));
}
return null;
} as dc.dynamic?), null, -1, );
}

dc.dynamic $_invoke$0(){
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_invoke$1(dc.dynamic c1$2, ){
return lcoc_core.LazySeq(null, ((){
return c1$2;
} as dc.dynamic?), null, -1, );
}

dc.dynamic $_invoke$2(dc.dynamic c1$3, dc.dynamic c2$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$1=c1$3;
late final dc.dynamic s1$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
s1$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s1$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic o7668$2=c2$2;
late final dc.dynamic s2$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
s2$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s2$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic and$7533_$AUTO_$1=s1$1;
late final dc.dynamic $if_$1;
if(((and$7533_$AUTO_$1!=false)&&(and$7533_$AUTO_$1!=null))){
$if_$1=s2$1;
}else{
$if_$1=and$7533_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
return lcoc_core.cons(lcoc_core.first(s1$1, ), lcoc_core.cons(lcoc_core.first(s2$1, ), (lcoc_core.interleave.$_invoke$2(lcoc_core.rest(s1$1, ), lcoc_core.rest(s2$1, ), )), ), );
}
return null;
} as dc.dynamic?), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END interleaveifn18695hm$1

// BEGIN interpose
lcoc_core.IFn$iface interpose=lcoc_core.interposeifn18695hm$1(null, );

// END interpose

// BEGIN interposeReify18695hm$1
class interposeReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final lcoc_core.Volatile started$1;
final sep$1;

interposeReify18695hm$1(this.meta$1, this.rf$1, this.started$1, this.sep$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.interposeReify18695hm$1(m$2395_$AUTO_$1, rf$1, started$1, sep$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final dc.dynamic test$1=lcoc_core.deref(started$1, );
if(((test$1!=false)&&(test$1!=null))){
late final dc.dynamic sepr$1;
if((rf$1 is dc.Function)){
sepr$1=(rf$1 as dc.Function)(result$2, sep$1, );
}else if((rf$1 is lcoc_core.IFn$iface)){
sepr$1=((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, sep$1, ));
}else{
sepr$1=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, sep$1, ));
}
if(lcoc_core.reduced$QMARK_(sepr$1, )){
return sepr$1;
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(sepr$1, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(sepr$1, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, sepr$1, input$1, ));
}
lcoc_core.vreset$BANG_(started$1, true, );
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END interposeReify18695hm$1

// BEGIN interposeifn18695hm$1
class interposeifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

interposeifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.interposeifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$1(dc.dynamic sep$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile started$1=lcoc_core.volatile$BANG_(false, );
final lcoc_core.interposeReify18695hm$1 f$1=lcoc_core.interposeReify18695hm$1(null, rf$1, started$1, sep$1, );
return f$1;
};
}

dc.dynamic $_invoke$2(dc.dynamic sep$2, dc.dynamic coll$1, ){
return (lcoc_core.drop.$_invoke$2(1, (lcoc_core.interleave.$_invoke$2((lcoc_core.repeat.$_invoke$1(sep$2, )), coll$1, )), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END interposeifn18695hm$1

// BEGIN into
lcoc_core.IFn$iface into=lcoc_core.intoifn18695hm$1(null, );

// END into

// BEGIN intoifn18695hm$1
class intoifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

intoifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.intoifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$0(){
return lcoc_core.$_EMPTY_VECTOR;
}

dc.dynamic $_invoke$1(dc.dynamic to$1, ){
return to$1;
}

dc.dynamic $_invoke$2(dc.dynamic to$2, dc.dynamic from$1, ){
if(((lcoc_core.IEditableCollection.satisfies(to$2, )) as dc.bool)){
final dc.dynamic coll7722$1=from$1;
final lcoc_core.IFn$iface f7723$1=lcoc_core.conj$BANG_;
final dc.dynamic start7724$1=lcoc_core.transient(to$2, );
late final dc.dynamic $if_$1;
if((coll7722$1 is lcoc_core.IReduce$iface)){
$if_$1=((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}else{
$if_$1=((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}
final dc.dynamic $1=lcoc_core.persistent$BANG_($if_$1, );
final dc.dynamic o7872$1=to$2;
late final dc.dynamic $if_$2;
if((o7872$1 is lcoc_core.IMeta$iface)){
$if_$2=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$2=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
return lcoc_core.with_meta($1, $if_$2, );
}
final dc.dynamic coll7722$2=from$1;
final lcoc_core.IFn$iface f7723$2=lcoc_core.conj;
final dc.dynamic start7724$2=to$2;
if((coll7722$2 is lcoc_core.IReduce$iface)){
return ((coll7722$2 as lcoc_core.IReduce$iface).$_reduce$2(f7723$2, start7724$2, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$2, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$2, f7723$2, start7724$2, ));
}

dc.dynamic $_invoke$3(dc.dynamic to$3, dc.dynamic xform$1, dc.dynamic from$2, ){
if(((lcoc_core.IEditableCollection.satisfies(to$3, )) as dc.bool)){
final dc.dynamic arg$1=lcoc_core.persistent$BANG_((lcoc_core.transduce.$_invoke$4(xform$1, lcoc_core.conj$BANG_, lcoc_core.transient(to$3, ), from$2, )), );
final dc.dynamic o7872$2=to$3;
late final dc.dynamic $if_$3;
if((o7872$2 is lcoc_core.IMeta$iface)){
$if_$3=((o7872$2 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$3=((lcoc_core.IMeta.extensions(o7872$2, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$2, ));
}
return lcoc_core.with_meta(arg$1, $if_$3, );
}
return (lcoc_core.transduce.$_invoke$4(xform$1, lcoc_core.conj, to$3, from$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END intoifn18695hm$1

// BEGIN ints
dc.List<dc.int> ints(dc.dynamic xs$1, ){
return ((xs$1 as dc.List).cast<dc.int>());
}

// END ints

// BEGIN iterate
dc.dynamic iterate(dc.dynamic f$1, dc.dynamic x$1, ){
return lcoc_core.cons(x$1, lcoc_core.LazySeq(null, ((){
late final dc.dynamic $if_$1;
if((f$1 is dc.Function)){
$if_$1=(f$1 as dc.Function)(x$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$1=((f$1 as lcoc_core.IFn$iface).$_invoke$1(x$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$1(f$1, x$1, ));
}
return lcoc_core.iterate(f$1, $if_$1, );
} as dc.dynamic?), null, -1, ), );
}

// END iterate

// BEGIN iterator
lcoc_core.IFn$iface iterator=lcoc_core.iteratorifn18695hm$1(null, );

// END iterator

// BEGIN iterator-seq
dc.dynamic? iterator_seq(dc.dynamic iter$1, ){
if(((iter$1 as dc.Iterator).moveNext())){
return lcoc_core.IteratorSeq(null, (iter$1 as dc.Iterator).current, (iter$1 as dc.Iterator), null, -1, );
}
return null;
}

// END iterator-seq

// BEGIN iteratorifn18695hm$1
class iteratorifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

iteratorifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.iteratorifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic xform$1, dc.dynamic it1$1, dc.dynamic it2$1, dc.dynamic it3$1, dc.dynamic its$1, ){
final dc.dynamic its$2=(lcoc_core.map.$_invoke$2(lcoc_core.iterator, (lcoc_core.list$STAR_.$_invoke$4(it1$1, it2$1, it3$1, its$1, )), ));
return lcoc_core.xform_iterator(xform$1, (dc.dynamic rf$1, ){
return (){
if(lcoc_core.every$QMARK_((dc.dynamic p1$9215_$SHARP_$1, ){
return ((p1$9215_$SHARP_$1 as dc.Iterator).moveNext());
}, its$2, )){
final dc.dynamic acc$1=(lcoc_core.apply.$_invoke$3(rf$1, true, (lcoc_core.map.$_invoke$2((dc.dynamic p1$9216_$SHARP_$1, ){
return (p1$9216_$SHARP_$1 as dc.Iterator).current;
}, its$2, )), ));
late final dc.bool or$7573_$AUTO_$1;
if(lcoc_core.reduced$QMARK_(acc$1, )){
or$7573_$AUTO_$1=false;
}else{
or$7573_$AUTO_$1=true;
}
if(or$7573_$AUTO_$1){
return or$7573_$AUTO_$1;
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(true, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(true, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, true, ));
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(true, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(true, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, true, ));
};
}, );
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
if((coll$1 is dc.Iterable)){
return (coll$1 as dc.Iterable).iterator;
}
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic or$7573_$AUTO_$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
or$7573_$AUTO_$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
or$7573_$AUTO_$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
late final dc.Iterable cast$1;
if(((or$7573_$AUTO_$2!=false)&&(or$7573_$AUTO_$2!=null))){
cast$1=(or$7573_$AUTO_$2 as dc.Iterable);
}else{
cast$1=(lcoc_core.$_EMPTY_LIST as dc.Iterable);
}
return cast$1.iterator;
}

dc.dynamic $_invoke$2(dc.dynamic xform$2, dc.dynamic coll$2, ){
final dc.Iterator it$1=(lcoc_core.iterator.$_invoke$1(coll$2, ));
return lcoc_core.xform_iterator(xform$2, (dc.dynamic rf$2, ){
return (){
if((it$1.moveNext())){
final dc.dynamic arg$1=it$1.current;
late final dc.dynamic acc$2;
if((rf$2 is dc.Function)){
acc$2=(rf$2 as dc.Function)(true, arg$1, );
}else if((rf$2 is lcoc_core.IFn$iface)){
acc$2=((rf$2 as lcoc_core.IFn$iface).$_invoke$2(true, arg$1, ));
}else{
acc$2=(lcoc_core.IFn.extensions(rf$2, ).$_invoke$2(rf$2, true, arg$1, ));
}
late final dc.bool or$7573_$AUTO_$3;
if(lcoc_core.reduced$QMARK_(acc$2, )){
or$7573_$AUTO_$3=false;
}else{
or$7573_$AUTO_$3=true;
}
if(or$7573_$AUTO_$3){
return or$7573_$AUTO_$3;
}
if((rf$2 is dc.Function)){
return (rf$2 as dc.Function)(true, );
}
if((rf$2 is lcoc_core.IFn$iface)){
return ((rf$2 as lcoc_core.IFn$iface).$_invoke$1(true, ));
}
return (lcoc_core.IFn.extensions(rf$2, ).$_invoke$1(rf$2, true, ));
}
if((rf$2 is dc.Function)){
return (rf$2 as dc.Function)(true, );
}
if((rf$2 is lcoc_core.IFn$iface)){
return ((rf$2 as lcoc_core.IFn$iface).$_invoke$1(true, ));
}
return (lcoc_core.IFn.extensions(rf$2, ).$_invoke$1(rf$2, true, ));
};
}, );
}

dc.dynamic $_invoke$3(dc.dynamic xform$3, dc.dynamic c1$1, dc.dynamic c2$1, ){
final dc.Iterator it1$2=(lcoc_core.iterator.$_invoke$1(c1$1, ));
final dc.Iterator it2$2=(lcoc_core.iterator.$_invoke$1(c2$1, ));
return lcoc_core.xform_iterator(xform$3, (dc.dynamic rf$3, ){
return (){
final dc.bool and$7533_$AUTO_$1=(it1$2.moveNext());
late final dc.bool $if_$1;
if(and$7533_$AUTO_$1){
$if_$1=(it2$2.moveNext());
}else{
$if_$1=and$7533_$AUTO_$1;
}
if($if_$1){
final dc.dynamic arg$3=it1$2.current;
final dc.dynamic arg$2=it2$2.current;
late final dc.dynamic acc$3;
if((rf$3 is dc.Function)){
acc$3=(rf$3 as dc.Function)(true, arg$3, arg$2, );
}else if((rf$3 is lcoc_core.IFn$iface)){
acc$3=((rf$3 as lcoc_core.IFn$iface).$_invoke$3(true, arg$3, arg$2, ));
}else{
acc$3=(lcoc_core.IFn.extensions(rf$3, ).$_invoke$3(rf$3, true, arg$3, arg$2, ));
}
late final dc.bool or$7573_$AUTO_$4;
if(lcoc_core.reduced$QMARK_(acc$3, )){
or$7573_$AUTO_$4=false;
}else{
or$7573_$AUTO_$4=true;
}
if(or$7573_$AUTO_$4){
return or$7573_$AUTO_$4;
}
if((rf$3 is dc.Function)){
return (rf$3 as dc.Function)(true, );
}
if((rf$3 is lcoc_core.IFn$iface)){
return ((rf$3 as lcoc_core.IFn$iface).$_invoke$1(true, ));
}
return (lcoc_core.IFn.extensions(rf$3, ).$_invoke$1(rf$3, true, ));
}
if((rf$3 is dc.Function)){
return (rf$3 as dc.Function)(true, );
}
if((rf$3 is lcoc_core.IFn$iface)){
return ((rf$3 as lcoc_core.IFn$iface).$_invoke$1(true, ));
}
return (lcoc_core.IFn.extensions(rf$3, ).$_invoke$1(rf$3, true, ));
};
}, );
}

dc.dynamic $_invoke$4(dc.dynamic xform$4, dc.dynamic c1$2, dc.dynamic c2$2, dc.dynamic c3$1, ){
final dc.Iterator it1$3=(lcoc_core.iterator.$_invoke$1(c1$2, ));
final dc.Iterator it2$3=(lcoc_core.iterator.$_invoke$1(c2$2, ));
final dc.Iterator it3$2=(lcoc_core.iterator.$_invoke$1(c3$1, ));
return lcoc_core.xform_iterator(xform$4, (dc.dynamic rf$4, ){
return (){
final dc.bool and$7533_$AUTO_$2=(it1$3.moveNext());
late final dc.bool $if_$2;
if(and$7533_$AUTO_$2){
final dc.bool and$7533_$AUTO_$3=(it2$3.moveNext());
if(and$7533_$AUTO_$3){
$if_$2=(it3$2.moveNext());
}else{
$if_$2=and$7533_$AUTO_$3;
}
}else{
$if_$2=and$7533_$AUTO_$2;
}
if($if_$2){
final dc.dynamic arg$6=it1$3.current;
final dc.dynamic arg$5=it2$3.current;
final dc.dynamic arg$4=it3$2.current;
late final dc.dynamic acc$4;
if((rf$4 is dc.Function)){
acc$4=(rf$4 as dc.Function)(true, arg$6, arg$5, arg$4, );
}else if((rf$4 is lcoc_core.IFn$iface)){
acc$4=((rf$4 as lcoc_core.IFn$iface).$_invoke$4(true, arg$6, arg$5, arg$4, ));
}else{
acc$4=(lcoc_core.IFn.extensions(rf$4, ).$_invoke$4(rf$4, true, arg$6, arg$5, arg$4, ));
}
late final dc.bool or$7573_$AUTO_$5;
if(lcoc_core.reduced$QMARK_(acc$4, )){
or$7573_$AUTO_$5=false;
}else{
or$7573_$AUTO_$5=true;
}
if(or$7573_$AUTO_$5){
return or$7573_$AUTO_$5;
}
if((rf$4 is dc.Function)){
return (rf$4 as dc.Function)(true, );
}
if((rf$4 is lcoc_core.IFn$iface)){
return ((rf$4 as lcoc_core.IFn$iface).$_invoke$1(true, ));
}
return (lcoc_core.IFn.extensions(rf$4, ).$_invoke$1(rf$4, true, ));
}
if((rf$4 is dc.Function)){
return (rf$4 as dc.Function)(true, );
}
if((rf$4 is lcoc_core.IFn$iface)){
return ((rf$4 as lcoc_core.IFn$iface).$_invoke$1(true, ));
}
return (lcoc_core.IFn.extensions(rf$4, ).$_invoke$1(rf$4, true, ));
};
}, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END iteratorifn18695hm$1

// BEGIN juxt
lcoc_core.IFn$iface juxt=lcoc_core.juxtifn18695hm$1(null, );

// END juxt

// BEGIN juxtReify18695hm$1
class juxtReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final dc.dynamic fs$2;

juxtReify18695hm$1(this.meta$1, this.fs$2, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.juxtReify18695hm$1(m$2395_$AUTO_$1, fs$2, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic z$1, dc.dynamic args$1, ){
final dc.dynamic coll7722$1=fs$2;
dc.dynamic f7723$1(dc.dynamic p1$9012_$SHARP_$1, dc.dynamic p2$9013_$SHARP_$1, ){
final dc.dynamic coll7707$1=p1$9012_$SHARP_$1;
final dc.dynamic o7708$1=(lcoc_core.apply.$_invoke$5(p2$9013_$SHARP_$1, x$1, y$1, z$1, args$1, ));
if((coll7707$1 is lcoc_core.ICollection$iface)){
return ((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}
return ((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
}
final lcoc_core.PersistentVector start7724$1=lcoc_core.$_EMPTY_VECTOR;
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_invoke$0(){
final dc.dynamic coll7722$2=fs$2;
dc.dynamic f7723$2(dc.dynamic p1$9004_$SHARP_$1, dc.dynamic p2$9005_$SHARP_$1, ){
final dc.dynamic coll7707$2=p1$9004_$SHARP_$1;
late final dc.dynamic o7708$2;
if((p2$9005_$SHARP_$1 is dc.Function)){
o7708$2=(p2$9005_$SHARP_$1 as dc.Function)();
}else if((p2$9005_$SHARP_$1 is lcoc_core.IFn$iface)){
o7708$2=((p2$9005_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$0());
}else{
o7708$2=(lcoc_core.IFn.extensions(p2$9005_$SHARP_$1, ).$_invoke$0(p2$9005_$SHARP_$1, ));
}
if((coll7707$2 is lcoc_core.ICollection$iface)){
return ((coll7707$2 as lcoc_core.ICollection$iface).$_conj$1(o7708$2, ));
}
return ((lcoc_core.ICollection.extensions(coll7707$2, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$2, o7708$2, ));
}
final lcoc_core.PersistentVector start7724$2=lcoc_core.$_EMPTY_VECTOR;
if((coll7722$2 is lcoc_core.IReduce$iface)){
return ((coll7722$2 as lcoc_core.IReduce$iface).$_reduce$2(f7723$2, start7724$2, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$2, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$2, f7723$2, start7724$2, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
final dc.dynamic coll7722$3=fs$2;
dc.dynamic f7723$3(dc.dynamic p1$9006_$SHARP_$1, dc.dynamic p2$9007_$SHARP_$1, ){
final dc.dynamic coll7707$3=p1$9006_$SHARP_$1;
late final dc.dynamic o7708$3;
if((p2$9007_$SHARP_$1 is dc.Function)){
o7708$3=(p2$9007_$SHARP_$1 as dc.Function)(x$2, );
}else if((p2$9007_$SHARP_$1 is lcoc_core.IFn$iface)){
o7708$3=((p2$9007_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(x$2, ));
}else{
o7708$3=(lcoc_core.IFn.extensions(p2$9007_$SHARP_$1, ).$_invoke$1(p2$9007_$SHARP_$1, x$2, ));
}
if((coll7707$3 is lcoc_core.ICollection$iface)){
return ((coll7707$3 as lcoc_core.ICollection$iface).$_conj$1(o7708$3, ));
}
return ((lcoc_core.ICollection.extensions(coll7707$3, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$3, o7708$3, ));
}
final lcoc_core.PersistentVector start7724$3=lcoc_core.$_EMPTY_VECTOR;
if((coll7722$3 is lcoc_core.IReduce$iface)){
return ((coll7722$3 as lcoc_core.IReduce$iface).$_reduce$2(f7723$3, start7724$3, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$3, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$3, f7723$3, start7724$3, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
final dc.dynamic coll7722$4=fs$2;
dc.dynamic f7723$4(dc.dynamic p1$9008_$SHARP_$1, dc.dynamic p2$9009_$SHARP_$1, ){
final dc.dynamic coll7707$4=p1$9008_$SHARP_$1;
late final dc.dynamic o7708$4;
if((p2$9009_$SHARP_$1 is dc.Function)){
o7708$4=(p2$9009_$SHARP_$1 as dc.Function)(x$3, y$2, );
}else if((p2$9009_$SHARP_$1 is lcoc_core.IFn$iface)){
o7708$4=((p2$9009_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$2(x$3, y$2, ));
}else{
o7708$4=(lcoc_core.IFn.extensions(p2$9009_$SHARP_$1, ).$_invoke$2(p2$9009_$SHARP_$1, x$3, y$2, ));
}
if((coll7707$4 is lcoc_core.ICollection$iface)){
return ((coll7707$4 as lcoc_core.ICollection$iface).$_conj$1(o7708$4, ));
}
return ((lcoc_core.ICollection.extensions(coll7707$4, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$4, o7708$4, ));
}
final lcoc_core.PersistentVector start7724$4=lcoc_core.$_EMPTY_VECTOR;
if((coll7722$4 is lcoc_core.IReduce$iface)){
return ((coll7722$4 as lcoc_core.IReduce$iface).$_reduce$2(f7723$4, start7724$4, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$4, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$4, f7723$4, start7724$4, ));
}

dc.dynamic $_invoke$3(dc.dynamic x$4, dc.dynamic y$3, dc.dynamic z$2, ){
final dc.dynamic coll7722$5=fs$2;
dc.dynamic f7723$5(dc.dynamic p1$9010_$SHARP_$1, dc.dynamic p2$9011_$SHARP_$1, ){
final dc.dynamic coll7707$5=p1$9010_$SHARP_$1;
late final dc.dynamic o7708$5;
if((p2$9011_$SHARP_$1 is dc.Function)){
o7708$5=(p2$9011_$SHARP_$1 as dc.Function)(x$4, y$3, z$2, );
}else if((p2$9011_$SHARP_$1 is lcoc_core.IFn$iface)){
o7708$5=((p2$9011_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$3(x$4, y$3, z$2, ));
}else{
o7708$5=(lcoc_core.IFn.extensions(p2$9011_$SHARP_$1, ).$_invoke$3(p2$9011_$SHARP_$1, x$4, y$3, z$2, ));
}
if((coll7707$5 is lcoc_core.ICollection$iface)){
return ((coll7707$5 as lcoc_core.ICollection$iface).$_conj$1(o7708$5, ));
}
return ((lcoc_core.ICollection.extensions(coll7707$5, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$5, o7708$5, ));
}
final lcoc_core.PersistentVector start7724$5=lcoc_core.$_EMPTY_VECTOR;
if((coll7722$5 is lcoc_core.IReduce$iface)){
return ((coll7722$5 as lcoc_core.IReduce$iface).$_reduce$2(f7723$5, start7724$5, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$5, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$5, f7723$5, start7724$5, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END juxtReify18695hm$1

// BEGIN juxtReify18695hm$2
class juxtReify18695hm$2 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;
final f$3;

juxtReify18695hm$2(this.meta$2, this.f$3, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.juxtReify18695hm$2(m$2395_$AUTO_$2, f$3, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$5, dc.dynamic y$4, dc.dynamic z$3, dc.dynamic args$2, ){
final dc.List<dc.dynamic> fl$9=(dc.List<dc.dynamic>.filled(1, (lcoc_core.apply.$_invoke$5(f$3, x$5, y$4, z$3, args$2, )), ));
return lcoc_core.$_vec_owning(fl$9, );
}

dc.dynamic $_invoke$0(){
late final dc.dynamic $if_$9;
if((f$3 is dc.Function)){
$if_$9=(f$3 as dc.Function)();
}else if((f$3 is lcoc_core.IFn$iface)){
$if_$9=((f$3 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$9=(lcoc_core.IFn.extensions(f$3, ).$_invoke$0(f$3, ));
}
final dc.List<dc.dynamic> fl$10=(dc.List<dc.dynamic>.filled(1, $if_$9, ));
return lcoc_core.$_vec_owning(fl$10, );
}

dc.dynamic $_invoke$1(dc.dynamic x$6, ){
late final dc.dynamic $if_$10;
if((f$3 is dc.Function)){
$if_$10=(f$3 as dc.Function)(x$6, );
}else if((f$3 is lcoc_core.IFn$iface)){
$if_$10=((f$3 as lcoc_core.IFn$iface).$_invoke$1(x$6, ));
}else{
$if_$10=(lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, x$6, ));
}
final dc.List<dc.dynamic> fl$11=(dc.List<dc.dynamic>.filled(1, $if_$10, ));
return lcoc_core.$_vec_owning(fl$11, );
}

dc.dynamic $_invoke$2(dc.dynamic x$7, dc.dynamic y$5, ){
late final dc.dynamic $if_$11;
if((f$3 is dc.Function)){
$if_$11=(f$3 as dc.Function)(x$7, y$5, );
}else if((f$3 is lcoc_core.IFn$iface)){
$if_$11=((f$3 as lcoc_core.IFn$iface).$_invoke$2(x$7, y$5, ));
}else{
$if_$11=(lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, x$7, y$5, ));
}
final dc.List<dc.dynamic> fl$12=(dc.List<dc.dynamic>.filled(1, $if_$11, ));
return lcoc_core.$_vec_owning(fl$12, );
}

dc.dynamic $_invoke$3(dc.dynamic x$8, dc.dynamic y$6, dc.dynamic z$4, ){
late final dc.dynamic $if_$12;
if((f$3 is dc.Function)){
$if_$12=(f$3 as dc.Function)(x$8, y$6, z$4, );
}else if((f$3 is lcoc_core.IFn$iface)){
$if_$12=((f$3 as lcoc_core.IFn$iface).$_invoke$3(x$8, y$6, z$4, ));
}else{
$if_$12=(lcoc_core.IFn.extensions(f$3, ).$_invoke$3(f$3, x$8, y$6, z$4, ));
}
final dc.List<dc.dynamic> fl$13=(dc.List<dc.dynamic>.filled(1, $if_$12, ));
return lcoc_core.$_vec_owning(fl$13, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END juxtReify18695hm$2

// BEGIN juxtReify18695hm$3
class juxtReify18695hm$3 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$3;
final f$5;
final g$2;

juxtReify18695hm$3(this.meta$3, this.f$5, this.g$2, ):super();

dc.dynamic $_meta$0(){
return meta$3;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$3, ){
return lcoc_core.juxtReify18695hm$3(m$2395_$AUTO_$3, f$5, g$2, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$9, dc.dynamic y$7, dc.dynamic z$5, dc.dynamic args$3, ){
final dc.List<dc.dynamic> fl$14=(dc.List<dc.dynamic>.filled(2, (lcoc_core.apply.$_invoke$5(f$5, x$9, y$7, z$5, args$3, )), ));
fl$14[1]=(lcoc_core.apply.$_invoke$5(g$2, x$9, y$7, z$5, args$3, ));
return lcoc_core.$_vec_owning(fl$14, );
}

dc.dynamic $_invoke$0(){
late final dc.dynamic $if_$13;
if((f$5 is dc.Function)){
$if_$13=(f$5 as dc.Function)();
}else if((f$5 is lcoc_core.IFn$iface)){
$if_$13=((f$5 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$13=(lcoc_core.IFn.extensions(f$5, ).$_invoke$0(f$5, ));
}
final dc.List<dc.dynamic> fl$15=(dc.List<dc.dynamic>.filled(2, $if_$13, ));
late final dc.dynamic $if_$14;
if((g$2 is dc.Function)){
$if_$14=(g$2 as dc.Function)();
}else if((g$2 is lcoc_core.IFn$iface)){
$if_$14=((g$2 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$14=(lcoc_core.IFn.extensions(g$2, ).$_invoke$0(g$2, ));
}
fl$15[1]=$if_$14;
return lcoc_core.$_vec_owning(fl$15, );
}

dc.dynamic $_invoke$1(dc.dynamic x$10, ){
late final dc.dynamic $if_$15;
if((f$5 is dc.Function)){
$if_$15=(f$5 as dc.Function)(x$10, );
}else if((f$5 is lcoc_core.IFn$iface)){
$if_$15=((f$5 as lcoc_core.IFn$iface).$_invoke$1(x$10, ));
}else{
$if_$15=(lcoc_core.IFn.extensions(f$5, ).$_invoke$1(f$5, x$10, ));
}
final dc.List<dc.dynamic> fl$16=(dc.List<dc.dynamic>.filled(2, $if_$15, ));
late final dc.dynamic $if_$16;
if((g$2 is dc.Function)){
$if_$16=(g$2 as dc.Function)(x$10, );
}else if((g$2 is lcoc_core.IFn$iface)){
$if_$16=((g$2 as lcoc_core.IFn$iface).$_invoke$1(x$10, ));
}else{
$if_$16=(lcoc_core.IFn.extensions(g$2, ).$_invoke$1(g$2, x$10, ));
}
fl$16[1]=$if_$16;
return lcoc_core.$_vec_owning(fl$16, );
}

dc.dynamic $_invoke$2(dc.dynamic x$11, dc.dynamic y$8, ){
late final dc.dynamic $if_$17;
if((f$5 is dc.Function)){
$if_$17=(f$5 as dc.Function)(x$11, y$8, );
}else if((f$5 is lcoc_core.IFn$iface)){
$if_$17=((f$5 as lcoc_core.IFn$iface).$_invoke$2(x$11, y$8, ));
}else{
$if_$17=(lcoc_core.IFn.extensions(f$5, ).$_invoke$2(f$5, x$11, y$8, ));
}
final dc.List<dc.dynamic> fl$17=(dc.List<dc.dynamic>.filled(2, $if_$17, ));
late final dc.dynamic $if_$18;
if((g$2 is dc.Function)){
$if_$18=(g$2 as dc.Function)(x$11, y$8, );
}else if((g$2 is lcoc_core.IFn$iface)){
$if_$18=((g$2 as lcoc_core.IFn$iface).$_invoke$2(x$11, y$8, ));
}else{
$if_$18=(lcoc_core.IFn.extensions(g$2, ).$_invoke$2(g$2, x$11, y$8, ));
}
fl$17[1]=$if_$18;
return lcoc_core.$_vec_owning(fl$17, );
}

dc.dynamic $_invoke$3(dc.dynamic x$12, dc.dynamic y$9, dc.dynamic z$6, ){
late final dc.dynamic $if_$19;
if((f$5 is dc.Function)){
$if_$19=(f$5 as dc.Function)(x$12, y$9, z$6, );
}else if((f$5 is lcoc_core.IFn$iface)){
$if_$19=((f$5 as lcoc_core.IFn$iface).$_invoke$3(x$12, y$9, z$6, ));
}else{
$if_$19=(lcoc_core.IFn.extensions(f$5, ).$_invoke$3(f$5, x$12, y$9, z$6, ));
}
final dc.List<dc.dynamic> fl$18=(dc.List<dc.dynamic>.filled(2, $if_$19, ));
late final dc.dynamic $if_$20;
if((g$2 is dc.Function)){
$if_$20=(g$2 as dc.Function)(x$12, y$9, z$6, );
}else if((g$2 is lcoc_core.IFn$iface)){
$if_$20=((g$2 as lcoc_core.IFn$iface).$_invoke$3(x$12, y$9, z$6, ));
}else{
$if_$20=(lcoc_core.IFn.extensions(g$2, ).$_invoke$3(g$2, x$12, y$9, z$6, ));
}
fl$18[1]=$if_$20;
return lcoc_core.$_vec_owning(fl$18, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END juxtReify18695hm$3

// BEGIN juxtReify18695hm$4
class juxtReify18695hm$4 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$4;
final h$2;
final g$3;
final f$7;

juxtReify18695hm$4(this.meta$4, this.h$2, this.g$3, this.f$7, ):super();

dc.dynamic $_meta$0(){
return meta$4;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$4, ){
return lcoc_core.juxtReify18695hm$4(m$2395_$AUTO_$4, h$2, g$3, f$7, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$13, dc.dynamic y$10, dc.dynamic z$7, dc.dynamic args$4, ){
final dc.List<dc.dynamic> fl$19=(dc.List<dc.dynamic>.filled(3, (lcoc_core.apply.$_invoke$5(f$7, x$13, y$10, z$7, args$4, )), ));
fl$19[1]=(lcoc_core.apply.$_invoke$5(g$3, x$13, y$10, z$7, args$4, ));
fl$19[2]=(lcoc_core.apply.$_invoke$5(h$2, x$13, y$10, z$7, args$4, ));
return lcoc_core.$_vec_owning(fl$19, );
}

dc.dynamic $_invoke$0(){
late final dc.dynamic $if_$21;
if((f$7 is dc.Function)){
$if_$21=(f$7 as dc.Function)();
}else if((f$7 is lcoc_core.IFn$iface)){
$if_$21=((f$7 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$21=(lcoc_core.IFn.extensions(f$7, ).$_invoke$0(f$7, ));
}
final dc.List<dc.dynamic> fl$20=(dc.List<dc.dynamic>.filled(3, $if_$21, ));
late final dc.dynamic $if_$22;
if((g$3 is dc.Function)){
$if_$22=(g$3 as dc.Function)();
}else if((g$3 is lcoc_core.IFn$iface)){
$if_$22=((g$3 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$22=(lcoc_core.IFn.extensions(g$3, ).$_invoke$0(g$3, ));
}
fl$20[1]=$if_$22;
late final dc.dynamic $if_$23;
if((h$2 is dc.Function)){
$if_$23=(h$2 as dc.Function)();
}else if((h$2 is lcoc_core.IFn$iface)){
$if_$23=((h$2 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$23=(lcoc_core.IFn.extensions(h$2, ).$_invoke$0(h$2, ));
}
fl$20[2]=$if_$23;
return lcoc_core.$_vec_owning(fl$20, );
}

dc.dynamic $_invoke$1(dc.dynamic x$14, ){
late final dc.dynamic $if_$24;
if((f$7 is dc.Function)){
$if_$24=(f$7 as dc.Function)(x$14, );
}else if((f$7 is lcoc_core.IFn$iface)){
$if_$24=((f$7 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}else{
$if_$24=(lcoc_core.IFn.extensions(f$7, ).$_invoke$1(f$7, x$14, ));
}
final dc.List<dc.dynamic> fl$21=(dc.List<dc.dynamic>.filled(3, $if_$24, ));
late final dc.dynamic $if_$25;
if((g$3 is dc.Function)){
$if_$25=(g$3 as dc.Function)(x$14, );
}else if((g$3 is lcoc_core.IFn$iface)){
$if_$25=((g$3 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}else{
$if_$25=(lcoc_core.IFn.extensions(g$3, ).$_invoke$1(g$3, x$14, ));
}
fl$21[1]=$if_$25;
late final dc.dynamic $if_$26;
if((h$2 is dc.Function)){
$if_$26=(h$2 as dc.Function)(x$14, );
}else if((h$2 is lcoc_core.IFn$iface)){
$if_$26=((h$2 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}else{
$if_$26=(lcoc_core.IFn.extensions(h$2, ).$_invoke$1(h$2, x$14, ));
}
fl$21[2]=$if_$26;
return lcoc_core.$_vec_owning(fl$21, );
}

dc.dynamic $_invoke$2(dc.dynamic x$15, dc.dynamic y$11, ){
late final dc.dynamic $if_$27;
if((f$7 is dc.Function)){
$if_$27=(f$7 as dc.Function)(x$15, y$11, );
}else if((f$7 is lcoc_core.IFn$iface)){
$if_$27=((f$7 as lcoc_core.IFn$iface).$_invoke$2(x$15, y$11, ));
}else{
$if_$27=(lcoc_core.IFn.extensions(f$7, ).$_invoke$2(f$7, x$15, y$11, ));
}
final dc.List<dc.dynamic> fl$22=(dc.List<dc.dynamic>.filled(3, $if_$27, ));
late final dc.dynamic $if_$28;
if((g$3 is dc.Function)){
$if_$28=(g$3 as dc.Function)(x$15, y$11, );
}else if((g$3 is lcoc_core.IFn$iface)){
$if_$28=((g$3 as lcoc_core.IFn$iface).$_invoke$2(x$15, y$11, ));
}else{
$if_$28=(lcoc_core.IFn.extensions(g$3, ).$_invoke$2(g$3, x$15, y$11, ));
}
fl$22[1]=$if_$28;
late final dc.dynamic $if_$29;
if((h$2 is dc.Function)){
$if_$29=(h$2 as dc.Function)(x$15, y$11, );
}else if((h$2 is lcoc_core.IFn$iface)){
$if_$29=((h$2 as lcoc_core.IFn$iface).$_invoke$2(x$15, y$11, ));
}else{
$if_$29=(lcoc_core.IFn.extensions(h$2, ).$_invoke$2(h$2, x$15, y$11, ));
}
fl$22[2]=$if_$29;
return lcoc_core.$_vec_owning(fl$22, );
}

dc.dynamic $_invoke$3(dc.dynamic x$16, dc.dynamic y$12, dc.dynamic z$8, ){
late final dc.dynamic $if_$30;
if((f$7 is dc.Function)){
$if_$30=(f$7 as dc.Function)(x$16, y$12, z$8, );
}else if((f$7 is lcoc_core.IFn$iface)){
$if_$30=((f$7 as lcoc_core.IFn$iface).$_invoke$3(x$16, y$12, z$8, ));
}else{
$if_$30=(lcoc_core.IFn.extensions(f$7, ).$_invoke$3(f$7, x$16, y$12, z$8, ));
}
final dc.List<dc.dynamic> fl$23=(dc.List<dc.dynamic>.filled(3, $if_$30, ));
late final dc.dynamic $if_$31;
if((g$3 is dc.Function)){
$if_$31=(g$3 as dc.Function)(x$16, y$12, z$8, );
}else if((g$3 is lcoc_core.IFn$iface)){
$if_$31=((g$3 as lcoc_core.IFn$iface).$_invoke$3(x$16, y$12, z$8, ));
}else{
$if_$31=(lcoc_core.IFn.extensions(g$3, ).$_invoke$3(g$3, x$16, y$12, z$8, ));
}
fl$23[1]=$if_$31;
late final dc.dynamic $if_$32;
if((h$2 is dc.Function)){
$if_$32=(h$2 as dc.Function)(x$16, y$12, z$8, );
}else if((h$2 is lcoc_core.IFn$iface)){
$if_$32=((h$2 as lcoc_core.IFn$iface).$_invoke$3(x$16, y$12, z$8, ));
}else{
$if_$32=(lcoc_core.IFn.extensions(h$2, ).$_invoke$3(h$2, x$16, y$12, z$8, ));
}
fl$23[2]=$if_$32;
return lcoc_core.$_vec_owning(fl$23, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END juxtReify18695hm$4

// BEGIN juxtifn18695hm$1
class juxtifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$5;

juxtifn18695hm$1(this.meta$5, ):super();

dc.dynamic $_meta$0(){
return meta$5;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$5, ){
return lcoc_core.juxtifn18695hm$1(m$2395_$AUTO_$5, );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic g$1, dc.dynamic h$1, dc.dynamic fs$1, ){
final dc.dynamic fs$2=(lcoc_core.list$STAR_.$_invoke$4(f$1, g$1, h$1, fs$1, ));
final lcoc_core.juxtReify18695hm$1 f$2=lcoc_core.juxtReify18695hm$1(null, fs$2, );
return f$2;
}

dc.dynamic $_invoke$1(dc.dynamic f$3, ){
final lcoc_core.juxtReify18695hm$2 f$4=lcoc_core.juxtReify18695hm$2(null, f$3, );
return f$4;
}

dc.dynamic $_invoke$2(dc.dynamic f$5, dc.dynamic g$2, ){
final lcoc_core.juxtReify18695hm$3 f$6=lcoc_core.juxtReify18695hm$3(null, f$5, g$2, );
return f$6;
}

dc.dynamic $_invoke$3(dc.dynamic f$7, dc.dynamic g$3, dc.dynamic h$2, ){
final lcoc_core.juxtReify18695hm$4 f$8=lcoc_core.juxtReify18695hm$4(null, h$2, g$3, f$7, );
return f$8;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END juxtifn18695hm$1

// BEGIN keep
lcoc_core.IFn$iface keep=lcoc_core.keepifn18695hm$1(null, );

// END keep

// BEGIN keep-indexed
lcoc_core.IFn$iface keep_indexed=lcoc_core.keep_indexedifn18695hm$1(null, );

// END keep-indexed

// BEGIN keepReify18695hm$1
class keepReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final f$1;

keepReify18695hm$1(this.meta$1, this.rf$1, this.f$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.keepReify18695hm$1(m$2395_$AUTO_$1, rf$1, f$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
late final dc.dynamic v$1;
if((f$1 is dc.Function)){
v$1=(f$1 as dc.Function)(input$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
v$1=((f$1 as lcoc_core.IFn$iface).$_invoke$1(input$1, ));
}else{
v$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$1(f$1, input$1, ));
}
if((null==v$1)){
return result$2;
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, v$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, v$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, v$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END keepReify18695hm$1

// BEGIN keep_indexedReify18695hm$1
class keep_indexedReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final lcoc_core.Volatile iv$1;
final rf$1;
final f$1;

keep_indexedReify18695hm$1(this.meta$1, this.iv$1, this.rf$1, this.f$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.keep_indexedReify18695hm$1(m$2395_$AUTO_$1, iv$1, rf$1, f$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final lcoc_core.Volatile o8024$1=iv$1;
final lcoc_core.Volatile o7717$1=iv$1;
late final dc.num cast$1;
if((o7717$1 is lcoc_core.IDeref$iface)){
cast$1=(((o7717$1 as lcoc_core.IDeref$iface).$_deref$0()) as dc.num);
}else{
cast$1=(((lcoc_core.IDeref.extensions(o7717$1, ) as lcoc_core.IDeref$ext).$_deref$0(o7717$1, )) as dc.num);
}
final dc.num new_value8025$1=(1+cast$1);
late final dc.dynamic i$1;
if((o8024$1 is lcoc_core.IVolatile$iface)){
i$1=((o8024$1 as lcoc_core.IVolatile$iface).$_vreset$BANG_$1(new_value8025$1, ));
}else{
i$1=((lcoc_core.IVolatile.extensions(o8024$1, ) as lcoc_core.IVolatile$ext).$_vreset$BANG_$1(o8024$1, new_value8025$1, ));
}
late final dc.dynamic v$1;
if((f$1 is dc.Function)){
v$1=(f$1 as dc.Function)(i$1, input$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
v$1=((f$1 as lcoc_core.IFn$iface).$_invoke$2(i$1, input$1, ));
}else{
v$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, i$1, input$1, ));
}
if((null==v$1)){
return result$2;
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, v$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, v$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, v$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END keep_indexedReify18695hm$1

// BEGIN keep_indexedifn18695hm$1
class keep_indexedifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

keep_indexedifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.keep_indexedifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$1(dc.dynamic f$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile iv$1=lcoc_core.volatile$BANG_(-1, );
final lcoc_core.keep_indexedReify18695hm$1 f$2=lcoc_core.keep_indexedReify18695hm$1(null, iv$1, rf$1, f$1, );
return f$2;
};
}

dc.dynamic $_invoke$2(dc.dynamic f$3, dc.dynamic coll$1, ){
late final lcoc_core.LazySeq Function(dc.dynamic, dc.dynamic, ) keepi$1;
keepi$1=(dc.dynamic idx$1, dc.dynamic coll$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$1=coll$2;
late final dc.dynamic temp$7560_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
temp$7560_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7560_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if(((temp$7560_$AUTO_$1!=false)&&(temp$7560_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7560_$AUTO_$1;
if(lcoc_core.chunked_seq$QMARK_(s$1, )){
final dc.dynamic c$1=lcoc_core.chunk_first(s$1, );
final dc.dynamic coll7742$1=c$1;
late final dc.int cast$2;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$2=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$2=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final lcoc_core.ChunkBuffer b$1=lcoc_core.chunk_buffer(cast$2, );
final dc.dynamic idx$2=lcoc_core.chunk_reduce((dc.dynamic i$2, dc.dynamic x$1, ){
late final dc.dynamic some$7546_$AUTO_$1;
if((f$3 is dc.Function)){
some$7546_$AUTO_$1=(f$3 as dc.Function)(i$2, x$1, );
}else if((f$3 is lcoc_core.IFn$iface)){
some$7546_$AUTO_$1=((f$3 as lcoc_core.IFn$iface).$_invoke$2(i$2, x$1, ));
}else{
some$7546_$AUTO_$1=(lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, i$2, x$1, ));
}
if((null==some$7546_$AUTO_$1)){
}else{
final dc.dynamic r$1=some$7546_$AUTO_$1;
lcoc_core.chunk_append(b$1, r$1, );
}
return (1+(i$2 as dc.num));
}, idx$1, c$1, );
return lcoc_core.chunk_cons(lcoc_core.chunk(b$1, ), keepi$1(idx$2, lcoc_core.chunk_rest(s$1, ), ), );
}
final dc.dynamic arg$1=lcoc_core.first(s$1, );
late final dc.dynamic x$2;
if((f$3 is dc.Function)){
x$2=(f$3 as dc.Function)(idx$1, arg$1, );
}else if((f$3 is lcoc_core.IFn$iface)){
x$2=((f$3 as lcoc_core.IFn$iface).$_invoke$2(idx$1, arg$1, ));
}else{
x$2=(lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, idx$1, arg$1, ));
}
if((null==x$2)){
return keepi$1((1+(idx$1 as dc.num)), lcoc_core.rest(s$1, ), );
}
return lcoc_core.cons(x$2, keepi$1((1+(idx$1 as dc.num)), lcoc_core.rest(s$1, ), ), );
}
return null;
} as dc.dynamic?), null, -1, );
};
return keepi$1(0, coll$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END keep_indexedifn18695hm$1

// BEGIN keepifn18695hm$1
class keepifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

keepifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.keepifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$1(dc.dynamic f$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.keepReify18695hm$1 f$2=lcoc_core.keepReify18695hm$1(null, rf$1, f$1, );
return f$2;
};
}

dc.dynamic $_invoke$2(dc.dynamic f$3, dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic temp$7560_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
temp$7560_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7560_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if(((temp$7560_$AUTO_$1!=false)&&(temp$7560_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7560_$AUTO_$1;
if(lcoc_core.chunked_seq$QMARK_(s$1, )){
final dc.dynamic c$1=lcoc_core.chunk_first(s$1, );
final dc.dynamic coll7742$1=c$1;
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final lcoc_core.ChunkBuffer $1=lcoc_core.chunk_buffer(cast$1, );
final dc.dynamic $2=lcoc_core.chunk_reduce((dc.dynamic p1$9084_$SHARP_$1, dc.dynamic p2$9083_$SHARP_$1, ){
late final dc.dynamic some$7546_$AUTO_$1;
if((f$3 is dc.Function)){
some$7546_$AUTO_$1=(f$3 as dc.Function)(p2$9083_$SHARP_$1, );
}else if((f$3 is lcoc_core.IFn$iface)){
some$7546_$AUTO_$1=((f$3 as lcoc_core.IFn$iface).$_invoke$1(p2$9083_$SHARP_$1, ));
}else{
some$7546_$AUTO_$1=(lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, p2$9083_$SHARP_$1, ));
}
if((null==some$7546_$AUTO_$1)){
return p1$9084_$SHARP_$1;
}
final dc.dynamic x$1=some$7546_$AUTO_$1;
final dc.dynamic G$9087_$1=p1$9084_$SHARP_$1;
lcoc_core.chunk_append(G$9087_$1, x$1, );
return G$9087_$1;
}, $1, c$1, );
final dc.dynamic $3=lcoc_core.chunk($2, );
return lcoc_core.chunk_cons($3, (lcoc_core.keep.$_invoke$2(f$3, lcoc_core.chunk_rest(s$1, ), )), );
}
final dc.dynamic arg$1=lcoc_core.first(s$1, );
late final dc.dynamic x$2;
if((f$3 is dc.Function)){
x$2=(f$3 as dc.Function)(arg$1, );
}else if((f$3 is lcoc_core.IFn$iface)){
x$2=((f$3 as lcoc_core.IFn$iface).$_invoke$1(arg$1, ));
}else{
x$2=(lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, arg$1, ));
}
if((null==x$2)){
return (lcoc_core.keep.$_invoke$2(f$3, lcoc_core.rest(s$1, ), ));
}
return lcoc_core.cons(x$2, (lcoc_core.keep.$_invoke$2(f$3, lcoc_core.rest(s$1, ), )), );
}
return null;
} as dc.dynamic?), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END keepifn18695hm$1

// BEGIN key
dc.dynamic key(dc.dynamic e$1, ){
return (e$1 as dc.MapEntry).key;
}

// END key

// BEGIN keys
dc.dynamic keys(dc.dynamic coll$1, ){
if((coll$1 is dc.Map)){
return (lcoc_core.chunked_iterator_seq.$_invoke$1((coll$1 as dc.Map).keys.iterator, ));
}
final dc.dynamic o7668$1=(lcoc_core.map.$_invoke$2(lcoc_core.key, coll$1, ));
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}

// END keys

// BEGIN keyword
lcoc_core.IFn$iface keyword=lcoc_core.keywordifn18695hm$1(null, );

// END keyword

// BEGIN keyword?
dc.bool keyword$QMARK_(dc.dynamic x$1, ){
return (x$1 is lcoc_core.Keyword);
}

// END keyword?

// BEGIN keywordifn18695hm$1
class keywordifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

keywordifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.keywordifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic s$1, ){
if(lcoc_core.keyword$QMARK_(s$1, )){
return s$1;
}
if(lcoc_core.symbol$QMARK_(s$1, )){
final dc.dynamic x7661$1=s$1;
late final dc.String? cast$1;
if((x7661$1 is lcoc_core.INamed$iface)){
cast$1=(((x7661$1 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
cast$1=(((lcoc_core.INamed.extensions(x7661$1, ) as lcoc_core.INamed$ext).$_namespace$0(x7661$1, )) as dc.String?);
}
return (lcoc_core.keyword.$_invoke$2(cast$1, lcoc_core.name(s$1, ), ));
}
if((lcoc_core.$EQ_.$_invoke$2("/", s$1, ))){
return (lcoc_core.keyword.$_invoke$2(null, s$1, ));
}
if((s$1 is dc.String)){
final dc.String s$2=(s$1 as dc.String);
final dc.int idx$1=(s$2.indexOf("/", ));
if((idx$1<0)){
return (lcoc_core.keyword.$_invoke$2(null, s$2, ));
}
if((0==idx$1)){
return (lcoc_core.keyword.$_invoke$2("", (s$2.substring(1, )), ));
}
return (lcoc_core.keyword.$_invoke$2((s$2.substring(0, idx$1, )), (s$2.substring((1+idx$1), )), ));
}
return null;
}

dc.dynamic $_invoke$2(dc.dynamic ns$1, dc.dynamic name$1, ){
late final dc.String? $if_$2;
if((null!=ns$1)){
$if_$2=(ns$1 as dc.String);
}else{
$if_$2=null;
}
final dc.String arg$1=(name$1 as dc.String);
late final dc.int $if_$1;
if(((ns$1!=false)&&(ns$1!=null))){
$if_$1=lcoc_core.hash_string$STAR_(ns$1, );
}else{
$if_$1=0;
}
final dc.int $1=lcoc_core.hash_combine($if_$1, lcoc_core.hash_string$STAR_(name$1, ), );
return lcoc_core.Keyword($if_$2, arg$1, $1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END keywordifn18695hm$1

// BEGIN last
dc.dynamic last(dc.dynamic s$2, ){
dc.dynamic s$1=s$2;
do {
final dc.dynamic sn$1=lcoc_core.next(s$1, );
if((null==sn$1)){
return lcoc_core.first(s$1, );
}
s$1=sn$1;
continue;
} while(true);
}

// END last

// BEGIN lazy-cat
lcoc_core.IFn$iface lazy_cat=lcoc_core.lazy_catifn18695hm$1(null, );

// END lazy-cat

// BEGIN lazy-seq
lcoc_core.IFn$iface lazy_seq=lcoc_core.lazy_seqifn18695hm$1(null, );

// END lazy-seq

// BEGIN lazy_catifn18695hm$1
class lazy_catifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

lazy_catifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.lazy_catifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic colls$1, ){
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "concat", )), )), (lcoc_core.map.$_invoke$2((dc.dynamic p1$9094_$SHARP_$1, ){
return (lcoc_core.list.$_invoke$2((lcoc_core.symbol.$_invoke$2("cljd.core", "lazy-seq", )), p1$9094_$SHARP_$1, ));
}, colls$1, )), ));
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END lazy_catifn18695hm$1

// BEGIN lazy_seqifn18695hm$1
class lazy_seqifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

lazy_seqifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.lazy_seqifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic body$1, ){
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "LazySeq", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1(null, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$3(arg$1, $2, body$1, ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$6(arg$4, arg$3, arg$2, $3, (lcoc_core.list.$_invoke$1(null, )), (lcoc_core.list.$_invoke$1(-1, )), ));
if((o7668$3 is lcoc_core.ISeqable$iface)){
return ((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END lazy_seqifn18695hm$1

// BEGIN let
lcoc_core.IFn$iface let=lcoc_core.letifn18695hm$1(null, );

// END let

// BEGIN letifn18695hm$1
class letifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

letifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.letifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic body$1, ){
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "let*", )), )), (lcoc_core.list.$_invoke$1(lcoc_core.destructure(bindings$1, ), )), body$1, ));
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END letifn18695hm$1

// BEGIN list
lcoc_core.IFn$iface list=lcoc_core.listifn18695hm$1(null, );

// END list

// BEGIN list$STAR_ifn18695hm$1
class list$STAR_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

list$STAR_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.list$STAR_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic a$1, dc.dynamic b$1, dc.dynamic c$1, dc.dynamic d$1, dc.dynamic more$1, ){
return lcoc_core.cons(a$1, lcoc_core.cons(b$1, lcoc_core.cons(c$1, lcoc_core.cons(d$1, lcoc_core.spread(more$1, ), ), ), ), );
}

dc.dynamic $_invoke$1(dc.dynamic args$1, ){
final dc.dynamic o7668$9=args$1;
if((o7668$9 is lcoc_core.ISeqable$iface)){
return ((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}

dc.dynamic $_invoke$2(dc.dynamic a$2, dc.dynamic args$2, ){
return lcoc_core.cons(a$2, args$2, );
}

dc.dynamic $_invoke$3(dc.dynamic a$3, dc.dynamic b$2, dc.dynamic args$3, ){
return lcoc_core.cons(a$3, lcoc_core.cons(b$2, args$3, ), );
}

dc.dynamic $_invoke$4(dc.dynamic a$4, dc.dynamic b$3, dc.dynamic c$2, dc.dynamic args$4, ){
return lcoc_core.cons(a$4, lcoc_core.cons(b$3, lcoc_core.cons(c$2, args$4, ), ), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END list$STAR_ifn18695hm$1

// BEGIN list*
lcoc_core.IFn$iface list$STAR_=lcoc_core.list$STAR_ifn18695hm$1(null, );

// END list*

// BEGIN list?
dc.bool list$QMARK_(dc.dynamic x$1, ){
return (x$1 is lcoc_core.PersistentList);
}

// END list?

// BEGIN listifn18695hm$1
class listifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

listifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.listifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic xs$1, ){
final dc.dynamic coll7722$1=xs$1;
dc.List f7723$1(dc.dynamic acc$1, dc.dynamic item$1, ){
(acc$1 as dc.List).add(item$1, );
return (acc$1 as dc.List);
}
final dc.List<dc.dynamic> start7724$1=<dc.dynamic>[];
late final dc.List arr$1;
if((coll7722$1 is lcoc_core.IReduce$iface)){
arr$1=(((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, )) as dc.List);
}else{
arr$1=(((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, )) as dc.List);
}
dc.int i$1=arr$1.length;
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(6, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
fl$2[1]=lcoc_core.PersistentList;
fl$2[2]=const lcoc_core.Keyword(null, "line", 878494669, );
fl$2[3]=3227;
fl$2[4]=const lcoc_core.Keyword(null, "column", 3362807310, );
fl$2[5]=36;
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$2, );
dc.dynamic r$1=(lcoc_core.with_meta(lcoc_core.$_EMPTY_LIST, $1, ) as lcoc_core.PersistentList);
do {
if((0<i$1)){
final dc.int i$1tmp=(i$1-1);
final lcoc_core.PersistentList coll7707$1=(r$1 as lcoc_core.PersistentList);
final dc.dynamic o7708$1=(arr$1[(i$1-1)]);
if((coll7707$1 is lcoc_core.ICollection$iface)){
r$1=((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}else{
r$1=((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
}
i$1=i$1tmp;
continue;
}
return r$1;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END listifn18695hm$1

// BEGIN loop
lcoc_core.IFn$iface loop=lcoc_core.loopifn18695hm$1(null, );

// END loop

// BEGIN loopifn18695hm$1
class loopifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

loopifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.loopifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic body$1, ){
final dc.dynamic db$1=lcoc_core.destructure(bindings$1, );
if((lcoc_core.$EQ_.$_invoke$2(db$1, bindings$1, ))){
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "loop*", )), )), (lcoc_core.list.$_invoke$1(bindings$1, )), body$1, ));
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic vs$1=(lcoc_core.take_nth.$_invoke$2(2, (lcoc_core.drop.$_invoke$2(1, bindings$1, )), ));
final dc.dynamic bs$1=(lcoc_core.take_nth.$_invoke$2(2, bindings$1, ));
final dc.dynamic gs$1=(lcoc_core.map.$_invoke$2((dc.dynamic b$1, ){
if(lcoc_core.symbol$QMARK_(b$1, )){
return b$1;
}
if((lcoc_core.gensym is dc.Function)){
return (lcoc_core.gensym as dc.Function)();
}
if((lcoc_core.gensym is lcoc_core.IFn$iface)){
return ((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$0(lcoc_core.gensym, ));
}, bs$1, ));
final dc.dynamic coll7722$1=(lcoc_core.map.$_invoke$4(lcoc_core.vector, bs$1, vs$1, gs$1, ));
dc.dynamic f7723$1(dc.dynamic ret$1, dc.dynamic p$8728_$1, ){
final dc.dynamic vec$8729_$1=p$8728_$1;
final dc.dynamic b$2=(lcoc_core.nth.$_invoke$3(vec$8729_$1, 0, null, ));
final dc.dynamic v$1=(lcoc_core.nth.$_invoke$3(vec$8729_$1, 1, null, ));
final dc.dynamic g$1=(lcoc_core.nth.$_invoke$3(vec$8729_$1, 2, null, ));
if(lcoc_core.symbol$QMARK_(b$2, )){
return (lcoc_core.conj.$_invoke$3(ret$1, g$1, v$1, ));
}
return (lcoc_core.conj.$_invoke$5(ret$1, g$1, v$1, b$2, g$1, ));
}
final lcoc_core.PersistentVector start7724$1=lcoc_core.$_EMPTY_VECTOR;
late final dc.dynamic bfs$1;
if((coll7722$1 is lcoc_core.IReduce$iface)){
bfs$1=((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}else{
bfs$1=((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1(bfs$1, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "loop*", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(lcoc_core.vec((lcoc_core.interleave.$_invoke$2(gs$1, gs$1, )), ), ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), )), (lcoc_core.list.$_invoke$1(lcoc_core.vec((lcoc_core.interleave.$_invoke$2(bs$1, gs$1, )), ), )), body$1, ));
late final dc.dynamic $if_$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$3(arg$2, arg$1, $1, ));
late final dc.dynamic $if_$2;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3(arg$4, arg$3, $2, ));
if((o7668$4 is lcoc_core.ISeqable$iface)){
return ((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END loopifn18695hm$1

// BEGIN m3-fmix
dc.int m3_fmix(dc.dynamic h1$1, dc.dynamic len$1, ){
final dc.int hash$1=((h1$1 as dc.int)^(len$1 as dc.int));
final dc.int hash$2=(hash$1^(hash$1>>(31&16)));
final dc.int x$8247_$AUTO_$1=hash$2;
final dc.int hash$3=(4294967295&((4294967295&((4294901760&x$8247_$AUTO_$1)*2246822507))+((65535&x$8247_$AUTO_$1)*2246822507)));
final dc.int hash$4=(hash$3^(hash$3>>(31&13)));
final dc.int x$8247_$AUTO_$2=hash$4;
final dc.int hash$5=(4294967295&((4294967295&((4294901760&x$8247_$AUTO_$2)*3266489909))+((65535&x$8247_$AUTO_$2)*3266489909)));
return (hash$5^(hash$5>>(31&16)));
}

// END m3-fmix

// BEGIN m3-hash-int
dc.int m3_hash_int(dc.dynamic $in_$1, ){
if((0==$in_$1)){
return $in_$1;
}
final dc.int upper$1=(4294967295&(($in_$1 as dc.int)>>(32&63)));
final dc.int lower$1=(4294967295&($in_$1 as dc.int));
final dc.int k$1=lcoc_core.m3_mix_k1(lower$1, );
final dc.int h$1=lcoc_core.m3_mix_h1(0, k$1, );
final dc.int k$2=lcoc_core.m3_mix_k1(upper$1, );
final dc.int h$2=lcoc_core.m3_mix_h1(h$1, k$2, );
return lcoc_core.m3_fmix(h$2, 8, );
}

// END m3-hash-int

// BEGIN m3-hash-u32
dc.int m3_hash_u32(dc.dynamic $in_$1, ){
if((0==$in_$1)){
return 0;
}
final dc.int k1$1=lcoc_core.m3_mix_k1($in_$1, );
final dc.int h1$1=lcoc_core.m3_mix_h1(0, k1$1, );
return lcoc_core.m3_fmix(h1$1, 4, );
}

// END m3-hash-u32

// BEGIN m3-hash-unencoded-chars
dc.int m3_hash_unencoded_chars(dc.dynamic $in_$1, ){
late final dc.int h1$2;
dc.int i$1=1;
dc.int h1$1=0;
do {
if((i$1<($in_$1 as dc.String).length)){
final dc.int i$1tmp=(i$1+2);
h1$1=lcoc_core.m3_mix_h1(h1$1, lcoc_core.m3_mix_k1(((($in_$1 as dc.String).codeUnitAt((i$1-1), ))|(4294967295&((($in_$1 as dc.String).codeUnitAt(i$1, ))<<(31&16)))), ), );
i$1=i$1tmp;
continue;
}else{
h1$2=h1$1;
}
break;
} while(true);
late final dc.int h1$3;
if(((($in_$1 as dc.String).length&1)==1)){
h1$3=(h1$2^lcoc_core.m3_mix_k1((($in_$1 as dc.String).codeUnitAt((($in_$1 as dc.String).length-1), )), ));
}else{
h1$3=h1$2;
}
final dc.int y$8248_$AUTO_$1=($in_$1 as dc.String).length;
final dc.int $1=(4294967295&((4294967295&((4294901760&2)*y$8248_$AUTO_$1))+((65535&2)*y$8248_$AUTO_$1)));
return lcoc_core.m3_fmix(h1$3, $1, );
}

// END m3-hash-unencoded-chars

// BEGIN m3-mix-h1
dc.int m3_mix_h1(dc.dynamic h1$1, dc.dynamic k1$1, ){
final dc.int x$8261_$AUTO_$1=((h1$1 as dc.int)^(k1$1 as dc.int));
final dc.int x$8247_$AUTO_$1=((4294967295&(x$8261_$AUTO_$1<<(31&13)))|(x$8261_$AUTO_$1>>(31&((-13)))));
final dc.int $1=(4294967295&((4294967295&((4294901760&x$8247_$AUTO_$1)*5))+((65535&x$8247_$AUTO_$1)*5)));
final dc.int $2=($1+3864292196);
return (4294967295&$2);
}

// END m3-mix-h1

// BEGIN m3-mix-k1
dc.int m3_mix_k1(dc.dynamic k1$1, ){
final dc.int x$8247_$AUTO_$1=(k1$1 as dc.int);
final dc.int x$8261_$AUTO_$1=(4294967295&((4294967295&((4294901760&x$8247_$AUTO_$1)*3432918353))+((65535&x$8247_$AUTO_$1)*3432918353)));
final dc.int x$8247_$AUTO_$2=((4294967295&(x$8261_$AUTO_$1<<(31&15)))|(x$8261_$AUTO_$1>>(31&((-15)))));
return (4294967295&((4294967295&((4294901760&x$8247_$AUTO_$2)*461845907))+((65535&x$8247_$AUTO_$2)*461845907)));
}

// END m3-mix-k1

// BEGIN map
lcoc_core.IFn$iface map=lcoc_core.mapifn18695hm$1(null, );

// END map

// BEGIN map-entry?
dc.bool map_entry$QMARK_(dc.dynamic x$1, ){
return (x$1 is dc.MapEntry);
}

// END map-entry?

// BEGIN map-indexed
lcoc_core.IFn$iface map_indexed=lcoc_core.map_indexedifn18695hm$1(null, );

// END map-indexed

// BEGIN map?
dc.bool map$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.IMap.satisfies(x$1, )) as dc.bool);
}

// END map?

// BEGIN mapReify18695hm$1
class mapReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final f$2;

mapReify18695hm$1(this.meta$1, this.rf$1, this.f$2, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.mapReify18695hm$1(m$2395_$AUTO_$1, rf$1, f$2, );
}

dc.dynamic $_invoke$vararg(dc.dynamic result$1, dc.dynamic input$1, dc.dynamic inputs$1, ){
final dc.dynamic arg$1=(lcoc_core.apply.$_invoke$3(f$2, input$1, inputs$1, ));
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, arg$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$1, arg$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$1, arg$1, ));
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$2, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$2, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$2, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$3, dc.dynamic input$2, ){
late final dc.dynamic $if_$1;
if((f$2 is dc.Function)){
$if_$1=(f$2 as dc.Function)(input$2, );
}else if((f$2 is lcoc_core.IFn$iface)){
$if_$1=((f$2 as lcoc_core.IFn$iface).$_invoke$1(input$2, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(f$2, ).$_invoke$1(f$2, input$2, ));
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$3, $if_$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$3, $if_$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$3, $if_$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END mapReify18695hm$1

// BEGIN map_indexedReify18695hm$1
class map_indexedReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final lcoc_core.Volatile i$1;
final f$1;

map_indexedReify18695hm$1(this.meta$1, this.rf$1, this.i$1, this.f$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.map_indexedReify18695hm$1(m$2395_$AUTO_$1, rf$1, i$1, f$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final lcoc_core.Volatile o8024$1=i$1;
final lcoc_core.Volatile o7717$1=i$1;
late final dc.num cast$1;
if((o7717$1 is lcoc_core.IDeref$iface)){
cast$1=(((o7717$1 as lcoc_core.IDeref$iface).$_deref$0()) as dc.num);
}else{
cast$1=(((lcoc_core.IDeref.extensions(o7717$1, ) as lcoc_core.IDeref$ext).$_deref$0(o7717$1, )) as dc.num);
}
final dc.num new_value8025$1=(1+cast$1);
late final dc.dynamic $if_$1;
if((o8024$1 is lcoc_core.IVolatile$iface)){
$if_$1=((o8024$1 as lcoc_core.IVolatile$iface).$_vreset$BANG_$1(new_value8025$1, ));
}else{
$if_$1=((lcoc_core.IVolatile.extensions(o8024$1, ) as lcoc_core.IVolatile$ext).$_vreset$BANG_$1(o8024$1, new_value8025$1, ));
}
late final dc.dynamic $if_$2;
if((f$1 is dc.Function)){
$if_$2=(f$1 as dc.Function)($if_$1, input$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$2=((f$1 as lcoc_core.IFn$iface).$_invoke$2($if_$1, input$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, $if_$1, input$1, ));
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, $if_$2, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, $if_$2, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, $if_$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END map_indexedReify18695hm$1

// BEGIN map_indexedifn18695hm$1
class map_indexedifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

map_indexedifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.map_indexedifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$1(dc.dynamic f$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile i$1=lcoc_core.volatile$BANG_(-1, );
final lcoc_core.map_indexedReify18695hm$1 f$2=lcoc_core.map_indexedReify18695hm$1(null, rf$1, i$1, f$1, );
return f$2;
};
}

dc.dynamic $_invoke$2(dc.dynamic f$3, dc.dynamic coll$1, ){
late final lcoc_core.LazySeq Function(dc.dynamic, dc.dynamic, ) mapi$1;
mapi$1=(dc.dynamic idx$1, dc.dynamic coll$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$1=coll$2;
late final dc.dynamic temp$7560_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
temp$7560_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7560_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if(((temp$7560_$AUTO_$1!=false)&&(temp$7560_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7560_$AUTO_$1;
if(lcoc_core.chunked_seq$QMARK_(s$1, )){
final dc.dynamic c$1=lcoc_core.chunk_first(s$1, );
final dc.dynamic coll7742$1=c$1;
late final dc.int cast$2;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$2=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$2=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final lcoc_core.ChunkBuffer b$1=lcoc_core.chunk_buffer(cast$2, );
final dc.dynamic idx$2=lcoc_core.chunk_reduce((dc.dynamic i$2, dc.dynamic x$1, ){
late final dc.dynamic $if_$3;
if((f$3 is dc.Function)){
$if_$3=(f$3 as dc.Function)(i$2, x$1, );
}else if((f$3 is lcoc_core.IFn$iface)){
$if_$3=((f$3 as lcoc_core.IFn$iface).$_invoke$2(i$2, x$1, ));
}else{
$if_$3=(lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, i$2, x$1, ));
}
lcoc_core.chunk_append(b$1, $if_$3, );
return (1+(i$2 as dc.num));
}, idx$1, c$1, );
return lcoc_core.chunk_cons(lcoc_core.chunk(b$1, ), mapi$1(idx$2, lcoc_core.chunk_rest(s$1, ), ), );
}
final dc.dynamic arg$1=lcoc_core.first(s$1, );
late final dc.dynamic $if_$4;
if((f$3 is dc.Function)){
$if_$4=(f$3 as dc.Function)(idx$1, arg$1, );
}else if((f$3 is lcoc_core.IFn$iface)){
$if_$4=((f$3 as lcoc_core.IFn$iface).$_invoke$2(idx$1, arg$1, ));
}else{
$if_$4=(lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, idx$1, arg$1, ));
}
return lcoc_core.cons($if_$4, mapi$1((1+(idx$1 as dc.num)), lcoc_core.rest(s$1, ), ), );
}
return null;
} as dc.dynamic?), null, -1, );
};
return mapi$1(0, coll$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END map_indexedifn18695hm$1

// BEGIN mapcat
lcoc_core.IFn$iface mapcat=lcoc_core.mapcatifn18695hm$1(null, );

// END mapcat

// BEGIN mapcatifn18695hm$1
class mapcatifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

mapcatifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.mapcatifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic colls$1, ){
return (lcoc_core.apply.$_invoke$2(lcoc_core.concat, (lcoc_core.apply.$_invoke$3(lcoc_core.map, f$1, colls$1, )), ));
}

dc.dynamic $_invoke$1(dc.dynamic f$2, ){
return (lcoc_core.comp.$_invoke$2((lcoc_core.map.$_invoke$1(f$2, )), lcoc_core.cat, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END mapcatifn18695hm$1

// BEGIN mapifn18695hm$1
class mapifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

mapifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.mapifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic c1$1, dc.dynamic c2$1, dc.dynamic c3$1, dc.dynamic colls$1, ){
lcoc_core.LazySeq step$1(dc.dynamic cs$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic ss$1=(lcoc_core.map.$_invoke$2(lcoc_core.seq, cs$1, ));
if(lcoc_core.every$QMARK_(lcoc_core.identity, ss$1, )){
return lcoc_core.cons((lcoc_core.map.$_invoke$2(lcoc_core.first, ss$1, )), step$1((lcoc_core.map.$_invoke$2(lcoc_core.rest, ss$1, )), ), );
}
return null;
} as dc.dynamic?), null, -1, );
}
final lcoc_core.LazySeq Function(dc.dynamic, ) step$2=step$1;
return (lcoc_core.map.$_invoke$2((dc.dynamic p1$9068_$SHARP_$1, ){
return (lcoc_core.apply.$_invoke$2(f$1, p1$9068_$SHARP_$1, ));
}, step$2((lcoc_core.list$STAR_.$_invoke$4(c1$1, c2$1, c3$1, colls$1, )), ), ));
}

dc.dynamic $_invoke$1(dc.dynamic f$2, ){
return (dc.dynamic rf$1, ){
final lcoc_core.mapReify18695hm$1 f$3=lcoc_core.mapReify18695hm$1(null, rf$1, f$2, );
return f$3;
};
}

dc.dynamic $_invoke$2(dc.dynamic f$4, dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic temp$7560_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
temp$7560_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7560_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if(((temp$7560_$AUTO_$1!=false)&&(temp$7560_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7560_$AUTO_$1;
if(lcoc_core.chunked_seq$QMARK_(s$1, )){
final dc.dynamic c$1=lcoc_core.chunk_first(s$1, );
final dc.dynamic coll7742$1=c$1;
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final lcoc_core.ChunkBuffer $1=lcoc_core.chunk_buffer(cast$1, );
final dc.dynamic $2=lcoc_core.chunk_reduce((dc.dynamic p1$9066_$SHARP_$1, dc.dynamic p2$9067_$SHARP_$1, ){
final dc.dynamic G$9071_$1=p1$9066_$SHARP_$1;
late final dc.dynamic $if_$2;
if((f$4 is dc.Function)){
$if_$2=(f$4 as dc.Function)(p2$9067_$SHARP_$1, );
}else if((f$4 is lcoc_core.IFn$iface)){
$if_$2=((f$4 as lcoc_core.IFn$iface).$_invoke$1(p2$9067_$SHARP_$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(f$4, ).$_invoke$1(f$4, p2$9067_$SHARP_$1, ));
}
lcoc_core.chunk_append(G$9071_$1, $if_$2, );
return G$9071_$1;
}, $1, c$1, );
final dc.dynamic $3=lcoc_core.chunk($2, );
return lcoc_core.chunk_cons($3, (lcoc_core.map.$_invoke$2(f$4, lcoc_core.chunk_rest(s$1, ), )), );
}
final dc.dynamic arg$2=lcoc_core.first(s$1, );
late final dc.dynamic $if_$3;
if((f$4 is dc.Function)){
$if_$3=(f$4 as dc.Function)(arg$2, );
}else if((f$4 is lcoc_core.IFn$iface)){
$if_$3=((f$4 as lcoc_core.IFn$iface).$_invoke$1(arg$2, ));
}else{
$if_$3=(lcoc_core.IFn.extensions(f$4, ).$_invoke$1(f$4, arg$2, ));
}
return lcoc_core.cons($if_$3, (lcoc_core.map.$_invoke$2(f$4, lcoc_core.rest(s$1, ), )), );
}
return null;
} as dc.dynamic?), null, -1, );
}

dc.dynamic $_invoke$3(dc.dynamic f$5, dc.dynamic c1$2, dc.dynamic c2$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$2=c1$2;
late final dc.dynamic s1$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
s1$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s1$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic o7668$3=c2$2;
late final dc.dynamic s2$1;
if((o7668$3 is lcoc_core.ISeqable$iface)){
s2$1=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s2$1=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic and$7533_$AUTO_$1=s1$1;
late final dc.dynamic $if_$4;
if(((and$7533_$AUTO_$1!=false)&&(and$7533_$AUTO_$1!=null))){
$if_$4=s2$1;
}else{
$if_$4=and$7533_$AUTO_$1;
}
if((($if_$4!=false)&&($if_$4!=null))){
final dc.dynamic arg$4=lcoc_core.first(s1$1, );
final dc.dynamic arg$3=lcoc_core.first(s2$1, );
late final dc.dynamic $if_$5;
if((f$5 is dc.Function)){
$if_$5=(f$5 as dc.Function)(arg$4, arg$3, );
}else if((f$5 is lcoc_core.IFn$iface)){
$if_$5=((f$5 as lcoc_core.IFn$iface).$_invoke$2(arg$4, arg$3, ));
}else{
$if_$5=(lcoc_core.IFn.extensions(f$5, ).$_invoke$2(f$5, arg$4, arg$3, ));
}
return lcoc_core.cons($if_$5, (lcoc_core.map.$_invoke$3(f$5, lcoc_core.rest(s1$1, ), lcoc_core.rest(s2$1, ), )), );
}
return null;
} as dc.dynamic?), null, -1, );
}

dc.dynamic $_invoke$4(dc.dynamic f$6, dc.dynamic c1$3, dc.dynamic c2$3, dc.dynamic c3$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$4=c1$3;
late final dc.dynamic s1$2;
if((o7668$4 is lcoc_core.ISeqable$iface)){
s1$2=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s1$2=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic o7668$5=c2$3;
late final dc.dynamic s2$2;
if((o7668$5 is lcoc_core.ISeqable$iface)){
s2$2=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s2$2=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic o7668$6=c3$2;
late final dc.dynamic s3$1;
if((o7668$6 is lcoc_core.ISeqable$iface)){
s3$1=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s3$1=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
final dc.dynamic and$7533_$AUTO_$2=s1$2;
late final dc.dynamic $if_$6;
if(((and$7533_$AUTO_$2!=false)&&(and$7533_$AUTO_$2!=null))){
final dc.dynamic and$7533_$AUTO_$3=s2$2;
if(((and$7533_$AUTO_$3!=false)&&(and$7533_$AUTO_$3!=null))){
$if_$6=s3$1;
}else{
$if_$6=and$7533_$AUTO_$3;
}
}else{
$if_$6=and$7533_$AUTO_$2;
}
if((($if_$6!=false)&&($if_$6!=null))){
final dc.dynamic arg$7=lcoc_core.first(s1$2, );
final dc.dynamic arg$6=lcoc_core.first(s2$2, );
final dc.dynamic arg$5=lcoc_core.first(s3$1, );
late final dc.dynamic $if_$7;
if((f$6 is dc.Function)){
$if_$7=(f$6 as dc.Function)(arg$7, arg$6, arg$5, );
}else if((f$6 is lcoc_core.IFn$iface)){
$if_$7=((f$6 as lcoc_core.IFn$iface).$_invoke$3(arg$7, arg$6, arg$5, ));
}else{
$if_$7=(lcoc_core.IFn.extensions(f$6, ).$_invoke$3(f$6, arg$7, arg$6, arg$5, ));
}
return lcoc_core.cons($if_$7, (lcoc_core.map.$_invoke$4(f$6, lcoc_core.rest(s1$2, ), lcoc_core.rest(s2$2, ), lcoc_core.rest(s3$1, ), )), );
}
return null;
} as dc.dynamic?), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END mapifn18695hm$1

// BEGIN mapv
lcoc_core.IFn$iface mapv=lcoc_core.mapvifn18695hm$1(null, );

// END mapv

// BEGIN mapvifn18695hm$1
class mapvifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

mapvifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.mapvifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic c1$1, dc.dynamic c2$1, dc.dynamic c3$1, dc.dynamic colls$1, ){
return (lcoc_core.into.$_invoke$2(lcoc_core.$_EMPTY_VECTOR, (lcoc_core.apply.$_invoke$6(lcoc_core.map, f$1, c1$1, c2$1, c3$1, colls$1, )), ));
}

dc.dynamic $_invoke$2(dc.dynamic f$2, dc.dynamic coll$1, ){
final dc.dynamic coll7722$1=coll$1;
dc.dynamic f7723$1(dc.dynamic v$1, dc.dynamic o$1, ){
late final dc.dynamic $if_$1;
if((f$2 is dc.Function)){
$if_$1=(f$2 as dc.Function)(o$1, );
}else if((f$2 is lcoc_core.IFn$iface)){
$if_$1=((f$2 as lcoc_core.IFn$iface).$_invoke$1(o$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(f$2, ).$_invoke$1(f$2, o$1, ));
}
return (lcoc_core.conj$BANG_.$_invoke$2(v$1, $if_$1, ));
}
final dc.dynamic start7724$1=lcoc_core.transient(lcoc_core.$_EMPTY_VECTOR, );
late final dc.dynamic $if_$2;
if((coll7722$1 is lcoc_core.IReduce$iface)){
$if_$2=((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}else{
$if_$2=((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}
return lcoc_core.persistent$BANG_($if_$2, );
}

dc.dynamic $_invoke$3(dc.dynamic f$3, dc.dynamic c1$2, dc.dynamic c2$2, ){
return (lcoc_core.into.$_invoke$2(lcoc_core.$_EMPTY_VECTOR, (lcoc_core.map.$_invoke$3(f$3, c1$2, c2$2, )), ));
}

dc.dynamic $_invoke$4(dc.dynamic f$4, dc.dynamic c1$3, dc.dynamic c2$3, dc.dynamic c3$2, ){
return (lcoc_core.into.$_invoke$2(lcoc_core.$_EMPTY_VECTOR, (lcoc_core.map.$_invoke$4(f$4, c1$3, c2$3, c3$2, )), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END mapvifn18695hm$1

// BEGIN max
lcoc_core.IFn$iface max=lcoc_core.maxifn18695hm$1(null, );

// END max

// BEGIN max-key
lcoc_core.IFn$iface max_key=lcoc_core.max_keyifn18695hm$1(null, );

// END max-key

// BEGIN max_keyifn18695hm$1
class max_keyifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

max_keyifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.max_keyifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic k$1, dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
late final dc.num kx$1;
if((k$1 is dc.Function)){
kx$1=((k$1 as dc.Function)(x$1, ) as dc.num);
}else if((k$1 is lcoc_core.IFn$iface)){
kx$1=(((k$1 as lcoc_core.IFn$iface).$_invoke$1(x$1, )) as dc.num);
}else{
kx$1=((lcoc_core.IFn.extensions(k$1, ).$_invoke$1(k$1, x$1, )) as dc.num);
}
late final dc.num ky$1;
if((k$1 is dc.Function)){
ky$1=((k$1 as dc.Function)(y$1, ) as dc.num);
}else if((k$1 is lcoc_core.IFn$iface)){
ky$1=(((k$1 as lcoc_core.IFn$iface).$_invoke$1(y$1, )) as dc.num);
}else{
ky$1=((lcoc_core.IFn.extensions(k$1, ).$_invoke$1(k$1, y$1, )) as dc.num);
}
late final lcoc_core.PersistentVector vec$9211_$1;
if((kx$1>ky$1)){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, x$1, ));
fl$1[1]=kx$1;
vec$9211_$1=lcoc_core.$_vec_owning(fl$1, );
}else{
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(2, y$1, ));
fl$2[1]=ky$1;
vec$9211_$1=lcoc_core.$_vec_owning(fl$2, );
}
final dc.dynamic v$1=(lcoc_core.nth.$_invoke$3(vec$9211_$1, 0, null, ));
final dc.dynamic kv$1=(lcoc_core.nth.$_invoke$3(vec$9211_$1, 1, null, ));
dc.dynamic v$2=v$1;
dc.num kv$2=(kv$1 as dc.num);
dc.dynamic more$2=more$1;
do {
if(((more$2!=false)&&(more$2!=null))){
final dc.dynamic w$1=lcoc_core.first(more$2, );
late final dc.num kw$1;
if((k$1 is dc.Function)){
kw$1=((k$1 as dc.Function)(w$1, ) as dc.num);
}else if((k$1 is lcoc_core.IFn$iface)){
kw$1=(((k$1 as lcoc_core.IFn$iface).$_invoke$1(w$1, )) as dc.num);
}else{
kw$1=((lcoc_core.IFn.extensions(k$1, ).$_invoke$1(k$1, w$1, )) as dc.num);
}
if((kw$1>=kv$2)){
v$2=w$1;
kv$2=kw$1;
more$2=lcoc_core.next(more$2, );
continue;
}
more$2=lcoc_core.next(more$2, );
continue;
}
return v$2;
} while(true);
}

dc.dynamic $_invoke$2(dc.dynamic k$2, dc.dynamic x$2, ){
return x$2;
}

dc.dynamic $_invoke$3(dc.dynamic k$3, dc.dynamic x$3, dc.dynamic y$2, ){
late final dc.num cast$1;
if((k$3 is dc.Function)){
cast$1=((k$3 as dc.Function)(x$3, ) as dc.num);
}else if((k$3 is lcoc_core.IFn$iface)){
cast$1=(((k$3 as lcoc_core.IFn$iface).$_invoke$1(x$3, )) as dc.num);
}else{
cast$1=((lcoc_core.IFn.extensions(k$3, ).$_invoke$1(k$3, x$3, )) as dc.num);
}
late final dc.num cast$2;
if((k$3 is dc.Function)){
cast$2=((k$3 as dc.Function)(y$2, ) as dc.num);
}else if((k$3 is lcoc_core.IFn$iface)){
cast$2=(((k$3 as lcoc_core.IFn$iface).$_invoke$1(y$2, )) as dc.num);
}else{
cast$2=((lcoc_core.IFn.extensions(k$3, ).$_invoke$1(k$3, y$2, )) as dc.num);
}
final dc.bool $1=(cast$1>cast$2);
if($1){
return x$3;
}
return y$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END max_keyifn18695hm$1

// BEGIN maxifn18695hm$1
class maxifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

maxifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.maxifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
final dc.dynamic coll7722$1=more$1;
final lcoc_core.IFn$iface f7723$1=lcoc_core.max;
final dc.num start7724$1=d_math.max<dc.num>(x$2, y$2, );
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$3, ){
final dc.num x$4=(x$3 as dc.num);
return x$4;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$3, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$4=(y$3 as dc.num);
return d_math.max<dc.num>(x$6, y$4, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END maxifn18695hm$1

// BEGIN maybe-destructured
dc.dynamic maybe_destructured(dc.dynamic params$1, dc.dynamic body$1, ){
if(lcoc_core.every$QMARK_(lcoc_core.symbol$QMARK_, params$1, )){
return lcoc_core.cons(params$1, body$1, );
}
dc.dynamic params$2=params$1;
final dc.dynamic o7872$1=params$2;
late final dc.dynamic $if_$1;
if((o7872$1 is lcoc_core.IMeta$iface)){
$if_$1=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$1=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
dc.dynamic new_params$1=lcoc_core.with_meta(lcoc_core.$_EMPTY_VECTOR, $if_$1, );
dc.dynamic lets$1=lcoc_core.$_EMPTY_VECTOR;
do {
late final dc.bool $if_$2;
if(((params$2!=false)&&(params$2!=null))){
$if_$2=false;
}else{
$if_$2=true;
}
if($if_$2){
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(new_params$1, ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), )), (lcoc_core.list.$_invoke$1(lets$1, )), body$1, ));
late final dc.dynamic $if_$3;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$2(arg$1, $1, ));
if((o7668$2 is lcoc_core.ISeqable$iface)){
return ((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
late final dc.bool $if_$4;
if(lcoc_core.symbol$QMARK_(lcoc_core.first(params$2, ), )){
$if_$4=false;
}else{
$if_$4=true;
}
if($if_$4){
late final dc.dynamic gparam$1;
if((lcoc_core.gensym is dc.Function)){
gparam$1=(lcoc_core.gensym as dc.Function)("p__", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
gparam$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("p__", ));
}else{
gparam$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "p__", ));
}
final dc.dynamic params$2tmp=lcoc_core.next(params$2, );
final dc.dynamic coll7707$1=new_params$1;
final dc.dynamic o7708$1=gparam$1;
if((coll7707$1 is lcoc_core.ICollection$iface)){
new_params$1=((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}else{
new_params$1=((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
}
final dc.dynamic coll7707$2=lets$1;
final dc.dynamic o7708$2=lcoc_core.first(params$2, );
late final dc.dynamic coll7707$3;
if((coll7707$2 is lcoc_core.ICollection$iface)){
coll7707$3=((coll7707$2 as lcoc_core.ICollection$iface).$_conj$1(o7708$2, ));
}else{
coll7707$3=((lcoc_core.ICollection.extensions(coll7707$2, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$2, o7708$2, ));
}
final dc.dynamic o7708$3=gparam$1;
if((coll7707$3 is lcoc_core.ICollection$iface)){
lets$1=((coll7707$3 as lcoc_core.ICollection$iface).$_conj$1(o7708$3, ));
}else{
lets$1=((lcoc_core.ICollection.extensions(coll7707$3, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$3, o7708$3, ));
}
params$2=params$2tmp;
continue;
}
if((lcoc_core.name(lcoc_core.first(params$2, ), ).startsWith(".", ))){
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$1((lcoc_core.concat.$_invoke$2(new_params$1, params$2, )), ));
late final dc.dynamic $if_$5;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$5, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), )), (lcoc_core.list.$_invoke$1(lets$1, )), body$1, ));
late final dc.dynamic $if_$6;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$2($4, $3, ));
if((o7668$5 is lcoc_core.ISeqable$iface)){
return ((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic params$2tmp=lcoc_core.next(params$2, );
final dc.dynamic coll7707$4=new_params$1;
final dc.dynamic o7708$4=lcoc_core.first(params$2, );
if((coll7707$4 is lcoc_core.ICollection$iface)){
new_params$1=((coll7707$4 as lcoc_core.ICollection$iface).$_conj$1(o7708$4, ));
}else{
new_params$1=((lcoc_core.ICollection.extensions(coll7707$4, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$4, o7708$4, ));
}
params$2=params$2tmp;
continue;
} while(true);
}

// END maybe-destructured

// BEGIN memfn
lcoc_core.IFn$iface memfn=lcoc_core.memfnifn18695hm$1(null, );

// END memfn

// BEGIN memfnifn18695hm$1
class memfnifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

memfnifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.memfnifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic name$1, dc.dynamic args$1, ){
late final dc.dynamic $if_$2;
if((lcoc_core.gensym is dc.Function)){
$if_$2=(lcoc_core.gensym as dc.Function)("target", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
$if_$2=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("target", ));
}else{
$if_$2=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "target", ));
}
final dc.dynamic o7872$1=name$1;
late final dc.dynamic $if_$1;
if((o7872$1 is lcoc_core.IMeta$iface)){
$if_$1=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$1=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
final dc.dynamic t$1=lcoc_core.with_meta($if_$2, $if_$1, );
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(t$1, )), args$1, ));
late final dc.dynamic $if_$3;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(t$1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(name$1, )), args$1, ));
late final dc.dynamic $if_$4;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$3(arg$2, arg$1, $2, ));
late final dc.dynamic $if_$5;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3(arg$3, $4, $3, ));
if((o7668$4 is lcoc_core.ISeqable$iface)){
return ((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END memfnifn18695hm$1

// BEGIN memoize
dc.dynamic memoize(dc.dynamic f$1, ){
final lcoc_core.Atom mem$1=(lcoc_core.atom.$_invoke$1(lcoc_core.$_EMPTY_MAP, ));
final lcoc_core.memoizeReify18695hm$1 f$2=lcoc_core.memoizeReify18695hm$1(null, mem$1, f$1, );
return f$2;
}

// END memoize

// BEGIN memoizeReify18695hm$1
class memoizeReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final lcoc_core.Atom mem$1;
final f$1;

memoizeReify18695hm$1(this.meta$1, this.mem$1, this.f$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.memoizeReify18695hm$1(m$2395_$AUTO_$1, mem$1, f$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic args$1, ){
final dc.dynamic? temp$7555_$AUTO_$1=lcoc_core.find(lcoc_core.deref(mem$1, ), args$1, );
if((temp$7555_$AUTO_$1!=null)){
final dc.dynamic? e$1=temp$7555_$AUTO_$1;
return lcoc_core.val(e$1, );
}
final dc.dynamic ret$1=(lcoc_core.apply.$_invoke$2(f$1, args$1, ));
lcoc_core.swap$BANG_.$_invoke$4(mem$1, lcoc_core.assoc, args$1, ret$1, );
return ret$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END memoizeReify18695hm$1

// BEGIN merge
lcoc_core.IFn$iface merge=lcoc_core.mergeifn18695hm$1(null, );

// END merge

// BEGIN merge-with
lcoc_core.IFn$iface merge_with=lcoc_core.merge_withifn18695hm$1(null, );

// END merge-with

// BEGIN merge_withifn18695hm$1
class merge_withifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

merge_withifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.merge_withifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic maps$1, ){
final dc.dynamic test$1=lcoc_core.some(lcoc_core.identity, maps$1, );
if(((test$1!=false)&&(test$1!=null))){
dc.dynamic merge_entry$1(dc.dynamic m$1, dc.dynamic e$1, ){
final dc.dynamic k$1=lcoc_core.key(e$1, );
final dc.dynamic v$1=lcoc_core.val(e$1, );
if(lcoc_core.contains$QMARK_(m$1, k$1, )){
final dc.dynamic coll7790$1=m$1;
final dc.dynamic k7791$1=k$1;
final dc.dynamic arg$1=(lcoc_core.$get_.$_invoke$2(m$1, k$1, ));
late final dc.dynamic v7792$1;
if((f$1 is dc.Function)){
v7792$1=(f$1 as dc.Function)(arg$1, v$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
v7792$1=((f$1 as lcoc_core.IFn$iface).$_invoke$2(arg$1, v$1, ));
}else{
v7792$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, arg$1, v$1, ));
}
if((coll7790$1 is lcoc_core.IAssociative$iface)){
return ((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, ));
}
final dc.dynamic coll7790$2=m$1;
final dc.dynamic k7791$2=k$1;
final dc.dynamic v7792$2=v$1;
if((coll7790$2 is lcoc_core.IAssociative$iface)){
return ((coll7790$2 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$2, v7792$2, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$2, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$2, k7791$2, v7792$2, ));
}
dc.dynamic merge2$1(dc.dynamic m1$1, dc.dynamic m2$1, ){
final dc.dynamic o7668$13=m2$1;
late final dc.dynamic coll7722$1;
if((o7668$13 is lcoc_core.ISeqable$iface)){
coll7722$1=((o7668$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
coll7722$1=((lcoc_core.ISeqable.extensions(o7668$13, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$13, ));
}
final dc.dynamic Function(dc.dynamic, dc.dynamic, ) f7723$1=merge_entry$1;
final dc.dynamic or$7573_$AUTO_$1=m1$1;
late final dc.dynamic start7724$1;
if(((or$7573_$AUTO_$1!=false)&&(or$7573_$AUTO_$1!=null))){
start7724$1=or$7573_$AUTO_$1;
}else{
start7724$1=lcoc_core.$_EMPTY_MAP;
}
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}
final dc.dynamic coll7726$1=maps$1;
final dc.dynamic Function(dc.dynamic, dc.dynamic, ) f7727$1=merge2$1;
if((coll7726$1 is lcoc_core.IReduce$iface)){
return ((coll7726$1 as lcoc_core.IReduce$iface).$_reduce$1(f7727$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7726$1, ) as lcoc_core.IReduce$ext).$_reduce$1(coll7726$1, f7727$1, ));
}
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END merge_withifn18695hm$1

// BEGIN mergeifn18695hm$1
class mergeifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

mergeifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.mergeifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic maps$1, ){
final dc.dynamic test$1=lcoc_core.some(lcoc_core.identity, maps$1, );
if(((test$1!=false)&&(test$1!=null))){
final dc.dynamic coll7726$1=maps$1;
dc.dynamic f7727$1(dc.dynamic p1$8982_$SHARP_$1, dc.dynamic p2$8983_$SHARP_$1, ){
final dc.dynamic or$7573_$AUTO_$1=p1$8982_$SHARP_$1;
late final dc.dynamic coll7707$1;
if(((or$7573_$AUTO_$1!=false)&&(or$7573_$AUTO_$1!=null))){
coll7707$1=or$7573_$AUTO_$1;
}else{
coll7707$1=lcoc_core.$_EMPTY_MAP;
}
final dc.dynamic o7708$1=p2$8983_$SHARP_$1;
if((coll7707$1 is lcoc_core.ICollection$iface)){
return ((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}
return ((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
}
if((coll7726$1 is lcoc_core.IReduce$iface)){
return ((coll7726$1 as lcoc_core.IReduce$iface).$_reduce$1(f7727$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7726$1, ) as lcoc_core.IReduce$ext).$_reduce$1(coll7726$1, f7727$1, ));
}
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END mergeifn18695hm$1

// BEGIN meta
dc.dynamic meta(dc.dynamic obj$1, ){
final dc.dynamic o7872$1=obj$1;
if((o7872$1 is lcoc_core.IMeta$iface)){
return ((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}
return ((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}

// END meta

// BEGIN min
lcoc_core.IFn$iface min=lcoc_core.minifn18695hm$1(null, );

// END min

// BEGIN min-key
lcoc_core.IFn$iface min_key=lcoc_core.min_keyifn18695hm$1(null, );

// END min-key

// BEGIN min_keyifn18695hm$1
class min_keyifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

min_keyifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.min_keyifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic k$1, dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
late final dc.num kx$1;
if((k$1 is dc.Function)){
kx$1=((k$1 as dc.Function)(x$1, ) as dc.num);
}else if((k$1 is lcoc_core.IFn$iface)){
kx$1=(((k$1 as lcoc_core.IFn$iface).$_invoke$1(x$1, )) as dc.num);
}else{
kx$1=((lcoc_core.IFn.extensions(k$1, ).$_invoke$1(k$1, x$1, )) as dc.num);
}
late final dc.num ky$1;
if((k$1 is dc.Function)){
ky$1=((k$1 as dc.Function)(y$1, ) as dc.num);
}else if((k$1 is lcoc_core.IFn$iface)){
ky$1=(((k$1 as lcoc_core.IFn$iface).$_invoke$1(y$1, )) as dc.num);
}else{
ky$1=((lcoc_core.IFn.extensions(k$1, ).$_invoke$1(k$1, y$1, )) as dc.num);
}
late final lcoc_core.PersistentVector vec$9207_$1;
if((kx$1<ky$1)){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, x$1, ));
fl$1[1]=kx$1;
vec$9207_$1=lcoc_core.$_vec_owning(fl$1, );
}else{
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(2, y$1, ));
fl$2[1]=ky$1;
vec$9207_$1=lcoc_core.$_vec_owning(fl$2, );
}
final dc.dynamic v$1=(lcoc_core.nth.$_invoke$3(vec$9207_$1, 0, null, ));
final dc.dynamic kv$1=(lcoc_core.nth.$_invoke$3(vec$9207_$1, 1, null, ));
dc.dynamic v$2=v$1;
dc.num kv$2=(kv$1 as dc.num);
dc.dynamic more$2=more$1;
do {
if(((more$2!=false)&&(more$2!=null))){
final dc.dynamic w$1=lcoc_core.first(more$2, );
late final dc.num kw$1;
if((k$1 is dc.Function)){
kw$1=((k$1 as dc.Function)(w$1, ) as dc.num);
}else if((k$1 is lcoc_core.IFn$iface)){
kw$1=(((k$1 as lcoc_core.IFn$iface).$_invoke$1(w$1, )) as dc.num);
}else{
kw$1=((lcoc_core.IFn.extensions(k$1, ).$_invoke$1(k$1, w$1, )) as dc.num);
}
if((kw$1<=kv$2)){
v$2=w$1;
kv$2=kw$1;
more$2=lcoc_core.next(more$2, );
continue;
}
more$2=lcoc_core.next(more$2, );
continue;
}
return v$2;
} while(true);
}

dc.dynamic $_invoke$2(dc.dynamic k$2, dc.dynamic x$2, ){
return x$2;
}

dc.dynamic $_invoke$3(dc.dynamic k$3, dc.dynamic x$3, dc.dynamic y$2, ){
late final dc.num cast$1;
if((k$3 is dc.Function)){
cast$1=((k$3 as dc.Function)(x$3, ) as dc.num);
}else if((k$3 is lcoc_core.IFn$iface)){
cast$1=(((k$3 as lcoc_core.IFn$iface).$_invoke$1(x$3, )) as dc.num);
}else{
cast$1=((lcoc_core.IFn.extensions(k$3, ).$_invoke$1(k$3, x$3, )) as dc.num);
}
late final dc.num cast$2;
if((k$3 is dc.Function)){
cast$2=((k$3 as dc.Function)(y$2, ) as dc.num);
}else if((k$3 is lcoc_core.IFn$iface)){
cast$2=(((k$3 as lcoc_core.IFn$iface).$_invoke$1(y$2, )) as dc.num);
}else{
cast$2=((lcoc_core.IFn.extensions(k$3, ).$_invoke$1(k$3, y$2, )) as dc.num);
}
final dc.bool $1=(cast$1<cast$2);
if($1){
return x$3;
}
return y$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END min_keyifn18695hm$1

// BEGIN minifn18695hm$1
class minifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

minifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.minifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
final dc.dynamic coll7722$1=more$1;
final lcoc_core.IFn$iface f7723$1=lcoc_core.min;
final dc.num start7724$1=d_math.min<dc.num>(x$2, y$2, );
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$3, ){
final dc.num x$4=(x$3 as dc.num);
return x$4;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$3, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$4=(y$3 as dc.num);
return d_math.min<dc.num>(x$6, y$4, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END minifn18695hm$1

// BEGIN mix-collection-hash
dc.int mix_collection_hash(dc.dynamic hash_basis$1, dc.dynamic count$1, ){
final dc.int k1$1=lcoc_core.m3_mix_k1(hash_basis$1, );
final dc.int h1$1=lcoc_core.m3_mix_h1(0, k1$1, );
return lcoc_core.m3_fmix(h1$1, count$1, );
}

// END mix-collection-hash

// BEGIN mod
dc.int mod(dc.dynamic num$1, dc.dynamic div$1, ){
return ((num$1 as dc.int)%(div$1 as dc.int));
}

// END mod

// BEGIN name
dc.String name(dc.dynamic x$1, ){
if((x$1 is dc.String)){
return x$1;
}
final dc.dynamic x7656$1=x$1;
if((x7656$1 is lcoc_core.INamed$iface)){
return ((x7656$1 as lcoc_core.INamed$iface).$_name$0());
}
return ((lcoc_core.INamed.extensions(x7656$1, ) as lcoc_core.INamed$ext).$_name$0(x7656$1, ));
}

// END name

// BEGIN namespace
dc.String? namespace(dc.dynamic x$1, ){
final dc.dynamic x7661$1=x$1;
if((x7661$1 is lcoc_core.INamed$iface)){
return ((x7661$1 as lcoc_core.INamed$iface).$_namespace$0());
}
return ((lcoc_core.INamed.extensions(x7661$1, ) as lcoc_core.INamed$ext).$_namespace$0(x7661$1, ));
}

// END namespace

// BEGIN nary-cmp-inline
dc.dynamic nary_cmp_inline(dc.dynamic op$1, ){
final lcoc_core.nary_cmp_inlineReify18695hm$1 f$1=lcoc_core.nary_cmp_inlineReify18695hm$1(null, op$1, );
return f$1;
}

// END nary-cmp-inline

// BEGIN nary-inline
lcoc_core.IFn$iface nary_inline=lcoc_core.nary_inlineifn18695hm$1(null, );

// END nary-inline

// BEGIN nary_cmp_inlineReify18695hm$1
class nary_cmp_inlineReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final op$1;

nary_cmp_inlineReify18695hm$1(this.meta$1, this.op$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.nary_cmp_inlineReify18695hm$1(m$2395_$AUTO_$1, op$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic bindings$1=(lcoc_core.mapcat.$_invoke$2((dc.dynamic x$2, ){
late final dc.dynamic $if_$1;
if((lcoc_core.gensym is dc.Function)){
$if_$1=(lcoc_core.gensym as dc.Function)(op$1, );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
$if_$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1(op$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, op$1, ));
}
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, $if_$1, ));
fl$1[1]=x$2;
return lcoc_core.$_vec_owning(fl$1, );
}, (lcoc_core.list$STAR_.$_invoke$3(x$1, y$1, more$1, )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$1(bindings$1, ));
late final dc.dynamic $if_$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".&&", )), )), (lcoc_core.map.$_invoke$2((dc.dynamic p$8910_$1, ){
final dc.dynamic vec$8911_$1=p$8910_$1;
final dc.dynamic x$3=(lcoc_core.nth.$_invoke$3(vec$8911_$1, 0, null, ));
final dc.dynamic y$2=(lcoc_core.nth.$_invoke$3(vec$8911_$1, 1, null, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".", )), )), (lcoc_core.list.$_invoke$1(x$3, )), (lcoc_core.list.$_invoke$1(op$1, )), (lcoc_core.list.$_invoke$1(y$2, )), ));
if((o7668$2 is lcoc_core.ISeqable$iface)){
return ((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}, (lcoc_core.partition.$_invoke$3(2, 1, (lcoc_core.take_nth.$_invoke$2(2, bindings$1, )), )), )), ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3(arg$1, $3, $2, ));
if((o7668$4 is lcoc_core.ISeqable$iface)){
return ((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$4, ){
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$3, ){
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".", )), )), (lcoc_core.list.$_invoke$1(x$5, )), (lcoc_core.list.$_invoke$1(op$1, )), (lcoc_core.list.$_invoke$1(y$3, )), ));
if((o7668$5 is lcoc_core.ISeqable$iface)){
return ((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END nary_cmp_inlineReify18695hm$1

// BEGIN nary_inlineReify18695hm$1
class nary_inlineReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final unary_fn$2;
final zero$1;
final op$3;

nary_inlineReify18695hm$1(this.meta$1, this.unary_fn$2, this.zero$1, this.op$3, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.nary_inlineReify18695hm$1(m$2395_$AUTO_$1, unary_fn$2, zero$1, op$3, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic coll7722$1=more$1;
dc.dynamic f7723$1(dc.dynamic a$1, dc.dynamic b$1, ){
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".", )), )), (lcoc_core.list.$_invoke$1(a$1, )), (lcoc_core.list.$_invoke$1(op$3, )), (lcoc_core.list.$_invoke$1(b$1, )), ));
if((o7668$2 is lcoc_core.ISeqable$iface)){
return ((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".", )), )), (lcoc_core.list.$_invoke$1(x$1, )), (lcoc_core.list.$_invoke$1(op$3, )), (lcoc_core.list.$_invoke$1(y$1, )), ));
late final dc.dynamic start7724$1;
if((o7668$3 is lcoc_core.ISeqable$iface)){
start7724$1=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
start7724$1=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic $_invoke$0(){
return zero$1;
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
if((unary_fn$2 is dc.Function)){
return (unary_fn$2 as dc.Function)(x$2, );
}
if((unary_fn$2 is lcoc_core.IFn$iface)){
return ((unary_fn$2 as lcoc_core.IFn$iface).$_invoke$1(x$2, ));
}
return (lcoc_core.IFn.extensions(unary_fn$2, ).$_invoke$1(unary_fn$2, x$2, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".", )), )), (lcoc_core.list.$_invoke$1(x$3, )), (lcoc_core.list.$_invoke$1(op$3, )), (lcoc_core.list.$_invoke$1(y$2, )), ));
if((o7668$4 is lcoc_core.ISeqable$iface)){
return ((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END nary_inlineReify18695hm$1

// BEGIN nary_inlineifn18695hm$1
class nary_inlineifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

nary_inlineifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.nary_inlineifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$1(dc.dynamic op$1, ){
return (lcoc_core.nary_inline.$_invoke$3(null, null, op$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic unary_fn$1, dc.dynamic op$2, ){
return (lcoc_core.nary_inline.$_invoke$3(null, unary_fn$1, op$2, ));
}

dc.dynamic $_invoke$3(dc.dynamic zero$1, dc.dynamic unary_fn$2, dc.dynamic op$3, ){
final lcoc_core.nary_inlineReify18695hm$1 f$1=lcoc_core.nary_inlineReify18695hm$1(null, unary_fn$2, zero$1, op$3, );
return f$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END nary_inlineifn18695hm$1

// BEGIN nat-int?
dc.bool nat_int$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7533_$AUTO_$1=(x$1 is dc.int);
if(and$7533_$AUTO_$1){
if((0>(x$1 as dc.num))){
return false;
}
return true;
}
return and$7533_$AUTO_$1;
}

// END nat-int?

// BEGIN neg-int?
dc.bool neg_int$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7533_$AUTO_$1=(x$1 is dc.int);
if(and$7533_$AUTO_$1){
return (0>(x$1 as dc.num));
}
return and$7533_$AUTO_$1;
}

// END neg-int?

// BEGIN neg?
dc.bool neg$QMARK_(dc.dynamic n$1, ){
return (0>(n$1 as dc.num));
}

// END neg?

// BEGIN new-array
lcoc_core.IFn$iface new_array=lcoc_core.new_arrayifn18695hm$1(null, );

// END new-array

// BEGIN new-path
lcoc_core.VectorNode new_path(dc.dynamic level$1, dc.dynamic node$1, ){
dc.int ll$1=(level$1 as dc.int);
lcoc_core.VectorNode ret$1=(node$1 as lcoc_core.VectorNode);
do {
if((0==ll$1)){
return ret$1;
}
ll$1=(ll$1-5);
final dc.List<lcoc_core.VectorNode> fl$1=(dc.List<lcoc_core.VectorNode>.filled(1, ret$1, ));
ret$1=lcoc_core.VectorNode(null, fl$1, );
continue;
} while(true);
}

// END new-path

// BEGIN new_arrayifn18695hm$1
class new_arrayifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

new_arrayifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.new_arrayifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic specs$1, ){
final dc.dynamic pos$1=(lcoc_core.symbol.$_invoke$2(null, "pos__9279__auto__", ));
final dc.dynamic dest$1=(lcoc_core.symbol.$_invoke$2(null, "dest__9280__auto__", ));
final dc.dynamic arg$21=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$20=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size__9284__auto__", )), ));
final dc.dynamic o7668$8=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "+", )), )), lcoc_core.LazySeq(null, ((){
dc.dynamic iter$9286_$1(dc.dynamic coll$9287_$2, ){
dc.dynamic coll$9287_$1=coll$9287_$2;
do {
if(((coll$9287_$1!=false)&&(coll$9287_$1!=null))){
if(lcoc_core.chunked_seq$QMARK_(coll$9287_$1, )){
final dc.dynamic c$8391_$AUTO_$1=lcoc_core.chunk_first(coll$9287_$1, );
final dc.dynamic coll7742$1=c$8391_$AUTO_$1;
late final dc.int size$8392_$AUTO_$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
size$8392_$AUTO_$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
size$8392_$AUTO_$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final lcoc_core.ChunkBuffer buf$8390_$AUTO_$1=lcoc_core.chunk_buffer(size$8392_$AUTO_$1, );
late final dc.dynamic exit$8393_$AUTO_$1;
dc.int i$8394_$AUTO_$1=0;
do {
if((i$8394_$AUTO_$1<size$8392_$AUTO_$1)){
final dc.dynamic coll7829$1=c$8391_$AUTO_$1;
final dc.int n7830$1=i$8394_$AUTO_$1;
late final dc.dynamic vec$9288_$1;
if((coll7829$1 is lcoc_core.IIndexed$iface)){
vec$9288_$1=((coll7829$1 as lcoc_core.IIndexed$iface).$_nth$1(n7830$1, ));
}else{
vec$9288_$1=((lcoc_core.IIndexed.extensions(coll7829$1, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$1, n7830$1, ));
}
final dc.dynamic o7668$1=vec$9288_$1;
late final dc.dynamic seq$9289_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
seq$9289_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9289_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic first$9290_$1=lcoc_core.first(seq$9289_$1, );
final dc.dynamic seq$9289_$2=lcoc_core.next(seq$9289_$1, );
final dc.dynamic op$1=first$9290_$1;
final dc.dynamic args$1=seq$9289_$2;
final dc.dynamic o7900$1=op$1;
late final dc.int hash$1;
if((o7900$1 is lcoc_core.IHash$iface)){
hash$1=(((o7900$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
hash$1=(((lcoc_core.IHash.extensions(o7900$1, ) as lcoc_core.IHash$ext).$_hash$0(o7900$1, )) as dc.int);
}
late final dc.dynamic $case_$1;
switch(hash$1){
case 1249710686:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "copy", 1249710686, ), op$1, ))){
final dc.dynamic vec$9294_$1=args$1;
final dc.dynamic arr$1=(lcoc_core.nth.$_invoke$3(vec$9294_$1, 0, null, ));
final dc.dynamic from$1=(lcoc_core.nth.$_invoke$3(vec$9294_$1, 1, null, ));
final dc.dynamic to$1=(lcoc_core.nth.$_invoke$3(vec$9294_$1, 2, null, ));
final dc.dynamic or$7573_$AUTO_$2=to$1;
late final dc.dynamic to$2;
if(((or$7573_$AUTO_$2!=false)&&(or$7573_$AUTO_$2!=null))){
to$2=or$7573_$AUTO_$2;
}else{
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "alength", )), )), (lcoc_core.list.$_invoke$1(arr$1, )), ));
if((o7668$3 is lcoc_core.ISeqable$iface)){
to$2=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
to$2=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
}
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-", )), )), (lcoc_core.list.$_invoke$1(to$2, )), (lcoc_core.list.$_invoke$1(from$1, )), ));
if((o7668$4 is lcoc_core.ISeqable$iface)){
$case_$1=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$case_$1=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
}else{
continue _default;
}
break;
case 1024620784:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "insert", 1024620784, ), op$1, ))){
final dc.dynamic coll7742$3=args$1;
if((coll7742$3 is lcoc_core.ICounted$iface)){
$case_$1=(((coll7742$3 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
$case_$1=(((lcoc_core.ICounted.extensions(coll7742$3, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$3, )) as dc.int);
}
}else{
continue _default;
}
break;
_default: default:
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("No matching clause: ", (lcoc_core.pr_str.$_invoke$1(op$1, )), )), );
}
final dc.dynamic or$7573_$AUTO_$1=lcoc_core.chunk_append(buf$8390_$AUTO_$1, $case_$1, );
if(((or$7573_$AUTO_$1!=false)&&(or$7573_$AUTO_$1!=null))){
exit$8393_$AUTO_$1=or$7573_$AUTO_$1;
}else{
i$8394_$AUTO_$1=(1+i$8394_$AUTO_$1);
continue;
}
}else{
exit$8393_$AUTO_$1=null;
}
break;
} while(true);
final lcoc_core.ChunkBuffer coll7742$2=buf$8390_$AUTO_$1;
late final dc.int cast$1;
if((coll7742$2 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$2, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$2, )) as dc.int);
}
final dc.bool $1=(0<cast$1);
if($1){
return lcoc_core.chunk_cons(lcoc_core.chunk(buf$8390_$AUTO_$1, ), lcoc_core.LazySeq(null, ((){
if(((exit$8393_$AUTO_$1!=false)&&(exit$8393_$AUTO_$1!=null))){
return null;
}
return iter$9286_$1(lcoc_core.chunk_next(coll$9287_$1, ), );
} as dc.dynamic?), null, -1, ), );
}
if(((exit$8393_$AUTO_$1!=false)&&(exit$8393_$AUTO_$1!=null))){
return null;
}
coll$9287_$1=lcoc_core.chunk_next(coll$9287_$1, );
continue;
}
final dc.dynamic vec$9291_$1=lcoc_core.first(coll$9287_$1, );
final dc.dynamic o7668$2=vec$9291_$1;
late final dc.dynamic seq$9292_$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
seq$9292_$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9292_$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic first$9293_$1=lcoc_core.first(seq$9292_$1, );
final dc.dynamic seq$9292_$2=lcoc_core.next(seq$9292_$1, );
final dc.dynamic op$2=first$9293_$1;
final dc.dynamic args$2=seq$9292_$2;
final dc.dynamic o7900$2=op$2;
late final dc.int hash$2;
if((o7900$2 is lcoc_core.IHash$iface)){
hash$2=(((o7900$2 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
hash$2=(((lcoc_core.IHash.extensions(o7900$2, ) as lcoc_core.IHash$ext).$_hash$0(o7900$2, )) as dc.int);
}
late final dc.dynamic $case_$2;
switch(hash$2){
case 1249710686:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "copy", 1249710686, ), op$2, ))){
final dc.dynamic vec$9297_$1=args$2;
final dc.dynamic arr$2=(lcoc_core.nth.$_invoke$3(vec$9297_$1, 0, null, ));
final dc.dynamic from$2=(lcoc_core.nth.$_invoke$3(vec$9297_$1, 1, null, ));
final dc.dynamic to$3=(lcoc_core.nth.$_invoke$3(vec$9297_$1, 2, null, ));
final dc.dynamic or$7573_$AUTO_$3=to$3;
late final dc.dynamic to$4;
if(((or$7573_$AUTO_$3!=false)&&(or$7573_$AUTO_$3!=null))){
to$4=or$7573_$AUTO_$3;
}else{
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "alength", )), )), (lcoc_core.list.$_invoke$1(arr$2, )), ));
if((o7668$5 is lcoc_core.ISeqable$iface)){
to$4=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
to$4=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
}
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-", )), )), (lcoc_core.list.$_invoke$1(to$4, )), (lcoc_core.list.$_invoke$1(from$2, )), ));
if((o7668$6 is lcoc_core.ISeqable$iface)){
$case_$2=((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$case_$2=((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}
}else{
continue _default;
}
break;
case 1024620784:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "insert", 1024620784, ), op$2, ))){
final dc.dynamic coll7742$4=args$2;
if((coll7742$4 is lcoc_core.ICounted$iface)){
$case_$2=(((coll7742$4 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
$case_$2=(((lcoc_core.ICounted.extensions(coll7742$4, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$4, )) as dc.int);
}
}else{
continue _default;
}
break;
_default: default:
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("No matching clause: ", (lcoc_core.pr_str.$_invoke$1(op$2, )), )), );
}
return lcoc_core.cons($case_$2, lcoc_core.LazySeq(null, ((){
return iter$9286_$1(lcoc_core.next(coll$9287_$1, ), );
} as dc.dynamic?), null, -1, ), );
}
return null;
} while(true);
}
final dc.dynamic o7668$7=specs$1;
late final dc.dynamic $if_$1;
if((o7668$7 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$7, ));
}
return iter$9286_$1($if_$1, );
} as dc.dynamic?), null, -1, ), ));
late final dc.dynamic $if_$2;
if((o7668$8 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$8, ));
}
final dc.dynamic $28=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic arg$19=(lcoc_core.list.$_invoke$1(dest$1, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".filled", )), ));
final dc.dynamic arg$2=(lcoc_core.symbol.$_invoke$2("dart:core", "List", ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.dynamic o7668$9=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("dart:core", "dynamic", )), )), ));
late final dc.dynamic $if_$3;
if((o7668$9 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$9, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$10=(lcoc_core.concat.$_invoke$2(arg$1, $2, ));
late final dc.dynamic $if_$4;
if((o7668$10 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$10, ));
}
final dc.dynamic $3=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$4, ));
final dc.dynamic $4=lcoc_core.with_meta(arg$2, $3, );
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($4, ));
final dc.dynamic o7668$11=(lcoc_core.concat.$_invoke$4(arg$3, $5, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size__9284__auto__", )), )), (lcoc_core.list.$_invoke$1(null, )), ));
late final dc.dynamic $if_$5;
if((o7668$11 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$11, ));
}
final dc.dynamic $27=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7668$31=(lcoc_core.concat.$_invoke$7(arg$20, $28, arg$19, $27, (lcoc_core.list.$_invoke$1(pos$1, )), (lcoc_core.list.$_invoke$1(0, )), (lcoc_core.mapcat.$_invoke$2((dc.dynamic p$9300_$1, ){
final dc.dynamic vec$9301_$1=p$9300_$1;
final dc.dynamic o7668$12=vec$9301_$1;
late final dc.dynamic seq$9302_$1;
if((o7668$12 is lcoc_core.ISeqable$iface)){
seq$9302_$1=((o7668$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9302_$1=((lcoc_core.ISeqable.extensions(o7668$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$12, ));
}
final dc.dynamic first$9303_$1=lcoc_core.first(seq$9302_$1, );
final dc.dynamic seq$9302_$2=lcoc_core.next(seq$9302_$1, );
final dc.dynamic op$3=first$9303_$1;
final dc.dynamic args$3=seq$9302_$2;
final dc.dynamic o7900$3=op$3;
late final dc.int hash$3;
if((o7900$3 is lcoc_core.IHash$iface)){
hash$3=(((o7900$3 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
hash$3=(((lcoc_core.IHash.extensions(o7900$3, ) as lcoc_core.IHash$ext).$_hash$0(o7900$3, )) as dc.int);
}
switch(hash$3){
case 1249710686:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "copy", 1249710686, ), op$3, ))){
final dc.dynamic vec$9304_$1=args$3;
final dc.dynamic arr$3=(lcoc_core.nth.$_invoke$3(vec$9304_$1, 0, null, ));
final dc.dynamic from$3=(lcoc_core.nth.$_invoke$3(vec$9304_$1, 1, null, ));
final dc.dynamic to$5=(lcoc_core.nth.$_invoke$3(vec$9304_$1, 2, null, ));
final dc.dynamic arg$15=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "to__9281__auto__", )), ));
final dc.dynamic or$7573_$AUTO_$4=to$5;
late final dc.dynamic $if_$6;
if(((or$7573_$AUTO_$4!=false)&&(or$7573_$AUTO_$4!=null))){
$if_$6=or$7573_$AUTO_$4;
}else{
final dc.dynamic o7668$13=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "alength", )), )), (lcoc_core.list.$_invoke$1(arr$3, )), ));
if((o7668$13 is lcoc_core.ISeqable$iface)){
$if_$6=((o7668$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7668$13, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$13, ));
}
}
final dc.dynamic $23=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic arg$14=(lcoc_core.list.$_invoke$1(pos$1, ));
final dc.dynamic arg$13=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "loop", )), ));
final dc.dynamic arg$4=(lcoc_core.symbol.$_invoke$2(null, "i__9282__auto__", ));
final dc.dynamic o7668$14=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "tag", 2780644040, ), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("dart:core", "int", )), )), ));
late final dc.dynamic $if_$7;
if((o7668$14 is lcoc_core.ISeqable$iface)){
$if_$7=((o7668$14 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7668$14, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$14, ));
}
final dc.dynamic $6=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$7, ));
final dc.dynamic $7=lcoc_core.with_meta(arg$4, $6, );
final dc.dynamic $11=(lcoc_core.list.$_invoke$1($7, ));
final dc.dynamic arg$6=(lcoc_core.list.$_invoke$1(pos$1, ));
final dc.dynamic arg$5=(lcoc_core.symbol.$_invoke$2(null, "j__9283__auto__", ));
final dc.dynamic o7668$15=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "tag", 2780644040, ), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("dart:core", "int", )), )), ));
late final dc.dynamic $if_$8;
if((o7668$15 is lcoc_core.ISeqable$iface)){
$if_$8=((o7668$15 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7668$15, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$15, ));
}
final dc.dynamic $8=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$8, ));
final dc.dynamic $9=lcoc_core.with_meta(arg$5, $8, );
final dc.dynamic $10=(lcoc_core.list.$_invoke$1($9, ));
final dc.dynamic o7668$16=(lcoc_core.concat.$_invoke$4($11, arg$6, $10, (lcoc_core.list.$_invoke$1(from$3, )), ));
late final dc.dynamic $if_$9;
if((o7668$16 is lcoc_core.ISeqable$iface)){
$if_$9=((o7668$16 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7668$16, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$16, ));
}
final dc.dynamic $12=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$9, ));
final dc.dynamic $21=(lcoc_core.list.$_invoke$1($12, ));
final dc.dynamic arg$12=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7668$17=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "<", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "j__9283__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "to__9281__auto__", )), )), ));
late final dc.dynamic $if_$10;
if((o7668$17 is lcoc_core.ISeqable$iface)){
$if_$10=((o7668$17 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7668$17, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$17, ));
}
final dc.dynamic $19=(lcoc_core.list.$_invoke$1($if_$10, ));
final dc.dynamic arg$11=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), ));
final dc.dynamic arg$9=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "aset", )), ));
final dc.dynamic arg$8=(lcoc_core.list.$_invoke$1(dest$1, ));
final dc.dynamic arg$7=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__9282__auto__", )), ));
final dc.dynamic o7668$18=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "aget", )), )), (lcoc_core.list.$_invoke$1(arr$3, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "j__9283__auto__", )), )), ));
late final dc.dynamic $if_$11;
if((o7668$18 is lcoc_core.ISeqable$iface)){
$if_$11=((o7668$18 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7668$18, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$18, ));
}
final dc.dynamic $13=(lcoc_core.list.$_invoke$1($if_$11, ));
final dc.dynamic o7668$19=(lcoc_core.concat.$_invoke$4(arg$9, arg$8, arg$7, $13, ));
late final dc.dynamic $if_$12;
if((o7668$19 is lcoc_core.ISeqable$iface)){
$if_$12=((o7668$19 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$12=((lcoc_core.ISeqable.extensions(o7668$19, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$19, ));
}
final dc.dynamic $17=(lcoc_core.list.$_invoke$1($if_$12, ));
final dc.dynamic arg$10=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7668$20=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "inc", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__9282__auto__", )), )), ));
late final dc.dynamic $if_$13;
if((o7668$20 is lcoc_core.ISeqable$iface)){
$if_$13=((o7668$20 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$13=((lcoc_core.ISeqable.extensions(o7668$20, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$20, ));
}
final dc.dynamic $15=(lcoc_core.list.$_invoke$1($if_$13, ));
final dc.dynamic o7668$21=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "inc", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "j__9283__auto__", )), )), ));
late final dc.dynamic $if_$14;
if((o7668$21 is lcoc_core.ISeqable$iface)){
$if_$14=((o7668$21 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$14=((lcoc_core.ISeqable.extensions(o7668$21, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$21, ));
}
final dc.dynamic $14=(lcoc_core.list.$_invoke$1($if_$14, ));
final dc.dynamic o7668$22=(lcoc_core.concat.$_invoke$3(arg$10, $15, $14, ));
late final dc.dynamic $if_$15;
if((o7668$22 is lcoc_core.ISeqable$iface)){
$if_$15=((o7668$22 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$15=((lcoc_core.ISeqable.extensions(o7668$22, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$22, ));
}
final dc.dynamic $16=(lcoc_core.list.$_invoke$1($if_$15, ));
final dc.dynamic o7668$23=(lcoc_core.concat.$_invoke$3(arg$11, $17, $16, ));
late final dc.dynamic $if_$16;
if((o7668$23 is lcoc_core.ISeqable$iface)){
$if_$16=((o7668$23 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$16=((lcoc_core.ISeqable.extensions(o7668$23, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$23, ));
}
final dc.dynamic $18=(lcoc_core.list.$_invoke$1($if_$16, ));
final dc.dynamic o7668$24=(lcoc_core.concat.$_invoke$4(arg$12, $19, $18, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__9282__auto__", )), )), ));
late final dc.dynamic $if_$17;
if((o7668$24 is lcoc_core.ISeqable$iface)){
$if_$17=((o7668$24 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$17=((lcoc_core.ISeqable.extensions(o7668$24, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$24, ));
}
final dc.dynamic $20=(lcoc_core.list.$_invoke$1($if_$17, ));
final dc.dynamic o7668$25=(lcoc_core.concat.$_invoke$3(arg$13, $21, $20, ));
late final dc.dynamic $if_$18;
if((o7668$25 is lcoc_core.ISeqable$iface)){
$if_$18=((o7668$25 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$18=((lcoc_core.ISeqable.extensions(o7668$25, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$25, ));
}
final dc.dynamic $22=(lcoc_core.list.$_invoke$1($if_$18, ));
final dc.dynamic o7668$26=(lcoc_core.concat.$_invoke$4(arg$15, $23, arg$14, $22, ));
late final dc.dynamic $if_$19;
if((o7668$26 is lcoc_core.ISeqable$iface)){
$if_$19=((o7668$26 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$19=((lcoc_core.ISeqable.extensions(o7668$26, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$26, ));
}
return (lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$19, ));
}
continue _default;
case 1024620784:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "insert", 1024620784, ), op$3, ))){
return (lcoc_core.mapcat.$_invoke$2((dc.dynamic arg$16, ){
final dc.dynamic arg$18=(lcoc_core.list.$_invoke$1(pos$1, ));
final dc.dynamic arg$17=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), ));
final dc.dynamic o7668$27=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "aset", )), )), (lcoc_core.list.$_invoke$1(dest$1, )), (lcoc_core.list.$_invoke$1(pos$1, )), (lcoc_core.list.$_invoke$1(arg$16, )), ));
late final dc.dynamic $if_$20;
if((o7668$27 is lcoc_core.ISeqable$iface)){
$if_$20=((o7668$27 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$20=((lcoc_core.ISeqable.extensions(o7668$27, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$27, ));
}
final dc.dynamic $25=(lcoc_core.list.$_invoke$1($if_$20, ));
final dc.dynamic o7668$28=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "inc", )), )), (lcoc_core.list.$_invoke$1(pos$1, )), ));
late final dc.dynamic $if_$21;
if((o7668$28 is lcoc_core.ISeqable$iface)){
$if_$21=((o7668$28 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$21=((lcoc_core.ISeqable.extensions(o7668$28, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$28, ));
}
final dc.dynamic $24=(lcoc_core.list.$_invoke$1($if_$21, ));
final dc.dynamic o7668$29=(lcoc_core.concat.$_invoke$3(arg$17, $25, $24, ));
late final dc.dynamic $if_$22;
if((o7668$29 is lcoc_core.ISeqable$iface)){
$if_$22=((o7668$29 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$22=((lcoc_core.ISeqable.extensions(o7668$29, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$29, ));
}
final dc.dynamic $26=(lcoc_core.list.$_invoke$1($if_$22, ));
final dc.dynamic o7668$30=(lcoc_core.concat.$_invoke$2(arg$18, $26, ));
late final dc.dynamic $if_$23;
if((o7668$30 is lcoc_core.ISeqable$iface)){
$if_$23=((o7668$30 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$23=((lcoc_core.ISeqable.extensions(o7668$30, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$30, ));
}
return (lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$23, ));
}, args$3, ));
}
continue _default;
_default: default:
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("No matching clause: ", (lcoc_core.pr_str.$_invoke$1(op$3, )), )), );
}
}, specs$1, )), ));
late final dc.dynamic $if_$24;
if((o7668$31 is lcoc_core.ISeqable$iface)){
$if_$24=((o7668$31 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$24=((lcoc_core.ISeqable.extensions(o7668$31, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$31, ));
}
final dc.dynamic $29=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$24, ));
final dc.dynamic $30=(lcoc_core.list.$_invoke$1($29, ));
final dc.dynamic o7668$32=(lcoc_core.concat.$_invoke$3(arg$21, $30, (lcoc_core.list.$_invoke$1(dest$1, )), ));
if((o7668$32 is lcoc_core.ISeqable$iface)){
return ((o7668$32 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$32, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$32, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END new_arrayifn18695hm$1

// BEGIN newline
dc.dynamic newline(){
lcoc_core.$STAR_out$STAR_.writeln();
return null;
}

// END newline

// BEGIN next
dc.dynamic next(dc.dynamic coll$1, ){
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic coll7685$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
coll7685$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
coll7685$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((coll7685$1 is lcoc_core.ISeq$iface)){
return ((coll7685$1 as lcoc_core.ISeq$iface).$_next$0());
}
return ((lcoc_core.ISeq.extensions(coll7685$1, ) as lcoc_core.ISeq$ext).$_next$0(coll7685$1, ));
}

// END next

// BEGIN nfirst
dc.dynamic nfirst(dc.dynamic coll$1, ){
return lcoc_core.next(lcoc_core.first(coll$1, ), );
}

// END nfirst

// BEGIN nil?
dc.bool nil$QMARK_(dc.dynamic x$1, ){
return (null==x$1);
}

// END nil?

// BEGIN nnext
dc.dynamic nnext(dc.dynamic coll$1, ){
return lcoc_core.next(lcoc_core.next(coll$1, ), );
}

// END nnext

// BEGIN not
dc.bool not(dc.dynamic x$1, ){
if(((x$1!=false)&&(x$1!=null))){
return false;
}
return true;
}

// END not

// BEGIN not$EQ_ifn18695hm$1
class not$EQ_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

not$EQ_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.not$EQ_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic test$1=(lcoc_core.apply.$_invoke$4(lcoc_core.$EQ_, x$1, y$1, more$1, ));
if(((test$1!=false)&&(test$1!=null))){
return false;
}
return true;
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
return false;
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
if((lcoc_core.$EQ_.$_invoke$2(x$3, y$2, ))){
return false;
}
return true;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END not$EQ_ifn18695hm$1

// BEGIN not-any?
dc.dynamic not_any$QMARK_=(lcoc_core.comp.$_invoke$2(lcoc_core.not, lcoc_core.some, ));

// END not-any?

// BEGIN not-empty
dc.dynamic not_empty(dc.dynamic coll$1, ){
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((($if_$1!=false)&&($if_$1!=null))){
return coll$1;
}
return null;
}

// END not-empty

// BEGIN not-every?
dc.bool not_every$QMARK_(dc.dynamic pred$1, dc.dynamic coll$1, ){
if(lcoc_core.every$QMARK_(pred$1, coll$1, )){
return false;
}
return true;
}

// END not-every?

// BEGIN not=
lcoc_core.IFn$iface not$EQ_=lcoc_core.not$EQ_ifn18695hm$1(null, );

// END not=

// BEGIN nth
lcoc_core.IFn$iface nth=lcoc_core.nthifn18695hm$1(null, );

// END nth

// BEGIN nthifn18695hm$1
class nthifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

nthifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.nthifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$2(dc.dynamic coll$1, dc.dynamic n$1, ){
final dc.num n$2=(n$1 as dc.num);
final dc.dynamic coll7829$1=coll$1;
final dc.int n7830$1=(n$2.toInt());
if((coll7829$1 is lcoc_core.IIndexed$iface)){
return ((coll7829$1 as lcoc_core.IIndexed$iface).$_nth$1(n7830$1, ));
}
return ((lcoc_core.IIndexed.extensions(coll7829$1, ) as lcoc_core.IIndexed$ext).$_nth$1(coll7829$1, n7830$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic coll$2, dc.dynamic n$3, dc.dynamic not_found$1, ){
final dc.num n$4=(n$3 as dc.num);
final dc.dynamic coll7825$1=coll$2;
final dc.int n7826$1=(n$4.toInt());
final dc.dynamic not_found7827$1=not_found$1;
if((coll7825$1 is lcoc_core.IIndexed$iface)){
return ((coll7825$1 as lcoc_core.IIndexed$iface).$_nth$2(n7826$1, not_found7827$1, ));
}
return ((lcoc_core.IIndexed.extensions(coll7825$1, ) as lcoc_core.IIndexed$ext).$_nth$2(coll7825$1, n7826$1, not_found7827$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END nthifn18695hm$1

// BEGIN nthnext
dc.dynamic nthnext(dc.dynamic coll$1, dc.dynamic n$1, ){
dc.int n$2=(n$1 as dc.int);
final dc.dynamic o7668$1=coll$1;
dc.dynamic xs$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
xs$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
xs$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
do {
final dc.dynamic and$7533_$AUTO_$1=xs$1;
late final dc.dynamic $if_$1;
if(((and$7533_$AUTO_$1!=false)&&(and$7533_$AUTO_$1!=null))){
$if_$1=(0<n$2);
}else{
$if_$1=and$7533_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
n$2=(n$2-1);
xs$1=lcoc_core.next(xs$1, );
continue;
}
return xs$1;
} while(true);
}

// END nthnext

// BEGIN nthrest
dc.dynamic nthrest(dc.dynamic coll$1, dc.dynamic n$1, ){
dc.int n$2=(n$1 as dc.int);
dc.dynamic xs$1=coll$1;
do {
final dc.bool and$7533_$AUTO_$1=(0<n$2);
late final dc.dynamic temp$7555_$AUTO_$1;
if(and$7533_$AUTO_$1){
final dc.dynamic o7668$1=xs$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
temp$7555_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7555_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
}else{
temp$7555_$AUTO_$1=and$7533_$AUTO_$1;
}
if(((temp$7555_$AUTO_$1!=false)&&(temp$7555_$AUTO_$1!=null))){
final dc.dynamic xs$2=temp$7555_$AUTO_$1;
n$2=(n$2-1);
xs$1=lcoc_core.rest(xs$2, );
continue;
}
return xs$1;
} while(true);
}

// END nthrest

// BEGIN number?
dc.bool number$QMARK_(dc.dynamic x$1, ){
return (x$1 is dc.num);
}

// END number?

// BEGIN object-array
lcoc_core.IFn$iface object_array=lcoc_core.object_arrayifn18695hm$1(null, );

// END object-array

// BEGIN object_arrayifn18695hm$1
class object_arrayifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

object_arrayifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.object_arrayifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic size_or_seq$1, ){
if((size_or_seq$1 is dc.int)){
return (dc.List<dc.Object>.filled((size_or_seq$1 as dc.int), (dc.dynamic as dc.Object), ));
}
return (dc.List<dc.Object>.from((size_or_seq$1 as dc.Iterable<dc.dynamic>), growable: false, ));
}

dc.dynamic $_invoke$2(dc.dynamic size$1, dc.dynamic init_val_or_seq$1, ){
if(((lcoc_core.ISeq.satisfies(init_val_or_seq$1, )) as dc.bool)){
final dc.List<dc.Object> a$8174_$AUTO_$1=(dc.List<dc.Object>.filled((size$1 as dc.int), (dc.dynamic as dc.Object), ));
dc.dynamic i$8175_$AUTO_$1=0;
final dc.dynamic o7668$1=init_val_or_seq$1;
dc.dynamic s$8176_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
s$8176_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$8176_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
do {
final dc.dynamic and$7533_$AUTO_$1=s$8176_$AUTO_$1;
late final dc.dynamic $if_$1;
if(((and$7533_$AUTO_$1!=false)&&(and$7533_$AUTO_$1!=null))){
$if_$1=((i$8175_$AUTO_$1 as dc.num)<(size$1 as dc.num));
}else{
$if_$1=and$7533_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
final dc.dynamic v$8151_$AUTO_$1=lcoc_core.first(s$8176_$AUTO_$1, );
a$8174_$AUTO_$1[(i$8175_$AUTO_$1 as dc.int)]=(v$8151_$AUTO_$1 as dc.Object);
i$8175_$AUTO_$1=(1+(i$8175_$AUTO_$1 as dc.num));
s$8176_$AUTO_$1=lcoc_core.next(s$8176_$AUTO_$1, );
continue;
}
return a$8174_$AUTO_$1;
} while(true);
}
return (dc.List<dc.Object>.filled((size$1 as dc.int), (init_val_or_seq$1 as dc.Object), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END object_arrayifn18695hm$1

// BEGIN odd?
dc.bool odd$QMARK_(dc.dynamic num$1, ){
return (num$1 as dc.int).isOdd;
}

// END odd?

// BEGIN or
lcoc_core.IFn$iface or=lcoc_core.orifn18695hm$1(null, );

// END or

// BEGIN orifn18695hm$1
class orifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

orifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.orifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic x$1, dc.dynamic next$1, ){
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "or__8705__auto__", )), )), (lcoc_core.list.$_invoke$1(x$1, )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "or__8705__auto__", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "or__8705__auto__", )), ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), )), next$1, ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$4(arg$3, arg$2, arg$1, $2, ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3(arg$4, $4, $3, ));
if((o7668$4 is lcoc_core.ISeqable$iface)){
return ((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}

dc.dynamic $_invoke$2(dc.dynamic $AMPERSAND_form$2, dc.dynamic $AMPERSAND_env$2, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic $AMPERSAND_form$3, dc.dynamic $AMPERSAND_env$3, dc.dynamic x$2, ){
return x$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END orifn18695hm$1

// BEGIN partial
lcoc_core.IFn$iface partial=lcoc_core.partialifn18695hm$1(null, );

// END partial

// BEGIN partialReify18695hm$1
class partialReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final more$1;
final f$1;
final arg3$1;
final arg1$1;
final arg2$1;

partialReify18695hm$1(this.meta$1, this.more$1, this.f$1, this.arg3$1, this.arg1$1, this.arg2$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.partialReify18695hm$1(m$2395_$AUTO_$1, more$1, f$1, arg3$1, arg1$1, arg2$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic args$1, ){
return (lcoc_core.apply.$_invoke$5(f$1, arg1$1, arg2$1, arg3$1, (lcoc_core.concat.$_invoke$2(more$1, args$1, )), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END partialReify18695hm$1

// BEGIN partialReify18695hm$2
class partialReify18695hm$2 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;
final f$4;
final arg1$2;

partialReify18695hm$2(this.meta$2, this.f$4, this.arg1$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.partialReify18695hm$2(m$2395_$AUTO_$2, f$4, arg1$2, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic z$1, dc.dynamic args$2, ){
return (lcoc_core.apply.$_invoke$6(f$4, arg1$2, x$1, y$1, z$1, args$2, ));
}

dc.dynamic $_invoke$0(){
if((f$4 is dc.Function)){
return (f$4 as dc.Function)(arg1$2, );
}
if((f$4 is lcoc_core.IFn$iface)){
return ((f$4 as lcoc_core.IFn$iface).$_invoke$1(arg1$2, ));
}
return (lcoc_core.IFn.extensions(f$4, ).$_invoke$1(f$4, arg1$2, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
if((f$4 is dc.Function)){
return (f$4 as dc.Function)(arg1$2, x$2, );
}
if((f$4 is lcoc_core.IFn$iface)){
return ((f$4 as lcoc_core.IFn$iface).$_invoke$2(arg1$2, x$2, ));
}
return (lcoc_core.IFn.extensions(f$4, ).$_invoke$2(f$4, arg1$2, x$2, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
if((f$4 is dc.Function)){
return (f$4 as dc.Function)(arg1$2, x$3, y$2, );
}
if((f$4 is lcoc_core.IFn$iface)){
return ((f$4 as lcoc_core.IFn$iface).$_invoke$3(arg1$2, x$3, y$2, ));
}
return (lcoc_core.IFn.extensions(f$4, ).$_invoke$3(f$4, arg1$2, x$3, y$2, ));
}

dc.dynamic $_invoke$3(dc.dynamic x$4, dc.dynamic y$3, dc.dynamic z$2, ){
if((f$4 is dc.Function)){
return (f$4 as dc.Function)(arg1$2, x$4, y$3, z$2, );
}
if((f$4 is lcoc_core.IFn$iface)){
return ((f$4 as lcoc_core.IFn$iface).$_invoke$4(arg1$2, x$4, y$3, z$2, ));
}
return (lcoc_core.IFn.extensions(f$4, ).$_invoke$4(f$4, arg1$2, x$4, y$3, z$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END partialReify18695hm$2

// BEGIN partialReify18695hm$3
class partialReify18695hm$3 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$3;
final f$6;
final arg1$3;
final arg2$2;

partialReify18695hm$3(this.meta$3, this.f$6, this.arg1$3, this.arg2$2, ):super();

dc.dynamic $_meta$0(){
return meta$3;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$3, ){
return lcoc_core.partialReify18695hm$3(m$2395_$AUTO_$3, f$6, arg1$3, arg2$2, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$5, dc.dynamic y$4, dc.dynamic z$3, dc.dynamic args$3, ){
return (lcoc_core.apply.$_invoke$7(f$6, arg1$3, arg2$2, x$5, y$4, z$3, args$3, ));
}

dc.dynamic $_invoke$0(){
if((f$6 is dc.Function)){
return (f$6 as dc.Function)(arg1$3, arg2$2, );
}
if((f$6 is lcoc_core.IFn$iface)){
return ((f$6 as lcoc_core.IFn$iface).$_invoke$2(arg1$3, arg2$2, ));
}
return (lcoc_core.IFn.extensions(f$6, ).$_invoke$2(f$6, arg1$3, arg2$2, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$6, ){
if((f$6 is dc.Function)){
return (f$6 as dc.Function)(arg1$3, arg2$2, x$6, );
}
if((f$6 is lcoc_core.IFn$iface)){
return ((f$6 as lcoc_core.IFn$iface).$_invoke$3(arg1$3, arg2$2, x$6, ));
}
return (lcoc_core.IFn.extensions(f$6, ).$_invoke$3(f$6, arg1$3, arg2$2, x$6, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$7, dc.dynamic y$5, ){
if((f$6 is dc.Function)){
return (f$6 as dc.Function)(arg1$3, arg2$2, x$7, y$5, );
}
if((f$6 is lcoc_core.IFn$iface)){
return ((f$6 as lcoc_core.IFn$iface).$_invoke$4(arg1$3, arg2$2, x$7, y$5, ));
}
return (lcoc_core.IFn.extensions(f$6, ).$_invoke$4(f$6, arg1$3, arg2$2, x$7, y$5, ));
}

dc.dynamic $_invoke$3(dc.dynamic x$8, dc.dynamic y$6, dc.dynamic z$4, ){
if((f$6 is dc.Function)){
return (f$6 as dc.Function)(arg1$3, arg2$2, x$8, y$6, z$4, );
}
if((f$6 is lcoc_core.IFn$iface)){
return ((f$6 as lcoc_core.IFn$iface).$_invoke$5(arg1$3, arg2$2, x$8, y$6, z$4, ));
}
return (lcoc_core.IFn.extensions(f$6, ).$_invoke$5(f$6, arg1$3, arg2$2, x$8, y$6, z$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END partialReify18695hm$3

// BEGIN partialReify18695hm$4
class partialReify18695hm$4 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$4;
final arg3$2;
final f$8;
final arg2$3;
final arg1$4;

partialReify18695hm$4(this.meta$4, this.arg3$2, this.f$8, this.arg2$3, this.arg1$4, ):super();

dc.dynamic $_meta$0(){
return meta$4;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$4, ){
return lcoc_core.partialReify18695hm$4(m$2395_$AUTO_$4, arg3$2, f$8, arg2$3, arg1$4, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$9, dc.dynamic y$7, dc.dynamic z$5, dc.dynamic args$4, ){
return (lcoc_core.apply.$_invoke$8(f$8, arg1$4, arg2$3, arg3$2, x$9, y$7, z$5, args$4, ));
}

dc.dynamic $_invoke$0(){
if((f$8 is dc.Function)){
return (f$8 as dc.Function)(arg1$4, arg2$3, arg3$2, );
}
if((f$8 is lcoc_core.IFn$iface)){
return ((f$8 as lcoc_core.IFn$iface).$_invoke$3(arg1$4, arg2$3, arg3$2, ));
}
return (lcoc_core.IFn.extensions(f$8, ).$_invoke$3(f$8, arg1$4, arg2$3, arg3$2, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$10, ){
if((f$8 is dc.Function)){
return (f$8 as dc.Function)(arg1$4, arg2$3, arg3$2, x$10, );
}
if((f$8 is lcoc_core.IFn$iface)){
return ((f$8 as lcoc_core.IFn$iface).$_invoke$4(arg1$4, arg2$3, arg3$2, x$10, ));
}
return (lcoc_core.IFn.extensions(f$8, ).$_invoke$4(f$8, arg1$4, arg2$3, arg3$2, x$10, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$11, dc.dynamic y$8, ){
if((f$8 is dc.Function)){
return (f$8 as dc.Function)(arg1$4, arg2$3, arg3$2, x$11, y$8, );
}
if((f$8 is lcoc_core.IFn$iface)){
return ((f$8 as lcoc_core.IFn$iface).$_invoke$5(arg1$4, arg2$3, arg3$2, x$11, y$8, ));
}
return (lcoc_core.IFn.extensions(f$8, ).$_invoke$5(f$8, arg1$4, arg2$3, arg3$2, x$11, y$8, ));
}

dc.dynamic $_invoke$3(dc.dynamic x$12, dc.dynamic y$9, dc.dynamic z$6, ){
if((f$8 is dc.Function)){
return (f$8 as dc.Function)(arg1$4, arg2$3, arg3$2, x$12, y$9, z$6, );
}
if((f$8 is lcoc_core.IFn$iface)){
return ((f$8 as lcoc_core.IFn$iface).$_invoke$6(arg1$4, arg2$3, arg3$2, x$12, y$9, z$6, ));
}
return (lcoc_core.IFn.extensions(f$8, ).$_invoke$6(f$8, arg1$4, arg2$3, arg3$2, x$12, y$9, z$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END partialReify18695hm$4

// BEGIN partialifn18695hm$1
class partialifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$5;

partialifn18695hm$1(this.meta$5, ):super();

dc.dynamic $_meta$0(){
return meta$5;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$5, ){
return lcoc_core.partialifn18695hm$1(m$2395_$AUTO_$5, );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic more$1, ){
final lcoc_core.partialReify18695hm$1 f$2=lcoc_core.partialReify18695hm$1(null, more$1, f$1, arg3$1, arg1$1, arg2$1, );
return f$2;
}

dc.dynamic $_invoke$1(dc.dynamic f$3, ){
return f$3;
}

dc.dynamic $_invoke$2(dc.dynamic f$4, dc.dynamic arg1$2, ){
final lcoc_core.partialReify18695hm$2 f$5=lcoc_core.partialReify18695hm$2(null, f$4, arg1$2, );
return f$5;
}

dc.dynamic $_invoke$3(dc.dynamic f$6, dc.dynamic arg1$3, dc.dynamic arg2$2, ){
final lcoc_core.partialReify18695hm$3 f$7=lcoc_core.partialReify18695hm$3(null, f$6, arg1$3, arg2$2, );
return f$7;
}

dc.dynamic $_invoke$4(dc.dynamic f$8, dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$2, ){
final lcoc_core.partialReify18695hm$4 f$9=lcoc_core.partialReify18695hm$4(null, arg3$2, f$8, arg2$3, arg1$4, );
return f$9;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END partialifn18695hm$1

// BEGIN partition
lcoc_core.IFn$iface partition=lcoc_core.partitionifn18695hm$1(null, );

// END partition

// BEGIN partition-all
lcoc_core.IFn$iface partition_all=lcoc_core.partition_allifn18695hm$1(null, );

// END partition-all

// BEGIN partition-by
lcoc_core.IFn$iface partition_by=lcoc_core.partition_byifn18695hm$1(null, );

// END partition-by

// BEGIN partition_allReify18695hm$1
class partition_allReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final n$1;
final rf$1;
final dc.List<dc.dynamic> a$1;

partition_allReify18695hm$1(this.meta$1, this.n$1, this.rf$1, this.a$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.partition_allReify18695hm$1(m$2395_$AUTO_$1, n$1, rf$1, a$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
late final dc.dynamic result$2;
if(a$1.isEmpty){
result$2=result$1;
}else{
final lcoc_core.PersistentVector v$1=lcoc_core.vec(a$1, );
a$1.clear();
late final dc.dynamic $if_$1;
if((rf$1 is dc.Function)){
$if_$1=(rf$1 as dc.Function)(result$1, v$1, );
}else if((rf$1 is lcoc_core.IFn$iface)){
$if_$1=((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$1, v$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$1, v$1, ));
}
result$2=lcoc_core.unreduced($if_$1, );
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$2, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$2, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$3, dc.dynamic input$1, ){
a$1.add(input$1, );
if((n$1==a$1.length)){
final lcoc_core.PersistentVector v$2=lcoc_core.vec(a$1, );
a$1.clear();
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$3, v$2, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$3, v$2, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$3, v$2, ));
}
return result$3;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END partition_allReify18695hm$1

// BEGIN partition_allifn18695hm$1
class partition_allifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

partition_allifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.partition_allifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$1(dc.dynamic n$1, ){
return (dc.dynamic rf$1, ){
final dc.List<dc.dynamic> a$1=<dc.dynamic>[];
final lcoc_core.partition_allReify18695hm$1 f$1=lcoc_core.partition_allReify18695hm$1(null, n$1, rf$1, a$1, );
return f$1;
};
}

dc.dynamic $_invoke$2(dc.dynamic n$2, dc.dynamic coll$1, ){
return (lcoc_core.partition_all.$_invoke$3(n$2, n$2, coll$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic n$3, dc.dynamic step$1, dc.dynamic coll$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$1=coll$2;
late final dc.dynamic temp$7560_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
temp$7560_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7560_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if(((temp$7560_$AUTO_$1!=false)&&(temp$7560_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7560_$AUTO_$1;
final dc.dynamic seg$1=(lcoc_core.doall.$_invoke$1((lcoc_core.take.$_invoke$2(n$3, s$1, )), ));
return lcoc_core.cons(seg$1, (lcoc_core.partition_all.$_invoke$3(n$3, step$1, lcoc_core.nthrest(s$1, step$1, ), )), );
}
return null;
} as dc.dynamic?), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END partition_allifn18695hm$1

// BEGIN partition_byReify18695hm$1
class partition_byReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final lcoc_core.Volatile pv$1;
final dc.List<dc.dynamic> a$1;
final f$1;

partition_byReify18695hm$1(this.meta$1, this.rf$1, this.pv$1, this.a$1, this.f$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.partition_byReify18695hm$1(m$2395_$AUTO_$1, rf$1, pv$1, a$1, f$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
late final dc.dynamic result$2;
if(a$1.isEmpty){
result$2=result$1;
}else{
final lcoc_core.PersistentVector v$1=lcoc_core.vec(a$1, );
a$1.clear();
late final dc.dynamic $if_$1;
if((rf$1 is dc.Function)){
$if_$1=(rf$1 as dc.Function)(result$1, v$1, );
}else if((rf$1 is lcoc_core.IFn$iface)){
$if_$1=((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$1, v$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$1, v$1, ));
}
result$2=lcoc_core.unreduced($if_$1, );
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$2, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$2, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$3, dc.dynamic input$1, ){
final dc.dynamic pval$1=lcoc_core.deref(pv$1, );
late final dc.dynamic val$1;
if((f$1 is dc.Function)){
val$1=(f$1 as dc.Function)(input$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
val$1=((f$1 as lcoc_core.IFn$iface).$_invoke$1(input$1, ));
}else{
val$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$1(f$1, input$1, ));
}
lcoc_core.vreset$BANG_(pv$1, val$1, );
final dc.bool or$7573_$AUTO_$1=dc.identical(pval$1, "none", );
late final dc.bool $if_$2;
if(or$7573_$AUTO_$1){
$if_$2=or$7573_$AUTO_$1;
}else{
$if_$2=(lcoc_core.$EQ_.$_invoke$2(val$1, pval$1, ));
}
if($if_$2){
a$1.add(input$1, );
return result$3;
}
final lcoc_core.PersistentVector v$2=lcoc_core.vec(a$1, );
a$1.clear();
late final dc.dynamic ret$1;
if((rf$1 is dc.Function)){
ret$1=(rf$1 as dc.Function)(result$3, v$2, );
}else if((rf$1 is lcoc_core.IFn$iface)){
ret$1=((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$3, v$2, ));
}else{
ret$1=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$3, v$2, ));
}
if(lcoc_core.reduced$QMARK_(ret$1, )){
}else{
a$1.add(input$1, );
}
return ret$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END partition_byReify18695hm$1

// BEGIN partition_byifn18695hm$1
class partition_byifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

partition_byifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.partition_byifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$1(dc.dynamic f$1, ){
return (dc.dynamic rf$1, ){
final dc.List<dc.dynamic> a$1=<dc.dynamic>[];
final lcoc_core.Volatile pv$1=lcoc_core.volatile$BANG_("none", );
final lcoc_core.partition_byReify18695hm$1 f$2=lcoc_core.partition_byReify18695hm$1(null, rf$1, pv$1, a$1, f$1, );
return f$2;
};
}

dc.dynamic $_invoke$2(dc.dynamic f$3, dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic temp$7560_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
temp$7560_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7560_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if(((temp$7560_$AUTO_$1!=false)&&(temp$7560_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7560_$AUTO_$1;
final dc.dynamic fst$1=lcoc_core.first(s$1, );
late final dc.dynamic fv$1;
if((f$3 is dc.Function)){
fv$1=(f$3 as dc.Function)(fst$1, );
}else if((f$3 is lcoc_core.IFn$iface)){
fv$1=((f$3 as lcoc_core.IFn$iface).$_invoke$1(fst$1, ));
}else{
fv$1=(lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, fst$1, ));
}
final dc.dynamic run$1=lcoc_core.cons(fst$1, (lcoc_core.take_while.$_invoke$2((dc.dynamic p1$9112_$SHARP_$1, ){
late final dc.dynamic $if_$3;
if((f$3 is dc.Function)){
$if_$3=(f$3 as dc.Function)(p1$9112_$SHARP_$1, );
}else if((f$3 is lcoc_core.IFn$iface)){
$if_$3=((f$3 as lcoc_core.IFn$iface).$_invoke$1(p1$9112_$SHARP_$1, ));
}else{
$if_$3=(lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, p1$9112_$SHARP_$1, ));
}
return (lcoc_core.$EQ_.$_invoke$2(fv$1, $if_$3, ));
}, lcoc_core.next(s$1, ), )), );
return lcoc_core.cons(run$1, (lcoc_core.partition_by.$_invoke$2(f$3, lcoc_core.LazySeq(null, ((){
final dc.dynamic coll7742$1=run$1;
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
return (lcoc_core.drop.$_invoke$2(cast$1, s$1, ));
} as dc.dynamic?), null, -1, ), )), );
}
return null;
} as dc.dynamic?), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END partition_byifn18695hm$1

// BEGIN partitionifn18695hm$1
class partitionifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

partitionifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.partitionifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$2(dc.dynamic n$1, dc.dynamic coll$1, ){
return (lcoc_core.partition.$_invoke$3(n$1, n$1, coll$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic n$2, dc.dynamic step$1, dc.dynamic coll$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$1=coll$2;
late final dc.dynamic temp$7560_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
temp$7560_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7560_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if(((temp$7560_$AUTO_$1!=false)&&(temp$7560_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7560_$AUTO_$1;
final dc.dynamic p$1=(lcoc_core.doall.$_invoke$1((lcoc_core.take.$_invoke$2(n$2, s$1, )), ));
final dc.dynamic coll7742$1=p$1;
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final dc.bool $1=(n$2==cast$1);
if($1){
return lcoc_core.cons(p$1, (lcoc_core.partition.$_invoke$3(n$2, step$1, lcoc_core.nthrest(s$1, step$1, ), )), );
}
return null;
}
return null;
} as dc.dynamic?), null, -1, );
}

dc.dynamic $_invoke$4(dc.dynamic n$3, dc.dynamic step$2, dc.dynamic pad$1, dc.dynamic coll$3, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$2=coll$3;
late final dc.dynamic temp$7560_$AUTO_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
temp$7560_$AUTO_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7560_$AUTO_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
if(((temp$7560_$AUTO_$2!=false)&&(temp$7560_$AUTO_$2!=null))){
final dc.dynamic s$2=temp$7560_$AUTO_$2;
final dc.dynamic p$2=(lcoc_core.doall.$_invoke$1((lcoc_core.take.$_invoke$2(n$3, s$2, )), ));
final dc.dynamic coll7742$2=p$2;
late final dc.int cast$2;
if((coll7742$2 is lcoc_core.ICounted$iface)){
cast$2=(((coll7742$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$2=(((lcoc_core.ICounted.extensions(coll7742$2, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$2, )) as dc.int);
}
final dc.bool $2=(n$3==cast$2);
if($2){
return lcoc_core.cons(p$2, (lcoc_core.partition.$_invoke$4(n$3, step$2, pad$1, lcoc_core.nthrest(s$2, step$2, ), )), );
}
return (lcoc_core.list.$_invoke$1((lcoc_core.take.$_invoke$2(n$3, (lcoc_core.concat.$_invoke$2(p$2, pad$1, )), )), ));
}
return null;
} as dc.dynamic?), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END partitionifn18695hm$1

// BEGIN peek
dc.dynamic peek(dc.dynamic coll$1, ){
final dc.dynamic coll7849$1=coll$1;
if((coll7849$1 is lcoc_core.IStack$iface)){
return ((coll7849$1 as lcoc_core.IStack$iface).$_peek$0());
}
return ((lcoc_core.IStack.extensions(coll7849$1, ) as lcoc_core.IStack$ext).$_peek$0(coll7849$1, ));
}

// END peek

// BEGIN persistent!
dc.dynamic persistent$BANG_(dc.dynamic coll$1, ){
final dc.dynamic tcoll7939$1=coll$1;
if((tcoll7939$1 is lcoc_core.ITransientCollection$iface)){
return ((tcoll7939$1 as lcoc_core.ITransientCollection$iface).$_persistent$BANG_$0());
}
return ((lcoc_core.ITransientCollection.extensions(tcoll7939$1, ) as lcoc_core.ITransientCollection$ext).$_persistent$BANG_$0(tcoll7939$1, ));
}

// END persistent!

// BEGIN pop
dc.dynamic pop(dc.dynamic coll$1, ){
final dc.dynamic coll7854$1=coll$1;
if((coll7854$1 is lcoc_core.IStack$iface)){
return ((coll7854$1 as lcoc_core.IStack$iface).$_pop$0());
}
return ((lcoc_core.IStack.extensions(coll7854$1, ) as lcoc_core.IStack$ext).$_pop$0(coll7854$1, ));
}

// END pop

// BEGIN pop!
dc.dynamic pop$BANG_(dc.dynamic coll$1, ){
final dc.dynamic tcoll7814$1=coll$1;
if((tcoll7814$1 is lcoc_core.ITransientVector$iface)){
return ((tcoll7814$1 as lcoc_core.ITransientVector$iface).$_pop$BANG_$0());
}
return ((lcoc_core.ITransientVector.extensions(tcoll7814$1, ) as lcoc_core.ITransientVector$ext).$_pop$BANG_$0(tcoll7814$1, ));
}

// END pop!

// BEGIN pop-tail
dc.dynamic pop_tail(dc.dynamic pv$1, dc.dynamic level$1, dc.dynamic node$1, ){
final dc.int n$1=((pv$1 as lcoc_core.PersistentVector).cnt-2);
final dc.int subidx$1=((n$1>>(31&(level$1 as dc.int)))&31);
if((5<(level$1 as dc.int))){
final dc.dynamic some$7546_$AUTO_$1=lcoc_core.pop_tail((pv$1 as lcoc_core.PersistentVector), ((level$1 as dc.int)-5), ((node$1 as lcoc_core.VectorNode).arr[subidx$1]), );
if((null==some$7546_$AUTO_$1)){
if((0<subidx$1)){
return lcoc_core.VectorNode(null, lcoc_core.ashrink((node$1 as lcoc_core.VectorNode).arr, subidx$1, ), );
}
return null;
}
final dc.dynamic new_child$1=some$7546_$AUTO_$1;
return lcoc_core.VectorNode(null, lcoc_core.aresize((node$1 as lcoc_core.VectorNode).arr, subidx$1, (1+subidx$1), new_child$1, ), );
}
if((0<subidx$1)){
return lcoc_core.VectorNode(null, lcoc_core.ashrink((node$1 as lcoc_core.VectorNode).arr, subidx$1, ), );
}
return null;
}

// END pop-tail

// BEGIN pos-int?
dc.bool pos_int$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7533_$AUTO_$1=(x$1 is dc.int);
if(and$7533_$AUTO_$1){
return (0<(x$1 as dc.num));
}
return and$7533_$AUTO_$1;
}

// END pos-int?

// BEGIN pos?
dc.bool pos$QMARK_(dc.dynamic n$1, ){
return (0<(n$1 as dc.num));
}

// END pos?

// BEGIN pr
lcoc_core.IFn$iface pr=lcoc_core.prifn18695hm$1(null, );

// END pr

// BEGIN pr-str
lcoc_core.IFn$iface pr_str=lcoc_core.pr_strifn18695hm$1(null, );

// END pr-str

// BEGIN pr_strifn18695hm$1
class pr_strifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

pr_strifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.pr_strifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic xs$1, ){
final dc.StringBuffer s$8453_$AUTO_$1=dc.StringBuffer();
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2("cljd.core", "*out*", )), ));
fl$1[1]=s$8453_$AUTO_$1;
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$1, );
final dc.dynamic prev_bindings$8437_$AUTO_$1=lcoc_core.push_dynamic_bindings($1, );
try {
lcoc_core.apply.$_invoke$2(lcoc_core.pr, xs$1, );
return (s$8453_$AUTO_$1.toString());
} finally {
lcoc_core.restore_dynamic_bindings(prev_bindings$8437_$AUTO_$1, );
}
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END pr_strifn18695hm$1

// BEGIN preserving-reduced
dc.dynamic preserving_reduced(dc.dynamic rf$1, ){
return (dc.dynamic p1$9090_$SHARP_$1, dc.dynamic p2$9091_$SHARP_$1, ){
late final dc.dynamic ret$1;
if((rf$1 is dc.Function)){
ret$1=(rf$1 as dc.Function)(p1$9090_$SHARP_$1, p2$9091_$SHARP_$1, );
}else if((rf$1 is lcoc_core.IFn$iface)){
ret$1=((rf$1 as lcoc_core.IFn$iface).$_invoke$2(p1$9090_$SHARP_$1, p2$9091_$SHARP_$1, ));
}else{
ret$1=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, p1$9090_$SHARP_$1, p2$9091_$SHARP_$1, ));
}
if(lcoc_core.reduced$QMARK_(ret$1, )){
return lcoc_core.reduced(ret$1, );
}
return ret$1;
};
}

// END preserving-reduced

// BEGIN prifn18695hm$1
class prifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

prifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.prifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$3, dc.dynamic more$3, ){
dc.dynamic x$1=x$3;
dc.dynamic more$1=more$3;
do {
final dc.dynamic o7635$1=x$1;
final dc.StringSink string_sink7636$1=lcoc_core.$STAR_out$STAR_;
if((o7635$1 is lcoc_core.IPrint$iface)){
(o7635$1 as lcoc_core.IPrint$iface).$_print$1(string_sink7636$1, );
}else{
(lcoc_core.IPrint.extensions(o7635$1, ) as lcoc_core.IPrint$ext).$_print$1(o7635$1, string_sink7636$1, );
}
final dc.dynamic o7668$13=more$1;
late final dc.dynamic some$7546_$AUTO_$1;
if((o7668$13 is lcoc_core.ISeqable$iface)){
some$7546_$AUTO_$1=((o7668$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
some$7546_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$13, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$13, ));
}
if((null==some$7546_$AUTO_$1)){
return null;
}
final dc.dynamic vec$9190_$1=some$7546_$AUTO_$1;
final dc.dynamic o7668$14=vec$9190_$1;
late final dc.dynamic seq$9191_$1;
if((o7668$14 is lcoc_core.ISeqable$iface)){
seq$9191_$1=((o7668$14 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9191_$1=((lcoc_core.ISeqable.extensions(o7668$14, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$14, ));
}
final dc.dynamic first$9192_$1=lcoc_core.first(seq$9191_$1, );
final dc.dynamic seq$9191_$2=lcoc_core.next(seq$9191_$1, );
final dc.dynamic x$2=first$9192_$1;
final dc.dynamic more$2=seq$9191_$2;
lcoc_core.$STAR_out$STAR_.write(" ", );
x$1=x$2;
more$1=more$2;
continue;
} while(true);
}

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END prifn18695hm$1

// BEGIN print
lcoc_core.IFn$iface print=lcoc_core.printifn18695hm$1(null, );

// END print

// BEGIN print-map
dc.dynamic print_map(dc.dynamic m$1, dc.dynamic sink$1, ){
(sink$1 as dc.StringSink).write("{", );
if(((lcoc_core.IKVReduce.satisfies(m$1, )) as dc.bool)){
lcoc_core.reduce_kv((dc.dynamic need_sep$1, dc.dynamic k$1, dc.dynamic v$1, ){
if(((need_sep$1!=false)&&(need_sep$1!=null))){
(sink$1 as dc.StringSink).write(", ", );
}else{
}
final dc.dynamic o7635$1=k$1;
final dc.StringSink string_sink7636$1=(sink$1 as dc.StringSink);
if((o7635$1 is lcoc_core.IPrint$iface)){
(o7635$1 as lcoc_core.IPrint$iface).$_print$1(string_sink7636$1, );
}else{
(lcoc_core.IPrint.extensions(o7635$1, ) as lcoc_core.IPrint$ext).$_print$1(o7635$1, string_sink7636$1, );
}
(sink$1 as dc.StringSink).write(" ", );
final dc.dynamic o7635$2=v$1;
final dc.StringSink string_sink7636$2=(sink$1 as dc.StringSink);
if((o7635$2 is lcoc_core.IPrint$iface)){
(o7635$2 as lcoc_core.IPrint$iface).$_print$1(string_sink7636$2, );
}else{
(lcoc_core.IPrint.extensions(o7635$2, ) as lcoc_core.IPrint$ext).$_print$1(o7635$2, string_sink7636$2, );
}
return true;
}, false, m$1, );
}else{
final dc.dynamic coll7722$1=m$1;
dc.bool f7723$1(dc.dynamic need_sep$2, dc.dynamic p$8976_$1, ){
final dc.dynamic vec$8977_$1=p$8976_$1;
final dc.dynamic k$2=(lcoc_core.nth.$_invoke$3(vec$8977_$1, 0, null, ));
final dc.dynamic v$2=(lcoc_core.nth.$_invoke$3(vec$8977_$1, 1, null, ));
if(((need_sep$2!=false)&&(need_sep$2!=null))){
(sink$1 as dc.StringSink).write(", ", );
}else{
}
final dc.dynamic o7635$3=k$2;
final dc.StringSink string_sink7636$3=(sink$1 as dc.StringSink);
if((o7635$3 is lcoc_core.IPrint$iface)){
(o7635$3 as lcoc_core.IPrint$iface).$_print$1(string_sink7636$3, );
}else{
(lcoc_core.IPrint.extensions(o7635$3, ) as lcoc_core.IPrint$ext).$_print$1(o7635$3, string_sink7636$3, );
}
(sink$1 as dc.StringSink).write(" ", );
final dc.dynamic o7635$4=v$2;
final dc.StringSink string_sink7636$4=(sink$1 as dc.StringSink);
if((o7635$4 is lcoc_core.IPrint$iface)){
(o7635$4 as lcoc_core.IPrint$iface).$_print$1(string_sink7636$4, );
}else{
(lcoc_core.IPrint.extensions(o7635$4, ) as lcoc_core.IPrint$ext).$_print$1(o7635$4, string_sink7636$4, );
}
return true;
}
if((coll7722$1 is lcoc_core.IReduce$iface)){
(coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, false, );
}else{
(lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, false, );
}
}
return ((sink$1 as dc.StringSink).write("}", ));
}

// END print-map

// BEGIN print-sequential
dc.dynamic print_sequential(dc.dynamic begin$1, dc.dynamic end$1, dc.dynamic sequence$1, dc.dynamic sink$1, ){
(sink$1 as dc.StringSink).write((begin$1 as dc.String), );
final dc.dynamic coll7722$1=sequence$1;
dc.bool f7723$1(dc.dynamic need_sep$1, dc.dynamic x$1, ){
if(((need_sep$1!=false)&&(need_sep$1!=null))){
(sink$1 as dc.StringSink).write(" ", );
}else{
}
final dc.dynamic o7635$1=x$1;
final dc.StringSink string_sink7636$1=(sink$1 as dc.StringSink);
if((o7635$1 is lcoc_core.IPrint$iface)){
(o7635$1 as lcoc_core.IPrint$iface).$_print$1(string_sink7636$1, );
}else{
(lcoc_core.IPrint.extensions(o7635$1, ) as lcoc_core.IPrint$ext).$_print$1(o7635$1, string_sink7636$1, );
}
return true;
}
if((coll7722$1 is lcoc_core.IReduce$iface)){
(coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, false, );
}else{
(lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, false, );
}
return ((sink$1 as dc.StringSink).write((end$1 as dc.String), ));
}

// END print-sequential

// BEGIN printifn18695hm$1
class printifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

printifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.printifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic more$1, ){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2("cljd.core", "*print-readably*", )), ));
fl$1[1]=null;
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$1, );
final dc.dynamic prev_bindings$8437_$AUTO_$1=lcoc_core.push_dynamic_bindings($1, );
try {
return (lcoc_core.apply.$_invoke$2(lcoc_core.pr, more$1, ));
} finally {
lcoc_core.restore_dynamic_bindings(prev_bindings$8437_$AUTO_$1, );
}
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END printifn18695hm$1

// BEGIN println
lcoc_core.IFn$iface println=lcoc_core.printlnifn18695hm$1(null, );

// END println

// BEGIN printlnifn18695hm$1
class printlnifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

printlnifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.printlnifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic more$1, ){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2("cljd.core", "*print-readably*", )), ));
fl$1[1]=null;
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$1, );
final dc.dynamic prev_bindings$8437_$AUTO_$1=lcoc_core.push_dynamic_bindings($1, );
try {
return (lcoc_core.apply.$_invoke$2(lcoc_core.prn, more$1, ));
} finally {
lcoc_core.restore_dynamic_bindings(prev_bindings$8437_$AUTO_$1, );
}
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END printlnifn18695hm$1

// BEGIN prn
lcoc_core.IFn$iface prn=lcoc_core.prnifn18695hm$1(null, );

// END prn

// BEGIN prn-str
lcoc_core.IFn$iface prn_str=lcoc_core.prn_strifn18695hm$1(null, );

// END prn-str

// BEGIN prn_strifn18695hm$1
class prn_strifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

prn_strifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.prn_strifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic xs$1, ){
final dc.StringBuffer s$8453_$AUTO_$1=dc.StringBuffer();
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2("cljd.core", "*out*", )), ));
fl$1[1]=s$8453_$AUTO_$1;
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$1, );
final dc.dynamic prev_bindings$8437_$AUTO_$1=lcoc_core.push_dynamic_bindings($1, );
try {
lcoc_core.apply.$_invoke$2(lcoc_core.prn, xs$1, );
return (s$8453_$AUTO_$1.toString());
} finally {
lcoc_core.restore_dynamic_bindings(prev_bindings$8437_$AUTO_$1, );
}
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END prn_strifn18695hm$1

// BEGIN prnifn18695hm$1
class prnifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

prnifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.prnifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic more$1, ){
lcoc_core.apply.$_invoke$2(lcoc_core.pr, more$1, );
return lcoc_core.newline();
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END prnifn18695hm$1

// BEGIN push-dynamic-bindings
dc.dynamic push_dynamic_bindings(dc.dynamic bindings$1, ){
final dc.dynamic old$1=lcoc_core.$_DYNAMIC_BINDINGS;
lcoc_core.$_DYNAMIC_BINDINGS=(lcoc_core.into.$_invoke$3(old$1, (lcoc_core.map.$_invoke$1((dc.dynamic p$9175_$1, ){
final dc.dynamic vec$9176_$1=p$9175_$1;
final dc.dynamic k$1=(lcoc_core.nth.$_invoke$3(vec$9176_$1, 0, null, ));
final dc.dynamic v$1=(lcoc_core.nth.$_invoke$3(vec$9176_$1, 1, null, ));
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, k$1, ));
fl$1[1]=lcoc_core.volatile$BANG_(v$1, );
return lcoc_core.$_vec_owning(fl$1, );
}, )), bindings$1, ));
return old$1;
}

// END push-dynamic-bindings

// BEGIN push-tail
lcoc_core.VectorNode push_tail(dc.dynamic pv$1, dc.dynamic level$1, dc.dynamic parent$1, dc.dynamic tailnode$1, ){
final dc.int subidx$1=((((pv$1 as lcoc_core.PersistentVector).cnt-1)>>(31&(level$1 as dc.int)))&31);
final dc.List arr_parent$1=(parent$1 as lcoc_core.VectorNode).arr;
final dc.int level$2=((level$1 as dc.int)-5);
late final lcoc_core.VectorNode new_node$1;
if((0==level$2)){
new_node$1=(tailnode$1 as lcoc_core.VectorNode);
}else if((subidx$1<arr_parent$1.length)){
final dc.dynamic some$7546_$AUTO_$1=(arr_parent$1[subidx$1]);
if((null==some$7546_$AUTO_$1)){
new_node$1=lcoc_core.new_path(level$2, (tailnode$1 as lcoc_core.VectorNode), );
}else{
final dc.dynamic child$1=some$7546_$AUTO_$1;
new_node$1=lcoc_core.push_tail((pv$1 as lcoc_core.PersistentVector), level$2, child$1, (tailnode$1 as lcoc_core.VectorNode), );
}
}else{
new_node$1=lcoc_core.new_path(level$2, (tailnode$1 as lcoc_core.VectorNode), );
}
return lcoc_core.VectorNode(null, lcoc_core.aresize(arr_parent$1, subidx$1, (1+subidx$1), new_node$1, ), );
}

// END push-tail

// BEGIN pv-kv-reduce
dc.dynamic pv_kv_reduce(dc.dynamic pv$1, dc.dynamic f$1, dc.dynamic from$1, dc.dynamic to$1, dc.dynamic init$1, ){
if(((from$1 as dc.int)<(to$1 as dc.int))){
final dc.int tail_off$1=(((pv$1 as lcoc_core.PersistentVector).cnt-1)&(~31));
final lcoc_core.VectorNode root$1=(pv$1 as lcoc_core.PersistentVector).root;
final dc.int shift$1=(pv$1 as lcoc_core.PersistentVector).shift;
final dc.List tail$1=(pv$1 as lcoc_core.PersistentVector).tail;
dc.dynamic acc$1=init$1;
dc.int i$1=(from$1 as dc.int);
dc.dynamic arr$1;
if((0==tail_off$1)){
arr$1=tail$1;
}else{
arr$1=lcoc_core.unchecked_array_for(root$1, shift$1, i$1, );
}
do {
if((i$1<(to$1 as dc.int))){
final dc.dynamic arg$1=((arr$1 as dc.List)[(i$1&31)]);
late final dc.dynamic val$1;
if((f$1 is dc.Function)){
val$1=(f$1 as dc.Function)(acc$1, i$1, arg$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
val$1=((f$1 as lcoc_core.IFn$iface).$_invoke$3(acc$1, i$1, arg$1, ));
}else{
val$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$3(f$1, acc$1, i$1, arg$1, ));
}
final dc.int i$PRIME_$1=(1+i$1);
if(lcoc_core.reduced$QMARK_(val$1, )){
return lcoc_core.deref(val$1, );
}
acc$1=val$1;
i$1=i$PRIME_$1;
if((0<(i$PRIME_$1&31))){
arr$1=arr$1;
}else if((tail_off$1==i$PRIME_$1)){
arr$1=tail$1;
}else if((i$PRIME_$1<(to$1 as dc.int))){
arr$1=lcoc_core.unchecked_array_for(root$1, shift$1, i$PRIME_$1, );
}else{
arr$1=null;
}
continue;
}
return acc$1;
} while(true);
}
return init$1;
}

// END pv-kv-reduce

// BEGIN pv-reduce
lcoc_core.IFn$iface pv_reduce=lcoc_core.pv_reduceifn18695hm$1(null, );

// END pv-reduce

// BEGIN pv_reduceifn18695hm$1
class pv_reduceifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

pv_reduceifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.pv_reduceifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$3(dc.dynamic pv$1, dc.dynamic f$1, dc.dynamic from$1, ){
final lcoc_core.PersistentVector pv$2=(pv$1 as lcoc_core.PersistentVector);
final dc.int from$2=(from$1 as dc.int);
final dc.int cnt$1=pv$2.cnt;
final dc.List tail$1=pv$2.tail;
final lcoc_core.VectorNode root$1=pv$2.root;
final dc.int shift$1=pv$2.shift;
if((cnt$1<=from$2)){
if((f$1 is dc.Function)){
return (f$1 as dc.Function)();
}
if((f$1 is lcoc_core.IFn$iface)){
return ((f$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(f$1, ).$_invoke$0(f$1, ));
}
final dc.int tail_off$1=((cnt$1-1)&(~31));
late final dc.List arr$1;
if((tail_off$1<=from$2)){
arr$1=tail$1;
}else{
arr$1=lcoc_core.unchecked_array_for(root$1, shift$1, from$2, );
}
return (lcoc_core.pv_reduce.$_invoke$4(pv$2, f$1, (1+from$2), (arr$1[(from$2&31)]), ));
}

dc.dynamic $_invoke$4(dc.dynamic pv$3, dc.dynamic f$2, dc.dynamic from$3, dc.dynamic init$1, ){
final lcoc_core.PersistentVector pv$4=(pv$3 as lcoc_core.PersistentVector);
final dc.int from$4=(from$3 as dc.int);
return (lcoc_core.pv_reduce.$_invoke$5(pv$4, f$2, from$4, pv$4.cnt, init$1, ));
}

dc.dynamic $_invoke$5(dc.dynamic pv$5, dc.dynamic f$3, dc.dynamic from$5, dc.dynamic to$1, dc.dynamic init$2, ){
final lcoc_core.PersistentVector pv$6=(pv$5 as lcoc_core.PersistentVector);
final dc.int from$6=(from$5 as dc.int);
final dc.int to$2=(to$1 as dc.int);
final dc.List tail$2=pv$6.tail;
final lcoc_core.VectorNode root$2=pv$6.root;
final dc.int shift$2=pv$6.shift;
if((to$2<=from$6)){
return init$2;
}
final dc.int tail_off$2=((pv$6.cnt-1)&(~31));
dc.dynamic acc$1=init$2;
dc.int i$1=from$6;
dc.dynamic arr$2;
if((tail_off$2<=from$6)){
arr$2=tail$2;
}else{
arr$2=lcoc_core.unchecked_array_for(root$2, shift$2, from$6, );
}
do {
final dc.dynamic arg$1=((arr$2 as dc.List)[(i$1&31)]);
late final dc.dynamic acc$2;
if((f$3 is dc.Function)){
acc$2=(f$3 as dc.Function)(acc$1, arg$1, );
}else if((f$3 is lcoc_core.IFn$iface)){
acc$2=((f$3 as lcoc_core.IFn$iface).$_invoke$2(acc$1, arg$1, ));
}else{
acc$2=(lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, acc$1, arg$1, ));
}
final dc.int i$PRIME_$1=(1+i$1);
if(lcoc_core.reduced$QMARK_(acc$2, )){
return lcoc_core.deref(acc$2, );
}
if((i$PRIME_$1<to$2)){
acc$1=acc$2;
i$1=i$PRIME_$1;
if((0<(i$PRIME_$1&31))){
arr$2=arr$2;
}else if((tail_off$2==i$PRIME_$1)){
arr$2=tail$2;
}else{
arr$2=lcoc_core.unchecked_array_for(root$2, shift$2, i$PRIME_$1, );
}
continue;
}
return acc$2;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END pv_reduceifn18695hm$1

// BEGIN qualified-ident?
dc.bool qualified_ident$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7533_$AUTO_$1=lcoc_core.ident$QMARK_(x$1, );
late final dc.Object? $if_$1;
if(and$7533_$AUTO_$1){
final dc.dynamic x7661$1=x$1;
late final dc.String? and$7533_$AUTO_$2;
if((x7661$1 is lcoc_core.INamed$iface)){
and$7533_$AUTO_$2=(((x7661$1 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
and$7533_$AUTO_$2=(((lcoc_core.INamed.extensions(x7661$1, ) as lcoc_core.INamed$ext).$_namespace$0(x7661$1, )) as dc.String?);
}
if((and$7533_$AUTO_$2!=null)){
$if_$1=true;
}else{
$if_$1=and$7533_$AUTO_$2;
}
}else{
$if_$1=and$7533_$AUTO_$1;
}
return lcoc_core.boolean($if_$1, );
}

// END qualified-ident?

// BEGIN qualified-keyword?
dc.dynamic qualified_keyword$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7533_$AUTO_$1=lcoc_core.keyword$QMARK_(x$1, );
late final dc.Object? $if_$1;
if(and$7533_$AUTO_$1){
final dc.dynamic x7661$1=x$1;
late final dc.String? and$7533_$AUTO_$2;
if((x7661$1 is lcoc_core.INamed$iface)){
and$7533_$AUTO_$2=(((x7661$1 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
and$7533_$AUTO_$2=(((lcoc_core.INamed.extensions(x7661$1, ) as lcoc_core.INamed$ext).$_namespace$0(x7661$1, )) as dc.String?);
}
if((and$7533_$AUTO_$2!=null)){
$if_$1=true;
}else{
$if_$1=and$7533_$AUTO_$2;
}
}else{
$if_$1=and$7533_$AUTO_$1;
}
return lcoc_core.boolean($if_$1, );
}

// END qualified-keyword?

// BEGIN qualified-symbol?
dc.dynamic qualified_symbol$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7533_$AUTO_$1=lcoc_core.symbol$QMARK_(x$1, );
late final dc.Object? $if_$1;
if(and$7533_$AUTO_$1){
final dc.dynamic x7661$1=x$1;
late final dc.String? and$7533_$AUTO_$2;
if((x7661$1 is lcoc_core.INamed$iface)){
and$7533_$AUTO_$2=(((x7661$1 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
and$7533_$AUTO_$2=(((lcoc_core.INamed.extensions(x7661$1, ) as lcoc_core.INamed$ext).$_namespace$0(x7661$1, )) as dc.String?);
}
if((and$7533_$AUTO_$2!=null)){
$if_$1=true;
}else{
$if_$1=and$7533_$AUTO_$2;
}
}else{
$if_$1=and$7533_$AUTO_$1;
}
return lcoc_core.boolean($if_$1, );
}

// END qualified-symbol?

// BEGIN quick-bench
lcoc_core.IFn$iface quick_bench=lcoc_core.quick_benchifn18695hm$1(null, );

// END quick-bench

// BEGIN quick-bench*
dc.dynamic quick_bench$STAR_(dc.dynamic run$1, ){
final dc.Stopwatch sw$1=dc.Stopwatch();
final void $UNDERSCORE_$1=dc.print("Calibrating", );
late final dc.dynamic n$2;
dc.dynamic n$1=1;
do {
final dc.Stopwatch G$8925_$1=sw$1;
G$8925_$1.reset();
G$8925_$1.start();
if((run$1 is dc.Function)){
(run$1 as dc.Function)(n$1, );
}else if((run$1 is lcoc_core.IFn$iface)){
(run$1 as lcoc_core.IFn$iface).$_invoke$1(n$1, );
}else{
lcoc_core.IFn.extensions(run$1, ).$_invoke$1(run$1, n$1, );
}
sw$1.stop();
if((sw$1.elapsedMicroseconds<100000)){
n$1=(2*(n$1 as dc.num));
continue;
}else{
n$2=n$1;
}
break;
} while(true);
dc.print((lcoc_core.str.$_invoke$3("Running (batch size: ", n$2, ")", )), );
dc.dynamic cnt$1=0;
dc.dynamic mean$1=0.0;
dc.dynamic m2$1=0.0;
dc.dynamic rem$1=(((2*60)*1000)*1000);
do {
final dc.Stopwatch G$8926_$1=sw$1;
G$8926_$1.reset();
G$8926_$1.start();
if((run$1 is dc.Function)){
(run$1 as dc.Function)(n$2, );
}else if((run$1 is lcoc_core.IFn$iface)){
(run$1 as lcoc_core.IFn$iface).$_invoke$1(n$2, );
}else{
lcoc_core.IFn.extensions(run$1, ).$_invoke$1(run$1, n$2, );
}
sw$1.stop();
final dc.int t$1=sw$1.elapsedMicroseconds;
final dc.num rem$2=((rem$1 as dc.num)-t$1);
final dc.num cnt$2=(1+(cnt$1 as dc.num));
final dc.num delta$1=(t$1-(mean$1 as dc.num));
final dc.num mean$2=((mean$1 as dc.num)+(delta$1/cnt$2));
final dc.num delta$PRIME_$1=(t$1-mean$2);
final dc.num m2$2=((m2$1 as dc.num)+(delta$1*delta$PRIME_$1));
final dc.bool or$7573_$AUTO_$1=(0<rem$2);
late final dc.bool $if_$1;
if(or$7573_$AUTO_$1){
$if_$1=or$7573_$AUTO_$1;
}else{
$if_$1=(cnt$2<2);
}
if($if_$1){
cnt$1=cnt$2;
mean$1=mean$2;
m2$1=m2$2;
rem$1=rem$2;
continue;
}
final dc.double sd$1=d_math.sqrt((m2$2/(cnt$2-1)), );
return dc.print((lcoc_core.str.$_invoke$4((mean$2/(n$2 as dc.num)), " (+/-", (sd$1/(n$2 as dc.num)), ") us", )), );
} while(true);
}

// END quick-bench*

// BEGIN quick_benchifn18695hm$1
class quick_benchifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

quick_benchifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.quick_benchifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic body$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "quick-bench*", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "n__8927__auto__", )), )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "dotimes", )), ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "_", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "n__8927__auto__", )), )), ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$3(arg$1, $3, body$1, ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3(arg$2, $5, $4, ));
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$2(arg$3, $6, ));
if((o7668$5 is lcoc_core.ISeqable$iface)){
return ((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END quick_benchifn18695hm$1

// BEGIN quot
dc.num quot(dc.dynamic num$1, dc.dynamic div$1, ){
return ((num$1 as dc.num)~/(div$1 as dc.num));
}

// END quot

// BEGIN rand
lcoc_core.IFn$iface rand=lcoc_core.randifn18695hm$1(null, );

// END rand

// BEGIN rand-int
dc.int rand_int(dc.dynamic n$1, ){
return (lcoc_core.RNG.nextInt((n$1 as dc.int), ));
}

// END rand-int

// BEGIN rand-nth
dc.dynamic rand_nth(dc.dynamic coll$1, ){
final dc.dynamic coll7742$1=coll$1;
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final dc.int $1=lcoc_core.rand_int(cast$1, );
return (lcoc_core.nth.$_invoke$2(coll$1, $1, ));
}

// END rand-nth

// BEGIN randifn18695hm$1
class randifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

randifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.randifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$0(){
return (lcoc_core.RNG.nextDouble());
}

dc.dynamic $_invoke$1(dc.dynamic n$1, ){
return ((lcoc_core.RNG.nextDouble())*(n$1 as dc.num));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END randifn18695hm$1

// BEGIN random-sample
lcoc_core.IFn$iface random_sample=lcoc_core.random_sampleifn18695hm$1(null, );

// END random-sample

// BEGIN random_sampleifn18695hm$1
class random_sampleifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

random_sampleifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.random_sampleifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic prob$1, ){
return (lcoc_core.filter.$_invoke$1((dc.dynamic $UNDERSCORE_$1, ){
return ((lcoc_core.rand.$_invoke$0())<(prob$1 as dc.num));
}, ));
}

dc.dynamic $_invoke$2(dc.dynamic prob$2, dc.dynamic coll$1, ){
return (lcoc_core.filter.$_invoke$2((dc.dynamic $UNDERSCORE_$2, ){
return ((lcoc_core.rand.$_invoke$0())<(prob$2 as dc.num));
}, coll$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END random_sampleifn18695hm$1

// BEGIN range
lcoc_core.IFn$iface range=lcoc_core.rangeifn18695hm$1(null, );

// END range

// BEGIN rangeifn18695hm$1
class rangeifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

rangeifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.rangeifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$0(){
return (lcoc_core.range.$_invoke$3(0, dc.double.maxFinite, 1, ));
}

dc.dynamic $_invoke$1(dc.dynamic end$1, ){
return (lcoc_core.range.$_invoke$3(0, end$1, 1, ));
}

dc.dynamic $_invoke$2(dc.dynamic start$1, dc.dynamic end$2, ){
return (lcoc_core.range.$_invoke$3(start$1, end$2, 1, ));
}

dc.dynamic $_invoke$3(dc.dynamic start$2, dc.dynamic end$3, dc.dynamic step$1, ){
return lcoc_core.LazySeq(null, ((){
final lcoc_core.ChunkBuffer b$1=lcoc_core.chunk_buffer(32, );
final dc.bool or$7573_$AUTO_$1=(0==step$1);
late final dc.bool $if_$1;
if(or$7573_$AUTO_$1){
$if_$1=or$7573_$AUTO_$1;
}else{
$if_$1=(start$2==end$3);
}
late final lcoc_core.IFn$iface? comp$1;
if($if_$1){
comp$1=lcoc_core.not$EQ_;
}else if((0<(step$1 as dc.num))){
comp$1=lcoc_core.$LT_;
}else if((0>(step$1 as dc.num))){
comp$1=lcoc_core.$GT_;
}else{
comp$1=null;
}
dc.dynamic i$1=start$2;
do {
final lcoc_core.ChunkBuffer coll7742$1=b$1;
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final dc.bool and$7533_$AUTO_$1=(cast$1<32);
late final dc.dynamic $if_$2;
if(and$7533_$AUTO_$1){
$if_$2=((comp$1 as lcoc_core.IFn$iface).$_invoke$2(i$1, end$3, ));
}else{
$if_$2=and$7533_$AUTO_$1;
}
if((($if_$2!=false)&&($if_$2!=null))){
lcoc_core.chunk_append(b$1, i$1, );
i$1=((i$1 as dc.num)+(step$1 as dc.num));
continue;
}
final dc.dynamic arg$1=lcoc_core.chunk(b$1, );
final dc.dynamic test$1=((comp$1 as lcoc_core.IFn$iface).$_invoke$2(i$1, end$3, ));
late final dc.dynamic $if_$3;
if(((test$1!=false)&&(test$1!=null))){
$if_$3=(lcoc_core.range.$_invoke$3(i$1, end$3, step$1, ));
}else{
$if_$3=null;
}
return lcoc_core.chunk_cons(arg$1, $if_$3, );
} while(true);
} as dc.dynamic?), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END rangeifn18695hm$1

// BEGIN re-find
lcoc_core.IFn$iface re_find=lcoc_core.re_findifn18695hm$1(null, );

// END re-find

// BEGIN re-groups
dc.dynamic re_groups(dc.dynamic m$1, ){
final dc.int gc$1=(m$1 as dc.Match).groupCount;
if((0==gc$1)){
return ((m$1 as dc.Match).group(0, ));
}
dc.dynamic ret$1=lcoc_core.transient(lcoc_core.$_EMPTY_VECTOR, );
dc.int c$1=0;
do {
if((c$1<=gc$1)){
ret$1=(lcoc_core.conj$BANG_.$_invoke$2(ret$1, ((m$1 as dc.Match).group(c$1, )), ));
c$1=(1+c$1);
continue;
}
return lcoc_core.persistent$BANG_(ret$1, );
} while(true);
}

// END re-groups

// BEGIN re-matcher
dc.dynamic re_matcher(dc.dynamic re$1, dc.dynamic s$1, ){
return ((re$1 as dc.RegExp).allMatches((s$1 as dc.String), )).iterator;
}

// END re-matcher

// BEGIN re-matches
dc.dynamic re_matches(dc.dynamic re$1, dc.dynamic s$1, ){
final dc.RegExp re$2=dc.RegExp((lcoc_core.str.$_invoke$3("(?:", (re$1 as dc.RegExp).pattern, ")\$", )), multiLine: (re$1 as dc.RegExp).isMultiLine, caseSensitive: (re$1 as dc.RegExp).isCaseSensitive, unicode: (re$1 as dc.RegExp).isUnicode, dotAll: (re$1 as dc.RegExp).isDotAll, );
final dc.Match? some$7546_$AUTO_$1=(re$2.matchAsPrefix((s$1 as dc.String), ));
if((null==some$7546_$AUTO_$1)){
return null;
}
final dc.Match? m$1=some$7546_$AUTO_$1;
return lcoc_core.re_groups(m$1, );
}

// END re-matches

// BEGIN re-pattern
dc.RegExp re_pattern(dc.dynamic s$1, ){
if((s$1 is dc.RegExp)){
return s$1;
}
return dc.RegExp((s$1 as dc.String), unicode: true, );
}

// END re-pattern

// BEGIN re-seq
dc.dynamic re_seq(dc.dynamic re$1, dc.dynamic s$1, ){
final dc.dynamic o7668$1=(lcoc_core.map.$_invoke$2(lcoc_core.re_groups, ((re$1 as dc.RegExp).allMatches((s$1 as dc.String), )), ));
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}

// END re-seq

// BEGIN re_findifn18695hm$1
class re_findifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

re_findifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.re_findifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic m$1, ){
final dc.Iterator m$2=(m$1 as dc.Iterator);
if((m$2.moveNext())){
return lcoc_core.re_groups(m$2.current, );
}
return null;
}

dc.dynamic $_invoke$2(dc.dynamic re$1, dc.dynamic s$1, ){
final dc.RegExp re$2=(re$1 as dc.RegExp);
final dc.RegExpMatch? G$9202_$1=(re$2.firstMatch((s$1 as dc.String), ));
if((null==G$9202_$1)){
return null;
}
return lcoc_core.re_groups(G$9202_$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END re_findifn18695hm$1

// BEGIN realized?
dc.bool realized$QMARK_(dc.dynamic x$1, ){
final dc.dynamic x7700$1=x$1;
if((x7700$1 is lcoc_core.IPending$iface)){
return ((x7700$1 as lcoc_core.IPending$iface).$_realized$QMARK_$0());
}
return ((lcoc_core.IPending.extensions(x7700$1, ) as lcoc_core.IPending$ext).$_realized$QMARK_$0(x7700$1, ));
}

// END realized?

// BEGIN record?
dc.bool record$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.IRecord.satisfies(x$1, )) as dc.bool);
}

// END record?

// BEGIN reduce
lcoc_core.IFn$iface reduce=lcoc_core.reduceifn18695hm$1(null, );

// END reduce

// BEGIN reduce-kv
dc.dynamic reduce_kv(dc.dynamic f$1, dc.dynamic init$1, dc.dynamic coll$1, ){
final dc.dynamic coll7735$1=coll$1;
final dc.dynamic f7736$1=f$1;
final dc.dynamic init7737$1=init$1;
if((coll7735$1 is lcoc_core.IKVReduce$iface)){
return ((coll7735$1 as lcoc_core.IKVReduce$iface).$_kv_reduce$2(f7736$1, init7737$1, ));
}
return ((lcoc_core.IKVReduce.extensions(coll7735$1, ) as lcoc_core.IKVReduce$ext).$_kv_reduce$2(coll7735$1, f7736$1, init7737$1, ));
}

// END reduce-kv

// BEGIN reduced
dc.dynamic reduced(dc.dynamic x$1, ){
return lcoc_core.Reduced(x$1, );
}

// END reduced

// BEGIN reduced?
dc.bool reduced$QMARK_(dc.dynamic r$1, ){
return (r$1 is lcoc_core.Reduced);
}

// END reduced?

// BEGIN reduceifn18695hm$1
class reduceifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

reduceifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.reduceifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$2(dc.dynamic f$1, dc.dynamic coll$1, ){
final dc.dynamic coll7726$1=coll$1;
final dc.dynamic f7727$1=f$1;
if((coll7726$1 is lcoc_core.IReduce$iface)){
return ((coll7726$1 as lcoc_core.IReduce$iface).$_reduce$1(f7727$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7726$1, ) as lcoc_core.IReduce$ext).$_reduce$1(coll7726$1, f7727$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic f$2, dc.dynamic init$1, dc.dynamic coll$2, ){
final dc.dynamic coll7722$1=coll$2;
final dc.dynamic f7723$1=f$2;
final dc.dynamic start7724$1=init$1;
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END reduceifn18695hm$1

// BEGIN reductions
lcoc_core.IFn$iface reductions=lcoc_core.reductionsifn18695hm$1(null, );

// END reductions

// BEGIN reductionsifn18695hm$1
class reductionsifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

reductionsifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.reductionsifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$2(dc.dynamic f$1, dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic temp$7555_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
temp$7555_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7555_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if(((temp$7555_$AUTO_$1!=false)&&(temp$7555_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7555_$AUTO_$1;
return (lcoc_core.reductions.$_invoke$3(f$1, lcoc_core.first(s$1, ), lcoc_core.rest(s$1, ), ));
}
late final dc.dynamic $if_$1;
if((f$1 is dc.Function)){
$if_$1=(f$1 as dc.Function)();
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$1=((f$1 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$0(f$1, ));
}
return (lcoc_core.list.$_invoke$1($if_$1, ));
} as dc.dynamic?), null, -1, );
}

dc.dynamic $_invoke$3(dc.dynamic f$2, dc.dynamic init$1, dc.dynamic coll$2, ){
if(lcoc_core.reduced$QMARK_(init$1, )){
return (lcoc_core.list.$_invoke$1(lcoc_core.deref(init$1, ), ));
}
return lcoc_core.cons(init$1, lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$2=coll$2;
late final dc.dynamic temp$7560_$AUTO_$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
temp$7560_$AUTO_$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7560_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
if(((temp$7560_$AUTO_$1!=false)&&(temp$7560_$AUTO_$1!=null))){
final dc.dynamic s$2=temp$7560_$AUTO_$1;
final dc.dynamic arg$1=lcoc_core.first(s$2, );
late final dc.dynamic $if_$2;
if((f$2 is dc.Function)){
$if_$2=(f$2 as dc.Function)(init$1, arg$1, );
}else if((f$2 is lcoc_core.IFn$iface)){
$if_$2=((f$2 as lcoc_core.IFn$iface).$_invoke$2(init$1, arg$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(f$2, ).$_invoke$2(f$2, init$1, arg$1, ));
}
return (lcoc_core.reductions.$_invoke$3(f$2, $if_$2, lcoc_core.rest(s$2, ), ));
}
return null;
} as dc.dynamic?), null, -1, ), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END reductionsifn18695hm$1

// BEGIN reify
lcoc_core.IFn$iface reify=lcoc_core.reifyifn18695hm$1(null, );

// END reify

// BEGIN reifyifn18695hm$1
class reifyifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

reifyifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.reifyifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic body$1, ){
final dc.dynamic vec$8642_$1=lcoc_core.roll_leading_opts(body$1, );
final dc.dynamic opts$1=(lcoc_core.nth.$_invoke$3(vec$8642_$1, 0, null, ));
final dc.dynamic specs$1=(lcoc_core.nth.$_invoke$3(vec$8642_$1, 1, null, ));
return (lcoc_core.list$STAR_.$_invoke$3((lcoc_core.symbol.$_invoke$2(null, "reify*", )), opts$1, specs$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END reifyifn18695hm$1

// BEGIN rem
dc.dynamic rem(dc.dynamic num$1, dc.dynamic div$1, ){
return ((num$1 as dc.num).remainder((div$1 as dc.num), ));
}

// END rem

// BEGIN remove
lcoc_core.IFn$iface remove=lcoc_core.removeifn18695hm$1(null, );

// END remove

// BEGIN remove-watch
dc.dynamic remove_watch(dc.dynamic reference$1, dc.dynamic key$1, ){
final dc.dynamic G$8892_$1=reference$1;
final dc.dynamic this8000$1=G$8892_$1;
final dc.dynamic key8001$1=key$1;
if((this8000$1 is lcoc_core.IWatchable$iface)){
(this8000$1 as lcoc_core.IWatchable$iface).$_remove_watch$1(key8001$1, );
}else{
(lcoc_core.IWatchable.extensions(this8000$1, ) as lcoc_core.IWatchable$ext).$_remove_watch$1(this8000$1, key8001$1, );
}
return G$8892_$1;
}

// END remove-watch

// BEGIN removeifn18695hm$1
class removeifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

removeifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.removeifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic pred$1, ){
return (lcoc_core.filter.$_invoke$1(lcoc_core.complement(pred$1, ), ));
}

dc.dynamic $_invoke$2(dc.dynamic pred$2, dc.dynamic coll$1, ){
return (lcoc_core.filter.$_invoke$2(lcoc_core.complement(pred$2, ), coll$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END removeifn18695hm$1

// BEGIN repeat
lcoc_core.IFn$iface repeat=lcoc_core.repeatifn18695hm$1(null, );

// END repeat

// BEGIN repeatedly
lcoc_core.IFn$iface repeatedly=lcoc_core.repeatedlyifn18695hm$1(null, );

// END repeatedly

// BEGIN repeatedlyifn18695hm$1
class repeatedlyifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

repeatedlyifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.repeatedlyifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic f$1, ){
return lcoc_core.LazySeq(null, ((){
late final dc.dynamic $if_$1;
if((f$1 is dc.Function)){
$if_$1=(f$1 as dc.Function)();
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$1=((f$1 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$0(f$1, ));
}
return lcoc_core.cons($if_$1, (lcoc_core.repeatedly.$_invoke$1(f$1, )), );
} as dc.dynamic?), null, -1, );
}

dc.dynamic $_invoke$2(dc.dynamic n$1, dc.dynamic f$2, ){
return (lcoc_core.take.$_invoke$2(n$1, (lcoc_core.repeatedly.$_invoke$1(f$2, )), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END repeatedlyifn18695hm$1

// BEGIN repeatifn18695hm$1
class repeatifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

repeatifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.repeatifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic x$1, ){
return lcoc_core.LazySeq(null, ((){
return lcoc_core.cons(x$1, (lcoc_core.repeat.$_invoke$1(x$1, )), );
} as dc.dynamic?), null, -1, );
}

dc.dynamic $_invoke$2(dc.dynamic n$1, dc.dynamic x$2, ){
return (lcoc_core.take.$_invoke$2(n$1, (lcoc_core.repeat.$_invoke$1(x$2, )), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END repeatifn18695hm$1

// BEGIN replace
lcoc_core.IFn$iface replace=lcoc_core.replaceifn18695hm$1(null, );

// END replace

// BEGIN replaceifn18695hm$1
class replaceifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

replaceifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.replaceifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic smap$1, ){
return (lcoc_core.map.$_invoke$1((dc.dynamic p1$9115_$SHARP_$1, ){
final dc.dynamic? temp$7555_$AUTO_$1=lcoc_core.find(smap$1, p1$9115_$SHARP_$1, );
if((temp$7555_$AUTO_$1!=null)){
final dc.dynamic? e$1=temp$7555_$AUTO_$1;
return lcoc_core.val(e$1, );
}
return p1$9115_$SHARP_$1;
}, ));
}

dc.dynamic $_invoke$2(dc.dynamic smap$2, dc.dynamic coll$1, ){
if(lcoc_core.vector$QMARK_(coll$1, )){
final dc.dynamic coll7742$1=coll$1;
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final dc.dynamic coll7722$1=(lcoc_core.range.$_invoke$1(cast$1, ));
dc.dynamic f7723$1(dc.dynamic v$1, dc.dynamic i$1, ){
final dc.dynamic? temp$7555_$AUTO_$2=lcoc_core.find(smap$2, (lcoc_core.nth.$_invoke$2(v$1, i$1, )), );
if((temp$7555_$AUTO_$2!=null)){
final dc.dynamic? e$2=temp$7555_$AUTO_$2;
final dc.dynamic coll7790$1=v$1;
final dc.dynamic k7791$1=i$1;
final dc.dynamic v7792$1=lcoc_core.val(e$2, );
if((coll7790$1 is lcoc_core.IAssociative$iface)){
return ((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, ));
}
return v$1;
}
final dc.dynamic start7724$1=coll$1;
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}
return (lcoc_core.map.$_invoke$2((dc.dynamic p1$9116_$SHARP_$1, ){
final dc.dynamic? temp$7555_$AUTO_$3=lcoc_core.find(smap$2, p1$9116_$SHARP_$1, );
if((temp$7555_$AUTO_$3!=null)){
final dc.dynamic? e$3=temp$7555_$AUTO_$3;
return lcoc_core.val(e$3, );
}
return p1$9116_$SHARP_$1;
}, coll$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END replaceifn18695hm$1

// BEGIN reset!
dc.dynamic reset$BANG_(dc.dynamic atom$1, dc.dynamic new_value$1, ){
final dc.dynamic o7962$1=atom$1;
final dc.dynamic new_value7963$1=new_value$1;
if((o7962$1 is lcoc_core.IReset$iface)){
return ((o7962$1 as lcoc_core.IReset$iface).$_reset$BANG_$1(new_value7963$1, ));
}
return ((lcoc_core.IReset.extensions(o7962$1, ) as lcoc_core.IReset$ext).$_reset$BANG_$1(o7962$1, new_value7963$1, ));
}

// END reset!

// BEGIN reset-meta!
dc.dynamic reset_meta$BANG_(dc.dynamic iref$1, dc.dynamic metadata_map$1, ){
final lcoc_core.Atom arg$1=(iref$1 as lcoc_core.Atom);
arg$1.meta=metadata_map$1;
return metadata_map$1;
}

// END reset-meta!

// BEGIN reset-vals!
dc.dynamic reset_vals$BANG_(dc.dynamic a$1, dc.dynamic newval$1, ){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, lcoc_core.deref(a$1, ), ));
fl$1[1]=lcoc_core.set_and_validate_atom_state$BANG_(a$1, newval$1, );
return lcoc_core.$_vec_owning(fl$1, );
}

// END reset-vals!

// BEGIN rest
dc.dynamic rest(dc.dynamic coll$1, ){
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic coll7680$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
coll7680$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
coll7680$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((coll7680$1 is lcoc_core.ISeq$iface)){
return ((coll7680$1 as lcoc_core.ISeq$iface).$_rest$0());
}
return ((lcoc_core.ISeq.extensions(coll7680$1, ) as lcoc_core.ISeq$ext).$_rest$0(coll7680$1, ));
}

// END rest

// BEGIN restore-dynamic-bindings
dc.dynamic restore_dynamic_bindings(dc.dynamic bindings$1, ){
lcoc_core.$_DYNAMIC_BINDINGS=bindings$1;
return lcoc_core.$_DYNAMIC_BINDINGS;
}

// END restore-dynamic-bindings

// BEGIN reverse
dc.dynamic reverse(dc.dynamic coll$1, ){
final dc.dynamic coll7722$1=coll$1;
final lcoc_core.IFn$iface f7723$1=lcoc_core.conj;
final lcoc_core.PersistentList start7724$1=lcoc_core.$_EMPTY_LIST;
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}

// END reverse

// BEGIN roll-leading-opts
dc.dynamic roll_leading_opts(dc.dynamic body$1, ){
final dc.dynamic o7668$1=body$1;
late final dc.dynamic G$8634_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
G$8634_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
G$8634_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic vec$8635_$1=G$8634_$1;
final dc.dynamic o7668$2=vec$8635_$1;
late final dc.dynamic seq$8636_$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
seq$8636_$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8636_$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic first$8637_$1=lcoc_core.first(seq$8636_$1, );
final dc.dynamic seq$8636_$2=lcoc_core.next(seq$8636_$1, );
final dc.dynamic k$1=first$8637_$1;
final dc.dynamic first$8637_$2=lcoc_core.first(seq$8636_$2, );
final dc.dynamic seq$8636_$3=lcoc_core.next(seq$8636_$2, );
final dc.dynamic v$1=first$8637_$2;
final dc.dynamic more$1=seq$8636_$3;
final dc.dynamic body$2=vec$8635_$1;
final lcoc_core.PersistentHashMap opts$1=lcoc_core.$_EMPTY_MAP;
dc.dynamic G$8634_$2=G$8634_$1;
dc.dynamic opts$2=opts$1;
do {
final dc.dynamic vec$8638_$1=G$8634_$2;
final dc.dynamic o7668$3=vec$8638_$1;
late final dc.dynamic seq$8639_$1;
if((o7668$3 is lcoc_core.ISeqable$iface)){
seq$8639_$1=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8639_$1=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic first$8640_$1=lcoc_core.first(seq$8639_$1, );
final dc.dynamic seq$8639_$2=lcoc_core.next(seq$8639_$1, );
final dc.dynamic k$2=first$8640_$1;
final dc.dynamic first$8640_$2=lcoc_core.first(seq$8639_$2, );
final dc.dynamic seq$8639_$3=lcoc_core.next(seq$8639_$2, );
final dc.dynamic v$2=first$8640_$2;
final dc.dynamic more$2=seq$8639_$3;
final dc.dynamic body$3=vec$8638_$1;
final dc.dynamic opts$3=opts$2;
final dc.dynamic and$7533_$AUTO_$1=body$3;
late final dc.dynamic $if_$1;
if(((and$7533_$AUTO_$1!=false)&&(and$7533_$AUTO_$1!=null))){
$if_$1=lcoc_core.keyword$QMARK_(k$2, );
}else{
$if_$1=and$7533_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
G$8634_$2=more$2;
final dc.dynamic coll7790$1=opts$3;
final dc.dynamic k7791$1=k$2;
final dc.dynamic v7792$1=v$2;
if((coll7790$1 is lcoc_core.IAssociative$iface)){
opts$2=((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, ));
}else{
opts$2=((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, ));
}
continue;
}
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, opts$3, ));
fl$1[1]=body$3;
return lcoc_core.$_vec_owning(fl$1, );
} while(true);
}

// END roll-leading-opts

// BEGIN rseq
dc.dynamic rseq(dc.dynamic rev$1, ){
final dc.dynamic coll7879$1=rev$1;
if((coll7879$1 is lcoc_core.IReversible$iface)){
return ((coll7879$1 as lcoc_core.IReversible$iface).$_rseq$0());
}
return ((lcoc_core.IReversible.extensions(coll7879$1, ) as lcoc_core.IReversible$ext).$_rseq$0(coll7879$1, ));
}

// END rseq

// BEGIN rsubseq
lcoc_core.IFn$iface rsubseq=lcoc_core.rsubseqifn18695hm$1(null, );

// END rsubseq

// BEGIN rsubseqifn18695hm$1
class rsubseqifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuXuX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

rsubseqifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.rsubseqifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$3(dc.dynamic sc$1, dc.dynamic test$1, dc.dynamic key$1, ){
final dc.bool Function(dc.dynamic, dc.dynamic, ) pred$8844_$1=lcoc_core.identical$QMARK_;
final dc.dynamic expr$8845_$1=test$1;
if(pred$8844_$1(lcoc_core.$GT_, expr$8845_$1, )){
final dc.dynamic coll7892$1=sc$1;
final dc.dynamic from7893$1=key$1;
if((coll7892$1 is lcoc_core.ISorted$iface)){
return ((coll7892$1 as lcoc_core.ISorted$iface).$_sorted_rseq$3(from7893$1, null, 8, ));
}
return ((lcoc_core.ISorted.extensions(coll7892$1, ) as lcoc_core.ISorted$ext).$_sorted_rseq$3(coll7892$1, from7893$1, null, 8, ));
}
if(pred$8844_$1(lcoc_core.$GT_$EQ_, expr$8845_$1, )){
final dc.dynamic coll7892$2=sc$1;
final dc.dynamic from7893$2=key$1;
if((coll7892$2 is lcoc_core.ISorted$iface)){
return ((coll7892$2 as lcoc_core.ISorted$iface).$_sorted_rseq$3(from7893$2, null, 12, ));
}
return ((lcoc_core.ISorted.extensions(coll7892$2, ) as lcoc_core.ISorted$ext).$_sorted_rseq$3(coll7892$2, from7893$2, null, 12, ));
}
if(pred$8844_$1(lcoc_core.$LT_, expr$8845_$1, )){
final dc.dynamic coll7892$3=sc$1;
final dc.dynamic to7894$3=key$1;
if((coll7892$3 is lcoc_core.ISorted$iface)){
return ((coll7892$3 as lcoc_core.ISorted$iface).$_sorted_rseq$3(null, to7894$3, 2, ));
}
return ((lcoc_core.ISorted.extensions(coll7892$3, ) as lcoc_core.ISorted$ext).$_sorted_rseq$3(coll7892$3, null, to7894$3, 2, ));
}
if(pred$8844_$1(lcoc_core.$LT_$EQ_, expr$8845_$1, )){
final dc.dynamic coll7892$4=sc$1;
final dc.dynamic to7894$4=key$1;
if((coll7892$4 is lcoc_core.ISorted$iface)){
return ((coll7892$4 as lcoc_core.ISorted$iface).$_sorted_rseq$3(null, to7894$4, 1, ));
}
return ((lcoc_core.ISorted.extensions(coll7892$4, ) as lcoc_core.ISorted$ext).$_sorted_rseq$3(coll7892$4, null, to7894$4, 1, ));
}
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("No matching clause: ", expr$8845_$1, )), );
}

dc.dynamic $_invoke$5(dc.dynamic sc$2, dc.dynamic start_test$1, dc.dynamic start_key$1, dc.dynamic end_test$1, dc.dynamic end_key$1, ){
final dc.dynamic coll7892$5=sc$2;
final dc.dynamic from7893$5=start_key$1;
final dc.dynamic to7894$5=end_key$1;
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, lcoc_core.$LT_$EQ_, ));
fl$1[1]=lcoc_core.$GT_$EQ_;
final lcoc_core.PersistentHashSet $1=lcoc_core.$set_(fl$1, );
final dc.dynamic $2=($1.$_invoke$1(start_test$1, ));
late final dc.int G$8846_$2;
if((($2!=false)&&($2!=null))){
G$8846_$2=(10+4);
}else{
G$8846_$2=10;
}
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(2, lcoc_core.$LT_$EQ_, ));
fl$2[1]=lcoc_core.$GT_$EQ_;
final lcoc_core.PersistentHashSet $3=lcoc_core.$set_(fl$2, );
final dc.dynamic $4=($3.$_invoke$1(end_test$1, ));
late final dc.int flags7895$5;
if((($4!=false)&&($4!=null))){
flags7895$5=(G$8846_$2+1);
}else{
flags7895$5=G$8846_$2;
}
if((coll7892$5 is lcoc_core.ISorted$iface)){
return ((coll7892$5 as lcoc_core.ISorted$iface).$_sorted_rseq$3(from7893$5, to7894$5, flags7895$5, ));
}
return ((lcoc_core.ISorted.extensions(coll7892$5, ) as lcoc_core.ISorted$ext).$_sorted_rseq$3(coll7892$5, from7893$5, to7894$5, flags7895$5, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END rsubseqifn18695hm$1

// BEGIN run!
dc.dynamic run$BANG_(dc.dynamic proc$1, dc.dynamic coll$1, ){
final dc.dynamic coll7722$1=coll$1;
dc.dynamic f7723$1(dc.dynamic p1$9106_$SHARP_$1, dc.dynamic p2$9105_$SHARP_$1, ){
if((proc$1 is dc.Function)){
return (proc$1 as dc.Function)(p2$9105_$SHARP_$1, );
}
if((proc$1 is lcoc_core.IFn$iface)){
return ((proc$1 as lcoc_core.IFn$iface).$_invoke$1(p2$9105_$SHARP_$1, ));
}
return (lcoc_core.IFn.extensions(proc$1, ).$_invoke$1(proc$1, p2$9105_$SHARP_$1, ));
}
if((coll7722$1 is lcoc_core.IReduce$iface)){
(coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, null, );
}else{
(lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, null, );
}
return null;
}

// END run!

// BEGIN satisfies?
dc.bool satisfies$QMARK_(dc.dynamic protocol$1, dc.dynamic x$1, ){
return ((protocol$1 as lcoc_core.IProtocol).satisfies(x$1, ));
}

// END satisfies?

// BEGIN second
dc.dynamic second(dc.dynamic coll$1, ){
return lcoc_core.first(lcoc_core.next(coll$1, ), );
}

// END second

// BEGIN select-keys
dc.dynamic select_keys(dc.dynamic map$1, dc.dynamic keyseq$1, ){
dc.dynamic ret$1=lcoc_core.$_EMPTY_MAP;
final dc.dynamic o7668$1=keyseq$1;
dc.dynamic keys$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
keys$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
keys$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
do {
if(((keys$1!=false)&&(keys$1!=null))){
final dc.dynamic key$1=lcoc_core.first(keys$1, );
final dc.dynamic entry$1=(lcoc_core.$get_.$_invoke$3(map$1, key$1, lcoc_core.sentinel, ));
late final dc.bool $if_$1;
if(dc.identical(entry$1, lcoc_core.sentinel, )){
$if_$1=false;
}else{
$if_$1=true;
}
if($if_$1){
final dc.dynamic coll7790$1=ret$1;
final dc.dynamic k7791$1=key$1;
final dc.dynamic v7792$1=entry$1;
if((coll7790$1 is lcoc_core.IAssociative$iface)){
ret$1=((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, ));
}else{
ret$1=((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, ));
}
}else{
ret$1=ret$1;
}
keys$1=lcoc_core.next(keys$1, );
continue;
}
final dc.dynamic o7865$1=ret$1;
final dc.dynamic o7872$1=map$1;
late final dc.dynamic meta7866$1;
if((o7872$1 is lcoc_core.IMeta$iface)){
meta7866$1=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
meta7866$1=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
if((o7865$1 is lcoc_core.IWithMeta$iface)){
return ((o7865$1 as lcoc_core.IWithMeta$iface).$_with_meta$1(meta7866$1, ));
}
return ((lcoc_core.IWithMeta.extensions(o7865$1, ) as lcoc_core.IWithMeta$ext).$_with_meta$1(o7865$1, meta7866$1, ));
} while(true);
}

// END select-keys

// BEGIN sentinel
dc.dynamic sentinel=dc.Object();

// END sentinel

// BEGIN seq
dc.dynamic seq(dc.dynamic coll$1, ){
final dc.dynamic o7668$1=coll$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}

// END seq

// BEGIN seq?
dc.bool seq$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.ISeq.satisfies(x$1, )) as dc.bool);
}

// END seq?

// BEGIN seqable?
dc.bool seqable$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.ISeqable.satisfies(x$1, )) as dc.bool);
}

// END seqable?

// BEGIN sequence
lcoc_core.IFn$iface sequence=lcoc_core.sequenceifn18695hm$1(null, );

// END sequence

// BEGIN sequenceifn18695hm$1
class sequenceifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

sequenceifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.sequenceifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic xform$1, dc.dynamic coll$1, dc.dynamic colls$1, ){
final dc.dynamic? or$7573_$AUTO_$1=(lcoc_core.chunked_iterator_seq.$_invoke$1((lcoc_core.apply.$_invoke$4(lcoc_core.iterator, xform$1, coll$1, colls$1, )), ));
if((or$7573_$AUTO_$1!=null)){
return or$7573_$AUTO_$1;
}
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_invoke$1(dc.dynamic coll$2, ){
if(((lcoc_core.ISeq.satisfies(coll$2, )) as dc.bool)){
return coll$2;
}
final dc.dynamic o7668$1=coll$2;
late final dc.dynamic or$7573_$AUTO_$2;
if((o7668$1 is lcoc_core.ISeqable$iface)){
or$7573_$AUTO_$2=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
or$7573_$AUTO_$2=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if(((or$7573_$AUTO_$2!=false)&&(or$7573_$AUTO_$2!=null))){
return or$7573_$AUTO_$2;
}
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_invoke$2(dc.dynamic xform$2, dc.dynamic coll$3, ){
final dc.dynamic? or$7573_$AUTO_$3=(lcoc_core.chunked_iterator_seq.$_invoke$1((lcoc_core.iterator.$_invoke$2(xform$2, coll$3, )), ));
if((or$7573_$AUTO_$3!=null)){
return or$7573_$AUTO_$3;
}
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END sequenceifn18695hm$1

// BEGIN sequential?
dc.bool sequential$QMARK_(dc.dynamic coll$1, ){
return ((lcoc_core.ISequential.satisfies(coll$1, )) as dc.bool);
}

// END sequential?

// BEGIN set
lcoc_core.PersistentHashSet $set_(dc.dynamic coll$1, ){
return (lcoc_core.into.$_invoke$2(lcoc_core.$_EMPTY_SET, coll$1, ));
}

// END set

// BEGIN set-and-validate-atom-state!
dc.dynamic set_and_validate_atom_state$BANG_(dc.dynamic a$1, dc.dynamic new_state$1, ){
final dc.dynamic some$7546_$AUTO_$1=(a$1 as lcoc_core.Atom).validator;
if((null==some$7546_$AUTO_$1)){
}else{
final dc.dynamic validator$1=some$7546_$AUTO_$1;
lcoc_core.validate_atom_state(validator$1, new_state$1, );
}
final dc.dynamic old_state$1=(a$1 as lcoc_core.Atom).state;
final lcoc_core.Atom arg$1=(a$1 as lcoc_core.Atom);
arg$1.state=new_state$1;
final lcoc_core.Atom this7986$1=(a$1 as lcoc_core.Atom);
final dc.dynamic oldval7987$1=old_state$1;
final dc.dynamic newval7988$1=new_state$1;
if((this7986$1 is lcoc_core.IWatchable$iface)){
(this7986$1 as lcoc_core.IWatchable$iface).$_notify_watches$2(oldval7987$1, newval7988$1, );
}else{
(lcoc_core.IWatchable.extensions(this7986$1, ) as lcoc_core.IWatchable$ext).$_notify_watches$2(this7986$1, oldval7987$1, newval7988$1, );
}
return new_state$1;
}

// END set-and-validate-atom-state!

// BEGIN set-dynamic-binding!
dc.dynamic set_dynamic_binding$BANG_(dc.dynamic k$1, dc.dynamic v$1, ){
final dc.dynamic some$7546_$AUTO_$1=(lcoc_core.$get_.$_invoke$2(lcoc_core.$_DYNAMIC_BINDINGS, k$1, ));
if((null==some$7546_$AUTO_$1)){
throw dc.Exception((lcoc_core.str.$_invoke$3("Can't change/establish root binding of: ", k$1, " with set!.", )), );
}
final dc.dynamic binding$1=some$7546_$AUTO_$1;
return lcoc_core.vreset$BANG_(binding$1, v$1, );
}

// END set-dynamic-binding!

// BEGIN set-validator!
dc.dynamic set_validator$BANG_(dc.dynamic atom$1, dc.dynamic f$1, ){
if(((f$1!=false)&&(f$1!=null))){
final lcoc_core.Atom o7717$1=(atom$1 as lcoc_core.Atom);
late final dc.dynamic $if_$1;
if((o7717$1 is lcoc_core.IDeref$iface)){
$if_$1=((o7717$1 as lcoc_core.IDeref$iface).$_deref$0());
}else{
$if_$1=((lcoc_core.IDeref.extensions(o7717$1, ) as lcoc_core.IDeref$ext).$_deref$0(o7717$1, ));
}
lcoc_core.validate_atom_state(f$1, $if_$1, );
}else{
}
final lcoc_core.Atom arg$1=(atom$1 as lcoc_core.Atom);
arg$1.validator=f$1;
return f$1;
}

// END set-validator!

// BEGIN set?
dc.bool set$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.ISet.satisfies(x$1, )) as dc.bool);
}

// END set?

// BEGIN shuffle
dc.dynamic shuffle(dc.dynamic source$1, ){
final dc.dynamic coll7722$1=source$1;
final lcoc_core.IFn$iface f7723$1=lcoc_core.conj$BANG_;
final dc.dynamic start7724$1=lcoc_core.transient(lcoc_core.$_EMPTY_VECTOR, );
late final dc.dynamic source$BANG_$1;
if((coll7722$1 is lcoc_core.IReduce$iface)){
source$BANG_$1=((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}else{
source$BANG_$1=((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}
final dc.dynamic coll7742$1=source$BANG_$1;
late final dc.int length$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
length$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
length$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
dc.dynamic tv$1=source$BANG_$1;
dc.int i$1=length$1;
do {
final dc.int i_1$1=(i$1-1);
if((0<i_1$1)){
final dc.int j$1=lcoc_core.rand_int(i$1, );
final dc.dynamic tmp$1=(lcoc_core.nth.$_invoke$2(tv$1, i_1$1, ));
tv$1=(lcoc_core.assoc$BANG_.$_invoke$3((lcoc_core.assoc$BANG_.$_invoke$3(tv$1, i_1$1, (lcoc_core.nth.$_invoke$2(tv$1, j$1, )), )), j$1, tmp$1, ));
i$1=i_1$1;
continue;
}
return lcoc_core.persistent$BANG_(tv$1, );
} while(true);
}

// END shuffle

// BEGIN sigs
dc.dynamic sigs(dc.dynamic fdecl$1, ){
dc.dynamic asig$1(dc.dynamic fdecl$2, ){
final dc.dynamic arglist$1=lcoc_core.first(fdecl$2, );
late final dc.dynamic arglist$2;
if((lcoc_core.$EQ_.$_invoke$2((lcoc_core.symbol.$_invoke$2(null, "&form", )), lcoc_core.first(arglist$1, ), ))){
final dc.dynamic coll7742$1=arglist$1;
late final dc.int cast$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
arglist$2=(lcoc_core.subvec.$_invoke$3(arglist$1, 2, cast$1, ));
}else{
arglist$2=arglist$1;
}
final dc.dynamic body$1=lcoc_core.next(fdecl$2, );
if(lcoc_core.map$QMARK_(lcoc_core.first(body$1, ), )){
final dc.dynamic test$1=lcoc_core.next(body$1, );
if(((test$1!=false)&&(test$1!=null))){
final dc.dynamic o7872$1=arglist$2;
late final dc.dynamic $if_$1;
if((o7872$1 is lcoc_core.IMeta$iface)){
$if_$1=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$1=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
late final dc.dynamic coll7707$1;
if((($if_$1!=false)&&($if_$1!=null))){
final dc.dynamic o7872$2=arglist$2;
if((o7872$2 is lcoc_core.IMeta$iface)){
coll7707$1=((o7872$2 as lcoc_core.IMeta$iface).$_meta$0());
}else{
coll7707$1=((lcoc_core.IMeta.extensions(o7872$2, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$2, ));
}
}else{
coll7707$1=lcoc_core.$_EMPTY_MAP;
}
final dc.dynamic o7708$1=lcoc_core.first(body$1, );
late final dc.dynamic $if_$2;
if((coll7707$1 is lcoc_core.ICollection$iface)){
$if_$2=((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}else{
$if_$2=((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
}
return lcoc_core.with_meta(arglist$2, $if_$2, );
}
return arglist$2;
}
return arglist$2;
}
dc.dynamic resolve_tag$1(dc.dynamic argvec$1, ){
final dc.dynamic o7872$3=argvec$1;
late final dc.dynamic m$1;
if((o7872$3 is lcoc_core.IMeta$iface)){
m$1=((o7872$3 as lcoc_core.IMeta$iface).$_meta$0());
}else{
m$1=((lcoc_core.IMeta.extensions(o7872$3, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$3, ));
}
final dc.dynamic tag$1=(lcoc_core.Keyword(null, "tag", 2780644040, ).$_invoke$1(m$1, ));
return argvec$1;
}
if(((lcoc_core.ISeq.satisfies(lcoc_core.first(fdecl$1, ), )) as dc.bool)){
dc.dynamic ret$1=lcoc_core.$_EMPTY_VECTOR;
dc.dynamic fdecls$1=fdecl$1;
do {
if(((fdecls$1!=false)&&(fdecls$1!=null))){
final dc.dynamic coll7707$2=ret$1;
final dc.dynamic o7708$2=resolve_tag$1(asig$1(lcoc_core.first(fdecls$1, ), ), );
if((coll7707$2 is lcoc_core.ICollection$iface)){
ret$1=((coll7707$2 as lcoc_core.ICollection$iface).$_conj$1(o7708$2, ));
}else{
ret$1=((lcoc_core.ICollection.extensions(coll7707$2, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$2, o7708$2, ));
}
fdecls$1=lcoc_core.next(fdecls$1, );
continue;
}
final dc.dynamic o7668$1=ret$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
} while(true);
}
return (lcoc_core.list.$_invoke$1(resolve_tag$1(asig$1(fdecl$1, ), ), ));
}

// END sigs

// BEGIN simple-ident?
dc.bool simple_ident$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7533_$AUTO_$1=lcoc_core.ident$QMARK_(x$1, );
if(and$7533_$AUTO_$1){
final dc.dynamic x7661$1=x$1;
late final dc.String? cast$1;
if((x7661$1 is lcoc_core.INamed$iface)){
cast$1=(((x7661$1 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
cast$1=(((lcoc_core.INamed.extensions(x7661$1, ) as lcoc_core.INamed$ext).$_namespace$0(x7661$1, )) as dc.String?);
}
return (null==cast$1);
}
return and$7533_$AUTO_$1;
}

// END simple-ident?

// BEGIN simple-keyword?
dc.bool simple_keyword$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7533_$AUTO_$1=lcoc_core.keyword$QMARK_(x$1, );
if(and$7533_$AUTO_$1){
final dc.dynamic x7661$1=x$1;
late final dc.String? cast$1;
if((x7661$1 is lcoc_core.INamed$iface)){
cast$1=(((x7661$1 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
cast$1=(((lcoc_core.INamed.extensions(x7661$1, ) as lcoc_core.INamed$ext).$_namespace$0(x7661$1, )) as dc.String?);
}
return (null==cast$1);
}
return and$7533_$AUTO_$1;
}

// END simple-keyword?

// BEGIN simple-symbol?
dc.bool simple_symbol$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7533_$AUTO_$1=lcoc_core.symbol$QMARK_(x$1, );
if(and$7533_$AUTO_$1){
final dc.dynamic x7661$1=x$1;
late final dc.String? cast$1;
if((x7661$1 is lcoc_core.INamed$iface)){
cast$1=(((x7661$1 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
cast$1=(((lcoc_core.INamed.extensions(x7661$1, ) as lcoc_core.INamed$ext).$_namespace$0(x7661$1, )) as dc.String?);
}
return (null==cast$1);
}
return and$7533_$AUTO_$1;
}

// END simple-symbol?

// BEGIN some
dc.dynamic some(dc.dynamic pred$1, dc.dynamic coll$1, ){
final dc.dynamic coll7722$1=coll$1;
dc.dynamic f7723$1(dc.dynamic $UNDERSCORE_$1, dc.dynamic x$1, ){
late final dc.dynamic temp$7560_$AUTO_$1;
if((pred$1 is dc.Function)){
temp$7560_$AUTO_$1=(pred$1 as dc.Function)(x$1, );
}else if((pred$1 is lcoc_core.IFn$iface)){
temp$7560_$AUTO_$1=((pred$1 as lcoc_core.IFn$iface).$_invoke$1(x$1, ));
}else{
temp$7560_$AUTO_$1=(lcoc_core.IFn.extensions(pred$1, ).$_invoke$1(pred$1, x$1, ));
}
if(((temp$7560_$AUTO_$1!=false)&&(temp$7560_$AUTO_$1!=null))){
final dc.dynamic t$1=temp$7560_$AUTO_$1;
return lcoc_core.reduced(t$1, );
}
return null;
}
if((coll7722$1 is lcoc_core.IReduce$iface)){
return ((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, null, ));
}
return ((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, null, ));
}

// END some

// BEGIN some->
lcoc_core.IFn$iface some_$GT_=lcoc_core.some_$GT_ifn18695hm$1(null, );

// END some->

// BEGIN some->>
lcoc_core.IFn$iface some_$GT_$GT_=lcoc_core.some_$GT_$GT_ifn18695hm$1(null, );

// END some->>

// BEGIN some-fn
lcoc_core.IFn$iface some_fn=lcoc_core.some_fnifn18695hm$1(null, );

// END some-fn

// BEGIN some?
dc.bool some$QMARK_(dc.dynamic x$1, ){
return (x$1!=null);
}

// END some?

// BEGIN some_$GT_$GT_ifn18695hm$1
class some_$GT_$GT_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

some_$GT_$GT_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.some_$GT_$GT_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic expr$1, dc.dynamic forms$1, ){
late final dc.dynamic g$1;
if((lcoc_core.gensym is dc.Function)){
g$1=(lcoc_core.gensym as dc.Function)();
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
g$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$0());
}else{
g$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$0(lcoc_core.gensym, ));
}
final dc.dynamic steps$1=(lcoc_core.map.$_invoke$2((dc.dynamic step$1, ){
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "nil?", )), )), (lcoc_core.list.$_invoke$1(g$1, )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(null, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "->>", )), )), (lcoc_core.list.$_invoke$1(g$1, )), (lcoc_core.list.$_invoke$1(step$1, )), ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$4(arg$2, $2, arg$1, $1, ));
if((o7668$3 is lcoc_core.ISeqable$iface)){
return ((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}, forms$1, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(g$1, )), (lcoc_core.list.$_invoke$1(expr$1, )), (lcoc_core.interleave.$_invoke$2((lcoc_core.repeat.$_invoke$1(g$1, )), lcoc_core.butlast(steps$1, ), )), ));
late final dc.dynamic $if_$3;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $3=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($3, ));
final dc.dynamic o7668$5=steps$1;
late final dc.dynamic $if_$4;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
late final dc.bool $if_$5;
if((($if_$4!=false)&&($if_$4!=null))){
$if_$5=false;
}else{
$if_$5=true;
}
late final dc.dynamic $if_$6;
if($if_$5){
$if_$6=g$1;
}else{
$if_$6=lcoc_core.last(steps$1, );
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$3(arg$3, $5, $4, ));
if((o7668$6 is lcoc_core.ISeqable$iface)){
return ((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END some_$GT_$GT_ifn18695hm$1

// BEGIN some_$GT_ifn18695hm$1
class some_$GT_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

some_$GT_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.some_$GT_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic expr$1, dc.dynamic forms$1, ){
late final dc.dynamic g$1;
if((lcoc_core.gensym is dc.Function)){
g$1=(lcoc_core.gensym as dc.Function)();
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
g$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$0());
}else{
g$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$0(lcoc_core.gensym, ));
}
final dc.dynamic steps$1=(lcoc_core.map.$_invoke$2((dc.dynamic step$1, ){
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "nil?", )), )), (lcoc_core.list.$_invoke$1(g$1, )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(null, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "->", )), )), (lcoc_core.list.$_invoke$1(g$1, )), (lcoc_core.list.$_invoke$1(step$1, )), ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$4(arg$2, $2, arg$1, $1, ));
if((o7668$3 is lcoc_core.ISeqable$iface)){
return ((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}, forms$1, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(g$1, )), (lcoc_core.list.$_invoke$1(expr$1, )), (lcoc_core.interleave.$_invoke$2((lcoc_core.repeat.$_invoke$1(g$1, )), lcoc_core.butlast(steps$1, ), )), ));
late final dc.dynamic $if_$3;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $3=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($3, ));
final dc.dynamic o7668$5=steps$1;
late final dc.dynamic $if_$4;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
late final dc.bool $if_$5;
if((($if_$4!=false)&&($if_$4!=null))){
$if_$5=false;
}else{
$if_$5=true;
}
late final dc.dynamic $if_$6;
if($if_$5){
$if_$6=g$1;
}else{
$if_$6=lcoc_core.last(steps$1, );
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$3(arg$3, $5, $4, ));
if((o7668$6 is lcoc_core.ISeqable$iface)){
return ((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END some_$GT_ifn18695hm$1

// BEGIN some_fnifn18695hm$1
class some_fnifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$5;

some_fnifn18695hm$1(this.meta$5, ):super();

dc.dynamic $_meta$0(){
return meta$5;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$5, ){
return lcoc_core.some_fnifn18695hm$1(m$2395_$AUTO_$5, );
}

dc.dynamic $_invoke$vararg(dc.dynamic p1$1, dc.dynamic p2$1, dc.dynamic p3$1, dc.dynamic ps$1, ){
final dc.dynamic ps$2=(lcoc_core.list$STAR_.$_invoke$4(p1$1, p2$1, p3$1, ps$1, ));
final dc.dynamic spn$1=lcoc_core.some_fnspn18695hm$1(null, ps$2, );
return spn$1;
}

dc.dynamic $_invoke$1(dc.dynamic p$1, ){
final dc.dynamic sp1$1=lcoc_core.some_fnsp118695hm$1(null, p$1, );
return sp1$1;
}

dc.dynamic $_invoke$2(dc.dynamic p1$2, dc.dynamic p2$2, ){
final dc.dynamic sp2$1=lcoc_core.some_fnsp218695hm$1(null, p2$2, p1$2, );
return sp2$1;
}

dc.dynamic $_invoke$3(dc.dynamic p1$3, dc.dynamic p2$3, dc.dynamic p3$2, ){
final dc.dynamic sp3$1=lcoc_core.some_fnsp318695hm$1(null, p3$2, p1$3, p2$3, );
return sp3$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END some_fnifn18695hm$1

// BEGIN some_fnsp118695hm$1
class some_fnsp118695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;
final p$1;

some_fnsp118695hm$1(this.meta$2, this.p$1, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.some_fnsp118695hm$1(m$2395_$AUTO_$2, p$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$5, dc.dynamic y$4, dc.dynamic z$3, dc.dynamic args$2, ){
final dc.dynamic or$7573_$AUTO_$5=(this.$_invoke$3(x$5, y$4, z$3, ));
if(((or$7573_$AUTO_$5!=false)&&(or$7573_$AUTO_$5!=null))){
return or$7573_$AUTO_$5;
}
return lcoc_core.some(p$1, args$2, );
}

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic x$6, ){
if((p$1 is dc.Function)){
return (p$1 as dc.Function)(x$6, );
}
if((p$1 is lcoc_core.IFn$iface)){
return ((p$1 as lcoc_core.IFn$iface).$_invoke$1(x$6, ));
}
return (lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, x$6, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$7, dc.dynamic y$5, ){
late final dc.dynamic or$7573_$AUTO_$6;
if((p$1 is dc.Function)){
or$7573_$AUTO_$6=(p$1 as dc.Function)(x$7, );
}else if((p$1 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$6=((p$1 as lcoc_core.IFn$iface).$_invoke$1(x$7, ));
}else{
or$7573_$AUTO_$6=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, x$7, ));
}
if(((or$7573_$AUTO_$6!=false)&&(or$7573_$AUTO_$6!=null))){
return or$7573_$AUTO_$6;
}
if((p$1 is dc.Function)){
return (p$1 as dc.Function)(y$5, );
}
if((p$1 is lcoc_core.IFn$iface)){
return ((p$1 as lcoc_core.IFn$iface).$_invoke$1(y$5, ));
}
return (lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, y$5, ));
}

dc.dynamic $_invoke$3(dc.dynamic x$8, dc.dynamic y$6, dc.dynamic z$4, ){
late final dc.dynamic or$7573_$AUTO_$7;
if((p$1 is dc.Function)){
or$7573_$AUTO_$7=(p$1 as dc.Function)(x$8, );
}else if((p$1 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$7=((p$1 as lcoc_core.IFn$iface).$_invoke$1(x$8, ));
}else{
or$7573_$AUTO_$7=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, x$8, ));
}
if(((or$7573_$AUTO_$7!=false)&&(or$7573_$AUTO_$7!=null))){
return or$7573_$AUTO_$7;
}
late final dc.dynamic or$7573_$AUTO_$8;
if((p$1 is dc.Function)){
or$7573_$AUTO_$8=(p$1 as dc.Function)(y$6, );
}else if((p$1 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$8=((p$1 as lcoc_core.IFn$iface).$_invoke$1(y$6, ));
}else{
or$7573_$AUTO_$8=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, y$6, ));
}
if(((or$7573_$AUTO_$8!=false)&&(or$7573_$AUTO_$8!=null))){
return or$7573_$AUTO_$8;
}
if((p$1 is dc.Function)){
return (p$1 as dc.Function)(z$4, );
}
if((p$1 is lcoc_core.IFn$iface)){
return ((p$1 as lcoc_core.IFn$iface).$_invoke$1(z$4, ));
}
return (lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, z$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END some_fnsp118695hm$1

// BEGIN some_fnsp218695hm$1
class some_fnsp218695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$3;
final p2$2;
final p1$2;

some_fnsp218695hm$1(this.meta$3, this.p2$2, this.p1$2, ):super();

dc.dynamic $_meta$0(){
return meta$3;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$3, ){
return lcoc_core.some_fnsp218695hm$1(m$2395_$AUTO_$3, p2$2, p1$2, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$9, dc.dynamic y$7, dc.dynamic z$5, dc.dynamic args$3, ){
final dc.dynamic or$7573_$AUTO_$9=(this.$_invoke$3(x$9, y$7, z$5, ));
if(((or$7573_$AUTO_$9!=false)&&(or$7573_$AUTO_$9!=null))){
return or$7573_$AUTO_$9;
}
return lcoc_core.some((dc.dynamic p1$9031_$SHARP_$1, ){
late final dc.dynamic or$7573_$AUTO_$10;
if((p1$2 is dc.Function)){
or$7573_$AUTO_$10=(p1$2 as dc.Function)(p1$9031_$SHARP_$1, );
}else if((p1$2 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$10=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(p1$9031_$SHARP_$1, ));
}else{
or$7573_$AUTO_$10=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, p1$9031_$SHARP_$1, ));
}
if(((or$7573_$AUTO_$10!=false)&&(or$7573_$AUTO_$10!=null))){
return or$7573_$AUTO_$10;
}
if((p2$2 is dc.Function)){
return (p2$2 as dc.Function)(p1$9031_$SHARP_$1, );
}
if((p2$2 is lcoc_core.IFn$iface)){
return ((p2$2 as lcoc_core.IFn$iface).$_invoke$1(p1$9031_$SHARP_$1, ));
}
return (lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, p1$9031_$SHARP_$1, ));
}, args$3, );
}

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic x$10, ){
late final dc.dynamic or$7573_$AUTO_$11;
if((p1$2 is dc.Function)){
or$7573_$AUTO_$11=(p1$2 as dc.Function)(x$10, );
}else if((p1$2 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$11=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(x$10, ));
}else{
or$7573_$AUTO_$11=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, x$10, ));
}
if(((or$7573_$AUTO_$11!=false)&&(or$7573_$AUTO_$11!=null))){
return or$7573_$AUTO_$11;
}
if((p2$2 is dc.Function)){
return (p2$2 as dc.Function)(x$10, );
}
if((p2$2 is lcoc_core.IFn$iface)){
return ((p2$2 as lcoc_core.IFn$iface).$_invoke$1(x$10, ));
}
return (lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, x$10, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$11, dc.dynamic y$8, ){
late final dc.dynamic or$7573_$AUTO_$12;
if((p1$2 is dc.Function)){
or$7573_$AUTO_$12=(p1$2 as dc.Function)(x$11, );
}else if((p1$2 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$12=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(x$11, ));
}else{
or$7573_$AUTO_$12=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, x$11, ));
}
if(((or$7573_$AUTO_$12!=false)&&(or$7573_$AUTO_$12!=null))){
return or$7573_$AUTO_$12;
}
late final dc.dynamic or$7573_$AUTO_$13;
if((p1$2 is dc.Function)){
or$7573_$AUTO_$13=(p1$2 as dc.Function)(y$8, );
}else if((p1$2 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$13=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(y$8, ));
}else{
or$7573_$AUTO_$13=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, y$8, ));
}
if(((or$7573_$AUTO_$13!=false)&&(or$7573_$AUTO_$13!=null))){
return or$7573_$AUTO_$13;
}
late final dc.dynamic or$7573_$AUTO_$14;
if((p2$2 is dc.Function)){
or$7573_$AUTO_$14=(p2$2 as dc.Function)(x$11, );
}else if((p2$2 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$14=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(x$11, ));
}else{
or$7573_$AUTO_$14=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, x$11, ));
}
if(((or$7573_$AUTO_$14!=false)&&(or$7573_$AUTO_$14!=null))){
return or$7573_$AUTO_$14;
}
if((p2$2 is dc.Function)){
return (p2$2 as dc.Function)(y$8, );
}
if((p2$2 is lcoc_core.IFn$iface)){
return ((p2$2 as lcoc_core.IFn$iface).$_invoke$1(y$8, ));
}
return (lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, y$8, ));
}

dc.dynamic $_invoke$3(dc.dynamic x$12, dc.dynamic y$9, dc.dynamic z$6, ){
late final dc.dynamic or$7573_$AUTO_$15;
if((p1$2 is dc.Function)){
or$7573_$AUTO_$15=(p1$2 as dc.Function)(x$12, );
}else if((p1$2 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$15=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(x$12, ));
}else{
or$7573_$AUTO_$15=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, x$12, ));
}
if(((or$7573_$AUTO_$15!=false)&&(or$7573_$AUTO_$15!=null))){
return or$7573_$AUTO_$15;
}
late final dc.dynamic or$7573_$AUTO_$16;
if((p1$2 is dc.Function)){
or$7573_$AUTO_$16=(p1$2 as dc.Function)(y$9, );
}else if((p1$2 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$16=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(y$9, ));
}else{
or$7573_$AUTO_$16=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, y$9, ));
}
if(((or$7573_$AUTO_$16!=false)&&(or$7573_$AUTO_$16!=null))){
return or$7573_$AUTO_$16;
}
late final dc.dynamic or$7573_$AUTO_$17;
if((p1$2 is dc.Function)){
or$7573_$AUTO_$17=(p1$2 as dc.Function)(z$6, );
}else if((p1$2 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$17=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(z$6, ));
}else{
or$7573_$AUTO_$17=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, z$6, ));
}
if(((or$7573_$AUTO_$17!=false)&&(or$7573_$AUTO_$17!=null))){
return or$7573_$AUTO_$17;
}
late final dc.dynamic or$7573_$AUTO_$18;
if((p2$2 is dc.Function)){
or$7573_$AUTO_$18=(p2$2 as dc.Function)(x$12, );
}else if((p2$2 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$18=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(x$12, ));
}else{
or$7573_$AUTO_$18=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, x$12, ));
}
if(((or$7573_$AUTO_$18!=false)&&(or$7573_$AUTO_$18!=null))){
return or$7573_$AUTO_$18;
}
late final dc.dynamic or$7573_$AUTO_$19;
if((p2$2 is dc.Function)){
or$7573_$AUTO_$19=(p2$2 as dc.Function)(y$9, );
}else if((p2$2 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$19=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(y$9, ));
}else{
or$7573_$AUTO_$19=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, y$9, ));
}
if(((or$7573_$AUTO_$19!=false)&&(or$7573_$AUTO_$19!=null))){
return or$7573_$AUTO_$19;
}
if((p2$2 is dc.Function)){
return (p2$2 as dc.Function)(z$6, );
}
if((p2$2 is lcoc_core.IFn$iface)){
return ((p2$2 as lcoc_core.IFn$iface).$_invoke$1(z$6, ));
}
return (lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, z$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END some_fnsp218695hm$1

// BEGIN some_fnsp318695hm$1
class some_fnsp318695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$4;
final p3$2;
final p1$3;
final p2$3;

some_fnsp318695hm$1(this.meta$4, this.p3$2, this.p1$3, this.p2$3, ):super();

dc.dynamic $_meta$0(){
return meta$4;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$4, ){
return lcoc_core.some_fnsp318695hm$1(m$2395_$AUTO_$4, p3$2, p1$3, p2$3, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$13, dc.dynamic y$10, dc.dynamic z$7, dc.dynamic args$4, ){
final dc.dynamic or$7573_$AUTO_$20=(this.$_invoke$3(x$13, y$10, z$7, ));
if(((or$7573_$AUTO_$20!=false)&&(or$7573_$AUTO_$20!=null))){
return or$7573_$AUTO_$20;
}
return lcoc_core.some((dc.dynamic p1$9032_$SHARP_$1, ){
late final dc.dynamic or$7573_$AUTO_$21;
if((p1$3 is dc.Function)){
or$7573_$AUTO_$21=(p1$3 as dc.Function)(p1$9032_$SHARP_$1, );
}else if((p1$3 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$21=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(p1$9032_$SHARP_$1, ));
}else{
or$7573_$AUTO_$21=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, p1$9032_$SHARP_$1, ));
}
if(((or$7573_$AUTO_$21!=false)&&(or$7573_$AUTO_$21!=null))){
return or$7573_$AUTO_$21;
}
late final dc.dynamic or$7573_$AUTO_$22;
if((p2$3 is dc.Function)){
or$7573_$AUTO_$22=(p2$3 as dc.Function)(p1$9032_$SHARP_$1, );
}else if((p2$3 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$22=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(p1$9032_$SHARP_$1, ));
}else{
or$7573_$AUTO_$22=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, p1$9032_$SHARP_$1, ));
}
if(((or$7573_$AUTO_$22!=false)&&(or$7573_$AUTO_$22!=null))){
return or$7573_$AUTO_$22;
}
if((p3$2 is dc.Function)){
return (p3$2 as dc.Function)(p1$9032_$SHARP_$1, );
}
if((p3$2 is lcoc_core.IFn$iface)){
return ((p3$2 as lcoc_core.IFn$iface).$_invoke$1(p1$9032_$SHARP_$1, ));
}
return (lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, p1$9032_$SHARP_$1, ));
}, args$4, );
}

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic x$14, ){
late final dc.dynamic or$7573_$AUTO_$23;
if((p1$3 is dc.Function)){
or$7573_$AUTO_$23=(p1$3 as dc.Function)(x$14, );
}else if((p1$3 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$23=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}else{
or$7573_$AUTO_$23=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, x$14, ));
}
if(((or$7573_$AUTO_$23!=false)&&(or$7573_$AUTO_$23!=null))){
return or$7573_$AUTO_$23;
}
late final dc.dynamic or$7573_$AUTO_$24;
if((p2$3 is dc.Function)){
or$7573_$AUTO_$24=(p2$3 as dc.Function)(x$14, );
}else if((p2$3 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$24=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}else{
or$7573_$AUTO_$24=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, x$14, ));
}
if(((or$7573_$AUTO_$24!=false)&&(or$7573_$AUTO_$24!=null))){
return or$7573_$AUTO_$24;
}
if((p3$2 is dc.Function)){
return (p3$2 as dc.Function)(x$14, );
}
if((p3$2 is lcoc_core.IFn$iface)){
return ((p3$2 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}
return (lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, x$14, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$15, dc.dynamic y$11, ){
late final dc.dynamic or$7573_$AUTO_$25;
if((p1$3 is dc.Function)){
or$7573_$AUTO_$25=(p1$3 as dc.Function)(x$15, );
}else if((p1$3 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$25=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(x$15, ));
}else{
or$7573_$AUTO_$25=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, x$15, ));
}
if(((or$7573_$AUTO_$25!=false)&&(or$7573_$AUTO_$25!=null))){
return or$7573_$AUTO_$25;
}
late final dc.dynamic or$7573_$AUTO_$26;
if((p2$3 is dc.Function)){
or$7573_$AUTO_$26=(p2$3 as dc.Function)(x$15, );
}else if((p2$3 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$26=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(x$15, ));
}else{
or$7573_$AUTO_$26=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, x$15, ));
}
if(((or$7573_$AUTO_$26!=false)&&(or$7573_$AUTO_$26!=null))){
return or$7573_$AUTO_$26;
}
late final dc.dynamic or$7573_$AUTO_$27;
if((p3$2 is dc.Function)){
or$7573_$AUTO_$27=(p3$2 as dc.Function)(x$15, );
}else if((p3$2 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$27=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(x$15, ));
}else{
or$7573_$AUTO_$27=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, x$15, ));
}
if(((or$7573_$AUTO_$27!=false)&&(or$7573_$AUTO_$27!=null))){
return or$7573_$AUTO_$27;
}
late final dc.dynamic or$7573_$AUTO_$28;
if((p1$3 is dc.Function)){
or$7573_$AUTO_$28=(p1$3 as dc.Function)(y$11, );
}else if((p1$3 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$28=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(y$11, ));
}else{
or$7573_$AUTO_$28=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, y$11, ));
}
if(((or$7573_$AUTO_$28!=false)&&(or$7573_$AUTO_$28!=null))){
return or$7573_$AUTO_$28;
}
late final dc.dynamic or$7573_$AUTO_$29;
if((p2$3 is dc.Function)){
or$7573_$AUTO_$29=(p2$3 as dc.Function)(y$11, );
}else if((p2$3 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$29=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(y$11, ));
}else{
or$7573_$AUTO_$29=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, y$11, ));
}
if(((or$7573_$AUTO_$29!=false)&&(or$7573_$AUTO_$29!=null))){
return or$7573_$AUTO_$29;
}
if((p3$2 is dc.Function)){
return (p3$2 as dc.Function)(y$11, );
}
if((p3$2 is lcoc_core.IFn$iface)){
return ((p3$2 as lcoc_core.IFn$iface).$_invoke$1(y$11, ));
}
return (lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, y$11, ));
}

dc.dynamic $_invoke$3(dc.dynamic x$16, dc.dynamic y$12, dc.dynamic z$8, ){
late final dc.dynamic or$7573_$AUTO_$30;
if((p1$3 is dc.Function)){
or$7573_$AUTO_$30=(p1$3 as dc.Function)(x$16, );
}else if((p1$3 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$30=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(x$16, ));
}else{
or$7573_$AUTO_$30=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, x$16, ));
}
if(((or$7573_$AUTO_$30!=false)&&(or$7573_$AUTO_$30!=null))){
return or$7573_$AUTO_$30;
}
late final dc.dynamic or$7573_$AUTO_$31;
if((p2$3 is dc.Function)){
or$7573_$AUTO_$31=(p2$3 as dc.Function)(x$16, );
}else if((p2$3 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$31=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(x$16, ));
}else{
or$7573_$AUTO_$31=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, x$16, ));
}
if(((or$7573_$AUTO_$31!=false)&&(or$7573_$AUTO_$31!=null))){
return or$7573_$AUTO_$31;
}
late final dc.dynamic or$7573_$AUTO_$32;
if((p3$2 is dc.Function)){
or$7573_$AUTO_$32=(p3$2 as dc.Function)(x$16, );
}else if((p3$2 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$32=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(x$16, ));
}else{
or$7573_$AUTO_$32=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, x$16, ));
}
if(((or$7573_$AUTO_$32!=false)&&(or$7573_$AUTO_$32!=null))){
return or$7573_$AUTO_$32;
}
late final dc.dynamic or$7573_$AUTO_$33;
if((p1$3 is dc.Function)){
or$7573_$AUTO_$33=(p1$3 as dc.Function)(y$12, );
}else if((p1$3 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$33=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(y$12, ));
}else{
or$7573_$AUTO_$33=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, y$12, ));
}
if(((or$7573_$AUTO_$33!=false)&&(or$7573_$AUTO_$33!=null))){
return or$7573_$AUTO_$33;
}
late final dc.dynamic or$7573_$AUTO_$34;
if((p2$3 is dc.Function)){
or$7573_$AUTO_$34=(p2$3 as dc.Function)(y$12, );
}else if((p2$3 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$34=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(y$12, ));
}else{
or$7573_$AUTO_$34=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, y$12, ));
}
if(((or$7573_$AUTO_$34!=false)&&(or$7573_$AUTO_$34!=null))){
return or$7573_$AUTO_$34;
}
late final dc.dynamic or$7573_$AUTO_$35;
if((p3$2 is dc.Function)){
or$7573_$AUTO_$35=(p3$2 as dc.Function)(y$12, );
}else if((p3$2 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$35=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(y$12, ));
}else{
or$7573_$AUTO_$35=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, y$12, ));
}
if(((or$7573_$AUTO_$35!=false)&&(or$7573_$AUTO_$35!=null))){
return or$7573_$AUTO_$35;
}
late final dc.dynamic or$7573_$AUTO_$36;
if((p1$3 is dc.Function)){
or$7573_$AUTO_$36=(p1$3 as dc.Function)(z$8, );
}else if((p1$3 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$36=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(z$8, ));
}else{
or$7573_$AUTO_$36=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, z$8, ));
}
if(((or$7573_$AUTO_$36!=false)&&(or$7573_$AUTO_$36!=null))){
return or$7573_$AUTO_$36;
}
late final dc.dynamic or$7573_$AUTO_$37;
if((p2$3 is dc.Function)){
or$7573_$AUTO_$37=(p2$3 as dc.Function)(z$8, );
}else if((p2$3 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$37=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(z$8, ));
}else{
or$7573_$AUTO_$37=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, z$8, ));
}
if(((or$7573_$AUTO_$37!=false)&&(or$7573_$AUTO_$37!=null))){
return or$7573_$AUTO_$37;
}
if((p3$2 is dc.Function)){
return (p3$2 as dc.Function)(z$8, );
}
if((p3$2 is lcoc_core.IFn$iface)){
return ((p3$2 as lcoc_core.IFn$iface).$_invoke$1(z$8, ));
}
return (lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, z$8, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END some_fnsp318695hm$1

// BEGIN some_fnspn18695hm$1
class some_fnspn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final dc.dynamic ps$2;

some_fnspn18695hm$1(this.meta$1, this.ps$2, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.some_fnspn18695hm$1(m$2395_$AUTO_$1, ps$2, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic z$1, dc.dynamic args$1, ){
final dc.dynamic or$7573_$AUTO_$1=(this.$_invoke$3(x$1, y$1, z$1, ));
if(((or$7573_$AUTO_$1!=false)&&(or$7573_$AUTO_$1!=null))){
return or$7573_$AUTO_$1;
}
return lcoc_core.some((dc.dynamic p1$9036_$SHARP_$1, ){
return lcoc_core.some(p1$9036_$SHARP_$1, args$1, );
}, ps$2, );
}

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
return lcoc_core.some((dc.dynamic p1$9033_$SHARP_$1, ){
if((p1$9033_$SHARP_$1 is dc.Function)){
return (p1$9033_$SHARP_$1 as dc.Function)(x$2, );
}
if((p1$9033_$SHARP_$1 is lcoc_core.IFn$iface)){
return ((p1$9033_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(x$2, ));
}
return (lcoc_core.IFn.extensions(p1$9033_$SHARP_$1, ).$_invoke$1(p1$9033_$SHARP_$1, x$2, ));
}, ps$2, );
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
return lcoc_core.some((dc.dynamic p1$9034_$SHARP_$1, ){
late final dc.dynamic or$7573_$AUTO_$2;
if((p1$9034_$SHARP_$1 is dc.Function)){
or$7573_$AUTO_$2=(p1$9034_$SHARP_$1 as dc.Function)(x$3, );
}else if((p1$9034_$SHARP_$1 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$2=((p1$9034_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(x$3, ));
}else{
or$7573_$AUTO_$2=(lcoc_core.IFn.extensions(p1$9034_$SHARP_$1, ).$_invoke$1(p1$9034_$SHARP_$1, x$3, ));
}
if(((or$7573_$AUTO_$2!=false)&&(or$7573_$AUTO_$2!=null))){
return or$7573_$AUTO_$2;
}
if((p1$9034_$SHARP_$1 is dc.Function)){
return (p1$9034_$SHARP_$1 as dc.Function)(y$2, );
}
if((p1$9034_$SHARP_$1 is lcoc_core.IFn$iface)){
return ((p1$9034_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(y$2, ));
}
return (lcoc_core.IFn.extensions(p1$9034_$SHARP_$1, ).$_invoke$1(p1$9034_$SHARP_$1, y$2, ));
}, ps$2, );
}

dc.dynamic $_invoke$3(dc.dynamic x$4, dc.dynamic y$3, dc.dynamic z$2, ){
return lcoc_core.some((dc.dynamic p1$9035_$SHARP_$1, ){
late final dc.dynamic or$7573_$AUTO_$3;
if((p1$9035_$SHARP_$1 is dc.Function)){
or$7573_$AUTO_$3=(p1$9035_$SHARP_$1 as dc.Function)(x$4, );
}else if((p1$9035_$SHARP_$1 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$3=((p1$9035_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(x$4, ));
}else{
or$7573_$AUTO_$3=(lcoc_core.IFn.extensions(p1$9035_$SHARP_$1, ).$_invoke$1(p1$9035_$SHARP_$1, x$4, ));
}
if(((or$7573_$AUTO_$3!=false)&&(or$7573_$AUTO_$3!=null))){
return or$7573_$AUTO_$3;
}
late final dc.dynamic or$7573_$AUTO_$4;
if((p1$9035_$SHARP_$1 is dc.Function)){
or$7573_$AUTO_$4=(p1$9035_$SHARP_$1 as dc.Function)(y$3, );
}else if((p1$9035_$SHARP_$1 is lcoc_core.IFn$iface)){
or$7573_$AUTO_$4=((p1$9035_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(y$3, ));
}else{
or$7573_$AUTO_$4=(lcoc_core.IFn.extensions(p1$9035_$SHARP_$1, ).$_invoke$1(p1$9035_$SHARP_$1, y$3, ));
}
if(((or$7573_$AUTO_$4!=false)&&(or$7573_$AUTO_$4!=null))){
return or$7573_$AUTO_$4;
}
if((p1$9035_$SHARP_$1 is dc.Function)){
return (p1$9035_$SHARP_$1 as dc.Function)(z$2, );
}
if((p1$9035_$SHARP_$1 is lcoc_core.IFn$iface)){
return ((p1$9035_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(z$2, ));
}
return (lcoc_core.IFn.extensions(p1$9035_$SHARP_$1, ).$_invoke$1(p1$9035_$SHARP_$1, z$2, ));
}, ps$2, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END some_fnspn18695hm$1

// BEGIN sort
lcoc_core.IFn$iface sort=lcoc_core.sortifn18695hm$1(null, );

// END sort

// BEGIN sort-by
lcoc_core.IFn$iface sort_by=lcoc_core.sort_byifn18695hm$1(null, );

// END sort-by

// BEGIN sort_byifn18695hm$1
class sort_byifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

sort_byifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.sort_byifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$2(dc.dynamic keyfn$1, dc.dynamic coll$1, ){
return (lcoc_core.sort_by.$_invoke$3(keyfn$1, lcoc_core.compare, coll$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic keyfn$2, dc.dynamic comp$1, dc.dynamic coll$2, ){
final dc.int Function(dc.dynamic, dc.dynamic, ) comp$PRIME_$1=lcoc_core.dart_comparator(comp$1, );
return (lcoc_core.sort.$_invoke$2((dc.dynamic x$1, dc.dynamic y$1, ){
late final dc.dynamic $if_$2;
if((keyfn$2 is dc.Function)){
$if_$2=(keyfn$2 as dc.Function)(x$1, );
}else if((keyfn$2 is lcoc_core.IFn$iface)){
$if_$2=((keyfn$2 as lcoc_core.IFn$iface).$_invoke$1(x$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(keyfn$2, ).$_invoke$1(keyfn$2, x$1, ));
}
late final dc.dynamic $if_$1;
if((keyfn$2 is dc.Function)){
$if_$1=(keyfn$2 as dc.Function)(y$1, );
}else if((keyfn$2 is lcoc_core.IFn$iface)){
$if_$1=((keyfn$2 as lcoc_core.IFn$iface).$_invoke$1(y$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(keyfn$2, ).$_invoke$1(keyfn$2, y$1, ));
}
final dc.dynamic $1=comp$PRIME_$1($if_$2, $if_$1, );
return ($1 as dc.int);
}, coll$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END sort_byifn18695hm$1

// BEGIN sorted-map
lcoc_core.IFn$iface sorted_map=lcoc_core.sorted_mapifn18695hm$1(null, );

// END sorted-map

// BEGIN sorted-map-by
lcoc_core.IFn$iface sorted_map_by=lcoc_core.sorted_map_byifn18695hm$1(null, );

// END sorted-map-by

// BEGIN sorted-set
lcoc_core.IFn$iface sorted_set=lcoc_core.sorted_setifn18695hm$1(null, );

// END sorted-set

// BEGIN sorted-set-by
lcoc_core.IFn$iface sorted_set_by=lcoc_core.sorted_set_byifn18695hm$1(null, );

// END sorted-set-by

// BEGIN sorted_map_byifn18695hm$1
class sorted_map_byifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

sorted_map_byifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.sorted_map_byifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic comparator$1, dc.dynamic keyvals$1, ){
dc.dynamic m$1=lcoc_core.HashRankedWideTreapMap(null, (lcoc_core.$_empty_treap_node as lcoc_core.TreapNode), 0, lcoc_core.dart_comparator(comparator$1, ), comparator$1, -1, );
final dc.dynamic o7668$1=keyvals$1;
dc.dynamic kvs$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
kvs$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
kvs$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
do {
final dc.dynamic some$7546_$AUTO_$1=kvs$1;
if((null==some$7546_$AUTO_$1)){
return m$1;
}
final dc.dynamic vec$9317_$1=some$7546_$AUTO_$1;
final dc.dynamic o7668$2=vec$9317_$1;
late final dc.dynamic seq$9318_$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
seq$9318_$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9318_$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic first$9319_$1=lcoc_core.first(seq$9318_$1, );
final dc.dynamic seq$9318_$2=lcoc_core.next(seq$9318_$1, );
final dc.dynamic k$1=first$9319_$1;
final dc.dynamic vkvs$1=seq$9318_$2;
final dc.dynamic some$7546_$AUTO_$2=vkvs$1;
if((null==some$7546_$AUTO_$2)){
throw dc.Exception((lcoc_core.str.$_invoke$2("No value supplied for key:", (lcoc_core.pr_str.$_invoke$1(k$1, )), )), );
}
final dc.dynamic vec$9320_$1=some$7546_$AUTO_$2;
final dc.dynamic o7668$3=vec$9320_$1;
late final dc.dynamic seq$9321_$1;
if((o7668$3 is lcoc_core.ISeqable$iface)){
seq$9321_$1=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9321_$1=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic first$9322_$1=lcoc_core.first(seq$9321_$1, );
final dc.dynamic seq$9321_$2=lcoc_core.next(seq$9321_$1, );
final dc.dynamic v$1=first$9322_$1;
final dc.dynamic kvs$2=seq$9321_$2;
final dc.dynamic coll7790$1=m$1;
final dc.dynamic k7791$1=k$1;
final dc.dynamic v7792$1=v$1;
if((coll7790$1 is lcoc_core.IAssociative$iface)){
m$1=((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, ));
}else{
m$1=((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, ));
}
kvs$1=kvs$2;
continue;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END sorted_map_byifn18695hm$1

// BEGIN sorted_mapifn18695hm$1
class sorted_mapifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

sorted_mapifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.sorted_mapifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic keyvals$1, ){
return (lcoc_core.apply.$_invoke$3(lcoc_core.sorted_map_by, lcoc_core.compare, keyvals$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END sorted_mapifn18695hm$1

// BEGIN sorted_set_byifn18695hm$1
class sorted_set_byifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

sorted_set_byifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.sorted_set_byifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic comparator$1, dc.dynamic keys$1, ){
dc.dynamic m$1=lcoc_core.HashRankedWideTreapSet(null, (lcoc_core.$_empty_treap_node as lcoc_core.TreapNode), 0, lcoc_core.dart_comparator(comparator$1, ), comparator$1, -1, );
final dc.dynamic o7668$1=keys$1;
dc.dynamic ks$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
ks$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
ks$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
do {
final dc.dynamic some$7546_$AUTO_$1=ks$1;
if((null==some$7546_$AUTO_$1)){
return m$1;
}
final dc.dynamic vec$9328_$1=some$7546_$AUTO_$1;
final dc.dynamic o7668$2=vec$9328_$1;
late final dc.dynamic seq$9329_$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
seq$9329_$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9329_$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic first$9330_$1=lcoc_core.first(seq$9329_$1, );
final dc.dynamic seq$9329_$2=lcoc_core.next(seq$9329_$1, );
final dc.dynamic k$1=first$9330_$1;
final dc.dynamic ks$PRIME_$1=seq$9329_$2;
final dc.dynamic coll7707$1=m$1;
final dc.dynamic o7708$1=k$1;
if((coll7707$1 is lcoc_core.ICollection$iface)){
m$1=((coll7707$1 as lcoc_core.ICollection$iface).$_conj$1(o7708$1, ));
}else{
m$1=((lcoc_core.ICollection.extensions(coll7707$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7707$1, o7708$1, ));
}
ks$1=ks$PRIME_$1;
continue;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END sorted_set_byifn18695hm$1

// BEGIN sorted_setifn18695hm$1
class sorted_setifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

sorted_setifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.sorted_setifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic keys$1, ){
return (lcoc_core.apply.$_invoke$3(lcoc_core.sorted_set_by, lcoc_core.compare, keys$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END sorted_setifn18695hm$1

// BEGIN sortifn18695hm$1
class sortifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

sortifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.sortifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
return (lcoc_core.sort.$_invoke$2(lcoc_core.compare, coll$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic comp$1, dc.dynamic coll$2, ){
final dc.dynamic o7668$1=coll$2;
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if((($if_$1!=false)&&($if_$1!=null))){
final dc.List a$1=lcoc_core.to_array(coll$2, );
final dc.int Function(dc.dynamic, dc.dynamic, ) comp$PRIME_$1=lcoc_core.dart_comparator(comp$1, );
a$1.sort(comp$PRIME_$1, );
final dc.List o7668$2=a$1;
late final dc.dynamic $if_$3;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic o7872$1=coll$2;
late final dc.dynamic $if_$2;
if((o7872$1 is lcoc_core.IMeta$iface)){
$if_$2=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$2=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
return lcoc_core.with_meta($if_$3, $if_$2, );
}
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END sortifn18695hm$1

// BEGIN split-at
dc.dynamic split_at(dc.dynamic n$1, dc.dynamic coll$1, ){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, (lcoc_core.take.$_invoke$2(n$1, coll$1, )), ));
fl$1[1]=(lcoc_core.drop.$_invoke$2(n$1, coll$1, ));
return lcoc_core.$_vec_owning(fl$1, );
}

// END split-at

// BEGIN split-with
dc.dynamic split_with(dc.dynamic pred$1, dc.dynamic coll$1, ){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, (lcoc_core.take_while.$_invoke$2(pred$1, coll$1, )), ));
fl$1[1]=(lcoc_core.drop_while.$_invoke$2(pred$1, coll$1, ));
return lcoc_core.$_vec_owning(fl$1, );
}

// END split-with

// BEGIN spread
dc.dynamic spread(dc.dynamic arglist$1, ){
if((null==arglist$1)){
return null;
}
if((null==lcoc_core.next(arglist$1, ))){
final dc.dynamic o7668$1=lcoc_core.first(arglist$1, );
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
return lcoc_core.cons(lcoc_core.first(arglist$1, ), lcoc_core.spread(lcoc_core.next(arglist$1, ), ), );
}

// END spread

// BEGIN str
lcoc_core.IFn$iface str=lcoc_core.strifn18695hm$1(null, );

// END str

// BEGIN stream
lcoc_core.IFn$iface stream=lcoc_core.streamifn18695hm$1(null, );

// END stream

// BEGIN streamReify18695hm$1
class streamReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final es$1;

streamReify18695hm$1(this.meta$1, this.es$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.streamReify18695hm$1(m$2395_$AUTO_$1, es$1, );
}

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic acc$1, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic acc$2, dc.dynamic x$5, ){
(es$1 as da.EventSink).add(x$5, );
return acc$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END streamReify18695hm$1

// BEGIN streamReify18695hm$2
class streamReify18695hm$2 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$3;
final es$1;

streamReify18695hm$2(this.meta$3, this.es$1, ):super();

dc.dynamic $_meta$0(){
return meta$3;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$3, ){
return lcoc_core.streamReify18695hm$2(m$2395_$AUTO_$3, es$1, );
}

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic acc$3, ){
return null;
}

dc.dynamic $_invoke$2(dc.dynamic acc$4, dc.dynamic p$9271_$1, ){
final dc.dynamic vec$9273_$1=p$9271_$1;
final dc.dynamic e$2=(lcoc_core.nth.$_invoke$3(vec$9273_$1, 0, null, ));
final dc.dynamic st$2=(lcoc_core.nth.$_invoke$3(vec$9273_$1, 1, null, ));
final dc.Object arg$1=(e$2 as dc.Object);
late final dc.StackTrace? $if_$3;
if((null!=st$2)){
$if_$3=(st$2 as dc.StackTrace);
}else{
$if_$3=null;
}
(es$1 as da.EventSink).addError(arg$1, $if_$3, );
return acc$4;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END streamReify18695hm$2

// BEGIN streamReify5ehc0s$1
class streamReify5ehc0s$1 extends dc.Object implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, da.EventSink {
final meta$2;
final es$1;
final dc.dynamic rf$1;
final dc.dynamic error_rf$1;

streamReify5ehc0s$1(this.meta$2, this.es$1, this.rf$1, this.error_rf$1, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.streamReify5ehc0s$1(m$2395_$AUTO_$2, es$1, rf$1, error_rf$1, );
}

void add(dc.dynamic x$6, ){
late final dc.dynamic $if_$1;
if((rf$1 is dc.Function)){
$if_$1=(rf$1 as dc.Function)(null, x$6, );
}else if((rf$1 is lcoc_core.IFn$iface)){
$if_$1=((rf$1 as lcoc_core.IFn$iface).$_invoke$2(null, x$6, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, null, x$6, ));
}
final dc.bool $1=lcoc_core.reduced$QMARK_($if_$1, );
if($1){
return (this.close());
}
return null;
}

void addError(dc.Object e$1, [dc.StackTrace? st$1 = null, ]){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, e$1, ));
fl$1[1]=st$1;
final lcoc_core.PersistentVector $2=lcoc_core.$_vec_owning(fl$1, );
late final dc.dynamic $if_$2;
if((error_rf$1 is dc.Function)){
$if_$2=(error_rf$1 as dc.Function)(null, $2, );
}else if((error_rf$1 is lcoc_core.IFn$iface)){
$if_$2=((error_rf$1 as lcoc_core.IFn$iface).$_invoke$2(null, $2, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(error_rf$1, ).$_invoke$2(error_rf$1, null, $2, ));
}
final dc.bool $3=lcoc_core.reduced$QMARK_($if_$2, );
if($3){
return (this.close());
}
return null;
}

void close(){
if((rf$1 is dc.Function)){
(rf$1 as dc.Function)(null, );
}else if((rf$1 is lcoc_core.IFn$iface)){
(rf$1 as lcoc_core.IFn$iface).$_invoke$1(null, );
}else{
lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, null, );
}
if((error_rf$1 is dc.Function)){
(error_rf$1 as dc.Function)(null, );
}else if((error_rf$1 is lcoc_core.IFn$iface)){
(error_rf$1 as lcoc_core.IFn$iface).$_invoke$1(null, );
}else{
lcoc_core.IFn.extensions(error_rf$1, ).$_invoke$1(error_rf$1, null, );
}
return ((es$1 as da.EventSink).close());
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END streamReify5ehc0s$1

// BEGIN streamifn18695hm$1
class streamifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$4;

streamifn18695hm$1(this.meta$4, ):super();

dc.dynamic $_meta$0(){
return meta$4;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$4, ){
return lcoc_core.streamifn18695hm$1(m$2395_$AUTO_$4, );
}

dc.dynamic $_invoke$1(dc.dynamic x$1, ){
if((x$1 is dc.Stream)){
return x$1;
}
if((x$1 is dc.Future)){
return (dc.Stream.fromFuture((x$1 as dc.Future<dc.dynamic>), ));
}
if((x$1 is dc.Iterable)){
return (dc.Stream.fromIterable((x$1 as dc.Iterable<dc.dynamic>), ));
}
if(((lcoc_core.IWatchable.satisfies(x$1, )) as dc.bool)){
final da.StreamController<dc.dynamic> ctrl$1=(da.StreamController.broadcast());
void cb$1(dc.dynamic k$1, dc.dynamic r$1, dc.dynamic o$1, dc.dynamic n$1, ){
return (ctrl$1.add(n$1, ));
}
final dc.dynamic G$9269_$1=x$1;
final dc.dynamic this7993$1=G$9269_$1;
final void Function(dc.dynamic, dc.dynamic, dc.dynamic, dc.dynamic, ) key7994$1=cb$1;
final void Function(dc.dynamic, dc.dynamic, dc.dynamic, dc.dynamic, ) f7995$1=cb$1;
if((this7993$1 is lcoc_core.IWatchable$iface)){
(this7993$1 as lcoc_core.IWatchable$iface).$_add_watch$2(key7994$1, f7995$1, );
}else{
(lcoc_core.IWatchable.extensions(this7993$1, ) as lcoc_core.IWatchable$ext).$_add_watch$2(this7993$1, key7994$1, f7995$1, );
}
return ctrl$1.stream;
}
return (dc.Stream.fromIterable(((lcoc_core.sequence.$_invoke$1(x$1, )) as dc.Iterable<dc.dynamic>), ));
}

dc.dynamic $_invoke$2(dc.dynamic xform$1, dc.dynamic x$2, ){
return (lcoc_core.stream.$_invoke$4(xform$1, lcoc_core.identity, const lcoc_core.Keyword(null, "as-errors", 2859597282, ), x$2, ));
}

dc.dynamic $_invoke$3(dc.dynamic xform$2, dc.dynamic error_xform$1, dc.dynamic x$3, ){
return (lcoc_core.stream.$_invoke$4(xform$2, error_xform$1, const lcoc_core.Keyword(null, "as-errors", 2859597282, ), x$3, ));
}

dc.dynamic $_invoke$4(dc.dynamic xform$3, dc.dynamic error_xform$2, dc.dynamic error_mode$1, dc.dynamic x$4, ){
return (dc.Stream.eventTransformed((lcoc_core.stream.$_invoke$1(x$4, )), (dc.dynamic es$1, ){
final lcoc_core.streamReify18695hm$1 f$1=lcoc_core.streamReify18695hm$1(null, es$1, );
final lcoc_core.streamReify18695hm$1 add_rf$1=f$1;
late final dc.dynamic rf$1;
if((xform$3 is dc.Function)){
rf$1=(xform$3 as dc.Function)(add_rf$1, );
}else if((xform$3 is lcoc_core.IFn$iface)){
rf$1=((xform$3 as lcoc_core.IFn$iface).$_invoke$1(add_rf$1, ));
}else{
rf$1=(lcoc_core.IFn.extensions(xform$3, ).$_invoke$1(xform$3, add_rf$1, ));
}
final dc.dynamic o7900$1=error_mode$1;
late final dc.int hash$1;
if((o7900$1 is lcoc_core.IHash$iface)){
hash$1=(((o7900$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
hash$1=(((lcoc_core.IHash.extensions(o7900$1, ) as lcoc_core.IHash$ext).$_hash$0(o7900$1, )) as dc.int);
}
late final dc.dynamic $case_$1;
switch(hash$1){
case 2891327769:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "as-values", 2891327769, ), error_mode$1, ))){
$case_$1=add_rf$1;
}else{
continue _default;
}
break;
case 2859597282:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "as-errors", 2859597282, ), error_mode$1, ))){
final lcoc_core.streamReify18695hm$2 f$2=lcoc_core.streamReify18695hm$2(null, es$1, );
$case_$1=f$2;
}else{
continue _default;
}
break;
_default: default:
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("No matching clause: ", (lcoc_core.pr_str.$_invoke$1(error_mode$1, )), )), );
}
late final dc.dynamic error_rf$1;
if((error_xform$2 is dc.Function)){
error_rf$1=(error_xform$2 as dc.Function)($case_$1, );
}else if((error_xform$2 is lcoc_core.IFn$iface)){
error_rf$1=((error_xform$2 as lcoc_core.IFn$iface).$_invoke$1($case_$1, ));
}else{
error_rf$1=(lcoc_core.IFn.extensions(error_xform$2, ).$_invoke$1(error_xform$2, $case_$1, ));
}
return lcoc_core.streamReify5ehc0s$1(null, es$1, rf$1, error_rf$1, );
}, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END streamifn18695hm$1

// BEGIN strifn18695hm$1
class strifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

strifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.strifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic xs$1, ){
final dc.StringBuffer sb$1=dc.StringBuffer((lcoc_core.str.$_invoke$1(x$1, )), );
dc.dynamic? xs$2;
if((null!=xs$1)){
xs$2=(xs$1 as dc.dynamic);
}else{
xs$2=null;
}
do {
if((xs$2!=null)){
sb$1.write((lcoc_core.str.$_invoke$1(lcoc_core.first(xs$2, ), )), );
xs$2=lcoc_core.next(xs$2, );
continue;
}else{
}
break;
} while(true);
return (sb$1.toString());
}

dc.dynamic $_invoke$0(){
return "";
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
if((null==x$2)){
return "";
}
return (x$2.toString());
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END strifn18695hm$1

// BEGIN string?
dc.bool string$QMARK_(dc.dynamic x$1, ){
return (x$1 is dc.String);
}

// END string?

// BEGIN subs
lcoc_core.IFn$iface subs=lcoc_core.subsifn18695hm$1(null, );

// END subs

// BEGIN subseq
lcoc_core.IFn$iface subseq=lcoc_core.subseqifn18695hm$1(null, );

// END subseq

// BEGIN subseqifn18695hm$1
class subseqifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuXuX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

subseqifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.subseqifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$3(dc.dynamic sc$1, dc.dynamic test$1, dc.dynamic key$1, ){
final dc.bool Function(dc.dynamic, dc.dynamic, ) pred$8840_$1=lcoc_core.identical$QMARK_;
final dc.dynamic expr$8841_$1=test$1;
if(pred$8840_$1(lcoc_core.$GT_, expr$8841_$1, )){
final dc.dynamic coll7884$1=sc$1;
final dc.dynamic from7885$1=key$1;
if((coll7884$1 is lcoc_core.ISorted$iface)){
return ((coll7884$1 as lcoc_core.ISorted$iface).$_sorted_seq$3(from7885$1, null, 8, ));
}
return ((lcoc_core.ISorted.extensions(coll7884$1, ) as lcoc_core.ISorted$ext).$_sorted_seq$3(coll7884$1, from7885$1, null, 8, ));
}
if(pred$8840_$1(lcoc_core.$GT_$EQ_, expr$8841_$1, )){
final dc.dynamic coll7884$2=sc$1;
final dc.dynamic from7885$2=key$1;
if((coll7884$2 is lcoc_core.ISorted$iface)){
return ((coll7884$2 as lcoc_core.ISorted$iface).$_sorted_seq$3(from7885$2, null, 12, ));
}
return ((lcoc_core.ISorted.extensions(coll7884$2, ) as lcoc_core.ISorted$ext).$_sorted_seq$3(coll7884$2, from7885$2, null, 12, ));
}
if(pred$8840_$1(lcoc_core.$LT_, expr$8841_$1, )){
final dc.dynamic coll7884$3=sc$1;
final dc.dynamic to7886$3=key$1;
if((coll7884$3 is lcoc_core.ISorted$iface)){
return ((coll7884$3 as lcoc_core.ISorted$iface).$_sorted_seq$3(null, to7886$3, 2, ));
}
return ((lcoc_core.ISorted.extensions(coll7884$3, ) as lcoc_core.ISorted$ext).$_sorted_seq$3(coll7884$3, null, to7886$3, 2, ));
}
if(pred$8840_$1(lcoc_core.$LT_$EQ_, expr$8841_$1, )){
final dc.dynamic coll7884$4=sc$1;
final dc.dynamic to7886$4=key$1;
if((coll7884$4 is lcoc_core.ISorted$iface)){
return ((coll7884$4 as lcoc_core.ISorted$iface).$_sorted_seq$3(null, to7886$4, 1, ));
}
return ((lcoc_core.ISorted.extensions(coll7884$4, ) as lcoc_core.ISorted$ext).$_sorted_seq$3(coll7884$4, null, to7886$4, 1, ));
}
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("No matching clause: ", expr$8841_$1, )), );
}

dc.dynamic $_invoke$5(dc.dynamic sc$2, dc.dynamic start_test$1, dc.dynamic start_key$1, dc.dynamic end_test$1, dc.dynamic end_key$1, ){
final dc.dynamic coll7884$5=sc$2;
final dc.dynamic from7885$5=start_key$1;
final dc.dynamic to7886$5=end_key$1;
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, lcoc_core.$LT_$EQ_, ));
fl$1[1]=lcoc_core.$GT_$EQ_;
final lcoc_core.PersistentHashSet $1=lcoc_core.$set_(fl$1, );
final dc.dynamic $2=($1.$_invoke$1(start_test$1, ));
late final dc.int G$8842_$2;
if((($2!=false)&&($2!=null))){
G$8842_$2=(10+4);
}else{
G$8842_$2=10;
}
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(2, lcoc_core.$LT_$EQ_, ));
fl$2[1]=lcoc_core.$GT_$EQ_;
final lcoc_core.PersistentHashSet $3=lcoc_core.$set_(fl$2, );
final dc.dynamic $4=($3.$_invoke$1(end_test$1, ));
late final dc.int flags7887$5;
if((($4!=false)&&($4!=null))){
flags7887$5=(G$8842_$2+1);
}else{
flags7887$5=G$8842_$2;
}
if((coll7884$5 is lcoc_core.ISorted$iface)){
return ((coll7884$5 as lcoc_core.ISorted$iface).$_sorted_seq$3(from7885$5, to7886$5, flags7887$5, ));
}
return ((lcoc_core.ISorted.extensions(coll7884$5, ) as lcoc_core.ISorted$ext).$_sorted_seq$3(coll7884$5, from7885$5, to7886$5, flags7887$5, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END subseqifn18695hm$1

// BEGIN subsifn18695hm$1
class subsifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

subsifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.subsifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$2(dc.dynamic s$1, dc.dynamic start$1, ){
final dc.String s$2=(s$1 as dc.String);
return (s$2.substring((start$1 as dc.int), ));
}

dc.dynamic $_invoke$3(dc.dynamic s$3, dc.dynamic start$2, dc.dynamic end$1, ){
final dc.String s$4=(s$3 as dc.String);
final dc.int arg$1=(start$2 as dc.int);
late final dc.int? $if_$1;
if((null!=end$1)){
$if_$1=(end$1 as dc.int);
}else{
$if_$1=null;
}
return (s$4.substring(arg$1, $if_$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END subsifn18695hm$1

// BEGIN subvec
lcoc_core.IFn$iface subvec=lcoc_core.subvecifn18695hm$1(null, );

// END subvec

// BEGIN subvecifn18695hm$1
class subvecifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

subvecifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.subvecifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$2(dc.dynamic v$1, dc.dynamic start$1, ){
final dc.num start$2=(start$1 as dc.num);
final dc.dynamic coll7742$1=v$1;
late final dc.dynamic $if_$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
$if_$1=((coll7742$1 as lcoc_core.ICounted$iface).$_count$0());
}else{
$if_$1=((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, ));
}
return (lcoc_core.subvec.$_invoke$3(v$1, start$2, $if_$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic v$2, dc.dynamic start$3, dc.dynamic end$1, ){
final dc.num start$4=(start$3 as dc.num);
final dc.num end$2=(end$1 as dc.num);
final dc.dynamic coll7742$2=v$2;
late final dc.dynamic n$1;
if((coll7742$2 is lcoc_core.ICounted$iface)){
n$1=((coll7742$2 as lcoc_core.ICounted$iface).$_count$0());
}else{
n$1=((lcoc_core.ICounted.extensions(coll7742$2, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$2, ));
}
final dc.int start$5=(start$4.toInt());
final dc.int end$3=(end$2.toInt());
late final dc.bool $if_$2;
if(((lcoc_core.ISubvecable.satisfies(v$2, )) as dc.bool)){
$if_$2=false;
}else{
$if_$2=true;
}
if($if_$2){
throw dc.ArgumentError("v must satisfy ISubvecable", );
}
final dc.bool or$7573_$AUTO_$1=(0>start$5);
late final dc.bool $if_$3;
if(or$7573_$AUTO_$1){
$if_$3=or$7573_$AUTO_$1;
}else{
final dc.bool or$7573_$AUTO_$2=(end$3<start$5);
if(or$7573_$AUTO_$2){
$if_$3=or$7573_$AUTO_$2;
}else{
$if_$3=((n$1 as dc.num)<end$3);
}
}
if($if_$3){
throw dc.ArgumentError("Index out of bounds", );
}
final dc.bool and$7533_$AUTO_$1=(0==start$5);
late final dc.bool $if_$4;
if(and$7533_$AUTO_$1){
$if_$4=(end$3==n$1);
}else{
$if_$4=and$7533_$AUTO_$1;
}
if($if_$4){
return v$2;
}
if((start$5<end$3)){
final dc.dynamic vector7783$1=v$2;
final dc.int start7784$1=start$5;
final dc.int end7785$1=end$3;
if((vector7783$1 is lcoc_core.ISubvecable$iface)){
return ((vector7783$1 as lcoc_core.ISubvecable$iface).$_subvec$2(start7784$1, end7785$1, ));
}
return ((lcoc_core.ISubvecable.extensions(vector7783$1, ) as lcoc_core.ISubvecable$ext).$_subvec$2(vector7783$1, start7784$1, end7785$1, ));
}
return lcoc_core.$_EMPTY_VECTOR;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END subvecifn18695hm$1

// BEGIN swap!
lcoc_core.IFn$iface swap$BANG_=lcoc_core.swap$BANG_ifn18695hm$1(null, );

// END swap!

// BEGIN swap$BANG_ifn18695hm$1
class swap$BANG_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

swap$BANG_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.swap$BANG_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic a$1, dc.dynamic f$1, dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic o7968$1=a$1;
final dc.dynamic f7969$1=f$1;
final dc.dynamic a7970$1=x$1;
final dc.dynamic b7971$1=y$1;
final dc.dynamic xs7972$1=more$1;
if((o7968$1 is lcoc_core.ISwap$iface)){
return ((o7968$1 as lcoc_core.ISwap$iface).$_swap$BANG_$4(f7969$1, a7970$1, b7971$1, xs7972$1, ));
}
return ((lcoc_core.ISwap.extensions(o7968$1, ) as lcoc_core.ISwap$ext).$_swap$BANG_$4(o7968$1, f7969$1, a7970$1, b7971$1, xs7972$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic a$2, dc.dynamic f$2, ){
final dc.dynamic o7981$1=a$2;
final dc.dynamic f7982$1=f$2;
if((o7981$1 is lcoc_core.ISwap$iface)){
return ((o7981$1 as lcoc_core.ISwap$iface).$_swap$BANG_$1(f7982$1, ));
}
return ((lcoc_core.ISwap.extensions(o7981$1, ) as lcoc_core.ISwap$ext).$_swap$BANG_$1(o7981$1, f7982$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic a$3, dc.dynamic f$3, dc.dynamic x$2, ){
final dc.dynamic o7978$1=a$3;
final dc.dynamic f7979$1=f$3;
final dc.dynamic a7980$1=x$2;
if((o7978$1 is lcoc_core.ISwap$iface)){
return ((o7978$1 as lcoc_core.ISwap$iface).$_swap$BANG_$2(f7979$1, a7980$1, ));
}
return ((lcoc_core.ISwap.extensions(o7978$1, ) as lcoc_core.ISwap$ext).$_swap$BANG_$2(o7978$1, f7979$1, a7980$1, ));
}

dc.dynamic $_invoke$4(dc.dynamic a$4, dc.dynamic f$4, dc.dynamic x$3, dc.dynamic y$2, ){
final dc.dynamic o7974$1=a$4;
final dc.dynamic f7975$1=f$4;
final dc.dynamic a7976$1=x$3;
final dc.dynamic b7977$1=y$2;
if((o7974$1 is lcoc_core.ISwap$iface)){
return ((o7974$1 as lcoc_core.ISwap$iface).$_swap$BANG_$3(f7975$1, a7976$1, b7977$1, ));
}
return ((lcoc_core.ISwap.extensions(o7974$1, ) as lcoc_core.ISwap$ext).$_swap$BANG_$3(o7974$1, f7975$1, a7976$1, b7977$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END swap$BANG_ifn18695hm$1

// BEGIN swap-vals!
lcoc_core.IFn$iface swap_vals$BANG_=lcoc_core.swap_vals$BANG_ifn18695hm$1(null, );

// END swap-vals!

// BEGIN swap_vals$BANG_ifn18695hm$1
class swap_vals$BANG_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

swap_vals$BANG_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.swap_vals$BANG_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic a$1, dc.dynamic f$1, dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic old_state$1=lcoc_core.deref(a$1, );
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, old_state$1, ));
fl$1[1]=(lcoc_core.apply.$_invoke$6(lcoc_core.swap$BANG_, a$1, f$1, x$1, y$1, more$1, ));
return lcoc_core.$_vec_owning(fl$1, );
}

dc.dynamic $_invoke$2(dc.dynamic a$2, dc.dynamic f$2, ){
final dc.dynamic old_state$2=lcoc_core.deref(a$2, );
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(2, old_state$2, ));
fl$2[1]=(lcoc_core.swap$BANG_.$_invoke$2(a$2, f$2, ));
return lcoc_core.$_vec_owning(fl$2, );
}

dc.dynamic $_invoke$3(dc.dynamic a$3, dc.dynamic f$3, dc.dynamic x$2, ){
final dc.dynamic old_state$3=lcoc_core.deref(a$3, );
final dc.List<dc.dynamic> fl$3=(dc.List<dc.dynamic>.filled(2, old_state$3, ));
fl$3[1]=(lcoc_core.swap$BANG_.$_invoke$3(a$3, f$3, x$2, ));
return lcoc_core.$_vec_owning(fl$3, );
}

dc.dynamic $_invoke$4(dc.dynamic a$4, dc.dynamic f$4, dc.dynamic x$3, dc.dynamic y$2, ){
final dc.dynamic old_state$4=lcoc_core.deref(a$4, );
final dc.List<dc.dynamic> fl$4=(dc.List<dc.dynamic>.filled(2, old_state$4, ));
fl$4[1]=(lcoc_core.swap$BANG_.$_invoke$4(a$4, f$4, x$3, y$2, ));
return lcoc_core.$_vec_owning(fl$4, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END swap_vals$BANG_ifn18695hm$1

// BEGIN symbol
lcoc_core.IFn$iface symbol=lcoc_core.symbolifn18695hm$1(null, );

// END symbol

// BEGIN symbol?
dc.bool symbol$QMARK_(dc.dynamic x$1, ){
return (x$1 is lcoc_core.Symbol);
}

// END symbol?

// BEGIN symbolifn18695hm$1
class symbolifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

symbolifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.symbolifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$1(dc.dynamic name$1, ){
if(lcoc_core.symbol$QMARK_(name$1, )){
return name$1;
}
if((name$1 is dc.String)){
final dc.String name$2=(name$1 as dc.String);
final dc.int idx$1=(name$2.indexOf("/", ));
if((idx$1<0)){
return (lcoc_core.symbol.$_invoke$2(null, name$2, ));
}
return (lcoc_core.symbol.$_invoke$2((name$2.substring(0, idx$1, )), (name$2.substring((1+idx$1), )), ));
}
if(lcoc_core.keyword$QMARK_(name$1, )){
final lcoc_core.Keyword k$1=(name$1 as lcoc_core.Keyword);
return (lcoc_core.symbol.$_invoke$2(k$1.ns, k$1.name, ));
}
throw dc.Exception((lcoc_core.str.$_invoke$2("no conversion to symbol on ", name$1.runtimeType, )), );
}

dc.dynamic $_invoke$2(dc.dynamic ns$1, dc.dynamic name$3, ){
late final dc.String? $if_$1;
if((null!=ns$1)){
$if_$1=(ns$1 as dc.String);
}else{
$if_$1=null;
}
return lcoc_core.Symbol($if_$1, (name$3 as dc.String), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END symbolifn18695hm$1

// BEGIN tagged-literal
dc.dynamic tagged_literal=null;

// END tagged-literal

// BEGIN take
lcoc_core.IFn$iface take=lcoc_core.takeifn18695hm$1(null, );

// END take

// BEGIN take-last
dc.dynamic take_last(dc.dynamic n$1, dc.dynamic coll$1, ){
final dc.dynamic o7668$1=coll$1;
dc.dynamic s$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
s$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic o7668$2=(lcoc_core.drop.$_invoke$2(n$1, coll$1, ));
dc.dynamic lead$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
lead$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
lead$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
do {
if(((lead$1!=false)&&(lead$1!=null))){
s$1=lcoc_core.next(s$1, );
lead$1=lcoc_core.next(lead$1, );
continue;
}
return s$1;
} while(true);
}

// END take-last

// BEGIN take-nth
lcoc_core.IFn$iface take_nth=lcoc_core.take_nthifn18695hm$1(null, );

// END take-nth

// BEGIN take-while
lcoc_core.IFn$iface take_while=lcoc_core.take_whileifn18695hm$1(null, );

// END take-while

// BEGIN takeReify18695hm$1
class takeReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final lcoc_core.Volatile nv$1;

takeReify18695hm$1(this.meta$1, this.rf$1, this.nv$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.takeReify18695hm$1(m$2395_$AUTO_$1, rf$1, nv$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final dc.dynamic n$2=lcoc_core.deref(nv$1, );
final lcoc_core.Volatile o8024$1=nv$1;
final lcoc_core.Volatile o7717$1=nv$1;
late final dc.dynamic $if_$1;
if((o7717$1 is lcoc_core.IDeref$iface)){
$if_$1=((o7717$1 as lcoc_core.IDeref$iface).$_deref$0());
}else{
$if_$1=((lcoc_core.IDeref.extensions(o7717$1, ) as lcoc_core.IDeref$ext).$_deref$0(o7717$1, ));
}
final dc.num new_value8025$1=(($if_$1 as dc.num)-1);
late final dc.dynamic nn$1;
if((o8024$1 is lcoc_core.IVolatile$iface)){
nn$1=((o8024$1 as lcoc_core.IVolatile$iface).$_vreset$BANG_$1(new_value8025$1, ));
}else{
nn$1=((lcoc_core.IVolatile.extensions(o8024$1, ) as lcoc_core.IVolatile$ext).$_vreset$BANG_$1(o8024$1, new_value8025$1, ));
}
late final dc.dynamic result$3;
if((0<(n$2 as dc.num))){
if((rf$1 is dc.Function)){
result$3=(rf$1 as dc.Function)(result$2, input$1, );
}else if((rf$1 is lcoc_core.IFn$iface)){
result$3=((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}else{
result$3=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}
}else{
result$3=result$2;
}
late final dc.bool $if_$2;
if((0<(nn$1 as dc.num))){
$if_$2=false;
}else{
$if_$2=true;
}
if($if_$2){
return lcoc_core.ensure_reduced(result$3, );
}
return result$3;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END takeReify18695hm$1

// BEGIN take_nthReify18695hm$1
class take_nthReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final n$1;
final lcoc_core.Volatile iv$1;
final rf$1;

take_nthReify18695hm$1(this.meta$1, this.n$1, this.iv$1, this.rf$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.take_nthReify18695hm$1(m$2395_$AUTO_$1, n$1, iv$1, rf$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final lcoc_core.Volatile o8024$1=iv$1;
final lcoc_core.Volatile o7717$1=iv$1;
late final dc.num cast$1;
if((o7717$1 is lcoc_core.IDeref$iface)){
cast$1=(((o7717$1 as lcoc_core.IDeref$iface).$_deref$0()) as dc.num);
}else{
cast$1=(((lcoc_core.IDeref.extensions(o7717$1, ) as lcoc_core.IDeref$ext).$_deref$0(o7717$1, )) as dc.num);
}
final dc.num new_value8025$1=(1+cast$1);
late final dc.int i$1;
if((o8024$1 is lcoc_core.IVolatile$iface)){
i$1=(((o8024$1 as lcoc_core.IVolatile$iface).$_vreset$BANG_$1(new_value8025$1, )) as dc.int);
}else{
i$1=(((lcoc_core.IVolatile.extensions(o8024$1, ) as lcoc_core.IVolatile$ext).$_vreset$BANG_$1(o8024$1, new_value8025$1, )) as dc.int);
}
if((0==(i$1.remainder((n$1 as dc.num), )))){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}
return result$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END take_nthReify18695hm$1

// BEGIN take_nthifn18695hm$1
class take_nthifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

take_nthifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.take_nthifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$1(dc.dynamic n$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile iv$1=lcoc_core.volatile$BANG_(-1, );
final lcoc_core.take_nthReify18695hm$1 f$1=lcoc_core.take_nthReify18695hm$1(null, n$1, iv$1, rf$1, );
return f$1;
};
}

dc.dynamic $_invoke$2(dc.dynamic n$2, dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic temp$7560_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
temp$7560_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7560_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if(((temp$7560_$AUTO_$1!=false)&&(temp$7560_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7560_$AUTO_$1;
return lcoc_core.cons(lcoc_core.first(s$1, ), (lcoc_core.take_nth.$_invoke$2(n$2, (lcoc_core.drop.$_invoke$2(n$2, s$1, )), )), );
}
return null;
} as dc.dynamic?), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END take_nthifn18695hm$1

// BEGIN take_whileReify18695hm$1
class take_whileReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final pred$1;

take_whileReify18695hm$1(this.meta$1, this.rf$1, this.pred$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.take_whileReify18695hm$1(m$2395_$AUTO_$1, rf$1, pred$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
late final dc.dynamic $if_$1;
if((pred$1 is dc.Function)){
$if_$1=(pred$1 as dc.Function)(input$1, );
}else if((pred$1 is lcoc_core.IFn$iface)){
$if_$1=((pred$1 as lcoc_core.IFn$iface).$_invoke$1(input$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(pred$1, ).$_invoke$1(pred$1, input$1, ));
}
if((($if_$1!=false)&&($if_$1!=null))){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}
return lcoc_core.reduced(result$2, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END take_whileReify18695hm$1

// BEGIN take_whileifn18695hm$1
class take_whileifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

take_whileifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.take_whileifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$1(dc.dynamic pred$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.take_whileReify18695hm$1 f$1=lcoc_core.take_whileReify18695hm$1(null, rf$1, pred$1, );
return f$1;
};
}

dc.dynamic $_invoke$2(dc.dynamic pred$2, dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic temp$7560_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
temp$7560_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7560_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if(((temp$7560_$AUTO_$1!=false)&&(temp$7560_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7560_$AUTO_$1;
final dc.dynamic arg$1=lcoc_core.first(s$1, );
late final dc.dynamic $if_$2;
if((pred$2 is dc.Function)){
$if_$2=(pred$2 as dc.Function)(arg$1, );
}else if((pred$2 is lcoc_core.IFn$iface)){
$if_$2=((pred$2 as lcoc_core.IFn$iface).$_invoke$1(arg$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(pred$2, ).$_invoke$1(pred$2, arg$1, ));
}
if((($if_$2!=false)&&($if_$2!=null))){
return lcoc_core.cons(lcoc_core.first(s$1, ), (lcoc_core.take_while.$_invoke$2(pred$2, lcoc_core.rest(s$1, ), )), );
}
return null;
}
return null;
} as dc.dynamic?), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END take_whileifn18695hm$1

// BEGIN takeifn18695hm$1
class takeifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

takeifn18695hm$1(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$2, ){
return lcoc_core.takeifn18695hm$1(m$2395_$AUTO_$2, );
}

dc.dynamic $_invoke$1(dc.dynamic n$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile nv$1=lcoc_core.volatile$BANG_(n$1, );
final lcoc_core.takeReify18695hm$1 f$1=lcoc_core.takeReify18695hm$1(null, rf$1, nv$1, );
return f$1;
};
}

dc.dynamic $_invoke$2(dc.dynamic n$3, dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
if((0<(n$3 as dc.num))){
final dc.dynamic o7668$1=coll$1;
late final dc.dynamic temp$7560_$AUTO_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
temp$7560_$AUTO_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7560_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
if(((temp$7560_$AUTO_$1!=false)&&(temp$7560_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7560_$AUTO_$1;
return lcoc_core.cons(lcoc_core.first(s$1, ), (lcoc_core.take.$_invoke$2(((n$3 as dc.num)-1), lcoc_core.rest(s$1, ), )), );
}
return null;
}
return null;
} as dc.dynamic?), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END takeifn18695hm$1

// BEGIN to-array
dc.List to_array(dc.dynamic coll$1, ){
if((coll$1 is dc.List)){
return ((coll$1 as dc.List).toList(growable: false, ));
}
final dc.dynamic coll7742$1=coll$1;
late final dc.int length$1;
if((coll7742$1 is lcoc_core.ICounted$iface)){
length$1=(((coll7742$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
length$1=(((lcoc_core.ICounted.extensions(coll7742$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7742$1, )) as dc.int);
}
final dc.List<dc.dynamic> ary$1=(dc.List.filled(length$1, null, ));
final dc.dynamic o7668$1=coll$1;
dc.dynamic s$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
s$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
dc.int idx$1=0;
do {
if((null==s$1)){
return ary$1;
}
final dc.dynamic v$8151_$AUTO_$1=lcoc_core.first(s$1, );
ary$1[idx$1]=v$8151_$AUTO_$1;
s$1=lcoc_core.next(s$1, );
idx$1=(1+idx$1);
continue;
} while(true);
}

// END to-array

// BEGIN trampoline
lcoc_core.IFn$iface trampoline=lcoc_core.trampolineifn18695hm$1(null, );

// END trampoline

// BEGIN trampolineifn18695hm$1
class trampolineifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

trampolineifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.trampolineifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic args$1, ){
return (lcoc_core.trampoline.$_invoke$1((){
return (lcoc_core.apply.$_invoke$2(f$1, args$1, ));
}, ));
}

dc.dynamic $_invoke$1(dc.dynamic f$3, ){
dc.dynamic f$2=f$3;
do {
late final dc.dynamic ret$1;
if((f$2 is dc.Function)){
ret$1=(f$2 as dc.Function)();
}else if((f$2 is lcoc_core.IFn$iface)){
ret$1=((f$2 as lcoc_core.IFn$iface).$_invoke$0());
}else{
ret$1=(lcoc_core.IFn.extensions(f$2, ).$_invoke$0(f$2, ));
}
if(lcoc_core.fn$QMARK_(ret$1, )){
f$2=ret$1;
continue;
}
return ret$1;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END trampolineifn18695hm$1

// BEGIN transduce
lcoc_core.IFn$iface transduce=lcoc_core.transduceifn18695hm$1(null, );

// END transduce

// BEGIN transduceifn18695hm$1
class transduceifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

transduceifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.transduceifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$3(dc.dynamic xform$1, dc.dynamic f$1, dc.dynamic coll$1, ){
late final dc.dynamic $if_$1;
if((f$1 is dc.Function)){
$if_$1=(f$1 as dc.Function)();
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$1=((f$1 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$0(f$1, ));
}
return (lcoc_core.transduce.$_invoke$4(xform$1, f$1, $if_$1, coll$1, ));
}

dc.dynamic $_invoke$4(dc.dynamic xform$2, dc.dynamic f$2, dc.dynamic init$1, dc.dynamic coll$2, ){
late final dc.dynamic f$3;
if((xform$2 is dc.Function)){
f$3=(xform$2 as dc.Function)(f$2, );
}else if((xform$2 is lcoc_core.IFn$iface)){
f$3=((xform$2 as lcoc_core.IFn$iface).$_invoke$1(f$2, ));
}else{
f$3=(lcoc_core.IFn.extensions(xform$2, ).$_invoke$1(xform$2, f$2, ));
}
final dc.dynamic coll7722$1=coll$2;
final dc.dynamic f7723$1=f$3;
final dc.dynamic start7724$1=init$1;
late final dc.dynamic $if_$2;
if((coll7722$1 is lcoc_core.IReduce$iface)){
$if_$2=((coll7722$1 as lcoc_core.IReduce$iface).$_reduce$2(f7723$1, start7724$1, ));
}else{
$if_$2=((lcoc_core.IReduce.extensions(coll7722$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7722$1, f7723$1, start7724$1, ));
}
if((f$3 is dc.Function)){
return (f$3 as dc.Function)($if_$2, );
}
if((f$3 is lcoc_core.IFn$iface)){
return ((f$3 as lcoc_core.IFn$iface).$_invoke$1($if_$2, ));
}
return (lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, $if_$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END transduceifn18695hm$1

// BEGIN transient
dc.dynamic transient(dc.dynamic coll$1, ){
final dc.dynamic coll7928$1=coll$1;
if((coll7928$1 is lcoc_core.IEditableCollection$iface)){
return ((coll7928$1 as lcoc_core.IEditableCollection$iface).$_as_transient$0());
}
return ((lcoc_core.IEditableCollection.extensions(coll7928$1, ) as lcoc_core.IEditableCollection$ext).$_as_transient$0(coll7928$1, ));
}

// END transient

// BEGIN tree-seq
dc.dynamic tree_seq(dc.dynamic branch$QMARK_$1, dc.dynamic children$1, dc.dynamic root$1, ){
lcoc_core.LazySeq walk$1(dc.dynamic node$1, ){
return lcoc_core.LazySeq(null, ((){
late final dc.dynamic $if_$1;
if((branch$QMARK_$1 is dc.Function)){
$if_$1=(branch$QMARK_$1 as dc.Function)(node$1, );
}else if((branch$QMARK_$1 is lcoc_core.IFn$iface)){
$if_$1=((branch$QMARK_$1 as lcoc_core.IFn$iface).$_invoke$1(node$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(branch$QMARK_$1, ).$_invoke$1(branch$QMARK_$1, node$1, ));
}
late final dc.dynamic $if_$3;
if((($if_$1!=false)&&($if_$1!=null))){
late final dc.dynamic $if_$2;
if((children$1 is dc.Function)){
$if_$2=(children$1 as dc.Function)(node$1, );
}else if((children$1 is lcoc_core.IFn$iface)){
$if_$2=((children$1 as lcoc_core.IFn$iface).$_invoke$1(node$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(children$1, ).$_invoke$1(children$1, node$1, ));
}
$if_$3=(lcoc_core.mapcat.$_invoke$2(walk$1, $if_$2, ));
}else{
$if_$3=null;
}
return lcoc_core.cons(node$1, $if_$3, );
} as dc.dynamic?), null, -1, );
}
final lcoc_core.LazySeq Function(dc.dynamic, ) walk$2=walk$1;
return walk$2(root$1, );
}

// END tree-seq

// BEGIN true?
dc.bool true$QMARK_(dc.dynamic x$1, ){
return dc.identical(x$1, true, );
}

// END true?

// BEGIN tv-editable-array-for
dc.dynamic tv_editable_array_for(dc.dynamic tv$1, dc.dynamic i$1, ){
final lcoc_core.TransientVector arg$2=(tv$1 as lcoc_core.TransientVector);
final lcoc_core.VectorNode arg$1=lcoc_core.tv_ensure_editable((tv$1 as lcoc_core.TransientVector).edit, (tv$1 as lcoc_core.TransientVector).root, );
arg$2.root=arg$1;
lcoc_core.VectorNode node$1=arg$1;
dc.int level$1=(tv$1 as lcoc_core.TransientVector).shift;
do {
if((0<level$1)){
final dc.List arr$1=node$1.arr;
final dc.int j$1=(((i$1 as dc.int)>>(31&level$1))&31);
final lcoc_core.VectorNode v$8151_$AUTO_$1=lcoc_core.tv_ensure_editable((tv$1 as lcoc_core.TransientVector).edit, (arr$1[j$1]), );
arr$1[j$1]=v$8151_$AUTO_$1;
node$1=v$8151_$AUTO_$1;
level$1=(level$1-5);
continue;
}
return node$1.arr;
} while(true);
}

// END tv-editable-array-for

// BEGIN tv-ensure-editable
lcoc_core.VectorNode tv_ensure_editable(dc.dynamic edit$1, dc.dynamic node$1, ){
if(dc.identical(edit$1, (node$1 as lcoc_core.VectorNode).edit, )){
return (node$1 as lcoc_core.VectorNode);
}
final dc.List arr$1=(node$1 as lcoc_core.VectorNode).arr;
return lcoc_core.VectorNode(edit$1, lcoc_core.aresize(arr$1, arr$1.length, 32, null, ), );
}

// END tv-ensure-editable

// BEGIN tv-new-path
lcoc_core.VectorNode tv_new_path(dc.dynamic edit$1, dc.dynamic level$1, dc.dynamic node$1, ){
dc.int ll$1=(level$1 as dc.int);
lcoc_core.VectorNode ret$1=(node$1 as lcoc_core.VectorNode);
do {
if((0==ll$1)){
return ret$1;
}
final dc.List<dc.dynamic> arr$1=(dc.List<dc.dynamic>.filled(32, null, ));
final lcoc_core.VectorNode v$8151_$AUTO_$1=ret$1;
arr$1[0]=v$8151_$AUTO_$1;
ll$1=(ll$1-5);
ret$1=lcoc_core.VectorNode(edit$1, arr$1, );
continue;
} while(true);
}

// END tv-new-path

// BEGIN tv-pop-tail!
dc.dynamic tv_pop_tail$BANG_(dc.dynamic tv$1, dc.dynamic level$1, dc.dynamic node$1, ){
final dc.int n$1=((tv$1 as lcoc_core.TransientVector).cnt-2);
final dc.int subidx$1=((n$1>>(31&(level$1 as dc.int)))&31);
if((5<(level$1 as dc.int))){
final dc.dynamic or$7573_$AUTO_$1=lcoc_core.tv_pop_tail$BANG_((tv$1 as lcoc_core.TransientVector), ((level$1 as dc.int)-5), ((node$1 as lcoc_core.VectorNode).arr[subidx$1]), );
if(((or$7573_$AUTO_$1!=false)&&(or$7573_$AUTO_$1!=null))){
return or$7573_$AUTO_$1;
}
if((0<subidx$1)){
(node$1 as lcoc_core.VectorNode).arr[subidx$1]=null;
return true;
}
return null;
}
if((0<subidx$1)){
(node$1 as lcoc_core.VectorNode).arr[subidx$1]=null;
return true;
}
return null;
}

// END tv-pop-tail!

// BEGIN tv-push-tail
lcoc_core.VectorNode tv_push_tail(dc.dynamic tv$1, dc.dynamic level$1, dc.dynamic parent$1, dc.dynamic tail_node$1, ){
final dc.dynamic? edit$1=(tv$1 as lcoc_core.TransientVector).edit;
final lcoc_core.VectorNode ret$1=lcoc_core.tv_ensure_editable(edit$1, (parent$1 as lcoc_core.VectorNode), );
final dc.int subidx$1=((((tv$1 as lcoc_core.TransientVector).cnt-1)>>(31&(level$1 as dc.int)))&31);
final dc.int level$2=((level$1 as dc.int)-5);
late final dc.dynamic v$8151_$AUTO_$1;
if((0==level$2)){
v$8151_$AUTO_$1=tail_node$1;
}else{
final dc.dynamic child$1=(ret$1.arr[subidx$1]);
if((null==child$1)){
v$8151_$AUTO_$1=lcoc_core.tv_new_path(edit$1, level$2, tail_node$1, );
}else{
v$8151_$AUTO_$1=lcoc_core.tv_push_tail((tv$1 as lcoc_core.TransientVector), level$2, child$1, tail_node$1, );
}
}
ret$1.arr[subidx$1]=v$8151_$AUTO_$1;
return ret$1;
}

// END tv-push-tail

// BEGIN u32
dc.int u32(dc.dynamic x$1, ){
return (4294967295&(x$1 as dc.int));
}

// END u32

// BEGIN u32-add
dc.int u32_add(dc.dynamic x$1, dc.dynamic y$1, ){
return (4294967295&((x$1 as dc.int)+(y$1 as dc.int)));
}

// END u32-add

// BEGIN u32-bit-count
dc.int u32_bit_count(dc.dynamic v$1, ){
final dc.int v$2=((v$1 as dc.int)-(((v$1 as dc.int)>>(1&63))&1431655765));
final dc.int v$3=((v$2&858993459)+((v$2>>(2&63))&858993459));
return (63&((((v$3+(v$3>>(4&63)))&252645135)*16843009)>>(24&63)));
}

// END u32-bit-count

// BEGIN u32-bit-shift-left
dc.int u32_bit_shift_left(dc.dynamic x$1, dc.dynamic n$1, ){
return (4294967295&((x$1 as dc.int)<<(31&(n$1 as dc.int))));
}

// END u32-bit-shift-left

// BEGIN u32-bit-shift-right
dc.int u32_bit_shift_right(dc.dynamic x$1, dc.dynamic n$1, ){
return ((x$1 as dc.int)>>(31&(n$1 as dc.int)));
}

// END u32-bit-shift-right

// BEGIN u32-mul
dc.int u32_mul(dc.dynamic x$1, dc.dynamic y$1, ){
return (4294967295&((4294967295&((4294901760&(x$1 as dc.int))*(y$1 as dc.int)))+((65535&(x$1 as dc.int))*(y$1 as dc.int))));
}

// END u32-mul

// BEGIN u32-rol
dc.int u32_rol(dc.dynamic x$1, dc.dynamic n$1, ){
return ((4294967295&((x$1 as dc.int)<<(31&(n$1 as dc.int))))|((x$1 as dc.int)>>(31&((-(n$1 as dc.int))))));
}

// END u32-rol

// BEGIN u32x2-bit-count
dc.int u32x2_bit_count(dc.dynamic hi$1, dc.dynamic lo$1, ){
final dc.int hi$2=((hi$1 as dc.int)-(((hi$1 as dc.int)>>(1&63))&1431655765));
final dc.int lo$2=((lo$1 as dc.int)-(((lo$1 as dc.int)>>(1&63))&1431655765));
final dc.int v$1=((((hi$2&858993459)+((hi$2>>(2&63))&858993459))+(lo$2&858993459))+((lo$2>>(2&63))&858993459));
return (127&((((252645135&v$1)+(252645135&(v$1>>(4&63))))*16843009)>>(24&63)));
}

// END u32x2-bit-count

// BEGIN unchecked-array-for
dc.List unchecked_array_for(dc.dynamic root$1, dc.dynamic shift$1, dc.dynamic i$1, ){
lcoc_core.VectorNode node$1=(root$1 as lcoc_core.VectorNode);
dc.int level$1=(shift$1 as dc.int);
do {
if((0<level$1)){
node$1=(node$1.arr[(((i$1 as dc.int)>>(31&level$1))&31)]);
level$1=(level$1-5);
continue;
}
return node$1.arr;
} while(true);
}

// END unchecked-array-for

// BEGIN unquote
dc.dynamic unquote=null;

// END unquote

// BEGIN unquote-splicing
dc.dynamic unquote_splicing=null;

// END unquote-splicing

// BEGIN unreduced
dc.dynamic unreduced(dc.dynamic x$1, ){
if(lcoc_core.reduced$QMARK_(x$1, )){
final dc.dynamic o7717$1=x$1;
if((o7717$1 is lcoc_core.IDeref$iface)){
return ((o7717$1 as lcoc_core.IDeref$iface).$_deref$0());
}
return ((lcoc_core.IDeref.extensions(o7717$1, ) as lcoc_core.IDeref$ext).$_deref$0(o7717$1, ));
}
return x$1;
}

// END unreduced

// BEGIN update
lcoc_core.IFn$iface update=lcoc_core.updateifn18695hm$1(null, );

// END update

// BEGIN update-in
lcoc_core.IFn$iface update_in=lcoc_core.update_inifn18695hm$1(null, );

// END update-in

// BEGIN update-keys
dc.dynamic update_keys(dc.dynamic m$1, dc.dynamic f$1, ){
final dc.dynamic ret$1=lcoc_core.persistent$BANG_(lcoc_core.reduce_kv((dc.dynamic acc$1, dc.dynamic k$1, dc.dynamic v$1, ){
late final dc.dynamic $if_$1;
if((f$1 is dc.Function)){
$if_$1=(f$1 as dc.Function)(k$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$1=((f$1 as lcoc_core.IFn$iface).$_invoke$1(k$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$1(f$1, k$1, ));
}
return (lcoc_core.assoc$BANG_.$_invoke$3(acc$1, $if_$1, v$1, ));
}, lcoc_core.transient(lcoc_core.$_EMPTY_MAP, ), m$1, ), );
final dc.dynamic o7872$1=m$1;
late final dc.dynamic $if_$2;
if((o7872$1 is lcoc_core.IMeta$iface)){
$if_$2=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$2=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
return lcoc_core.with_meta(ret$1, $if_$2, );
}

// END update-keys

// BEGIN update-vals
dc.dynamic update_vals(dc.dynamic m$1, dc.dynamic f$1, ){
late final dc.dynamic $if_$2;
if(((lcoc_core.IEditableCollection.satisfies(m$1, )) as dc.bool)){
$if_$2=lcoc_core.transient(m$1, );
}else{
$if_$2=lcoc_core.transient(lcoc_core.$_EMPTY_MAP, );
}
final dc.dynamic $1=lcoc_core.reduce_kv((dc.dynamic acc$1, dc.dynamic k$1, dc.dynamic v$1, ){
late final dc.dynamic $if_$1;
if((f$1 is dc.Function)){
$if_$1=(f$1 as dc.Function)(v$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$1=((f$1 as lcoc_core.IFn$iface).$_invoke$1(v$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$1(f$1, v$1, ));
}
return (lcoc_core.assoc$BANG_.$_invoke$3(acc$1, k$1, $if_$1, ));
}, $if_$2, m$1, );
final dc.dynamic $2=lcoc_core.persistent$BANG_($1, );
final dc.dynamic o7872$1=m$1;
late final dc.dynamic $if_$3;
if((o7872$1 is lcoc_core.IMeta$iface)){
$if_$3=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$3=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
return lcoc_core.with_meta($2, $if_$3, );
}

// END update-vals

// BEGIN update_inifn18695hm$1
class update_inifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

update_inifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.update_inifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic m$1, dc.dynamic ks$1, dc.dynamic f$1, dc.dynamic args$1, ){
dc.dynamic up$1(dc.dynamic m$2, dc.dynamic ks$2, dc.dynamic f$2, dc.dynamic args$2, ){
final dc.dynamic vec$9046_$1=ks$2;
final dc.dynamic o7668$1=vec$9046_$1;
late final dc.dynamic seq$9047_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
seq$9047_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$9047_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic first$9048_$1=lcoc_core.first(seq$9047_$1, );
final dc.dynamic seq$9047_$2=lcoc_core.next(seq$9047_$1, );
final dc.dynamic k$1=first$9048_$1;
final dc.dynamic ks$3=seq$9047_$2;
if(((ks$3!=false)&&(ks$3!=null))){
final dc.dynamic coll7790$1=m$2;
final dc.dynamic k7791$1=k$1;
final dc.dynamic v7792$1=up$1((lcoc_core.$get_.$_invoke$2(m$2, k$1, )), ks$3, f$2, args$2, );
if((coll7790$1 is lcoc_core.IAssociative$iface)){
return ((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, ));
}
final dc.dynamic coll7790$2=m$2;
final dc.dynamic k7791$2=k$1;
final dc.dynamic v7792$2=(lcoc_core.apply.$_invoke$3(f$2, (lcoc_core.$get_.$_invoke$2(m$2, k$1, )), args$2, ));
if((coll7790$2 is lcoc_core.IAssociative$iface)){
return ((coll7790$2 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$2, v7792$2, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$2, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$2, k7791$2, v7792$2, ));
}
final dc.dynamic Function(dc.dynamic, dc.dynamic, dc.dynamic, dc.dynamic, ) up$2=up$1;
return up$2(m$1, ks$1, f$1, args$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END update_inifn18695hm$1

// BEGIN updateifn18695hm$1
class updateifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuXXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

updateifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.updateifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic m$1, dc.dynamic k$1, dc.dynamic f$1, dc.dynamic x$1, dc.dynamic y$1, dc.dynamic z$1, dc.dynamic more$1, ){
final dc.dynamic coll7790$1=m$1;
final dc.dynamic k7791$1=k$1;
final dc.dynamic v7792$1=(lcoc_core.apply.$_invoke$6(f$1, (lcoc_core.$get_.$_invoke$2(m$1, k$1, )), x$1, y$1, z$1, more$1, ));
if((coll7790$1 is lcoc_core.IAssociative$iface)){
return ((coll7790$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$1, v7792$1, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$1, k7791$1, v7792$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic m$2, dc.dynamic k$2, dc.dynamic f$2, ){
final dc.dynamic coll7790$2=m$2;
final dc.dynamic k7791$2=k$2;
final dc.dynamic arg$1=(lcoc_core.$get_.$_invoke$2(m$2, k$2, ));
late final dc.dynamic v7792$2;
if((f$2 is dc.Function)){
v7792$2=(f$2 as dc.Function)(arg$1, );
}else if((f$2 is lcoc_core.IFn$iface)){
v7792$2=((f$2 as lcoc_core.IFn$iface).$_invoke$1(arg$1, ));
}else{
v7792$2=(lcoc_core.IFn.extensions(f$2, ).$_invoke$1(f$2, arg$1, ));
}
if((coll7790$2 is lcoc_core.IAssociative$iface)){
return ((coll7790$2 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$2, v7792$2, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$2, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$2, k7791$2, v7792$2, ));
}

dc.dynamic $_invoke$4(dc.dynamic m$3, dc.dynamic k$3, dc.dynamic f$3, dc.dynamic x$2, ){
final dc.dynamic coll7790$3=m$3;
final dc.dynamic k7791$3=k$3;
final dc.dynamic arg$2=(lcoc_core.$get_.$_invoke$2(m$3, k$3, ));
late final dc.dynamic v7792$3;
if((f$3 is dc.Function)){
v7792$3=(f$3 as dc.Function)(arg$2, x$2, );
}else if((f$3 is lcoc_core.IFn$iface)){
v7792$3=((f$3 as lcoc_core.IFn$iface).$_invoke$2(arg$2, x$2, ));
}else{
v7792$3=(lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, arg$2, x$2, ));
}
if((coll7790$3 is lcoc_core.IAssociative$iface)){
return ((coll7790$3 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$3, v7792$3, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$3, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$3, k7791$3, v7792$3, ));
}

dc.dynamic $_invoke$5(dc.dynamic m$4, dc.dynamic k$4, dc.dynamic f$4, dc.dynamic x$3, dc.dynamic y$2, ){
final dc.dynamic coll7790$4=m$4;
final dc.dynamic k7791$4=k$4;
final dc.dynamic arg$3=(lcoc_core.$get_.$_invoke$2(m$4, k$4, ));
late final dc.dynamic v7792$4;
if((f$4 is dc.Function)){
v7792$4=(f$4 as dc.Function)(arg$3, x$3, y$2, );
}else if((f$4 is lcoc_core.IFn$iface)){
v7792$4=((f$4 as lcoc_core.IFn$iface).$_invoke$3(arg$3, x$3, y$2, ));
}else{
v7792$4=(lcoc_core.IFn.extensions(f$4, ).$_invoke$3(f$4, arg$3, x$3, y$2, ));
}
if((coll7790$4 is lcoc_core.IAssociative$iface)){
return ((coll7790$4 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$4, v7792$4, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$4, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$4, k7791$4, v7792$4, ));
}

dc.dynamic $_invoke$6(dc.dynamic m$5, dc.dynamic k$5, dc.dynamic f$5, dc.dynamic x$4, dc.dynamic y$3, dc.dynamic z$2, ){
final dc.dynamic coll7790$5=m$5;
final dc.dynamic k7791$5=k$5;
final dc.dynamic arg$4=(lcoc_core.$get_.$_invoke$2(m$5, k$5, ));
late final dc.dynamic v7792$5;
if((f$5 is dc.Function)){
v7792$5=(f$5 as dc.Function)(arg$4, x$4, y$3, z$2, );
}else if((f$5 is lcoc_core.IFn$iface)){
v7792$5=((f$5 as lcoc_core.IFn$iface).$_invoke$4(arg$4, x$4, y$3, z$2, ));
}else{
v7792$5=(lcoc_core.IFn.extensions(f$5, ).$_invoke$4(f$5, arg$4, x$4, y$3, z$2, ));
}
if((coll7790$5 is lcoc_core.IAssociative$iface)){
return ((coll7790$5 as lcoc_core.IAssociative$iface).$_assoc$2(k7791$5, v7792$5, ));
}
return ((lcoc_core.IAssociative.extensions(coll7790$5, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7790$5, k7791$5, v7792$5, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END updateifn18695hm$1

// BEGIN uri?
dc.dynamic uri$QMARK_(dc.dynamic x$1, ){
return (x$1 is dc.Uri);
}

// END uri?

// BEGIN val
dc.dynamic val(dc.dynamic e$1, ){
return (e$1 as dc.MapEntry).value;
}

// END val

// BEGIN validate-atom-state
dc.dynamic validate_atom_state(dc.dynamic validator$1, dc.dynamic new_state$1, ){
late final dc.dynamic $if_$1;
if((validator$1 is dc.Function)){
$if_$1=(validator$1 as dc.Function)(new_state$1, );
}else if((validator$1 is lcoc_core.IFn$iface)){
$if_$1=((validator$1 as lcoc_core.IFn$iface).$_invoke$1(new_state$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(validator$1, ).$_invoke$1(validator$1, new_state$1, ));
}
if((($if_$1!=false)&&($if_$1!=null))){
return null;
}
throw dc.Exception("Validator rejected reference state", );
}

// END validate-atom-state

// BEGIN vals
dc.dynamic vals(dc.dynamic coll$1, ){
if((coll$1 is dc.Map)){
return (lcoc_core.chunked_iterator_seq.$_invoke$1((coll$1 as dc.Map).values.iterator, ));
}
final dc.dynamic o7668$1=(lcoc_core.map.$_invoke$2(lcoc_core.val, coll$1, ));
if((o7668$1 is lcoc_core.ISeqable$iface)){
return ((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}

// END vals

// BEGIN vary-meta
lcoc_core.IFn$iface vary_meta=lcoc_core.vary_metaifn18695hm$1(null, );

// END vary-meta

// BEGIN vary_metaifn18695hm$1
class vary_metaifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

vary_metaifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.vary_metaifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic obj$1, dc.dynamic f$1, dc.dynamic args$1, ){
final dc.dynamic o7872$1=obj$1;
late final dc.dynamic $if_$1;
if((o7872$1 is lcoc_core.IMeta$iface)){
$if_$1=((o7872$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$1=((lcoc_core.IMeta.extensions(o7872$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7872$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$3(f$1, $if_$1, args$1, ));
return lcoc_core.with_meta(obj$1, $1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END vary_metaifn18695hm$1

// BEGIN vec
lcoc_core.PersistentVector vec(dc.dynamic coll$1, ){
return (lcoc_core.into.$_invoke$2(lcoc_core.$_EMPTY_VECTOR, coll$1, ));
}

// END vec

// BEGIN vector
lcoc_core.IFn$iface vector=lcoc_core.vectorifn18695hm$1(null, );

// END vector

// BEGIN vector?
dc.bool vector$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.IVector.satisfies(x$1, )) as dc.bool);
}

// END vector?

// BEGIN vectorifn18695hm$1
class vectorifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_XXXXXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

vectorifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.vectorifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic a$1, dc.dynamic b$1, dc.dynamic c$1, dc.dynamic d$1, dc.dynamic e$1, dc.dynamic f$1, dc.dynamic args$1, ){
final dc.List<dc.dynamic> fl$6=(dc.List<dc.dynamic>.filled(6, a$1, ));
fl$6[1]=b$1;
fl$6[2]=c$1;
fl$6[3]=d$1;
fl$6[4]=e$1;
fl$6[5]=f$1;
final lcoc_core.PersistentVector $1=lcoc_core.$_vec_owning(fl$6, );
return (lcoc_core.into.$_invoke$2($1, args$1, ));
}

dc.dynamic $_invoke$0(){
return lcoc_core.$_EMPTY_VECTOR;
}

dc.dynamic $_invoke$1(dc.dynamic a$2, ){
final dc.List<dc.dynamic> fl$7=(dc.List<dc.dynamic>.filled(1, a$2, ));
return lcoc_core.$_vec_owning(fl$7, );
}

dc.dynamic $_invoke$2(dc.dynamic a$3, dc.dynamic b$2, ){
final dc.List<dc.dynamic> fl$8=(dc.List<dc.dynamic>.filled(2, a$3, ));
fl$8[1]=b$2;
return lcoc_core.$_vec_owning(fl$8, );
}

dc.dynamic $_invoke$3(dc.dynamic a$4, dc.dynamic b$3, dc.dynamic c$2, ){
final dc.List<dc.dynamic> fl$9=(dc.List<dc.dynamic>.filled(3, a$4, ));
fl$9[1]=b$3;
fl$9[2]=c$2;
return lcoc_core.$_vec_owning(fl$9, );
}

dc.dynamic $_invoke$4(dc.dynamic a$5, dc.dynamic b$4, dc.dynamic c$3, dc.dynamic d$2, ){
final dc.List<dc.dynamic> fl$10=(dc.List<dc.dynamic>.filled(4, a$5, ));
fl$10[1]=b$4;
fl$10[2]=c$3;
fl$10[3]=d$2;
return lcoc_core.$_vec_owning(fl$10, );
}

dc.dynamic $_invoke$5(dc.dynamic a$6, dc.dynamic b$5, dc.dynamic c$4, dc.dynamic d$3, dc.dynamic e$2, ){
final dc.List<dc.dynamic> fl$11=(dc.List<dc.dynamic>.filled(5, a$6, ));
fl$11[1]=b$5;
fl$11[2]=c$4;
fl$11[3]=d$3;
fl$11[4]=e$2;
return lcoc_core.$_vec_owning(fl$11, );
}

dc.dynamic $_invoke$6(dc.dynamic a$7, dc.dynamic b$6, dc.dynamic c$5, dc.dynamic d$4, dc.dynamic e$3, dc.dynamic f$2, ){
final dc.List<dc.dynamic> fl$12=(dc.List<dc.dynamic>.filled(6, a$7, ));
fl$12[1]=b$6;
fl$12[2]=c$5;
fl$12[3]=d$4;
fl$12[4]=e$3;
fl$12[5]=f$2;
return lcoc_core.$_vec_owning(fl$12, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END vectorifn18695hm$1

// BEGIN volatile!
lcoc_core.Volatile volatile$BANG_(dc.dynamic val$1, ){
return lcoc_core.Volatile(val$1, );
}

// END volatile!

// BEGIN volatile?
dc.bool volatile$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.IVolatile.satisfies(x$1, )) as dc.bool);
}

// END volatile?

// BEGIN vreset!
dc.dynamic vreset$BANG_(dc.dynamic vol$1, dc.dynamic newval$1, ){
final dc.dynamic o8024$1=vol$1;
final dc.dynamic new_value8025$1=newval$1;
if((o8024$1 is lcoc_core.IVolatile$iface)){
return ((o8024$1 as lcoc_core.IVolatile$iface).$_vreset$BANG_$1(new_value8025$1, ));
}
return ((lcoc_core.IVolatile.extensions(o8024$1, ) as lcoc_core.IVolatile$ext).$_vreset$BANG_$1(o8024$1, new_value8025$1, ));
}

// END vreset!

// BEGIN vswap!
lcoc_core.IFn$iface vswap$BANG_=lcoc_core.vswap$BANG_ifn18695hm$1(null, );

// END vswap!

// BEGIN vswap$BANG_ifn18695hm$1
class vswap$BANG_ifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

vswap$BANG_ifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.vswap$BANG_ifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic vol$1, dc.dynamic f$1, dc.dynamic args$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-vreset!", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1(vol$1, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(f$1, ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-deref", )), )), (lcoc_core.list.$_invoke$1(vol$1, )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$3(arg$1, $1, args$1, ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$3(arg$3, arg$2, $2, ));
if((o7668$3 is lcoc_core.ISeqable$iface)){
return ((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END vswap$BANG_ifn18695hm$1

// BEGIN when
lcoc_core.IFn$iface when=lcoc_core.whenifn18695hm$1(null, );

// END when

// BEGIN when-first
lcoc_core.IFn$iface when_first=lcoc_core.when_firstifn18695hm$1(null, );

// END when-first

// BEGIN when-let
lcoc_core.IFn$iface when_let=lcoc_core.when_letifn18695hm$1(null, );

// END when-let

// BEGIN when-not
lcoc_core.IFn$iface when_not=lcoc_core.when_notifn18695hm$1(null, );

// END when-not

// BEGIN when-some
lcoc_core.IFn$iface when_some=lcoc_core.when_someifn18695hm$1(null, );

// END when-some

// BEGIN when_firstifn18695hm$1
class when_firstifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

when_firstifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.when_firstifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic body$1, ){
final dc.dynamic vec$8702_$1=bindings$1;
final dc.dynamic x$1=(lcoc_core.nth.$_invoke$3(vec$8702_$1, 0, null, ));
final dc.dynamic xs$1=(lcoc_core.nth.$_invoke$3(vec$8702_$1, 1, null, ));
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when-let", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "xs__8700__auto__", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "seq", )), )), (lcoc_core.list.$_invoke$1(xs$1, )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$2(arg$1, $1, ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1(x$1, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "first", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "xs__8700__auto__", )), )), ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$2(arg$2, $3, ));
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $4=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$4, ));
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($4, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$3(arg$3, $5, body$1, ));
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$3(arg$4, $7, $6, ));
if((o7668$6 is lcoc_core.ISeqable$iface)){
return ((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END when_firstifn18695hm$1

// BEGIN when_letifn18695hm$1
class when_letifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

when_letifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.when_letifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic body$1, ){
late final dc.dynamic form$1;
if((bindings$1 is dc.Function)){
form$1=(bindings$1 as dc.Function)(0, );
}else if((bindings$1 is lcoc_core.IFn$iface)){
form$1=((bindings$1 as lcoc_core.IFn$iface).$_invoke$1(0, ));
}else{
form$1=(lcoc_core.IFn.extensions(bindings$1, ).$_invoke$1(bindings$1, 0, ));
}
late final dc.dynamic tst$1;
if((bindings$1 is dc.Function)){
tst$1=(bindings$1 as dc.Function)(1, );
}else if((bindings$1 is lcoc_core.IFn$iface)){
tst$1=((bindings$1 as lcoc_core.IFn$iface).$_invoke$1(1, ));
}else{
tst$1=(lcoc_core.IFn.extensions(bindings$1, ).$_invoke$1(bindings$1, 1, ));
}
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8698__auto__", )), )), (lcoc_core.list.$_invoke$1(tst$1, )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8698__auto__", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(form$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8698__auto__", )), )), ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$3(arg$1, $3, body$1, ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$3(arg$3, arg$2, $4, ));
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$3(arg$4, $6, $5, ));
if((o7668$5 is lcoc_core.ISeqable$iface)){
return ((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END when_letifn18695hm$1

// BEGIN when_notifn18695hm$1
class when_notifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

when_notifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.when_notifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic test$1, dc.dynamic body$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1(test$1, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(null, ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), )), body$1, ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$4(arg$3, arg$2, arg$1, $1, ));
if((o7668$2 is lcoc_core.ISeqable$iface)){
return ((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END when_notifn18695hm$1

// BEGIN when_someifn18695hm$1
class when_someifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

when_someifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.when_someifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic body$1, ){
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "if-some", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(bindings$1, ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), )), body$1, ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$4(arg$2, arg$1, $1, (lcoc_core.list.$_invoke$1(null, )), ));
if((o7668$2 is lcoc_core.ISeqable$iface)){
return ((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END when_someifn18695hm$1

// BEGIN whenifn18695hm$1
class whenifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

whenifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.whenifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic test$1, dc.dynamic body$1, ){
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(test$1, ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), )), body$1, ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$3(arg$2, arg$1, $1, ));
if((o7668$2 is lcoc_core.ISeqable$iface)){
return ((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END whenifn18695hm$1

// BEGIN while
lcoc_core.IFn$iface $while_=lcoc_core.$while_ifn18695hm$1(null, );

// END while

// BEGIN with-meta
dc.dynamic with_meta(dc.dynamic obj$1, dc.dynamic m$1, ){
final dc.bool or$7573_$AUTO_$1=(null==m$1);
late final dc.bool $if_$1;
if(or$7573_$AUTO_$1){
$if_$1=or$7573_$AUTO_$1;
}else{
$if_$1=lcoc_core.map$QMARK_(m$1, );
}
if($if_$1){
}else{
throw dc.Exception((lcoc_core.str.$_invoke$3("class ", m$1.runtimeType, " cannot be cast to cljd.core/IMap", )), );
}
final dc.dynamic o7865$1=obj$1;
final dc.dynamic meta7866$1=m$1;
if((o7865$1 is lcoc_core.IWithMeta$iface)){
return ((o7865$1 as lcoc_core.IWithMeta$iface).$_with_meta$1(meta7866$1, ));
}
return ((lcoc_core.IWithMeta.extensions(o7865$1, ) as lcoc_core.IWithMeta$ext).$_with_meta$1(o7865$1, meta7866$1, ));
}

// END with-meta

// BEGIN with-out-str
lcoc_core.IFn$iface with_out_str=lcoc_core.with_out_strifn18695hm$1(null, );

// END with-out-str

// BEGIN with_out_strifn18695hm$1
class with_out_strifn18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

with_out_strifn18695hm$1(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.with_out_strifn18695hm$1(m$2395_$AUTO_$1, );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic body$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "s__9186__auto__", )), ));
final dc.dynamic o7668$1=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "StringBuffer.", )), )), ));
late final dc.dynamic $if_$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7668$2=(lcoc_core.concat.$_invoke$2(arg$1, $1, ));
late final dc.dynamic $if_$2;
if((o7668$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "binding", )), ));
final dc.dynamic o7668$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "*out*", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "s__9186__auto__", )), )), ));
late final dc.dynamic $if_$3;
if((o7668$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7668$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7668$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$3, ));
}
final dc.dynamic $3=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($3, ));
final dc.dynamic o7668$4=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".toString", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "s__9186__auto__", )), )), ));
late final dc.dynamic $if_$4;
if((o7668$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7668$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7668$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$4, ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7668$5=(lcoc_core.concat.$_invoke$4(arg$2, $5, body$1, $4, ));
late final dc.dynamic $if_$5;
if((o7668$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7668$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7668$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$5, ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7668$6=(lcoc_core.concat.$_invoke$3(arg$3, $7, $6, ));
if((o7668$6 is lcoc_core.ISeqable$iface)){
return ((o7668$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7668$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END with_out_strifn18695hm$1

// BEGIN xform-iterator
dc.dynamic xform_iterator(dc.dynamic xform$1, dc.dynamic mk_move_next$1, ){
final dc.List<dc.dynamic> buffer$1=<dc.dynamic>[];
final lcoc_core.xform_iteratorReify18695hm$1 f$1=lcoc_core.xform_iteratorReify18695hm$1(null, buffer$1, );
final lcoc_core.xform_iteratorReify18695hm$1 rf$1=f$1;
late final dc.dynamic $if_$1;
if((xform$1 is dc.Function)){
$if_$1=(xform$1 as dc.Function)(rf$1, );
}else if((xform$1 is lcoc_core.IFn$iface)){
$if_$1=((xform$1 as lcoc_core.IFn$iface).$_invoke$1(rf$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(xform$1, ).$_invoke$1(xform$1, rf$1, ));
}
late final dc.dynamic $if_$2;
if((mk_move_next$1 is dc.Function)){
$if_$2=(mk_move_next$1 as dc.Function)($if_$1, );
}else if((mk_move_next$1 is lcoc_core.IFn$iface)){
$if_$2=((mk_move_next$1 as lcoc_core.IFn$iface).$_invoke$1($if_$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(mk_move_next$1, ).$_invoke$1(mk_move_next$1, $if_$1, ));
}
return lcoc_core.XformIterator(buffer$1, 0, $if_$2, true, );
}

// END xform-iterator

// BEGIN xform_iteratorReify18695hm$1
class xform_iteratorReify18695hm$1 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final dc.List<dc.dynamic> buffer$1;

xform_iteratorReify18695hm$1(this.meta$1, this.buffer$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2395_$AUTO_$1, ){
return lcoc_core.xform_iteratorReify18695hm$1(m$2395_$AUTO_$1, buffer$1, );
}

dc.dynamic $_invoke$1(dc.dynamic acc$1, ){
return false;
}

dc.dynamic $_invoke$2(dc.dynamic acc$2, dc.dynamic x$1, ){
return (buffer$1.add(x$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END xform_iteratorReify18695hm$1

// BEGIN zero?
dc.bool zero$QMARK_(dc.dynamic num$1, ){
return (0==(num$1 as dc.num));
}

// END zero?

// BEGIN zipmap
dc.dynamic zipmap(dc.dynamic keys$1, dc.dynamic vals$1, ){
dc.dynamic map$1=lcoc_core.transient(lcoc_core.$_EMPTY_MAP, );
final dc.dynamic o7668$1=keys$1;
dc.dynamic ks$1;
if((o7668$1 is lcoc_core.ISeqable$iface)){
ks$1=((o7668$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
ks$1=((lcoc_core.ISeqable.extensions(o7668$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$1, ));
}
final dc.dynamic o7668$2=vals$1;
dc.dynamic vs$1;
if((o7668$2 is lcoc_core.ISeqable$iface)){
vs$1=((o7668$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
vs$1=((lcoc_core.ISeqable.extensions(o7668$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7668$2, ));
}
do {
final dc.dynamic and$7533_$AUTO_$1=ks$1;
late final dc.dynamic $if_$1;
if(((and$7533_$AUTO_$1!=false)&&(and$7533_$AUTO_$1!=null))){
$if_$1=vs$1;
}else{
$if_$1=and$7533_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
map$1=(lcoc_core.assoc$BANG_.$_invoke$3(map$1, lcoc_core.first(ks$1, ), lcoc_core.first(vs$1, ), ));
ks$1=lcoc_core.next(ks$1, );
vs$1=lcoc_core.next(vs$1, );
continue;
}
return lcoc_core.persistent$BANG_(map$1, );
} while(true);
}

// END zipmap
